
robot_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005c74  08005c74  00006c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df0  08005df0  0000733c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005df0  08005df0  00006df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df8  08005df8  0000733c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df8  08005df8  00006df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dfc  08005dfc  00006dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000033c  20000000  08005e00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000033c  0800613c  0000733c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800613c  0000751c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000733c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9df  00000000  00000000  0000736c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f31  00000000  00000000  00011d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00013c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009da  00000000  00000000  000149b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f64f  00000000  00000000  00015392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8d6  00000000  00000000  000349e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a98c5  00000000  00000000  0003f2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8b7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fec  00000000  00000000  000e8bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ecbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000033c 	.word	0x2000033c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c5c 	.word	0x08005c5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000340 	.word	0x20000340
 800020c:	08005c5c 	.word	0x08005c5c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b988 	b.w	8000dc4 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	468e      	mov	lr, r1
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d14a      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4617      	mov	r7, r2
 8000ae0:	d962      	bls.n	8000ba8 <__udivmoddi4+0xdc>
 8000ae2:	fab2 f682 	clz	r6, r2
 8000ae6:	b14e      	cbz	r6, 8000afc <__udivmoddi4+0x30>
 8000ae8:	f1c6 0320 	rsb	r3, r6, #32
 8000aec:	fa01 f806 	lsl.w	r8, r1, r6
 8000af0:	fa20 f303 	lsr.w	r3, r0, r3
 8000af4:	40b7      	lsls	r7, r6
 8000af6:	ea43 0808 	orr.w	r8, r3, r8
 8000afa:	40b4      	lsls	r4, r6
 8000afc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b00:	fa1f fc87 	uxth.w	ip, r7
 8000b04:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b08:	0c23      	lsrs	r3, r4, #16
 8000b0a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b12:	fb01 f20c 	mul.w	r2, r1, ip
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d909      	bls.n	8000b2e <__udivmoddi4+0x62>
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b20:	f080 80ea 	bcs.w	8000cf8 <__udivmoddi4+0x22c>
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f240 80e7 	bls.w	8000cf8 <__udivmoddi4+0x22c>
 8000b2a:	3902      	subs	r1, #2
 8000b2c:	443b      	add	r3, r7
 8000b2e:	1a9a      	subs	r2, r3, r2
 8000b30:	b2a3      	uxth	r3, r4
 8000b32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b3e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b42:	459c      	cmp	ip, r3
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0x8e>
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b4c:	f080 80d6 	bcs.w	8000cfc <__udivmoddi4+0x230>
 8000b50:	459c      	cmp	ip, r3
 8000b52:	f240 80d3 	bls.w	8000cfc <__udivmoddi4+0x230>
 8000b56:	443b      	add	r3, r7
 8000b58:	3802      	subs	r0, #2
 8000b5a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b5e:	eba3 030c 	sub.w	r3, r3, ip
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11d      	cbz	r5, 8000b6e <__udivmoddi4+0xa2>
 8000b66:	40f3      	lsrs	r3, r6
 8000b68:	2200      	movs	r2, #0
 8000b6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d905      	bls.n	8000b82 <__udivmoddi4+0xb6>
 8000b76:	b10d      	cbz	r5, 8000b7c <__udivmoddi4+0xb0>
 8000b78:	e9c5 0100 	strd	r0, r1, [r5]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e7f5      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000b82:	fab3 f183 	clz	r1, r3
 8000b86:	2900      	cmp	r1, #0
 8000b88:	d146      	bne.n	8000c18 <__udivmoddi4+0x14c>
 8000b8a:	4573      	cmp	r3, lr
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xc8>
 8000b8e:	4282      	cmp	r2, r0
 8000b90:	f200 8105 	bhi.w	8000d9e <__udivmoddi4+0x2d2>
 8000b94:	1a84      	subs	r4, r0, r2
 8000b96:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	4690      	mov	r8, r2
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	d0e5      	beq.n	8000b6e <__udivmoddi4+0xa2>
 8000ba2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ba6:	e7e2      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f000 8090 	beq.w	8000cce <__udivmoddi4+0x202>
 8000bae:	fab2 f682 	clz	r6, r2
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	f040 80a4 	bne.w	8000d00 <__udivmoddi4+0x234>
 8000bb8:	1a8a      	subs	r2, r1, r2
 8000bba:	0c03      	lsrs	r3, r0, #16
 8000bbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc0:	b280      	uxth	r0, r0
 8000bc2:	b2bc      	uxth	r4, r7
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bca:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bd2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d907      	bls.n	8000bea <__udivmoddi4+0x11e>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x11c>
 8000be2:	429a      	cmp	r2, r3
 8000be4:	f200 80e0 	bhi.w	8000da8 <__udivmoddi4+0x2dc>
 8000be8:	46c4      	mov	ip, r8
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bf0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bf4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf8:	fb02 f404 	mul.w	r4, r2, r4
 8000bfc:	429c      	cmp	r4, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x144>
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x142>
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	f200 80ca 	bhi.w	8000da2 <__udivmoddi4+0x2d6>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	1b1b      	subs	r3, r3, r4
 8000c12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c16:	e7a5      	b.n	8000b64 <__udivmoddi4+0x98>
 8000c18:	f1c1 0620 	rsb	r6, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c22:	431f      	orrs	r7, r3
 8000c24:	fa0e f401 	lsl.w	r4, lr, r1
 8000c28:	fa20 f306 	lsr.w	r3, r0, r6
 8000c2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c34:	4323      	orrs	r3, r4
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	fa1f fc87 	uxth.w	ip, r7
 8000c3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c42:	0c1c      	lsrs	r4, r3, #16
 8000c44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x1a0>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c5e:	f080 809c 	bcs.w	8000d9a <__udivmoddi4+0x2ce>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f240 8099 	bls.w	8000d9a <__udivmoddi4+0x2ce>
 8000c68:	3802      	subs	r0, #2
 8000c6a:	443c      	add	r4, r7
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	fa1f fe83 	uxth.w	lr, r3
 8000c74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c78:	fb09 4413 	mls	r4, r9, r3, r4
 8000c7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x1ce>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c8e:	f080 8082 	bcs.w	8000d96 <__udivmoddi4+0x2ca>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d97f      	bls.n	8000d96 <__udivmoddi4+0x2ca>
 8000c96:	3b02      	subs	r3, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ca6:	4564      	cmp	r4, ip
 8000ca8:	4673      	mov	r3, lr
 8000caa:	46e1      	mov	r9, ip
 8000cac:	d362      	bcc.n	8000d74 <__udivmoddi4+0x2a8>
 8000cae:	d05f      	beq.n	8000d70 <__udivmoddi4+0x2a4>
 8000cb0:	b15d      	cbz	r5, 8000cca <__udivmoddi4+0x1fe>
 8000cb2:	ebb8 0203 	subs.w	r2, r8, r3
 8000cb6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cba:	fa04 f606 	lsl.w	r6, r4, r6
 8000cbe:	fa22 f301 	lsr.w	r3, r2, r1
 8000cc2:	431e      	orrs	r6, r3
 8000cc4:	40cc      	lsrs	r4, r1
 8000cc6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e74f      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000cce:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cd2:	0c01      	lsrs	r1, r0, #16
 8000cd4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd8:	b280      	uxth	r0, r0
 8000cda:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4638      	mov	r0, r7
 8000ce2:	463c      	mov	r4, r7
 8000ce4:	46b8      	mov	r8, r7
 8000ce6:	46be      	mov	lr, r7
 8000ce8:	2620      	movs	r6, #32
 8000cea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cee:	eba2 0208 	sub.w	r2, r2, r8
 8000cf2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cf6:	e766      	b.n	8000bc6 <__udivmoddi4+0xfa>
 8000cf8:	4601      	mov	r1, r0
 8000cfa:	e718      	b.n	8000b2e <__udivmoddi4+0x62>
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	e72c      	b.n	8000b5a <__udivmoddi4+0x8e>
 8000d00:	f1c6 0220 	rsb	r2, r6, #32
 8000d04:	fa2e f302 	lsr.w	r3, lr, r2
 8000d08:	40b7      	lsls	r7, r6
 8000d0a:	40b1      	lsls	r1, r6
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d14:	430a      	orrs	r2, r1
 8000d16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d20:	0c11      	lsrs	r1, r2, #16
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb08 f904 	mul.w	r9, r8, r4
 8000d2a:	40b0      	lsls	r0, r6
 8000d2c:	4589      	cmp	r9, r1
 8000d2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d32:	b280      	uxth	r0, r0
 8000d34:	d93e      	bls.n	8000db4 <__udivmoddi4+0x2e8>
 8000d36:	1879      	adds	r1, r7, r1
 8000d38:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d3c:	d201      	bcs.n	8000d42 <__udivmoddi4+0x276>
 8000d3e:	4589      	cmp	r9, r1
 8000d40:	d81f      	bhi.n	8000d82 <__udivmoddi4+0x2b6>
 8000d42:	eba1 0109 	sub.w	r1, r1, r9
 8000d46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d4a:	fb09 f804 	mul.w	r8, r9, r4
 8000d4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d52:	b292      	uxth	r2, r2
 8000d54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d58:	4542      	cmp	r2, r8
 8000d5a:	d229      	bcs.n	8000db0 <__udivmoddi4+0x2e4>
 8000d5c:	18ba      	adds	r2, r7, r2
 8000d5e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d62:	d2c4      	bcs.n	8000cee <__udivmoddi4+0x222>
 8000d64:	4542      	cmp	r2, r8
 8000d66:	d2c2      	bcs.n	8000cee <__udivmoddi4+0x222>
 8000d68:	f1a9 0102 	sub.w	r1, r9, #2
 8000d6c:	443a      	add	r2, r7
 8000d6e:	e7be      	b.n	8000cee <__udivmoddi4+0x222>
 8000d70:	45f0      	cmp	r8, lr
 8000d72:	d29d      	bcs.n	8000cb0 <__udivmoddi4+0x1e4>
 8000d74:	ebbe 0302 	subs.w	r3, lr, r2
 8000d78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	46e1      	mov	r9, ip
 8000d80:	e796      	b.n	8000cb0 <__udivmoddi4+0x1e4>
 8000d82:	eba7 0909 	sub.w	r9, r7, r9
 8000d86:	4449      	add	r1, r9
 8000d88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d90:	fb09 f804 	mul.w	r8, r9, r4
 8000d94:	e7db      	b.n	8000d4e <__udivmoddi4+0x282>
 8000d96:	4673      	mov	r3, lr
 8000d98:	e77f      	b.n	8000c9a <__udivmoddi4+0x1ce>
 8000d9a:	4650      	mov	r0, sl
 8000d9c:	e766      	b.n	8000c6c <__udivmoddi4+0x1a0>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e6fd      	b.n	8000b9e <__udivmoddi4+0xd2>
 8000da2:	443b      	add	r3, r7
 8000da4:	3a02      	subs	r2, #2
 8000da6:	e733      	b.n	8000c10 <__udivmoddi4+0x144>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	443b      	add	r3, r7
 8000dae:	e71c      	b.n	8000bea <__udivmoddi4+0x11e>
 8000db0:	4649      	mov	r1, r9
 8000db2:	e79c      	b.n	8000cee <__udivmoddi4+0x222>
 8000db4:	eba1 0109 	sub.w	r1, r1, r9
 8000db8:	46c4      	mov	ip, r8
 8000dba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dbe:	fb09 f804 	mul.w	r8, r9, r4
 8000dc2:	e7c4      	b.n	8000d4e <__udivmoddi4+0x282>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <LL_DMA_EnableStream+0x3c>)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <LL_DMA_EnableStream+0x3c>)
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	440a      	add	r2, r1
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	4611      	mov	r1, r2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	440a      	add	r2, r1
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	08005d8c 	.word	0x08005d8c

08000e08 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000e12:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <LL_DMA_DisableStream+0x3c>)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <LL_DMA_DisableStream+0x3c>)
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	440a      	add	r2, r1
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	440a      	add	r2, r1
 8000e30:	f023 0301 	bic.w	r3, r3, #1
 8000e34:	6013      	str	r3, [r2, #0]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	08005d8c 	.word	0x08005d8c

08000e48 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LL_DMA_SetDataLength+0x44>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4413      	add	r3, r2
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	0c1b      	lsrs	r3, r3, #16
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <LL_DMA_SetDataLength+0x44>)
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	440a      	add	r2, r1
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	4611      	mov	r1, r2
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	440a      	add	r2, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	604b      	str	r3, [r1, #4]
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	08005d8c 	.word	0x08005d8c

08000e90 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000e9c:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <LL_DMA_SetMemoryAddress+0x2c>)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	08005d8c 	.word	0x08005d8c

08000ec0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <LL_DMA_SetPeriphAddress+0x2c>)
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6093      	str	r3, [r2, #8]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	08005d8c 	.word	0x08005d8c

08000ef0 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000efe:	609a      	str	r2, [r3, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f1a:	609a      	str	r2, [r3, #8]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2220      	movs	r2, #32
 8000f34:	60da      	str	r2, [r3, #12]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f50:	60da      	str	r2, [r3, #12]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <LL_DMA_EnableIT_TC+0x3c>)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4908      	ldr	r1, [pc, #32]	@ (8000f9c <LL_DMA_EnableIT_TC+0x3c>)
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	440a      	add	r2, r1
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	440a      	add	r2, r1
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	08005d8c 	.word	0x08005d8c

08000fa0 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	2b20      	cmp	r3, #32
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2301      	moveq	r3, #1
 8000fb6:	2300      	movne	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8000fd4:	601a      	str	r2, [r3, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b089      	sub	sp, #36	@ 0x24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	330c      	adds	r3, #12
 8000fee:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	e853 3f00 	ldrex	r3, [r3]
 8000ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	330c      	adds	r3, #12
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	61ba      	str	r2, [r7, #24]
 8001008:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800100a:	6979      	ldr	r1, [r7, #20]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	e841 2300 	strex	r3, r2, [r1]
 8001012:	613b      	str	r3, [r7, #16]
   return(result);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1e7      	bne.n	8000fea <LL_USART_EnableIT_TC+0x8>
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3724      	adds	r7, #36	@ 0x24
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	@ 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3314      	adds	r3, #20
 8001034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	e853 3f00 	ldrex	r3, [r3]
 800103c:	60bb      	str	r3, [r7, #8]
   return(result);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3314      	adds	r3, #20
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	61ba      	str	r2, [r7, #24]
 800104e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001050:	6979      	ldr	r1, [r7, #20]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	e841 2300 	strex	r3, r2, [r1]
 8001058:	613b      	str	r3, [r7, #16]
   return(result);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e7      	bne.n	8001030 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3724      	adds	r7, #36	@ 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800106e:	b480      	push	{r7}
 8001070:	b089      	sub	sp, #36	@ 0x24
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3314      	adds	r3, #20
 800107a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	e853 3f00 	ldrex	r3, [r3]
 8001082:	60bb      	str	r3, [r7, #8]
   return(result);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3314      	adds	r3, #20
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	61ba      	str	r2, [r7, #24]
 8001094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001096:	6979      	ldr	r1, [r7, #20]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	e841 2300 	strex	r3, r2, [r1]
 800109e:	613b      	str	r3, [r7, #16]
   return(result);
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e7      	bne.n	8001076 <LL_USART_EnableDMAReq_TX+0x8>
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3724      	adds	r7, #36	@ 0x24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3304      	adds	r3, #4
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	b2db      	uxtb	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	619a      	str	r2, [r3, #24]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <UART4_DMA_Config>:
uint8_t debug_Instruction_Packet_Array[35] = { 0 };  // Array to debug instruction packet data
uint8_t debug_Status_Packet_Array[15] = { 0 };       // Array to debug status packet data

uint16_t crc = 0;

void UART4_DMA_Config() {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_4, LL_USART_DMA_GetRegAddr(UART4));
 8001108:	4824      	ldr	r0, [pc, #144]	@ (800119c <UART4_DMA_Config+0x98>)
 800110a:	f7ff ffd3 	bl	80010b4 <LL_USART_DMA_GetRegAddr>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	2104      	movs	r1, #4
 8001114:	4822      	ldr	r0, [pc, #136]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 8001116:	f7ff fed3 	bl	8000ec0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)Instruction_Packet_Array);
 800111a:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <UART4_DMA_Config+0xa0>)
 800111c:	461a      	mov	r2, r3
 800111e:	2104      	movs	r1, #4
 8001120:	481f      	ldr	r0, [pc, #124]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 8001122:	f7ff feb5 	bl	8000e90 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5] + 7);
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <UART4_DMA_Config+0xa0>)
 8001128:	795b      	ldrb	r3, [r3, #5]
 800112a:	3307      	adds	r3, #7
 800112c:	461a      	mov	r2, r3
 800112e:	2104      	movs	r1, #4
 8001130:	481b      	ldr	r0, [pc, #108]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 8001132:	f7ff fe89 	bl	8000e48 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(UART4);
 8001136:	4819      	ldr	r0, [pc, #100]	@ (800119c <UART4_DMA_Config+0x98>)
 8001138:	f7ff ff99 	bl	800106e <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC4(DMA1);
 800113c:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 800113e:	f7ff fef3 	bl	8000f28 <LL_DMA_ClearFlag_TC4>
	LL_USART_ClearFlag_TC(UART4);
 8001142:	4816      	ldr	r0, [pc, #88]	@ (800119c <UART4_DMA_Config+0x98>)
 8001144:	f7ff ff3f 	bl	8000fc6 <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
 8001148:	2104      	movs	r1, #4
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 800114c:	f7ff ff08 	bl	8000f60 <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(UART4);
 8001150:	4812      	ldr	r0, [pc, #72]	@ (800119c <UART4_DMA_Config+0x98>)
 8001152:	f7ff ff46 	bl	8000fe2 <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 8001156:	4811      	ldr	r0, [pc, #68]	@ (800119c <UART4_DMA_Config+0x98>)
 8001158:	f7ff ffac 	bl	80010b4 <LL_USART_DMA_GetRegAddr>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	2102      	movs	r1, #2
 8001162:	480f      	ldr	r0, [pc, #60]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 8001164:	f7ff feac 	bl	8000ec0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <UART4_DMA_Config+0xa4>)
 800116a:	461a      	mov	r2, r3
 800116c:	2102      	movs	r1, #2
 800116e:	480c      	ldr	r0, [pc, #48]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 8001170:	f7ff fe8e 	bl	8000e90 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <UART4_DMA_Config+0xa8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3304      	adds	r3, #4
 800117a:	461a      	mov	r2, r3
 800117c:	2102      	movs	r1, #2
 800117e:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 8001180:	f7ff fe62 	bl	8000e48 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(UART4);
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <UART4_DMA_Config+0x98>)
 8001186:	f7ff ff4f 	bl	8001028 <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC2(DMA1);
 800118a:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 800118c:	f7ff febe 	bl	8000f0c <LL_DMA_ClearFlag_TC2>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 8001190:	2102      	movs	r1, #2
 8001192:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <UART4_DMA_Config+0x9c>)
 8001194:	f7ff fee4 	bl	8000f60 <LL_DMA_EnableIT_TC>

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40004c00 	.word	0x40004c00
 80011a0:	40026000 	.word	0x40026000
 80011a4:	20000004 	.word	0x20000004
 80011a8:	200003ac 	.word	0x200003ac
 80011ac:	200003a8 	.word	0x200003a8

080011b0 <USART6_DMA_Config>:

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);  // 傳輸完成中斷
    NVIC_SetPriority(DMA1_Stream2_IRQn, 0);
    NVIC_EnableIRQ(DMA1_Stream2_IRQn);
}
void USART6_DMA_Config() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_6, LL_USART_DMA_GetRegAddr(USART6));
 80011b4:	4824      	ldr	r0, [pc, #144]	@ (8001248 <USART6_DMA_Config+0x98>)
 80011b6:	f7ff ff7d 	bl	80010b4 <LL_USART_DMA_GetRegAddr>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	2106      	movs	r1, #6
 80011c0:	4822      	ldr	r0, [pc, #136]	@ (800124c <USART6_DMA_Config+0x9c>)
 80011c2:	f7ff fe7d 	bl	8000ec0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)Instruction_Packet_Array);
 80011c6:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <USART6_DMA_Config+0xa0>)
 80011c8:	461a      	mov	r2, r3
 80011ca:	2106      	movs	r1, #6
 80011cc:	481f      	ldr	r0, [pc, #124]	@ (800124c <USART6_DMA_Config+0x9c>)
 80011ce:	f7ff fe5f 	bl	8000e90 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5] + 7);
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <USART6_DMA_Config+0xa0>)
 80011d4:	795b      	ldrb	r3, [r3, #5]
 80011d6:	3307      	adds	r3, #7
 80011d8:	461a      	mov	r2, r3
 80011da:	2106      	movs	r1, #6
 80011dc:	481b      	ldr	r0, [pc, #108]	@ (800124c <USART6_DMA_Config+0x9c>)
 80011de:	f7ff fe33 	bl	8000e48 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(USART6);
 80011e2:	4819      	ldr	r0, [pc, #100]	@ (8001248 <USART6_DMA_Config+0x98>)
 80011e4:	f7ff ff43 	bl	800106e <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC6(DMA2);
 80011e8:	4818      	ldr	r0, [pc, #96]	@ (800124c <USART6_DMA_Config+0x9c>)
 80011ea:	f7ff feaa 	bl	8000f42 <LL_DMA_ClearFlag_TC6>
	LL_USART_ClearFlag_TC(USART6);
 80011ee:	4816      	ldr	r0, [pc, #88]	@ (8001248 <USART6_DMA_Config+0x98>)
 80011f0:	f7ff fee9 	bl	8000fc6 <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
 80011f4:	2106      	movs	r1, #6
 80011f6:	4815      	ldr	r0, [pc, #84]	@ (800124c <USART6_DMA_Config+0x9c>)
 80011f8:	f7ff feb2 	bl	8000f60 <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(USART6);
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <USART6_DMA_Config+0x98>)
 80011fe:	f7ff fef0 	bl	8000fe2 <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 8001202:	4811      	ldr	r0, [pc, #68]	@ (8001248 <USART6_DMA_Config+0x98>)
 8001204:	f7ff ff56 	bl	80010b4 <LL_USART_DMA_GetRegAddr>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	2101      	movs	r1, #1
 800120e:	480f      	ldr	r0, [pc, #60]	@ (800124c <USART6_DMA_Config+0x9c>)
 8001210:	f7ff fe56 	bl	8000ec0 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <USART6_DMA_Config+0xa4>)
 8001216:	461a      	mov	r2, r3
 8001218:	2101      	movs	r1, #1
 800121a:	480c      	ldr	r0, [pc, #48]	@ (800124c <USART6_DMA_Config+0x9c>)
 800121c:	f7ff fe38 	bl	8000e90 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <USART6_DMA_Config+0xa8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	461a      	mov	r2, r3
 8001228:	2101      	movs	r1, #1
 800122a:	4808      	ldr	r0, [pc, #32]	@ (800124c <USART6_DMA_Config+0x9c>)
 800122c:	f7ff fe0c 	bl	8000e48 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(USART6);
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <USART6_DMA_Config+0x98>)
 8001232:	f7ff fef9 	bl	8001028 <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC1(DMA2);
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <USART6_DMA_Config+0x9c>)
 8001238:	f7ff fe5a 	bl	8000ef0 <LL_DMA_ClearFlag_TC1>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 800123c:	2101      	movs	r1, #1
 800123e:	4803      	ldr	r0, [pc, #12]	@ (800124c <USART6_DMA_Config+0x9c>)
 8001240:	f7ff fe8e 	bl	8000f60 <LL_DMA_EnableIT_TC>

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40011400 	.word	0x40011400
 800124c:	40026400 	.word	0x40026400
 8001250:	20000004 	.word	0x20000004
 8001254:	200003ac 	.word	0x200003ac
 8001258:	200003a8 	.word	0x200003a8

0800125c <transmitInstructionPacket4>:
	for(int i = 0; i < 15; i++)
		printf("%x, ", debug_Status_Packet_Array[i]);
	printf("\r\nyou recieved!\r\n");
}

void transmitInstructionPacket4(void) {  // Transmit instruction packet to Dynamixel
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	dynamixel_Ready = 0;
 8001262:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <transmitInstructionPacket4+0xa8>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
//	  1. Disable DMA Stream (先停)
	 LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8001268:	2104      	movs	r1, #4
 800126a:	4827      	ldr	r0, [pc, #156]	@ (8001308 <transmitInstructionPacket4+0xac>)
 800126c:	f7ff fdcc 	bl	8000e08 <LL_DMA_DisableStream>
//	  2. 設置 DMA memory 與 data length
	 LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)Instruction_Packet_Array);
 8001270:	4b26      	ldr	r3, [pc, #152]	@ (800130c <transmitInstructionPacket4+0xb0>)
 8001272:	461a      	mov	r2, r3
 8001274:	2104      	movs	r1, #4
 8001276:	4824      	ldr	r0, [pc, #144]	@ (8001308 <transmitInstructionPacket4+0xac>)
 8001278:	f7ff fe0a 	bl	8000e90 <LL_DMA_SetMemoryAddress>
	 LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5] + 7);
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <transmitInstructionPacket4+0xb0>)
 800127e:	795b      	ldrb	r3, [r3, #5]
 8001280:	3307      	adds	r3, #7
 8001282:	461a      	mov	r2, r3
 8001284:	2104      	movs	r1, #4
 8001286:	4820      	ldr	r0, [pc, #128]	@ (8001308 <transmitInstructionPacket4+0xac>)
 8001288:	f7ff fdde 	bl	8000e48 <LL_DMA_SetDataLength>
//	  3. Enable DMA Stream again
	 LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 800128c:	2104      	movs	r1, #4
 800128e:	481e      	ldr	r0, [pc, #120]	@ (8001308 <transmitInstructionPacket4+0xac>)
 8001290:	f7ff fd9a 	bl	8000dc8 <LL_DMA_EnableStream>
	 LL_USART_EnableDMAReq_TX(UART4);  // 確保 USART TX DMA 也啟用
 8001294:	481e      	ldr	r0, [pc, #120]	@ (8001310 <transmitInstructionPacket4+0xb4>)
 8001296:	f7ff feea 	bl	800106e <LL_USART_EnableDMAReq_TX>
	#if USE_THREE_STATE_GATE == 1
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 800129a:	2110      	movs	r1, #16
 800129c:	481d      	ldr	r0, [pc, #116]	@ (8001314 <transmitInstructionPacket4+0xb8>)
 800129e:	f7ff ff22 	bl	80010e6 <LL_GPIO_SetOutputPin>
		printf("1\r\n");
 80012a2:	481d      	ldr	r0, [pc, #116]	@ (8001318 <transmitInstructionPacket4+0xbc>)
 80012a4:	f003 fe78 	bl	8004f98 <puts>
		printf("TX Packet: ");
 80012a8:	481c      	ldr	r0, [pc, #112]	@ (800131c <transmitInstructionPacket4+0xc0>)
 80012aa:	f003 fe0d 	bl	8004ec8 <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	e00a      	b.n	80012ca <transmitInstructionPacket4+0x6e>
			printf("%02X ", Instruction_Packet_Array[i]);
 80012b4:	4a15      	ldr	r2, [pc, #84]	@ (800130c <transmitInstructionPacket4+0xb0>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4818      	ldr	r0, [pc, #96]	@ (8001320 <transmitInstructionPacket4+0xc4>)
 80012c0:	f003 fe02 	bl	8004ec8 <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3301      	adds	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <transmitInstructionPacket4+0xb0>)
 80012cc:	795b      	ldrb	r3, [r3, #5]
 80012ce:	3306      	adds	r3, #6
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	ddee      	ble.n	80012b4 <transmitInstructionPacket4+0x58>
		}
		printf("\r\n");
 80012d6:	4813      	ldr	r0, [pc, #76]	@ (8001324 <transmitInstructionPacket4+0xc8>)
 80012d8:	f003 fe5e 	bl	8004f98 <puts>
	#else
		LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_TX);
		printf("2\r\n");
	#endif
		printf("3\r\n");
 80012dc:	4812      	ldr	r0, [pc, #72]	@ (8001328 <transmitInstructionPacket4+0xcc>)
 80012de:	f003 fe5b 	bl	8004f98 <puts>
		LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <transmitInstructionPacket4+0xb0>)
 80012e4:	795b      	ldrb	r3, [r3, #5]
 80012e6:	3307      	adds	r3, #7
 80012e8:	461a      	mov	r2, r3
 80012ea:	2104      	movs	r1, #4
 80012ec:	4806      	ldr	r0, [pc, #24]	@ (8001308 <transmitInstructionPacket4+0xac>)
 80012ee:	f7ff fdab 	bl	8000e48 <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 80012f2:	2104      	movs	r1, #4
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <transmitInstructionPacket4+0xac>)
 80012f6:	f7ff fd67 	bl	8000dc8 <LL_DMA_EnableStream>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000000 	.word	0x20000000
 8001308:	40026000 	.word	0x40026000
 800130c:	20000004 	.word	0x20000004
 8001310:	40004c00 	.word	0x40004c00
 8001314:	40020000 	.word	0x40020000
 8001318:	08005ca4 	.word	0x08005ca4
 800131c:	08005ca8 	.word	0x08005ca8
 8001320:	08005cb4 	.word	0x08005cb4
 8001324:	08005cbc 	.word	0x08005cbc
 8001328:	08005cc0 	.word	0x08005cc0

0800132c <transmitInstructionPacket6>:

void transmitInstructionPacket6(void) {  // Transmit instruction packet to Dynamixel
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	dynamixel_Ready = 0;
 8001332:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <transmitInstructionPacket6+0xa8>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	 LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8001338:	2106      	movs	r1, #6
 800133a:	4827      	ldr	r0, [pc, #156]	@ (80013d8 <transmitInstructionPacket6+0xac>)
 800133c:	f7ff fd64 	bl	8000e08 <LL_DMA_DisableStream>
	 LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)Instruction_Packet_Array);
 8001340:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <transmitInstructionPacket6+0xb0>)
 8001342:	461a      	mov	r2, r3
 8001344:	2106      	movs	r1, #6
 8001346:	4824      	ldr	r0, [pc, #144]	@ (80013d8 <transmitInstructionPacket6+0xac>)
 8001348:	f7ff fda2 	bl	8000e90 <LL_DMA_SetMemoryAddress>
	 LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5] + 7);
 800134c:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <transmitInstructionPacket6+0xb0>)
 800134e:	795b      	ldrb	r3, [r3, #5]
 8001350:	3307      	adds	r3, #7
 8001352:	461a      	mov	r2, r3
 8001354:	2106      	movs	r1, #6
 8001356:	4820      	ldr	r0, [pc, #128]	@ (80013d8 <transmitInstructionPacket6+0xac>)
 8001358:	f7ff fd76 	bl	8000e48 <LL_DMA_SetDataLength>
	 LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 800135c:	2106      	movs	r1, #6
 800135e:	481e      	ldr	r0, [pc, #120]	@ (80013d8 <transmitInstructionPacket6+0xac>)
 8001360:	f7ff fd32 	bl	8000dc8 <LL_DMA_EnableStream>
	 LL_USART_EnableDMAReq_TX(USART6);
 8001364:	481e      	ldr	r0, [pc, #120]	@ (80013e0 <transmitInstructionPacket6+0xb4>)
 8001366:	f7ff fe82 	bl	800106e <LL_USART_EnableDMAReq_TX>
	#if USE_THREE_STATE_GATE == 1
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 800136a:	2101      	movs	r1, #1
 800136c:	481d      	ldr	r0, [pc, #116]	@ (80013e4 <transmitInstructionPacket6+0xb8>)
 800136e:	f7ff feba 	bl	80010e6 <LL_GPIO_SetOutputPin>
		printf("1\r\n");
 8001372:	481d      	ldr	r0, [pc, #116]	@ (80013e8 <transmitInstructionPacket6+0xbc>)
 8001374:	f003 fe10 	bl	8004f98 <puts>
		printf("TX Packet: ");
 8001378:	481c      	ldr	r0, [pc, #112]	@ (80013ec <transmitInstructionPacket6+0xc0>)
 800137a:	f003 fda5 	bl	8004ec8 <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e00a      	b.n	800139a <transmitInstructionPacket6+0x6e>
			printf("%02X ", Instruction_Packet_Array[i]);
 8001384:	4a15      	ldr	r2, [pc, #84]	@ (80013dc <transmitInstructionPacket6+0xb0>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4818      	ldr	r0, [pc, #96]	@ (80013f0 <transmitInstructionPacket6+0xc4>)
 8001390:	f003 fd9a 	bl	8004ec8 <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3301      	adds	r3, #1
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <transmitInstructionPacket6+0xb0>)
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	3306      	adds	r3, #6
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	ddee      	ble.n	8001384 <transmitInstructionPacket6+0x58>
		}
		printf("\r\n");
 80013a6:	4813      	ldr	r0, [pc, #76]	@ (80013f4 <transmitInstructionPacket6+0xc8>)
 80013a8:	f003 fdf6 	bl	8004f98 <puts>
	#else
		LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_TX);
		printf("2\r\n");
	#endif
		printf("3\r\n");
 80013ac:	4812      	ldr	r0, [pc, #72]	@ (80013f8 <transmitInstructionPacket6+0xcc>)
 80013ae:	f003 fdf3 	bl	8004f98 <puts>
		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <transmitInstructionPacket6+0xb0>)
 80013b4:	795b      	ldrb	r3, [r3, #5]
 80013b6:	3307      	adds	r3, #7
 80013b8:	461a      	mov	r2, r3
 80013ba:	2106      	movs	r1, #6
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <transmitInstructionPacket6+0xac>)
 80013be:	f7ff fd43 	bl	8000e48 <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 80013c2:	2106      	movs	r1, #6
 80013c4:	4804      	ldr	r0, [pc, #16]	@ (80013d8 <transmitInstructionPacket6+0xac>)
 80013c6:	f7ff fcff 	bl	8000dc8 <LL_DMA_EnableStream>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000
 80013d8:	40026400 	.word	0x40026400
 80013dc:	20000004 	.word	0x20000004
 80013e0:	40011400 	.word	0x40011400
 80013e4:	40020400 	.word	0x40020400
 80013e8:	08005ca4 	.word	0x08005ca4
 80013ec:	08005ca8 	.word	0x08005ca8
 80013f0:	08005cb4 	.word	0x08005cb4
 80013f4:	08005cbc 	.word	0x08005cbc
 80013f8:	08005cc0 	.word	0x08005cc0

080013fc <readStatusPacket6>:
		Status_Packet_Array[i] = LL_USART_ReceiveData8(UART4);
	}
	dynamixel_Ready = 1;
}

void readStatusPacket6(void) {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < Status_packet_length + 4; i++) {
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	e014      	b.n	8001432 <readStatusPacket6+0x36>
		while(LL_USART_IsActiveFlag_RXNE(USART6) == RESET) {
 8001408:	bf00      	nop
 800140a:	4810      	ldr	r0, [pc, #64]	@ (800144c <readStatusPacket6+0x50>)
 800140c:	f7ff fdc8 	bl	8000fa0 <LL_USART_IsActiveFlag_RXNE>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f9      	beq.n	800140a <readStatusPacket6+0xe>
		}
		printf("got response\r\n");
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <readStatusPacket6+0x54>)
 8001418:	f003 fdbe 	bl	8004f98 <puts>
		Status_Packet_Array[i] = LL_USART_ReceiveData8(USART6);
 800141c:	79fc      	ldrb	r4, [r7, #7]
 800141e:	480b      	ldr	r0, [pc, #44]	@ (800144c <readStatusPacket6+0x50>)
 8001420:	f7ff fe54 	bl	80010cc <LL_USART_ReceiveData8>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <readStatusPacket6+0x58>)
 800142a:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i < Status_packet_length + 4; i++) {
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	3301      	adds	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <readStatusPacket6+0x5c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3304      	adds	r3, #4
 800143a:	429a      	cmp	r2, r3
 800143c:	d3e4      	bcc.n	8001408 <readStatusPacket6+0xc>
	}
	dynamixel_Ready = 1;
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <readStatusPacket6+0x60>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	40011400 	.word	0x40011400
 8001450:	08005ccc 	.word	0x08005ccc
 8001454:	200003ac 	.word	0x200003ac
 8001458:	200003a8 	.word	0x200003a8
 800145c:	20000000 	.word	0x20000000

08001460 <readStatusPacket_pos_DMA>:

void readStatusPacket_pos_DMA(int32_t* position) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	if(Status_Packet_Array[8] == 0) {   //確認錯誤碼
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <readStatusPacket_pos_DMA+0x48>)
 800146a:	7a1b      	ldrb	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d114      	bne.n	800149a <readStatusPacket_pos_DMA+0x3a>
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <readStatusPacket_pos_DMA+0x48>)
 8001472:	7b1b      	ldrb	r3, [r3, #12]
 8001474:	061a      	lsls	r2, r3, #24
 8001476:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <readStatusPacket_pos_DMA+0x48>)
 8001478:	7adb      	ldrb	r3, [r3, #11]
 800147a:	041b      	lsls	r3, r3, #16
 800147c:	431a      	orrs	r2, r3
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <readStatusPacket_pos_DMA+0x48>)
 8001480:	7a9b      	ldrb	r3, [r3, #10]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	431a      	orrs	r2, r3
			| Status_Packet_Array[9];
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <readStatusPacket_pos_DMA+0x48>)
 8001488:	7a5b      	ldrb	r3, [r3, #9]
 800148a:	4618      	mov	r0, r3
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <readStatusPacket_pos_DMA+0x48>)
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	440b      	add	r3, r1
			| Status_Packet_Array[9];
 8001496:	4302      	orrs	r2, r0
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8001498:	601a      	str	r2, [r3, #0]
	}
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	200003ac 	.word	0x200003ac

080014ac <Reboot>:
	position[Status_Packet_Array[4]]=Status_Packet_Array[9];
}
//-------------------------------------------------------------------------------------------------------------------------------
// EEPROM AREA

uint8_t Reboot(uint8_t ID) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
    // 等待前一次通訊完成
    while (dynamixel_Ready != 1) { }
 80014b6:	bf00      	nop
 80014b8:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <Reboot+0x74>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d1fb      	bne.n	80014b8 <Reboot+0xc>
    dynamixel_Ready = 0;  // 清 flag
 80014c0:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <Reboot+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]

    // 組封包：Header、ID、Length=3、Instruction=0x08、(no params)
    Instruction_Packet_Array[4] = ID;
 80014c6:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <Reboot+0x78>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	7113      	strb	r3, [r2, #4]
    Instruction_Packet_Array[5] = 0x03;    // LEN_L = 3
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <Reboot+0x78>)
 80014ce:	2203      	movs	r2, #3
 80014d0:	715a      	strb	r2, [r3, #5]
    Instruction_Packet_Array[6] = 0x00;    // LEN_H = 0
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <Reboot+0x78>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	719a      	strb	r2, [r3, #6]
    Instruction_Packet_Array[7] = INST_REBOOT;
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <Reboot+0x78>)
 80014da:	2208      	movs	r2, #8
 80014dc:	71da      	strb	r2, [r3, #7]

    // 計算 CRC，長度 = LEN + 5 = 3 + 5 = 8 bytes
    uint16_t crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <Reboot+0x78>)
 80014e0:	795b      	ldrb	r3, [r3, #5]
 80014e2:	3305      	adds	r3, #5
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	480e      	ldr	r0, [pc, #56]	@ (8001524 <Reboot+0x78>)
 80014ea:	f000 fbc7 	bl	8001c7c <update_crc>
 80014ee:	4603      	mov	r3, r0
 80014f0:	81fb      	strh	r3, [r7, #14]
    Instruction_Packet_Array[8] = crc & 0xFF;
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <Reboot+0x78>)
 80014f8:	721a      	strb	r2, [r3, #8]
    Instruction_Packet_Array[9] = (crc >> 8) & 0xFF;
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <Reboot+0x78>)
 8001504:	725a      	strb	r2, [r3, #9]

    // 發送封包
    Packet_Return = 1;              // 要等回 ACK
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <Reboot+0x7c>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
    transmitInstructionPacket6();
 800150c:	f7ff ff0e 	bl	800132c <transmitInstructionPacket6>
    readStatusPacket6();             // 阻塞讀取回應
 8001510:	f7ff ff74 	bl	80013fc <readStatusPacket6>

    // 回傳錯誤碼：Status_Packet_Array[8] = ERR
    return Status_Packet_Array[8];
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <Reboot+0x80>)
 8001516:	7a1b      	ldrb	r3, [r3, #8]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004
 8001528:	20000001 	.word	0x20000001
 800152c:	200003ac 	.word	0x200003ac

08001530 <OperatingMode>:
uint8_t OperatingMode(uint8_t ID, uint8_t OPERATION_MODE) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
// Set Operation Mode: Current Mode 0x00, Velocity Mode 0x01, Position Mode 0x03
	while(dynamixel_Ready != 1) {
 8001540:	bf00      	nop
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <OperatingMode+0xd4>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d1fb      	bne.n	8001542 <OperatingMode+0x12>
	}
	Instruction_Packet_Array[4] = ID;
 800154a:	4a2f      	ldr	r2, [pc, #188]	@ (8001608 <OperatingMode+0xd8>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x06;
 8001550:	4b2d      	ldr	r3, [pc, #180]	@ (8001608 <OperatingMode+0xd8>)
 8001552:	2206      	movs	r2, #6
 8001554:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001556:	4b2c      	ldr	r3, [pc, #176]	@ (8001608 <OperatingMode+0xd8>)
 8001558:	2200      	movs	r2, #0
 800155a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_WRITE_DATA;
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <OperatingMode+0xd8>)
 800155e:	2203      	movs	r2, #3
 8001560:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = EEPROM_OPERATION_MODE;
 8001562:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <OperatingMode+0xd8>)
 8001564:	220b      	movs	r2, #11
 8001566:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <OperatingMode+0xd8>)
 800156a:	2200      	movs	r2, #0
 800156c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = OPERATION_MODE;
 800156e:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <OperatingMode+0xd8>)
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	7293      	strb	r3, [r2, #10]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <OperatingMode+0xd8>)
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	3305      	adds	r3, #5
 800157a:	b29b      	uxth	r3, r3
 800157c:	4619      	mov	r1, r3
 800157e:	4822      	ldr	r0, [pc, #136]	@ (8001608 <OperatingMode+0xd8>)
 8001580:	f000 fb7c 	bl	8001c7c <update_crc>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b20      	ldr	r3, [pc, #128]	@ (800160c <OperatingMode+0xdc>)
 800158a:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[11] = crc & 0x00FF;
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <OperatingMode+0xdc>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <OperatingMode+0xd8>)
 8001594:	72da      	strb	r2, [r3, #11]
	Instruction_Packet_Array[12] = (crc >> 8) & 0x00FF;
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <OperatingMode+0xdc>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	b29b      	uxth	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <OperatingMode+0xd8>)
 80015a2:	731a      	strb	r2, [r3, #12]

	Status_packet_length = 7; // ID(1) + LEN(2) + INS(1) + ERR(1) + CRC(2)
 80015a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001610 <OperatingMode+0xe0>)
 80015a6:	2207      	movs	r2, #7
 80015a8:	601a      	str	r2, [r3, #0]

	if(ID == 0XFE || Status_Return_Level != ALL) {
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80015ae:	d003      	beq.n	80015b8 <OperatingMode+0x88>
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <OperatingMode+0xe4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d006      	beq.n	80015c6 <OperatingMode+0x96>
		Packet_Return = 0;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <OperatingMode+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80015be:	f7ff fe4d 	bl	800125c <transmitInstructionPacket4>
		return (0x00);
 80015c2:	2300      	movs	r3, #0
 80015c4:	e019      	b.n	80015fa <OperatingMode+0xca>
	}
	else {
		Packet_Return = 1;
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <OperatingMode+0xe8>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
		  transmitInstructionPacket6();
 80015cc:	f7ff feae 	bl	800132c <transmitInstructionPacket6>
		  readStatusPacket6();
 80015d0:	f7ff ff14 	bl	80013fc <readStatusPacket6>
		   if (Status_Packet_Array[8] != 0) {
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <OperatingMode+0xec>)
 80015d6:	7a1b      	ldrb	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <OperatingMode+0xb2>
		      // EEPROM 寫入失敗，直接回傳錯誤
		      return (Status_Packet_Array[8] | 0xF000);
 80015dc:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <OperatingMode+0xec>)
 80015de:	7a1b      	ldrb	r3, [r3, #8]
 80015e0:	e00b      	b.n	80015fa <OperatingMode+0xca>
		   }
		   // EEPROM 寫入成功，立即發出 Reboot 讓馬達重載新模式
		   uint8_t err = Reboot(ID);
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff61 	bl	80014ac <Reboot>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
		   if (err != 0) {
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <OperatingMode+0xc8>
	        // Reboot 失敗
		       return (err | 0xE000);
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	e000      	b.n	80015fa <OperatingMode+0xca>
		   }
		   // 成功切換模式並重啟
		   return 0x00;
 80015f8:	2300      	movs	r3, #0
	}
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004
 800160c:	200003c6 	.word	0x200003c6
 8001610:	200003a8 	.word	0x200003a8
 8001614:	20000002 	.word	0x20000002
 8001618:	20000001 	.word	0x20000001
 800161c:	200003ac 	.word	0x200003ac

08001620 <TorqueEnable>:
}

//-------------------------------------------------------------------------------------------------------------------------------
// RAM AREA

uint8_t TorqueEnable(uint8_t ID, _Bool Status) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	460a      	mov	r2, r1
 800162a:	71fb      	strb	r3, [r7, #7]
 800162c:	4613      	mov	r3, r2
 800162e:	71bb      	strb	r3, [r7, #6]
	/*
	 Must Enable it before any motion(Velocity or Position)
	 When it is enabled, EEROM will be locked.
	 */
	while(dynamixel_Ready != 1) {
 8001630:	bf00      	nop
 8001632:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <TorqueEnable+0xb8>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d1fb      	bne.n	8001632 <TorqueEnable+0x12>
	}
	Instruction_Packet_Array[4] = ID;
 800163a:	4a28      	ldr	r2, [pc, #160]	@ (80016dc <TorqueEnable+0xbc>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x06;
 8001640:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <TorqueEnable+0xbc>)
 8001642:	2206      	movs	r2, #6
 8001644:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001646:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <TorqueEnable+0xbc>)
 8001648:	2200      	movs	r2, #0
 800164a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_WRITE_DATA;
 800164c:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <TorqueEnable+0xbc>)
 800164e:	2203      	movs	r2, #3
 8001650:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <TorqueEnable+0xbc>)
 8001654:	2240      	movs	r2, #64	@ 0x40
 8001656:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <TorqueEnable+0xbc>)
 800165a:	2200      	movs	r2, #0
 800165c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = Status;
 800165e:	79ba      	ldrb	r2, [r7, #6]
 8001660:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <TorqueEnable+0xbc>)
 8001662:	729a      	strb	r2, [r3, #10]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <TorqueEnable+0xbc>)
 8001666:	795b      	ldrb	r3, [r3, #5]
 8001668:	3305      	adds	r3, #5
 800166a:	b29b      	uxth	r3, r3
 800166c:	4619      	mov	r1, r3
 800166e:	481b      	ldr	r0, [pc, #108]	@ (80016dc <TorqueEnable+0xbc>)
 8001670:	f000 fb04 	bl	8001c7c <update_crc>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <TorqueEnable+0xc0>)
 800167a:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[11] = crc & 0x00FF;
 800167c:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <TorqueEnable+0xc0>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <TorqueEnable+0xbc>)
 8001684:	72da      	strb	r2, [r3, #11]
	Instruction_Packet_Array[12] = (crc >> 8) & 0x00FF;
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <TorqueEnable+0xc0>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29b      	uxth	r3, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <TorqueEnable+0xbc>)
 8001692:	731a      	strb	r2, [r3, #12]

	Status_packet_length = 7; // ID(1) + LEN(2) + INS(1) + ERR(1) + CRC(2)
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <TorqueEnable+0xc4>)
 8001696:	2207      	movs	r2, #7
 8001698:	601a      	str	r2, [r3, #0]

	if(ID == 0XFE || Status_Return_Level != ALL) {
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2bfe      	cmp	r3, #254	@ 0xfe
 800169e:	d003      	beq.n	80016a8 <TorqueEnable+0x88>
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <TorqueEnable+0xc8>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d006      	beq.n	80016b6 <TorqueEnable+0x96>
		Packet_Return = 0;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <TorqueEnable+0xcc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80016ae:	f7ff fdd5 	bl	800125c <transmitInstructionPacket4>
		return (0x00);
 80016b2:	2300      	movs	r3, #0
 80016b4:	e00c      	b.n	80016d0 <TorqueEnable+0xb0>
	}
	else {
		Packet_Return = 1;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <TorqueEnable+0xcc>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80016bc:	f7ff fdce 	bl	800125c <transmitInstructionPacket4>
//		readStatusPacket4();
		if(Status_Packet_Array[8] == 0)
 80016c0:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <TorqueEnable+0xd0>)
 80016c2:	7a1b      	ldrb	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <TorqueEnable+0xac>
			return (0x00);
 80016c8:	2300      	movs	r3, #0
 80016ca:	e001      	b.n	80016d0 <TorqueEnable+0xb0>
		else
			return (Status_Packet_Array[8] | 0xF000);
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <TorqueEnable+0xd0>)
 80016ce:	7a1b      	ldrb	r3, [r3, #8]
	}
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000004 	.word	0x20000004
 80016e0:	200003c6 	.word	0x200003c6
 80016e4:	200003a8 	.word	0x200003a8
 80016e8:	20000002 	.word	0x20000002
 80016ec:	20000001 	.word	0x20000001
 80016f0:	200003ac 	.word	0x200003ac

080016f4 <PositionWithVelocity>:
		else
			return (Status_Packet_Array[8] | 0xF000);
	}
}

uint8_t PositionWithVelocity(uint8_t ID, int32_t Position, int32_t Moving_Velocity) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	73fb      	strb	r3, [r7, #15]
	/*
	 units = 0.088 degree
	 position range: 0~360 (0~4095)
	 */
	while(dynamixel_Ready != 1) {
 8001702:	bf00      	nop
 8001704:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <PositionWithVelocity+0xfc>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d1fb      	bne.n	8001704 <PositionWithVelocity+0x10>
	}
	Instruction_Packet_Array[4] = ID;
 800170c:	4a39      	ldr	r2, [pc, #228]	@ (80017f4 <PositionWithVelocity+0x100>)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x0D;
 8001712:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001714:	220d      	movs	r2, #13
 8001716:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001718:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <PositionWithVelocity+0x100>)
 800171a:	2200      	movs	r2, #0
 800171c:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_WRITE_DATA;
 800171e:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001720:	2203      	movs	r2, #3
 8001722:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_MOVING_VELOCITY_1;
 8001724:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001726:	2270      	movs	r2, #112	@ 0x70
 8001728:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 800172a:	4b32      	ldr	r3, [pc, #200]	@ (80017f4 <PositionWithVelocity+0x100>)
 800172c:	2200      	movs	r2, #0
 800172e:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = (uint8_t)(Moving_Velocity);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001736:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = (uint8_t)((Moving_Velocity >> 8) & 0x000000FF);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	121b      	asrs	r3, r3, #8
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001740:	72da      	strb	r2, [r3, #11]
	Instruction_Packet_Array[12] = (uint8_t)((Moving_Velocity >> 16) & 0x000000FF);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	141b      	asrs	r3, r3, #16
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b2a      	ldr	r3, [pc, #168]	@ (80017f4 <PositionWithVelocity+0x100>)
 800174a:	731a      	strb	r2, [r3, #12]
	Instruction_Packet_Array[13] = (uint8_t)((Moving_Velocity >> 24) & 0x000000FF);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	161b      	asrs	r3, r3, #24
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001754:	735a      	strb	r2, [r3, #13]
	Instruction_Packet_Array[14] = (uint8_t)(Position);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b26      	ldr	r3, [pc, #152]	@ (80017f4 <PositionWithVelocity+0x100>)
 800175c:	739a      	strb	r2, [r3, #14]
	Instruction_Packet_Array[15] = (uint8_t)((Position >> 8) & 0x000000FF);
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	121b      	asrs	r3, r3, #8
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001766:	73da      	strb	r2, [r3, #15]
	Instruction_Packet_Array[16] = (uint8_t)((Position >> 16) & 0x000000FF);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	141b      	asrs	r3, r3, #16
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001770:	741a      	strb	r2, [r3, #16]
	Instruction_Packet_Array[17] = (uint8_t)((Position >> 24) & 0x000000FF);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	161b      	asrs	r3, r3, #24
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <PositionWithVelocity+0x100>)
 800177a:	745a      	strb	r2, [r3, #17]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <PositionWithVelocity+0x100>)
 800177e:	795b      	ldrb	r3, [r3, #5]
 8001780:	3305      	adds	r3, #5
 8001782:	b29b      	uxth	r3, r3
 8001784:	4619      	mov	r1, r3
 8001786:	481b      	ldr	r0, [pc, #108]	@ (80017f4 <PositionWithVelocity+0x100>)
 8001788:	f000 fa78 	bl	8001c7c <update_crc>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <PositionWithVelocity+0x104>)
 8001792:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[18] = crc & 0x00FF;
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <PositionWithVelocity+0x104>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <PositionWithVelocity+0x100>)
 800179c:	749a      	strb	r2, [r3, #18]
	Instruction_Packet_Array[19] = (crc >> 8) & 0x00FF;
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <PositionWithVelocity+0x104>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <PositionWithVelocity+0x100>)
 80017aa:	74da      	strb	r2, [r3, #19]

	Status_packet_length = 7; // ID(1) + LEN(2) + INS(1) + ERR(1) + CRC(2)
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <PositionWithVelocity+0x108>)
 80017ae:	2207      	movs	r2, #7
 80017b0:	601a      	str	r2, [r3, #0]

	if(ID == 0XFE || Status_Return_Level != ALL) {
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80017b6:	d003      	beq.n	80017c0 <PositionWithVelocity+0xcc>
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <PositionWithVelocity+0x10c>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d006      	beq.n	80017ce <PositionWithVelocity+0xda>
		Packet_Return = 0;
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <PositionWithVelocity+0x110>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80017c6:	f7ff fd49 	bl	800125c <transmitInstructionPacket4>
		return (0x00);
 80017ca:	2300      	movs	r3, #0
 80017cc:	e00c      	b.n	80017e8 <PositionWithVelocity+0xf4>
	}
	else {
		Packet_Return = 1;
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <PositionWithVelocity+0x110>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80017d4:	f7ff fd42 	bl	800125c <transmitInstructionPacket4>
//		readStatusPacket4();
		if(Status_Packet_Array[8] == 0)
 80017d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <PositionWithVelocity+0x114>)
 80017da:	7a1b      	ldrb	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <PositionWithVelocity+0xf0>
			return (0x00);
 80017e0:	2300      	movs	r3, #0
 80017e2:	e001      	b.n	80017e8 <PositionWithVelocity+0xf4>
		else
			return (Status_Packet_Array[8] | 0xF000);
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <PositionWithVelocity+0x114>)
 80017e6:	7a1b      	ldrb	r3, [r3, #8]
	}
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000004 	.word	0x20000004
 80017f8:	200003c6 	.word	0x200003c6
 80017fc:	200003a8 	.word	0x200003a8
 8001800:	20000002 	.word	0x20000002
 8001804:	20000001 	.word	0x20000001
 8001808:	200003ac 	.word	0x200003ac

0800180c <SyncWrite_DisableDynamixels>:
	Is_dynamixel_GetData = 0;

	transmitInstructionPacket6();
}

void SyncWrite_DisableDynamixels(uint8_t n, uint8_t *ID_list) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8001818:	bf00      	nop
 800181a:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <SyncWrite_DisableDynamixels+0xd0>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d1fb      	bne.n	800181a <SyncWrite_DisableDynamixels+0xe>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8001822:	4b2f      	ldr	r3, [pc, #188]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 8001824:	22fe      	movs	r2, #254	@ 0xfe
 8001826:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	3307      	adds	r3, #7
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 8001834:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 8001838:	2200      	movs	r2, #0
 800183a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 800183c:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 800183e:	2283      	movs	r2, #131	@ 0x83
 8001840:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 8001842:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 8001844:	2240      	movs	r2, #64	@ 0x40
 8001846:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001848:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 800184a:	2200      	movs	r2, #0
 800184c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 800184e:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 8001850:	2201      	movs	r2, #1
 8001852:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 8001856:	2200      	movs	r2, #0
 8001858:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 800185a:	2301      	movs	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e012      	b.n	8001886 <SyncWrite_DisableDynamixels+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	3b01      	subs	r3, #1
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	441a      	add	r2, r3
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3305      	adds	r3, #5
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	7811      	ldrb	r1, [r2, #0]
 8001870:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 8001872:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x00;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	330b      	adds	r3, #11
 800187a:	4a19      	ldr	r2, [pc, #100]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 800187c:	2100      	movs	r1, #0
 800187e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3301      	adds	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	429a      	cmp	r2, r3
 800188c:	d9e8      	bls.n	8001860 <SyncWrite_DisableDynamixels+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 8001890:	795b      	ldrb	r3, [r3, #5]
 8001892:	3305      	adds	r3, #5
 8001894:	b29b      	uxth	r3, r3
 8001896:	4619      	mov	r1, r3
 8001898:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 800189a:	f000 f9ef 	bl	8001c7c <update_crc>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <SyncWrite_DisableDynamixels+0xd8>)
 80018a4:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <SyncWrite_DisableDynamixels+0xd8>)
 80018a8:	881a      	ldrh	r2, [r3, #0]
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	3306      	adds	r3, #6
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 80018b4:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <SyncWrite_DisableDynamixels+0xd8>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	b29a      	uxth	r2, r3
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	330d      	adds	r3, #13
 80018c4:	b2d1      	uxtb	r1, r2
 80018c6:	4a06      	ldr	r2, [pc, #24]	@ (80018e0 <SyncWrite_DisableDynamixels+0xd4>)
 80018c8:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 80018ca:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <SyncWrite_DisableDynamixels+0xdc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 80018d0:	f7ff fcc4 	bl	800125c <transmitInstructionPacket4>
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004
 80018e4:	200003c6 	.word	0x200003c6
 80018e8:	20000001 	.word	0x20000001

080018ec <SyncWrite_EnableDynamixels>:

void SyncWrite_EnableDynamixels(uint8_t n, uint8_t *ID_list) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 80018f8:	bf00      	nop
 80018fa:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <SyncWrite_EnableDynamixels+0xd0>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d1fb      	bne.n	80018fa <SyncWrite_EnableDynamixels+0xe>
	}
	Instruction_Packet_Array[4] = 0xFE;
 8001902:	4b2f      	ldr	r3, [pc, #188]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001904:	22fe      	movs	r2, #254	@ 0xfe
 8001906:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	3307      	adds	r3, #7
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001914:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001916:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001918:	2200      	movs	r2, #0
 800191a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 800191c:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 800191e:	2283      	movs	r2, #131	@ 0x83
 8001920:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 8001922:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001924:	2240      	movs	r2, #64	@ 0x40
 8001926:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 800192a:	2200      	movs	r2, #0
 800192c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 800192e:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001930:	2201      	movs	r2, #1
 8001932:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001934:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001936:	2200      	movs	r2, #0
 8001938:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
 800193e:	e012      	b.n	8001966 <SyncWrite_EnableDynamixels+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	3b01      	subs	r3, #1
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	441a      	add	r2, r3
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	3305      	adds	r3, #5
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	7811      	ldrb	r1, [r2, #0]
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001952:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x01;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	330b      	adds	r3, #11
 800195a:	4a19      	ldr	r2, [pc, #100]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 800195c:	2101      	movs	r1, #1
 800195e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	3301      	adds	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	429a      	cmp	r2, r3
 800196c:	d9e8      	bls.n	8001940 <SyncWrite_EnableDynamixels+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 800196e:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001970:	795b      	ldrb	r3, [r3, #5]
 8001972:	3305      	adds	r3, #5
 8001974:	b29b      	uxth	r3, r3
 8001976:	4619      	mov	r1, r3
 8001978:	4811      	ldr	r0, [pc, #68]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 800197a:	f000 f97f 	bl	8001c7c <update_crc>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <SyncWrite_EnableDynamixels+0xd8>)
 8001984:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <SyncWrite_EnableDynamixels+0xd8>)
 8001988:	881a      	ldrh	r2, [r3, #0]
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	3306      	adds	r3, #6
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b2d1      	uxtb	r1, r2
 8001992:	4a0b      	ldr	r2, [pc, #44]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 8001994:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <SyncWrite_EnableDynamixels+0xd8>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	b29a      	uxth	r2, r3
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	330d      	adds	r3, #13
 80019a4:	b2d1      	uxtb	r1, r2
 80019a6:	4a06      	ldr	r2, [pc, #24]	@ (80019c0 <SyncWrite_EnableDynamixels+0xd4>)
 80019a8:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 80019aa:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <SyncWrite_EnableDynamixels+0xdc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 80019b0:	f7ff fc54 	bl	800125c <transmitInstructionPacket4>
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004
 80019c4:	200003c6 	.word	0x200003c6
 80019c8:	20000001 	.word	0x20000001

080019cc <SyncWrite_StatusReturnLevel>:

void SyncWrite_StatusReturnLevel(uint8_t n, uint8_t *ID_list, uint8_t level) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
 80019d8:	4613      	mov	r3, r2
 80019da:	71bb      	strb	r3, [r7, #6]
	while(dynamixel_Ready != 1) {
 80019dc:	bf00      	nop
 80019de:	4b32      	ldr	r3, [pc, #200]	@ (8001aa8 <SyncWrite_StatusReturnLevel+0xdc>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d1fb      	bne.n	80019de <SyncWrite_StatusReturnLevel+0x12>
	}

	Instruction_Packet_Array[4] = 0xFE;
 80019e6:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 80019e8:	22fe      	movs	r2, #254	@ 0xfe
 80019ea:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3307      	adds	r3, #7
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b2d      	ldr	r3, [pc, #180]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 80019f8:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 80019fa:	4b2c      	ldr	r3, [pc, #176]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8001a00:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a02:	2283      	movs	r2, #131	@ 0x83
 8001a04:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_STATUS_RETURN_LEVEL;
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a08:	2244      	movs	r2, #68	@ 0x44
 8001a0a:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001a0c:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8001a12:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001a18:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e012      	b.n	8001a4a <SyncWrite_StatusReturnLevel+0x7e>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	441a      	add	r2, r3
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	3305      	adds	r3, #5
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	7811      	ldrb	r1, [r2, #0]
 8001a34:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a36:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = level;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	330b      	adds	r3, #11
 8001a3e:	491b      	ldr	r1, [pc, #108]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a40:	79ba      	ldrb	r2, [r7, #6]
 8001a42:	54ca      	strb	r2, [r1, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	3301      	adds	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d9e8      	bls.n	8001a24 <SyncWrite_StatusReturnLevel+0x58>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a54:	795b      	ldrb	r3, [r3, #5]
 8001a56:	3305      	adds	r3, #5
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4813      	ldr	r0, [pc, #76]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a5e:	f000 f90d 	bl	8001c7c <update_crc>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <SyncWrite_StatusReturnLevel+0xe4>)
 8001a68:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <SyncWrite_StatusReturnLevel+0xe4>)
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	3306      	adds	r3, #6
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	b2d1      	uxtb	r1, r2
 8001a76:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a78:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <SyncWrite_StatusReturnLevel+0xe4>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	330d      	adds	r3, #13
 8001a88:	b2d1      	uxtb	r1, r2
 8001a8a:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <SyncWrite_StatusReturnLevel+0xe0>)
 8001a8c:	54d1      	strb	r1, [r2, r3]

	Status_Return_Level = level;
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <SyncWrite_StatusReturnLevel+0xe8>)
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	7013      	strb	r3, [r2, #0]
	Packet_Return = 0;
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <SyncWrite_StatusReturnLevel+0xec>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 8001a9a:	f7ff fbdf 	bl	800125c <transmitInstructionPacket4>
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004
 8001ab0:	200003c6 	.word	0x200003c6
 8001ab4:	20000002 	.word	0x20000002
 8001ab8:	20000001 	.word	0x20000001

08001abc <SyncLED_Disable>:

	Packet_Return = 0;
	transmitInstructionPacket6();
}

void SyncLED_Disable(uint8_t n, uint8_t *ID_list) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8001ac8:	bf00      	nop
 8001aca:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <SyncLED_Disable+0xd0>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d1fb      	bne.n	8001aca <SyncLED_Disable+0xe>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001ad4:	22fe      	movs	r2, #254	@ 0xfe
 8001ad6:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	3307      	adds	r3, #7
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001ae4:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8001aec:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001aee:	2283      	movs	r2, #131	@ 0x83
 8001af0:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_LED;
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001af4:	2241      	movs	r2, #65	@ 0x41
 8001af6:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001af8:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	e012      	b.n	8001b36 <SyncLED_Disable+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	441a      	add	r2, r3
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	3305      	adds	r3, #5
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	7811      	ldrb	r1, [r2, #0]
 8001b20:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001b22:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x00;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	330b      	adds	r3, #11
 8001b2a:	4a19      	ldr	r2, [pc, #100]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d9e8      	bls.n	8001b10 <SyncLED_Disable+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001b40:	795b      	ldrb	r3, [r3, #5]
 8001b42:	3305      	adds	r3, #5
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4619      	mov	r1, r3
 8001b48:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001b4a:	f000 f897 	bl	8001c7c <update_crc>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <SyncLED_Disable+0xd8>)
 8001b54:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <SyncLED_Disable+0xd8>)
 8001b58:	881a      	ldrh	r2, [r3, #0]
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	3306      	adds	r3, #6
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	b2d1      	uxtb	r1, r2
 8001b62:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001b64:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <SyncLED_Disable+0xd8>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	330d      	adds	r3, #13
 8001b74:	b2d1      	uxtb	r1, r2
 8001b76:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <SyncLED_Disable+0xd4>)
 8001b78:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <SyncLED_Disable+0xdc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 8001b80:	f7ff fb6c 	bl	800125c <transmitInstructionPacket4>
}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000004 	.word	0x20000004
 8001b94:	200003c6 	.word	0x200003c6
 8001b98:	20000001 	.word	0x20000001

08001b9c <SyncLED_Enable>:

void SyncLED_Enable(uint8_t n, uint8_t *ID_list) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8001ba8:	bf00      	nop
 8001baa:	4b30      	ldr	r3, [pc, #192]	@ (8001c6c <SyncLED_Enable+0xd0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d1fb      	bne.n	8001baa <SyncLED_Enable+0xe>
	}
	Instruction_Packet_Array[4] = 0xFE;
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001bb4:	22fe      	movs	r2, #254	@ 0xfe
 8001bb6:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3307      	adds	r3, #7
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001bc4:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8001bcc:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001bce:	2283      	movs	r2, #131	@ 0x83
 8001bd0:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_LED;
 8001bd2:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001bd4:	2241      	movs	r2, #65	@ 0x41
 8001bd6:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8001bde:	4b24      	ldr	r3, [pc, #144]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001be4:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
 8001bee:	e012      	b.n	8001c16 <SyncLED_Enable+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	3305      	adds	r3, #5
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	7811      	ldrb	r1, [r2, #0]
 8001c00:	4a1b      	ldr	r2, [pc, #108]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001c02:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x01;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	330b      	adds	r3, #11
 8001c0a:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3301      	adds	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d9e8      	bls.n	8001bf0 <SyncLED_Enable+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001c1e:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001c20:	795b      	ldrb	r3, [r3, #5]
 8001c22:	3305      	adds	r3, #5
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	4811      	ldr	r0, [pc, #68]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001c2a:	f000 f827 	bl	8001c7c <update_crc>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <SyncLED_Enable+0xd8>)
 8001c34:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <SyncLED_Enable+0xd8>)
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	3306      	adds	r3, #6
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	b2d1      	uxtb	r1, r2
 8001c42:	4a0b      	ldr	r2, [pc, #44]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001c44:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <SyncLED_Enable+0xd8>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	330d      	adds	r3, #13
 8001c54:	b2d1      	uxtb	r1, r2
 8001c56:	4a06      	ldr	r2, [pc, #24]	@ (8001c70 <SyncLED_Enable+0xd4>)
 8001c58:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <SyncLED_Enable+0xdc>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 8001c60:	f7ff fafc 	bl	800125c <transmitInstructionPacket4>
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004
 8001c74:	200003c6 	.word	0x200003c6
 8001c78:	20000001 	.word	0x20000001

08001c7c <update_crc>:
	0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
	0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
	0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
	0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

uint16_t update_crc(uint8_t* data_blk_ptr, uint16_t data_blk_size) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
	uint16_t crc_accum = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	81fb      	strh	r3, [r7, #14]
	uint16_t i, j;

	for(j = 0; j < data_blk_size; j++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	81bb      	strh	r3, [r7, #12]
 8001c90:	e019      	b.n	8001cc6 <update_crc+0x4a>
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	89ba      	ldrh	r2, [r7, #12]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	440a      	add	r2, r1
 8001c9e:	7812      	ldrb	r2, [r2, #0]
 8001ca0:	4053      	eors	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001ca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	897b      	ldrh	r3, [r7, #10]
 8001cb2:	490a      	ldr	r1, [pc, #40]	@ (8001cdc <update_crc+0x60>)
 8001cb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4053      	eors	r3, r2
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	81fb      	strh	r3, [r7, #14]
	for(j = 0; j < data_blk_size; j++) {
 8001cc0:	89bb      	ldrh	r3, [r7, #12]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	81bb      	strh	r3, [r7, #12]
 8001cc6:	89ba      	ldrh	r2, [r7, #12]
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d3e1      	bcc.n	8001c92 <update_crc+0x16>
	}

	return crc_accum;
 8001cce:	89fb      	ldrh	r3, [r7, #14]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200000cc 	.word	0x200000cc

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001dfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e00:	4907      	ldr	r1, [pc, #28]	@ (8001e20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40023800 	.word	0x40023800

08001e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001e28:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001e2c:	f7ff ffe2 	bl	8001df4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001e30:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e34:	f7ff ffde 	bl	8001df4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e38:	f7ff ff52 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ffa2 	bl	8001d8c <NVIC_EncodePriority>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	200d      	movs	r0, #13
 8001e4e:	f7ff ff73 	bl	8001d38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e52:	200d      	movs	r0, #13
 8001e54:	f7ff ff52 	bl	8001cfc <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e58:	f7ff ff42 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff92 	bl	8001d8c <NVIC_EncodePriority>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	200f      	movs	r0, #15
 8001e6e:	f7ff ff63 	bl	8001d38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e72:	200f      	movs	r0, #15
 8001e74:	f7ff ff42 	bl	8001cfc <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e78:	f7ff ff32 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff82 	bl	8001d8c <NVIC_EncodePriority>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	2010      	movs	r0, #16
 8001e8e:	f7ff ff53 	bl	8001d38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e92:	2010      	movs	r0, #16
 8001e94:	f7ff ff32 	bl	8001cfc <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e98:	f7ff ff22 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff72 	bl	8001d8c <NVIC_EncodePriority>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2011      	movs	r0, #17
 8001eae:	f7ff ff43 	bl	8001d38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001eb2:	2011      	movs	r0, #17
 8001eb4:	f7ff ff22 	bl	8001cfc <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001eb8:	f7ff ff12 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff ff62 	bl	8001d8c <NVIC_EncodePriority>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	2039      	movs	r0, #57	@ 0x39
 8001ece:	f7ff ff33 	bl	8001d38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ed2:	2039      	movs	r0, #57	@ 0x39
 8001ed4:	f7ff ff12 	bl	8001cfc <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ed8:	f7ff ff02 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff52 	bl	8001d8c <NVIC_EncodePriority>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4619      	mov	r1, r3
 8001eec:	2045      	movs	r0, #69	@ 0x45
 8001eee:	f7ff ff23 	bl	8001d38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001ef2:	2045      	movs	r0, #69	@ 0x45
 8001ef4:	f7ff ff02 	bl	8001cfc <__NVIC_EnableIRQ>

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <LL_AHB1_GRP1_EnableClock>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f08:	4907      	ldr	r1, [pc, #28]	@ (8001f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40023800 	.word	0x40023800

08001f2c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	463b      	mov	r3, r7
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f62:	2004      	movs	r0, #4
 8001f64:	f7ff ffca 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001f68:	2080      	movs	r0, #128	@ 0x80
 8001f6a:	f7ff ffc7 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7ff ffc4 	bl	8001efc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7ff ffc1 	bl	8001efc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel4_CS_GPIO_Port, Dynamixel4_CS_Pin);
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	4814      	ldr	r0, [pc, #80]	@ (8001fd0 <MX_GPIO_Init+0x84>)
 8001f7e:	f7ff ffd5 	bl	8001f2c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel6_CS_GPIO_Port, Dynamixel6_CS_Pin);
 8001f82:	2101      	movs	r1, #1
 8001f84:	4813      	ldr	r0, [pc, #76]	@ (8001fd4 <MX_GPIO_Init+0x88>)
 8001f86:	f7ff ffd1 	bl	8001f2c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Dynamixel4_CS_Pin;
 8001f8a:	2310      	movs	r3, #16
 8001f8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001f92:	2302      	movs	r3, #2
 8001f94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel4_CS_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480b      	ldr	r0, [pc, #44]	@ (8001fd0 <MX_GPIO_Init+0x84>)
 8001fa4:	f002 f8ba 	bl	800411c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Dynamixel6_CS_Pin;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fac:	2301      	movs	r3, #1
 8001fae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel6_CS_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4804      	ldr	r0, [pc, #16]	@ (8001fd4 <MX_GPIO_Init+0x88>)
 8001fc2:	f002 f8ab 	bl	800411c <LL_GPIO_Init>

}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <__NVIC_SetPriorityGrouping>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200a:	4a04      	ldr	r2, [pc, #16]	@ (800201c <__NVIC_SetPriorityGrouping+0x44>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	60d3      	str	r3, [r2, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002024:	4b05      	ldr	r3, [pc, #20]	@ (800203c <LL_RCC_HSE_EnableBypass+0x1c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a04      	ldr	r2, [pc, #16]	@ (800203c <LL_RCC_HSE_EnableBypass+0x1c>)
 800202a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800

08002040 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <LL_RCC_HSE_Enable+0x1c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <LL_RCC_HSE_Enable+0x1c>)
 800204a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800

08002060 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002064:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <LL_RCC_HSE_IsReady+0x24>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002070:	bf0c      	ite	eq
 8002072:	2301      	moveq	r3, #1
 8002074:	2300      	movne	r3, #0
 8002076:	b2db      	uxtb	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800

08002088 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <LL_RCC_SetSysClkSource+0x24>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 0203 	bic.w	r2, r3, #3
 8002098:	4904      	ldr	r1, [pc, #16]	@ (80020ac <LL_RCC_SetSysClkSource+0x24>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40023800 	.word	0x40023800

080020b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <LL_RCC_GetSysClkSource+0x18>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800

080020cc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020dc:	4904      	ldr	r1, [pc, #16]	@ (80020f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40023800 	.word	0x40023800

080020f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <LL_RCC_SetAPB1Prescaler+0x24>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002104:	4904      	ldr	r1, [pc, #16]	@ (8002118 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40023800 	.word	0x40023800

0800211c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800212c:	4904      	ldr	r1, [pc, #16]	@ (8002140 <LL_RCC_SetAPB2Prescaler+0x24>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40023800 	.word	0x40023800

08002144 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <LL_RCC_SetTIMPrescaler+0x28>)
 800214e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002152:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002156:	4905      	ldr	r1, [pc, #20]	@ (800216c <LL_RCC_SetTIMPrescaler+0x28>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40023800 	.word	0x40023800

08002170 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002174:	4b05      	ldr	r3, [pc, #20]	@ (800218c <LL_RCC_PLL_Enable+0x1c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a04      	ldr	r2, [pc, #16]	@ (800218c <LL_RCC_PLL_Enable+0x1c>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <LL_RCC_PLL_IsReady+0x24>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80021c6:	4b11      	ldr	r3, [pc, #68]	@ (800220c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	68f9      	ldr	r1, [r7, #12]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	4311      	orrs	r1, r2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	0192      	lsls	r2, r2, #6
 80021d8:	430a      	orrs	r2, r1
 80021da:	490c      	ldr	r1, [pc, #48]	@ (800220c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80021e0:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021e8:	4908      	ldr	r1, [pc, #32]	@ (800220c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 80021f8:	4904      	ldr	r1, [pc, #16]	@ (800220c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40023800 	.word	0x40023800
 8002210:	ffbf8000 	.word	0xffbf8000

08002214 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <LL_APB1_GRP1_EnableClock+0x2c>)
 800221e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002220:	4907      	ldr	r1, [pc, #28]	@ (8002240 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4313      	orrs	r3, r2
 8002226:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <LL_APB1_GRP1_EnableClock+0x2c>)
 800222a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4013      	ands	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40023800 	.word	0x40023800

08002244 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800224c:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <LL_APB2_GRP1_EnableClock+0x2c>)
 800224e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002250:	4907      	ldr	r1, [pc, #28]	@ (8002270 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <LL_APB2_GRP1_EnableClock+0x2c>)
 800225a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4013      	ands	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40023800 	.word	0x40023800

08002274 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <LL_FLASH_SetLatency+0x24>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 020f 	bic.w	r2, r3, #15
 8002284:	4904      	ldr	r1, [pc, #16]	@ (8002298 <LL_FLASH_SetLatency+0x24>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40023c00 	.word	0x40023c00

0800229c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <LL_FLASH_GetLatency+0x18>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d106      	bne.n	80022d4 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80022c6:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <LL_SYSTICK_SetClkSource+0x34>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a08      	ldr	r2, [pc, #32]	@ (80022ec <LL_SYSTICK_SetClkSource+0x34>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80022d2:	e005      	b.n	80022e0 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <LL_SYSTICK_SetClkSource+0x34>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a04      	ldr	r2, [pc, #16]	@ (80022ec <LL_SYSTICK_SetClkSource+0x34>)
 80022da:	f023 0304 	bic.w	r3, r3, #4
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <LL_SYSTICK_EnableIT+0x1c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <LL_SYSTICK_EnableIT+0x1c>)
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <LL_PWR_EnableOverDriveMode+0x1c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a04      	ldr	r2, [pc, #16]	@ (800232c <LL_PWR_EnableOverDriveMode+0x1c>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40007000 	.word	0x40007000

08002330 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002340:	4904      	ldr	r1, [pc, #16]	@ (8002354 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40007000 	.word	0x40007000

08002358 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800235c:	4b07      	ldr	r3, [pc, #28]	@ (800237c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40007000 	.word	0x40007000

08002380 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	601a      	str	r2, [r3, #0]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f06f 0201 	mvn.w	r2, #1
 80023ae:	611a      	str	r2, [r3, #16]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_USART_Enable>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <LL_USART_IsActiveFlag_TXE>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240c:	2b80      	cmp	r3, #128	@ 0x80
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	605a      	str	r2, [r3, #4]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_GPIO_SetOutputPin>:
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	619a      	str	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	0000      	movs	r0, r0
	...

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002466:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800246a:	f7ff feeb 	bl	8002244 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800246e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002472:	f7ff fecf 	bl	8002214 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002476:	2007      	movs	r0, #7
 8002478:	f7ff fdae 	bl	8001fd8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247c:	f000 f8d8 	bl	8002630 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_Init1msTick(180000000);			//Add here to fix MX generated code
 8002480:	4861      	ldr	r0, [pc, #388]	@ (8002608 <main+0x1a8>)
 8002482:	f002 fc1b 	bl	8004cbc <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002486:	2004      	movs	r0, #4
 8002488:	f7ff ff16 	bl	80022b8 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 800248c:	f7ff ff30 	bl	80022f0 <LL_SYSTICK_EnableIT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002490:	f7ff fd5c 	bl	8001f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8002494:	f7ff fcc6 	bl	8001e24 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002498:	f001 fb60 	bl	8003b5c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800249c:	f001 f824 	bl	80034e8 <MX_TIM1_Init>
  MX_UART4_Init();
 80024a0:	f001 fa9c 	bl	80039dc <MX_UART4_Init>
  MX_USART6_UART_Init();
 80024a4:	f001 fc08 	bl	8003cb8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 80024a8:	4858      	ldr	r0, [pc, #352]	@ (800260c <main+0x1ac>)
 80024aa:	f7ff ff79 	bl	80023a0 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM1);
 80024ae:	4857      	ldr	r0, [pc, #348]	@ (800260c <main+0x1ac>)
 80024b0:	f7ff ff84 	bl	80023bc <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 80024b4:	4855      	ldr	r0, [pc, #340]	@ (800260c <main+0x1ac>)
 80024b6:	f7ff ff63 	bl	8002380 <LL_TIM_EnableCounter>
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80024ba:	2110      	movs	r1, #16
 80024bc:	4854      	ldr	r0, [pc, #336]	@ (8002610 <main+0x1b0>)
 80024be:	f7ff ffbf 	bl	8002440 <LL_GPIO_SetOutputPin>
  LL_mDelay(1); // ★ 加入延遲穩定方向切換（必要！）
 80024c2:	2001      	movs	r0, #1
 80024c4:	f002 fc08 	bl	8004cd8 <LL_mDelay>
  uart4_dma_tx_start();
 80024c8:	f000 fd7c 	bl	8002fc4 <uart4_dma_tx_start>
  usart6_dma_tx_start();
 80024cc:	f000 fe02 	bl	80030d4 <usart6_dma_tx_start>
  printf("start\r\n");
 80024d0:	4850      	ldr	r0, [pc, #320]	@ (8002614 <main+0x1b4>)
 80024d2:	f002 fd61 	bl	8004f98 <puts>
  LL_mDelay(100);
 80024d6:	2064      	movs	r0, #100	@ 0x64
 80024d8:	f002 fbfe 	bl	8004cd8 <LL_mDelay>
  UART4_DMA_Config();
 80024dc:	f7fe fe12 	bl	8001104 <UART4_DMA_Config>
  USART6_DMA_Config();
 80024e0:	f7fe fe66 	bl	80011b0 <USART6_DMA_Config>
  LL_USART_Enable(UART4);
 80024e4:	484c      	ldr	r0, [pc, #304]	@ (8002618 <main+0x1b8>)
 80024e6:	f7ff ff79 	bl	80023dc <LL_USART_Enable>
  LL_USART_Enable(USART6);
 80024ea:	484c      	ldr	r0, [pc, #304]	@ (800261c <main+0x1bc>)
 80024ec:	f7ff ff76 	bl	80023dc <LL_USART_Enable>
  uint8_t ID_list[2] = { 1, 2 };
 80024f0:	f240 2301 	movw	r3, #513	@ 0x201
 80024f4:	80bb      	strh	r3, [r7, #4]
  SyncWrite_StatusReturnLevel(2, ID_list, 1);
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2201      	movs	r2, #1
 80024fa:	4619      	mov	r1, r3
 80024fc:	2002      	movs	r0, #2
 80024fe:	f7ff fa65 	bl	80019cc <SyncWrite_StatusReturnLevel>
  LL_mDelay(10);
 8002502:	200a      	movs	r0, #10
 8002504:	f002 fbe8 	bl	8004cd8 <LL_mDelay>
//  PING(1);
  SyncWrite_DisableDynamixels(2, ID_list);
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	4619      	mov	r1, r3
 800250c:	2002      	movs	r0, #2
 800250e:	f7ff f97d 	bl	800180c <SyncWrite_DisableDynamixels>

  for(int id = 1; id <= 2; id++) {
 8002512:	2301      	movs	r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	e010      	b.n	800253a <main+0xda>
	  TorqueEnable(id,1);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f87e 	bl	8001620 <TorqueEnable>
	  while (dynamixel_Ready != 1);
 8002524:	bf00      	nop
 8002526:	4b3e      	ldr	r3, [pc, #248]	@ (8002620 <main+0x1c0>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d1fb      	bne.n	8002526 <main+0xc6>
      LL_mDelay(1);
 800252e:	2001      	movs	r0, #1
 8002530:	f002 fbd2 	bl	8004cd8 <LL_mDelay>
  for(int id = 1; id <= 2; id++) {
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3301      	adds	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b02      	cmp	r3, #2
 800253e:	ddeb      	ble.n	8002518 <main+0xb8>
  }

  for(int id = 1; id <= 2; id++) {
 8002540:	2301      	movs	r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	e00b      	b.n	800255e <main+0xfe>
      OperatingMode(id, POSITION);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2103      	movs	r1, #3
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe ffef 	bl	8001530 <OperatingMode>
      LL_mDelay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f002 fbc0 	bl	8004cd8 <LL_mDelay>
  for(int id = 1; id <= 2; id++) {
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	3301      	adds	r3, #1
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b02      	cmp	r3, #2
 8002562:	ddf0      	ble.n	8002546 <main+0xe6>
//  for(int id = 3; id < 9; id++) {
//      TorqueEnable(1, 1);
//      LL_mDelay(1);
//      }
//
  SyncWrite_EnableDynamixels(2, ID_list);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	2002      	movs	r0, #2
 800256a:	f7ff f9bf 	bl	80018ec <SyncWrite_EnableDynamixels>
  LL_mDelay(1);
 800256e:	2001      	movs	r0, #1
 8002570:	f002 fbb2 	bl	8004cd8 <LL_mDelay>
//  PING(1);

	while(1){
		SyncLED_Enable(2, ID_list);
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	4619      	mov	r1, r3
 8002578:	2002      	movs	r0, #2
 800257a:	f7ff fb0f 	bl	8001b9c <SyncLED_Enable>
		LL_mDelay(100);
 800257e:	2064      	movs	r0, #100	@ 0x64
 8002580:	f002 fbaa 	bl	8004cd8 <LL_mDelay>
		SyncLED_Disable(2, ID_list);
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	2002      	movs	r0, #2
 800258a:	f7ff fa97 	bl	8001abc <SyncLED_Disable>
		LL_mDelay(100);
 800258e:	2064      	movs	r0, #100	@ 0x64
 8002590:	f002 fba2 	bl	8004cd8 <LL_mDelay>
		for(a=110; a>=20;a-=90){
 8002594:	4b23      	ldr	r3, [pc, #140]	@ (8002624 <main+0x1c4>)
 8002596:	4a24      	ldr	r2, [pc, #144]	@ (8002628 <main+0x1c8>)
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e023      	b.n	80025e4 <main+0x184>
			PositionWithVelocity(1,a/0.088,100);
 800259c:	4b21      	ldr	r3, [pc, #132]	@ (8002624 <main+0x1c4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ffe9 	bl	8000578 <__aeabi_f2d>
 80025a6:	a316      	add	r3, pc, #88	@ (adr r3, 8002600 <main+0x1a0>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fe f966 	bl	800087c <__aeabi_ddiv>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7fe fa48 	bl	8000a4c <__aeabi_d2iz>
 80025bc:	4603      	mov	r3, r0
 80025be:	2264      	movs	r2, #100	@ 0x64
 80025c0:	4619      	mov	r1, r3
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7ff f896 	bl	80016f4 <PositionWithVelocity>
			LL_mDelay(1000);
 80025c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025cc:	f002 fb84 	bl	8004cd8 <LL_mDelay>
		for(a=110; a>=20;a-=90){
 80025d0:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <main+0x1c4>)
 80025d2:	edd3 7a00 	vldr	s15, [r3]
 80025d6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800262c <main+0x1cc>
 80025da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <main+0x1c4>)
 80025e0:	edc3 7a00 	vstr	s15, [r3]
 80025e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <main+0x1c4>)
 80025e6:	edd3 7a00 	vldr	s15, [r3]
 80025ea:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80025ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	dad1      	bge.n	800259c <main+0x13c>
		SyncLED_Enable(2, ID_list);
 80025f8:	e7bc      	b.n	8002574 <main+0x114>
 80025fa:	bf00      	nop
 80025fc:	f3af 8000 	nop.w
 8002600:	020c49ba 	.word	0x020c49ba
 8002604:	3fb6872b 	.word	0x3fb6872b
 8002608:	0aba9500 	.word	0x0aba9500
 800260c:	40010000 	.word	0x40010000
 8002610:	40020000 	.word	0x40020000
 8002614:	08005cfc 	.word	0x08005cfc
 8002618:	40004c00 	.word	0x40004c00
 800261c:	40011400 	.word	0x40011400
 8002620:	20000000 	.word	0x20000000
 8002624:	200002cc 	.word	0x200002cc
 8002628:	42dc0000 	.word	0x42dc0000
 800262c:	42b40000 	.word	0x42b40000

08002630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8002634:	2005      	movs	r0, #5
 8002636:	f7ff fe1d 	bl	8002274 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800263a:	bf00      	nop
 800263c:	f7ff fe2e 	bl	800229c <LL_FLASH_GetLatency>
 8002640:	4603      	mov	r3, r0
 8002642:	2b05      	cmp	r3, #5
 8002644:	d1fa      	bne.n	800263c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002646:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800264a:	f7ff fe71 	bl	8002330 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800264e:	f7ff fe5f 	bl	8002310 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 8002652:	f7ff fce5 	bl	8002020 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8002656:	f7ff fcf3 	bl	8002040 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800265a:	bf00      	nop
 800265c:	f7ff fd00 	bl	8002060 <LL_RCC_HSE_IsReady>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	d1fa      	bne.n	800265c <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 8002666:	2300      	movs	r3, #0
 8002668:	22b4      	movs	r2, #180	@ 0xb4
 800266a:	2104      	movs	r1, #4
 800266c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002670:	f7ff fda2 	bl	80021b8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002674:	f7ff fd7c 	bl	8002170 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002678:	bf00      	nop
 800267a:	f7ff fd89 	bl	8002190 <LL_RCC_PLL_IsReady>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d1fa      	bne.n	800267a <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8002684:	bf00      	nop
 8002686:	f7ff fe67 	bl	8002358 <LL_PWR_IsActiveFlag_VOS>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0fa      	beq.n	8002686 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff fd1b 	bl	80020cc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8002696:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800269a:	f7ff fd2b 	bl	80020f4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800269e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80026a2:	f7ff fd3b 	bl	800211c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026a6:	2002      	movs	r0, #2
 80026a8:	f7ff fcee 	bl	8002088 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026ac:	bf00      	nop
 80026ae:	f7ff fcff 	bl	80020b0 <LL_RCC_GetSysClkSource>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d1fa      	bne.n	80026ae <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 80026b8:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <SystemClock_Config+0xa0>)
 80026ba:	f002 faff 	bl	8004cbc <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 80026be:	4804      	ldr	r0, [pc, #16]	@ (80026d0 <SystemClock_Config+0xa0>)
 80026c0:	f002 fb30 	bl	8004d24 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff fd3d 	bl	8002144 <LL_RCC_SetTIMPrescaler>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	0aba9500 	.word	0x0aba9500

080026d4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e011      	b.n	800270a <_write+0x36>
		LL_USART_TransmitData8(USART2, (uint8_t)*ptr++);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	60ba      	str	r2, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	480a      	ldr	r0, [pc, #40]	@ (800271c <_write+0x48>)
 80026f2:	f7ff fe96 	bl	8002422 <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2) == RESET)
 80026f6:	bf00      	nop
 80026f8:	4808      	ldr	r0, [pc, #32]	@ (800271c <_write+0x48>)
 80026fa:	f7ff fe7f 	bl	80023fc <LL_USART_IsActiveFlag_TXE>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f9      	beq.n	80026f8 <_write+0x24>
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	dbe9      	blt.n	80026e6 <_write+0x12>
			;
	}
	return len;
 8002712:	687b      	ldr	r3, [r7, #4]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40004400 	.word	0x40004400

08002720 <LL_DMA_EnableStream>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800272a:	4a0c      	ldr	r2, [pc, #48]	@ (800275c <LL_DMA_EnableStream+0x3c>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4908      	ldr	r1, [pc, #32]	@ (800275c <LL_DMA_EnableStream+0x3c>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	440a      	add	r2, r1
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	4611      	mov	r1, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	440a      	add	r2, r1
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	08005d94 	.word	0x08005d94

08002760 <LL_DMA_DisableStream>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800276a:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <LL_DMA_DisableStream+0x3c>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4908      	ldr	r1, [pc, #32]	@ (800279c <LL_DMA_DisableStream+0x3c>)
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	440a      	add	r2, r1
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	4611      	mov	r1, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	440a      	add	r2, r1
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6013      	str	r3, [r2, #0]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	08005d94 	.word	0x08005d94

080027a0 <LL_DMA_IsEnabledStream>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <LL_DMA_IsEnabledStream+0x34>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	bf0c      	ite	eq
 80027c2:	2301      	moveq	r3, #1
 80027c4:	2300      	movne	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	08005d94 	.word	0x08005d94

080027d8 <LL_DMA_SetDataLength>:
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80027e4:	4a0d      	ldr	r2, [pc, #52]	@ (800281c <LL_DMA_SetDataLength+0x44>)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4413      	add	r3, r2
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	4908      	ldr	r1, [pc, #32]	@ (800281c <LL_DMA_SetDataLength+0x44>)
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	440a      	add	r2, r1
 80027fe:	7812      	ldrb	r2, [r2, #0]
 8002800:	4611      	mov	r1, r2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	440a      	add	r2, r1
 8002806:	4611      	mov	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	08005d94 	.word	0x08005d94

08002820 <LL_DMA_SetMemoryAddress>:
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800282c:	4a07      	ldr	r2, [pc, #28]	@ (800284c <LL_DMA_SetMemoryAddress+0x2c>)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4413      	add	r3, r2
 800283a:	461a      	mov	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	08005d94 	.word	0x08005d94

08002850 <LL_DMA_SetPeriphAddress>:
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800285c:	4a07      	ldr	r2, [pc, #28]	@ (800287c <LL_DMA_SetPeriphAddress+0x2c>)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4413      	add	r3, r2
 800286a:	461a      	mov	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6093      	str	r3, [r2, #8]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	08005d94 	.word	0x08005d94

08002880 <LL_DMA_IsActiveFlag_TC1>:
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_DMA_IsActiveFlag_TC2>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_DMA_IsActiveFlag_TC4>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_DMA_IsActiveFlag_TC5>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_DMA_IsActiveFlag_TC6>:
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_DMA_ClearFlag_HT1>:
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_DMA_ClearFlag_HT2>:
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002970:	609a      	str	r2, [r3, #8]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_DMA_ClearFlag_HT4>:
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF4);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2210      	movs	r2, #16
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_DMA_ClearFlag_HT6>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029a6:	60da      	str	r2, [r3, #12]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_DMA_ClearFlag_TC1>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_DMA_ClearFlag_TC2>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029de:	609a      	str	r2, [r3, #8]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_DMA_ClearFlag_TC4>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	60da      	str	r2, [r3, #12]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_DMA_ClearFlag_TC5>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a14:	60da      	str	r2, [r3, #12]
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_DMA_ClearFlag_TC6>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a30:	60da      	str	r2, [r3, #12]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_DMA_ClearFlag_TE1>:
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4c:	609a      	str	r2, [r3, #8]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_DMA_ClearFlag_TE2>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_DMA_ClearFlag_TE4>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2208      	movs	r2, #8
 8002a82:	60da      	str	r2, [r3, #12]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_DMA_ClearFlag_TE6>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a9e:	60da      	str	r2, [r3, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_DMA_EnableIT_TC>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae8 <LL_DMA_EnableIT_TC+0x3c>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4908      	ldr	r1, [pc, #32]	@ (8002ae8 <LL_DMA_EnableIT_TC+0x3c>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	440a      	add	r2, r1
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	f043 0310 	orr.w	r3, r3, #16
 8002ad8:	6013      	str	r3, [r2, #0]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	08005d94 	.word	0x08005d94

08002aec <LL_TIM_ClearFlag_UPDATE>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f06f 0201 	mvn.w	r2, #1
 8002afa:	611a      	str	r2, [r3, #16]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_USART_IsActiveFlag_TC>:
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3e:	2b40      	cmp	r3, #64	@ 0x40
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_USART_ClearFlag_TC>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b62:	601a      	str	r2, [r3, #0]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_USART_DisableIT_TC>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	e853 3f00 	ldrex	r3, [r3]
 8002b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	330c      	adds	r3, #12
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	61ba      	str	r2, [r7, #24]
 8002b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	6979      	ldr	r1, [r7, #20]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e7      	bne.n	8002b78 <LL_USART_DisableIT_TC+0x8>
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3724      	adds	r7, #36	@ 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_USART_EnableDMAReq_RX>:
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b089      	sub	sp, #36	@ 0x24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	61ba      	str	r2, [r7, #24]
 8002bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	6979      	ldr	r1, [r7, #20]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	613b      	str	r3, [r7, #16]
   return(result);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e7      	bne.n	8002bbe <LL_USART_EnableDMAReq_RX+0x8>
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	3724      	adds	r7, #36	@ 0x24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_USART_EnableDMAReq_TX>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	@ 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3314      	adds	r3, #20
 8002c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3314      	adds	r3, #20
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	61ba      	str	r2, [r7, #24]
 8002c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6979      	ldr	r1, [r7, #20]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e7      	bne.n	8002c04 <LL_USART_EnableDMAReq_TX+0x8>
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_USART_DisableDMAReq_TX>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	b089      	sub	sp, #36	@ 0x24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3314      	adds	r3, #20
 8002c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3314      	adds	r3, #20
 8002c64:	69fa      	ldr	r2, [r7, #28]
 8002c66:	61ba      	str	r2, [r7, #24]
 8002c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	e841 2300 	strex	r3, r2, [r1]
 8002c72:	613b      	str	r3, [r7, #16]
   return(result);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1e7      	bne.n	8002c4a <LL_USART_DisableDMAReq_TX+0x8>
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	3724      	adds	r7, #36	@ 0x24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_USART_DMA_GetRegAddr>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_GPIO_ResetOutputPin>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	041a      	lsls	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	619a      	str	r2, [r3, #24]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cc2:	bf00      	nop
 8002cc4:	e7fd      	b.n	8002cc2 <NMI_Handler+0x4>

08002cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <HardFault_Handler+0x4>

08002cce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd2:	bf00      	nop
 8002cd4:	e7fd      	b.n	8002cd2 <MemManage_Handler+0x4>

08002cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <BusFault_Handler+0x4>

08002cde <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce2:	bf00      	nop
 8002ce4:	e7fd      	b.n	8002ce2 <UsageFault_Handler+0x4>

08002ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1)) {
 8002d24:	4814      	ldr	r0, [pc, #80]	@ (8002d78 <DMA1_Stream2_IRQHandler+0x58>)
 8002d26:	f7ff fdbf 	bl	80028a8 <LL_DMA_IsActiveFlag_TC2>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d021      	beq.n	8002d74 <DMA1_Stream2_IRQHandler+0x54>
			LL_DMA_ClearFlag_TC2(DMA1);
 8002d30:	4811      	ldr	r0, [pc, #68]	@ (8002d78 <DMA1_Stream2_IRQHandler+0x58>)
 8002d32:	f7ff fe4d 	bl	80029d0 <LL_DMA_ClearFlag_TC2>
			printf("stream2 it\r\n");
 8002d36:	4811      	ldr	r0, [pc, #68]	@ (8002d7c <DMA1_Stream2_IRQHandler+0x5c>)
 8002d38:	f002 f92e 	bl	8004f98 <puts>
			readStatusPacket_pos_DMA(dynamixel_position);
 8002d3c:	4810      	ldr	r0, [pc, #64]	@ (8002d80 <DMA1_Stream2_IRQHandler+0x60>)
 8002d3e:	f7fe fb8f 	bl	8001460 <readStatusPacket_pos_DMA>
//			readStatusPacket_PING(dynamixel_position);
//	        readStatusPacket_pos_vel_DMA(dynamixel_position, dynamixel_velocity);
//	        readStatusPacket_pos_vel_cur_DMA(dynamixel_position, dynamixel_velocity, dynamixel_current);
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8002d42:	2102      	movs	r1, #2
 8002d44:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <DMA1_Stream2_IRQHandler+0x58>)
 8002d46:	f7ff fd0b 	bl	8002760 <LL_DMA_DisableStream>
			Packet_Return -= 1;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <DMA1_Stream2_IRQHandler+0x64>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <DMA1_Stream2_IRQHandler+0x64>)
 8002d54:	701a      	strb	r2, [r3, #0]
			if(Packet_Return == 0) {
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <DMA1_Stream2_IRQHandler+0x64>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <DMA1_Stream2_IRQHandler+0x4c>
				Is_dynamixel_GetData = 1;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <DMA1_Stream2_IRQHandler+0x68>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
				dynamixel_Ready = 1;
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <DMA1_Stream2_IRQHandler+0x6c>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002d6a:	e003      	b.n	8002d74 <DMA1_Stream2_IRQHandler+0x54>
			    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4802      	ldr	r0, [pc, #8]	@ (8002d78 <DMA1_Stream2_IRQHandler+0x58>)
 8002d70:	f7ff fcd6 	bl	8002720 <LL_DMA_EnableStream>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40026000 	.word	0x40026000
 8002d7c:	08005d04 	.word	0x08005d04
 8002d80:	20000358 	.word	0x20000358
 8002d84:	20000001 	.word	0x20000001
 8002d88:	200003a4 	.word	0x200003a4
 8002d8c:	20000000 	.word	0x20000000

08002d90 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1) {
 8002d94:	480c      	ldr	r0, [pc, #48]	@ (8002dc8 <DMA1_Stream4_IRQHandler+0x38>)
 8002d96:	f7ff fd9b 	bl	80028d0 <LL_DMA_IsActiveFlag_TC4>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d111      	bne.n	8002dc4 <DMA1_Stream4_IRQHandler+0x34>
		    printf("DMA TX Complete\r\n");
 8002da0:	480a      	ldr	r0, [pc, #40]	@ (8002dcc <DMA1_Stream4_IRQHandler+0x3c>)
 8002da2:	f002 f8f9 	bl	8004f98 <puts>
			LL_DMA_ClearFlag_TC4(DMA1);
 8002da6:	4808      	ldr	r0, [pc, #32]	@ (8002dc8 <DMA1_Stream4_IRQHandler+0x38>)
 8002da8:	f7ff fe20 	bl	80029ec <LL_DMA_ClearFlag_TC4>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8002dac:	2104      	movs	r1, #4
 8002dae:	4806      	ldr	r0, [pc, #24]	@ (8002dc8 <DMA1_Stream4_IRQHandler+0x38>)
 8002db0:	f7ff fcd6 	bl	8002760 <LL_DMA_DisableStream>
			LL_USART_DisableDMAReq_TX(UART4);
 8002db4:	4806      	ldr	r0, [pc, #24]	@ (8002dd0 <DMA1_Stream4_IRQHandler+0x40>)
 8002db6:	f7ff ff44 	bl	8002c42 <LL_USART_DisableDMAReq_TX>
			uart4_dma_rx_start();
 8002dba:	f000 f945 	bl	8003048 <uart4_dma_rx_start>
			dynamixel_Ready = 1;
 8002dbe:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <DMA1_Stream4_IRQHandler+0x44>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40026000 	.word	0x40026000
 8002dcc:	08005d10 	.word	0x08005d10
 8002dd0:	40004c00 	.word	0x40004c00
 8002dd4:	20000000 	.word	0x20000000

08002dd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 8002ddc:	4807      	ldr	r0, [pc, #28]	@ (8002dfc <DMA1_Stream5_IRQHandler+0x24>)
 8002dde:	f7ff fd8a 	bl	80028f6 <LL_DMA_IsActiveFlag_TC5>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d106      	bne.n	8002df6 <DMA1_Stream5_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC5(DMA1);
 8002de8:	4804      	ldr	r0, [pc, #16]	@ (8002dfc <DMA1_Stream5_IRQHandler+0x24>)
 8002dea:	f7ff fe0c 	bl	8002a06 <LL_DMA_ClearFlag_TC5>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8002dee:	2105      	movs	r1, #5
 8002df0:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <DMA1_Stream5_IRQHandler+0x24>)
 8002df2:	f7ff fcb5 	bl	8002760 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40026000 	.word	0x40026000

08002e00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1) {
 8002e04:	4807      	ldr	r0, [pc, #28]	@ (8002e24 <DMA1_Stream6_IRQHandler+0x24>)
 8002e06:	f7ff fd8a 	bl	800291e <LL_DMA_IsActiveFlag_TC6>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d106      	bne.n	8002e1e <DMA1_Stream6_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC6(DMA1);
 8002e10:	4804      	ldr	r0, [pc, #16]	@ (8002e24 <DMA1_Stream6_IRQHandler+0x24>)
 8002e12:	f7ff fe06 	bl	8002a22 <LL_DMA_ClearFlag_TC6>

			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8002e16:	2106      	movs	r1, #6
 8002e18:	4802      	ldr	r0, [pc, #8]	@ (8002e24 <DMA1_Stream6_IRQHandler+0x24>)
 8002e1a:	f7ff fca1 	bl	8002760 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40026000 	.word	0x40026000

08002e28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 8002e2c:	4806      	ldr	r0, [pc, #24]	@ (8002e48 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002e2e:	f7ff fe6b 	bl	8002b08 <LL_TIM_IsActiveFlag_UPDATE>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <TIM1_UP_TIM10_IRQHandler+0x1c>
			LL_TIM_ClearFlag_UPDATE(TIM1);
 8002e38:	4803      	ldr	r0, [pc, #12]	@ (8002e48 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002e3a:	f7ff fe57 	bl	8002aec <LL_TIM_ClearFlag_UPDATE>
			start_trans_mx = 1;
 8002e3e:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	200003c8 	.word	0x200003c8

08002e50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	printf("uart4 it\r\n");
 8002e54:	4812      	ldr	r0, [pc, #72]	@ (8002ea0 <UART4_IRQHandler+0x50>)
 8002e56:	f002 f89f 	bl	8004f98 <puts>
	LL_mDelay(100);
 8002e5a:	2064      	movs	r0, #100	@ 0x64
 8002e5c:	f001 ff3c 	bl	8004cd8 <LL_mDelay>
	if(LL_USART_IsActiveFlag_TC(UART4) == 1) {
 8002e60:	4810      	ldr	r0, [pc, #64]	@ (8002ea4 <UART4_IRQHandler+0x54>)
 8002e62:	f7ff fe64 	bl	8002b2e <LL_USART_IsActiveFlag_TC>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d117      	bne.n	8002e9c <UART4_IRQHandler+0x4c>
		printf("TX complete, switching to RX mode\r\n");
 8002e6c:	480e      	ldr	r0, [pc, #56]	@ (8002ea8 <UART4_IRQHandler+0x58>)
 8002e6e:	f002 f893 	bl	8004f98 <puts>
		LL_USART_ClearFlag_TC(UART4);
 8002e72:	480c      	ldr	r0, [pc, #48]	@ (8002ea4 <UART4_IRQHandler+0x54>)
 8002e74:	f7ff fe6e 	bl	8002b54 <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(UART4);  // 避免反覆進中斷
 8002e78:	480a      	ldr	r0, [pc, #40]	@ (8002ea4 <UART4_IRQHandler+0x54>)
 8002e7a:	f7ff fe79 	bl	8002b70 <LL_USART_DisableIT_TC>
	#if USE_THREE_STATE_GATE == 1
		LL_mDelay(1);  // 多數 buffer 切換需要時間
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f001 ff2a 	bl	8004cd8 <LL_mDelay>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8002e84:	2110      	movs	r1, #16
 8002e86:	4809      	ldr	r0, [pc, #36]	@ (8002eac <UART4_IRQHandler+0x5c>)
 8002e88:	f7ff ff0a 	bl	8002ca0 <LL_GPIO_ResetOutputPin>
	#else
	    LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_RX); //change UART direction
	#endif
		if(Packet_Return == 0) {
 8002e8c:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <UART4_IRQHandler+0x60>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <UART4_IRQHandler+0x4c>
			dynamixel_Ready = 1;
 8002e94:	4b07      	ldr	r3, [pc, #28]	@ (8002eb4 <UART4_IRQHandler+0x64>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
			return;
 8002e9a:	bf00      	nop
			}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	08005d24 	.word	0x08005d24
 8002ea4:	40004c00 	.word	0x40004c00
 8002ea8:	08005d30 	.word	0x08005d30
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	20000001 	.word	0x20000001
 8002eb4:	20000000 	.word	0x20000000

08002eb8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA2)) {
 8002ebc:	4814      	ldr	r0, [pc, #80]	@ (8002f10 <DMA2_Stream1_IRQHandler+0x58>)
 8002ebe:	f7ff fcdf 	bl	8002880 <LL_DMA_IsActiveFlag_TC1>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d021      	beq.n	8002f0c <DMA2_Stream1_IRQHandler+0x54>
		LL_DMA_ClearFlag_TC1(DMA2);
 8002ec8:	4811      	ldr	r0, [pc, #68]	@ (8002f10 <DMA2_Stream1_IRQHandler+0x58>)
 8002eca:	f7ff fd73 	bl	80029b4 <LL_DMA_ClearFlag_TC1>
		printf("stream1 it\r\n");
 8002ece:	4811      	ldr	r0, [pc, #68]	@ (8002f14 <DMA2_Stream1_IRQHandler+0x5c>)
 8002ed0:	f002 f862 	bl	8004f98 <puts>
		readStatusPacket_pos_DMA(dynamixel_position);
 8002ed4:	4810      	ldr	r0, [pc, #64]	@ (8002f18 <DMA2_Stream1_IRQHandler+0x60>)
 8002ed6:	f7fe fac3 	bl	8001460 <readStatusPacket_pos_DMA>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8002eda:	2101      	movs	r1, #1
 8002edc:	480c      	ldr	r0, [pc, #48]	@ (8002f10 <DMA2_Stream1_IRQHandler+0x58>)
 8002ede:	f7ff fc3f 	bl	8002760 <LL_DMA_DisableStream>
		Packet_Return -= 1;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <DMA2_Stream1_IRQHandler+0x64>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <DMA2_Stream1_IRQHandler+0x64>)
 8002eec:	701a      	strb	r2, [r3, #0]
		if(Packet_Return == 0) {
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <DMA2_Stream1_IRQHandler+0x64>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <DMA2_Stream1_IRQHandler+0x4c>
			Is_dynamixel_GetData = 1;
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <DMA2_Stream1_IRQHandler+0x68>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
			dynamixel_Ready = 1;
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <DMA2_Stream1_IRQHandler+0x6c>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002f02:	e003      	b.n	8002f0c <DMA2_Stream1_IRQHandler+0x54>
			LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8002f04:	2101      	movs	r1, #1
 8002f06:	4802      	ldr	r0, [pc, #8]	@ (8002f10 <DMA2_Stream1_IRQHandler+0x58>)
 8002f08:	f7ff fc0a 	bl	8002720 <LL_DMA_EnableStream>
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40026400 	.word	0x40026400
 8002f14:	08005d54 	.word	0x08005d54
 8002f18:	20000358 	.word	0x20000358
 8002f1c:	20000001 	.word	0x20000001
 8002f20:	200003a4 	.word	0x200003a4
 8002f24:	20000000 	.word	0x20000000

08002f28 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA2) == 1) {
 8002f2c:	480c      	ldr	r0, [pc, #48]	@ (8002f60 <DMA2_Stream6_IRQHandler+0x38>)
 8002f2e:	f7ff fcf6 	bl	800291e <LL_DMA_IsActiveFlag_TC6>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d111      	bne.n	8002f5c <DMA2_Stream6_IRQHandler+0x34>
		printf("DMA TX Complete\r\n");
 8002f38:	480a      	ldr	r0, [pc, #40]	@ (8002f64 <DMA2_Stream6_IRQHandler+0x3c>)
 8002f3a:	f002 f82d 	bl	8004f98 <puts>
		LL_DMA_ClearFlag_TC6(DMA2);
 8002f3e:	4808      	ldr	r0, [pc, #32]	@ (8002f60 <DMA2_Stream6_IRQHandler+0x38>)
 8002f40:	f7ff fd6f 	bl	8002a22 <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8002f44:	2106      	movs	r1, #6
 8002f46:	4806      	ldr	r0, [pc, #24]	@ (8002f60 <DMA2_Stream6_IRQHandler+0x38>)
 8002f48:	f7ff fc0a 	bl	8002760 <LL_DMA_DisableStream>
		LL_USART_DisableDMAReq_TX(USART6);
 8002f4c:	4806      	ldr	r0, [pc, #24]	@ (8002f68 <DMA2_Stream6_IRQHandler+0x40>)
 8002f4e:	f7ff fe78 	bl	8002c42 <LL_USART_DisableDMAReq_TX>
		usart6_dma_rx_start();
 8002f52:	f000 f901 	bl	8003158 <usart6_dma_rx_start>
		dynamixel_Ready = 1;
 8002f56:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <DMA2_Stream6_IRQHandler+0x44>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40026400 	.word	0x40026400
 8002f64:	08005d10 	.word	0x08005d10
 8002f68:	40011400 	.word	0x40011400
 8002f6c:	20000000 	.word	0x20000000

08002f70 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	printf("usart6 it\r\n");
 8002f74:	480d      	ldr	r0, [pc, #52]	@ (8002fac <USART6_IRQHandler+0x3c>)
 8002f76:	f002 f80f 	bl	8004f98 <puts>
//		LL_mDelay(100);
		if(LL_USART_IsActiveFlag_TC(USART6) == 1) {
 8002f7a:	480d      	ldr	r0, [pc, #52]	@ (8002fb0 <USART6_IRQHandler+0x40>)
 8002f7c:	f7ff fdd7 	bl	8002b2e <LL_USART_IsActiveFlag_TC>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d111      	bne.n	8002faa <USART6_IRQHandler+0x3a>
			    printf("TX complete, switching to RX mode\r\n");
 8002f86:	480b      	ldr	r0, [pc, #44]	@ (8002fb4 <USART6_IRQHandler+0x44>)
 8002f88:	f002 f806 	bl	8004f98 <puts>
			    LL_USART_ClearFlag_TC(USART6);
 8002f8c:	4808      	ldr	r0, [pc, #32]	@ (8002fb0 <USART6_IRQHandler+0x40>)
 8002f8e:	f7ff fde1 	bl	8002b54 <LL_USART_ClearFlag_TC>
		#if USE_THREE_STATE_GATE == 1
				LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8002f92:	2101      	movs	r1, #1
 8002f94:	4808      	ldr	r0, [pc, #32]	@ (8002fb8 <USART6_IRQHandler+0x48>)
 8002f96:	f7ff fe83 	bl	8002ca0 <LL_GPIO_ResetOutputPin>
		#else
				LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_RX); //change UART direction
		#endif
					if(Packet_Return == 0) {
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <USART6_IRQHandler+0x4c>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <USART6_IRQHandler+0x3a>
						dynamixel_Ready = 1;
 8002fa2:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <USART6_IRQHandler+0x50>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
						return;
 8002fa8:	bf00      	nop
		}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	08005d60 	.word	0x08005d60
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	08005d30 	.word	0x08005d30
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	20000001 	.word	0x20000001
 8002fc0:	20000000 	.word	0x20000000

08002fc4 <uart4_dma_tx_start>:

/* USER CODE BEGIN 1 */
void uart4_dma_tx_start(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
    printf("DMA4 started\r\n");
 8002fc8:	481a      	ldr	r0, [pc, #104]	@ (8003034 <uart4_dma_tx_start+0x70>)
 8002fca:	f001 ffe5 	bl	8004f98 <puts>
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8002fce:	2104      	movs	r1, #4
 8002fd0:	4819      	ldr	r0, [pc, #100]	@ (8003038 <uart4_dma_tx_start+0x74>)
 8002fd2:	f7ff fbc5 	bl	8002760 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_4));
 8002fd6:	bf00      	nop
 8002fd8:	2104      	movs	r1, #4
 8002fda:	4817      	ldr	r0, [pc, #92]	@ (8003038 <uart4_dma_tx_start+0x74>)
 8002fdc:	f7ff fbe0 	bl	80027a0 <LL_DMA_IsEnabledStream>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f8      	bne.n	8002fd8 <uart4_dma_tx_start+0x14>

    LL_DMA_ClearFlag_TC4(DMA1);
 8002fe6:	4814      	ldr	r0, [pc, #80]	@ (8003038 <uart4_dma_tx_start+0x74>)
 8002fe8:	f7ff fd00 	bl	80029ec <LL_DMA_ClearFlag_TC4>
    LL_DMA_ClearFlag_TE4(DMA1);
 8002fec:	4812      	ldr	r0, [pc, #72]	@ (8003038 <uart4_dma_tx_start+0x74>)
 8002fee:	f7ff fd42 	bl	8002a76 <LL_DMA_ClearFlag_TE4>
    LL_DMA_ClearFlag_HT4(DMA1);
 8002ff2:	4811      	ldr	r0, [pc, #68]	@ (8003038 <uart4_dma_tx_start+0x74>)
 8002ff4:	f7ff fcc3 	bl	800297e <LL_DMA_ClearFlag_HT4>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)tx_data);
 8002ff8:	4b10      	ldr	r3, [pc, #64]	@ (800303c <uart4_dma_tx_start+0x78>)
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	480e      	ldr	r0, [pc, #56]	@ (8003038 <uart4_dma_tx_start+0x74>)
 8003000:	f7ff fc0e 	bl	8002820 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)&UART4->DR);
 8003004:	4a0e      	ldr	r2, [pc, #56]	@ (8003040 <uart4_dma_tx_start+0x7c>)
 8003006:	2104      	movs	r1, #4
 8003008:	480b      	ldr	r0, [pc, #44]	@ (8003038 <uart4_dma_tx_start+0x74>)
 800300a:	f7ff fc21 	bl	8002850 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, sizeof(tx_data));
 800300e:	2209      	movs	r2, #9
 8003010:	2104      	movs	r1, #4
 8003012:	4809      	ldr	r0, [pc, #36]	@ (8003038 <uart4_dma_tx_start+0x74>)
 8003014:	f7ff fbe0 	bl	80027d8 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
 8003018:	2104      	movs	r1, #4
 800301a:	4807      	ldr	r0, [pc, #28]	@ (8003038 <uart4_dma_tx_start+0x74>)
 800301c:	f7ff fd46 	bl	8002aac <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 8003020:	2104      	movs	r1, #4
 8003022:	4805      	ldr	r0, [pc, #20]	@ (8003038 <uart4_dma_tx_start+0x74>)
 8003024:	f7ff fb7c 	bl	8002720 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_TX(UART4);
 8003028:	4806      	ldr	r0, [pc, #24]	@ (8003044 <uart4_dma_tx_start+0x80>)
 800302a:	f7ff fde7 	bl	8002bfc <LL_USART_EnableDMAReq_TX>
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	08005d6c 	.word	0x08005d6c
 8003038:	40026000 	.word	0x40026000
 800303c:	200002d0 	.word	0x200002d0
 8003040:	40004c04 	.word	0x40004c04
 8003044:	40004c00 	.word	0x40004c00

08003048 <uart4_dma_rx_start>:
void uart4_dma_rx_start(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 800304c:	2102      	movs	r1, #2
 800304e:	481c      	ldr	r0, [pc, #112]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 8003050:	f7ff fb86 	bl	8002760 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_2));
 8003054:	bf00      	nop
 8003056:	2102      	movs	r1, #2
 8003058:	4819      	ldr	r0, [pc, #100]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 800305a:	f7ff fba1 	bl	80027a0 <LL_DMA_IsEnabledStream>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f8      	bne.n	8003056 <uart4_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC2(DMA1);
 8003064:	4816      	ldr	r0, [pc, #88]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 8003066:	f7ff fcb3 	bl	80029d0 <LL_DMA_ClearFlag_TC2>
    LL_DMA_ClearFlag_TE2(DMA1);
 800306a:	4815      	ldr	r0, [pc, #84]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 800306c:	f7ff fcf5 	bl	8002a5a <LL_DMA_ClearFlag_TE2>
    LL_DMA_ClearFlag_HT2(DMA2);
 8003070:	4814      	ldr	r0, [pc, #80]	@ (80030c4 <uart4_dma_rx_start+0x7c>)
 8003072:	f7ff fc76 	bl	8002962 <LL_DMA_ClearFlag_HT2>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 8003076:	4b14      	ldr	r3, [pc, #80]	@ (80030c8 <uart4_dma_rx_start+0x80>)
 8003078:	461a      	mov	r2, r3
 800307a:	2102      	movs	r1, #2
 800307c:	4810      	ldr	r0, [pc, #64]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 800307e:	f7ff fbcf 	bl	8002820 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 8003082:	4812      	ldr	r0, [pc, #72]	@ (80030cc <uart4_dma_rx_start+0x84>)
 8003084:	f7ff fe00 	bl	8002c88 <LL_USART_DMA_GetRegAddr>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	2102      	movs	r1, #2
 800308e:	480c      	ldr	r0, [pc, #48]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 8003090:	f7ff fbde 	bl	8002850 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8003094:	4b0e      	ldr	r3, [pc, #56]	@ (80030d0 <uart4_dma_rx_start+0x88>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3304      	adds	r3, #4
 800309a:	461a      	mov	r2, r3
 800309c:	2102      	movs	r1, #2
 800309e:	4808      	ldr	r0, [pc, #32]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 80030a0:	f7ff fb9a 	bl	80027d8 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 80030a4:	2102      	movs	r1, #2
 80030a6:	4806      	ldr	r0, [pc, #24]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 80030a8:	f7ff fd00 	bl	8002aac <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 80030ac:	2102      	movs	r1, #2
 80030ae:	4804      	ldr	r0, [pc, #16]	@ (80030c0 <uart4_dma_rx_start+0x78>)
 80030b0:	f7ff fb36 	bl	8002720 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(UART4);
 80030b4:	4805      	ldr	r0, [pc, #20]	@ (80030cc <uart4_dma_rx_start+0x84>)
 80030b6:	f7ff fd7e 	bl	8002bb6 <LL_USART_EnableDMAReq_RX>
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40026000 	.word	0x40026000
 80030c4:	40026400 	.word	0x40026400
 80030c8:	200003ac 	.word	0x200003ac
 80030cc:	40004c00 	.word	0x40004c00
 80030d0:	200003a8 	.word	0x200003a8

080030d4 <usart6_dma_tx_start>:
void usart6_dma_tx_start(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
    printf("DMA6 started\r\n");
 80030d8:	481a      	ldr	r0, [pc, #104]	@ (8003144 <usart6_dma_tx_start+0x70>)
 80030da:	f001 ff5d 	bl	8004f98 <puts>
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 80030de:	2106      	movs	r1, #6
 80030e0:	4819      	ldr	r0, [pc, #100]	@ (8003148 <usart6_dma_tx_start+0x74>)
 80030e2:	f7ff fb3d 	bl	8002760 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_6));
 80030e6:	bf00      	nop
 80030e8:	2106      	movs	r1, #6
 80030ea:	4817      	ldr	r0, [pc, #92]	@ (8003148 <usart6_dma_tx_start+0x74>)
 80030ec:	f7ff fb58 	bl	80027a0 <LL_DMA_IsEnabledStream>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f8      	bne.n	80030e8 <usart6_dma_tx_start+0x14>

    LL_DMA_ClearFlag_TC6(DMA2);
 80030f6:	4814      	ldr	r0, [pc, #80]	@ (8003148 <usart6_dma_tx_start+0x74>)
 80030f8:	f7ff fc93 	bl	8002a22 <LL_DMA_ClearFlag_TC6>
    LL_DMA_ClearFlag_TE6(DMA2);
 80030fc:	4812      	ldr	r0, [pc, #72]	@ (8003148 <usart6_dma_tx_start+0x74>)
 80030fe:	f7ff fcc7 	bl	8002a90 <LL_DMA_ClearFlag_TE6>
    LL_DMA_ClearFlag_HT6(DMA2);
 8003102:	4811      	ldr	r0, [pc, #68]	@ (8003148 <usart6_dma_tx_start+0x74>)
 8003104:	f7ff fc48 	bl	8002998 <LL_DMA_ClearFlag_HT6>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)tx_data);
 8003108:	4b10      	ldr	r3, [pc, #64]	@ (800314c <usart6_dma_tx_start+0x78>)
 800310a:	461a      	mov	r2, r3
 800310c:	2106      	movs	r1, #6
 800310e:	480e      	ldr	r0, [pc, #56]	@ (8003148 <usart6_dma_tx_start+0x74>)
 8003110:	f7ff fb86 	bl	8002820 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)&USART6->DR);
 8003114:	4a0e      	ldr	r2, [pc, #56]	@ (8003150 <usart6_dma_tx_start+0x7c>)
 8003116:	2106      	movs	r1, #6
 8003118:	480b      	ldr	r0, [pc, #44]	@ (8003148 <usart6_dma_tx_start+0x74>)
 800311a:	f7ff fb99 	bl	8002850 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, sizeof(tx_data));
 800311e:	2209      	movs	r2, #9
 8003120:	2106      	movs	r1, #6
 8003122:	4809      	ldr	r0, [pc, #36]	@ (8003148 <usart6_dma_tx_start+0x74>)
 8003124:	f7ff fb58 	bl	80027d8 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
 8003128:	2106      	movs	r1, #6
 800312a:	4807      	ldr	r0, [pc, #28]	@ (8003148 <usart6_dma_tx_start+0x74>)
 800312c:	f7ff fcbe 	bl	8002aac <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 8003130:	2106      	movs	r1, #6
 8003132:	4805      	ldr	r0, [pc, #20]	@ (8003148 <usart6_dma_tx_start+0x74>)
 8003134:	f7ff faf4 	bl	8002720 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_TX(USART6);
 8003138:	4806      	ldr	r0, [pc, #24]	@ (8003154 <usart6_dma_tx_start+0x80>)
 800313a:	f7ff fd5f 	bl	8002bfc <LL_USART_EnableDMAReq_TX>
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	08005d7c 	.word	0x08005d7c
 8003148:	40026400 	.word	0x40026400
 800314c:	200002d0 	.word	0x200002d0
 8003150:	40011404 	.word	0x40011404
 8003154:	40011400 	.word	0x40011400

08003158 <usart6_dma_rx_start>:
void usart6_dma_rx_start(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 800315c:	2101      	movs	r1, #1
 800315e:	481c      	ldr	r0, [pc, #112]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 8003160:	f7ff fafe 	bl	8002760 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_1));
 8003164:	bf00      	nop
 8003166:	2101      	movs	r1, #1
 8003168:	4819      	ldr	r0, [pc, #100]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 800316a:	f7ff fb19 	bl	80027a0 <LL_DMA_IsEnabledStream>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f8      	bne.n	8003166 <usart6_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC1(DMA2);
 8003174:	4816      	ldr	r0, [pc, #88]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 8003176:	f7ff fc1d 	bl	80029b4 <LL_DMA_ClearFlag_TC1>
    LL_DMA_ClearFlag_TE1(DMA2);
 800317a:	4815      	ldr	r0, [pc, #84]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 800317c:	f7ff fc5f 	bl	8002a3e <LL_DMA_ClearFlag_TE1>
    LL_DMA_ClearFlag_HT1(DMA2);
 8003180:	4813      	ldr	r0, [pc, #76]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 8003182:	f7ff fbe0 	bl	8002946 <LL_DMA_ClearFlag_HT1>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 8003186:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <usart6_dma_rx_start+0x7c>)
 8003188:	461a      	mov	r2, r3
 800318a:	2101      	movs	r1, #1
 800318c:	4810      	ldr	r0, [pc, #64]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 800318e:	f7ff fb47 	bl	8002820 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 8003192:	4811      	ldr	r0, [pc, #68]	@ (80031d8 <usart6_dma_rx_start+0x80>)
 8003194:	f7ff fd78 	bl	8002c88 <LL_USART_DMA_GetRegAddr>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	2101      	movs	r1, #1
 800319e:	480c      	ldr	r0, [pc, #48]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 80031a0:	f7ff fb56 	bl	8002850 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 80031a4:	4b0d      	ldr	r3, [pc, #52]	@ (80031dc <usart6_dma_rx_start+0x84>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3304      	adds	r3, #4
 80031aa:	461a      	mov	r2, r3
 80031ac:	2101      	movs	r1, #1
 80031ae:	4808      	ldr	r0, [pc, #32]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 80031b0:	f7ff fb12 	bl	80027d8 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 80031b4:	2101      	movs	r1, #1
 80031b6:	4806      	ldr	r0, [pc, #24]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 80031b8:	f7ff fc78 	bl	8002aac <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 80031bc:	2101      	movs	r1, #1
 80031be:	4804      	ldr	r0, [pc, #16]	@ (80031d0 <usart6_dma_rx_start+0x78>)
 80031c0:	f7ff faae 	bl	8002720 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(USART6);
 80031c4:	4804      	ldr	r0, [pc, #16]	@ (80031d8 <usart6_dma_rx_start+0x80>)
 80031c6:	f7ff fcf6 	bl	8002bb6 <LL_USART_EnableDMAReq_RX>
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40026400 	.word	0x40026400
 80031d4:	200003ac 	.word	0x200003ac
 80031d8:	40011400 	.word	0x40011400
 80031dc:	200003a8 	.word	0x200003a8

080031e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e00a      	b.n	8003208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031f2:	f3af 8000 	nop.w
 80031f6:	4601      	mov	r1, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	60ba      	str	r2, [r7, #8]
 80031fe:	b2ca      	uxtb	r2, r1
 8003200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	dbf0      	blt.n	80031f2 <_read+0x12>
  }

  return len;
 8003210:	687b      	ldr	r3, [r7, #4]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <_close>:
  }
  return len;
}

int _close(int file)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003242:	605a      	str	r2, [r3, #4]
  return 0;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <_isatty>:

int _isatty(int file)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800325a:	2301      	movs	r3, #1
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800328c:	4a14      	ldr	r2, [pc, #80]	@ (80032e0 <_sbrk+0x5c>)
 800328e:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <_sbrk+0x60>)
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003298:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <_sbrk+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <_sbrk+0x64>)
 80032a2:	4a12      	ldr	r2, [pc, #72]	@ (80032ec <_sbrk+0x68>)
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <_sbrk+0x64>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d207      	bcs.n	80032c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b4:	f001 ff9e 	bl	80051f4 <__errno>
 80032b8:	4603      	mov	r3, r0
 80032ba:	220c      	movs	r2, #12
 80032bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	e009      	b.n	80032d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c4:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <_sbrk+0x64>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	4a05      	ldr	r2, [pc, #20]	@ (80032e8 <_sbrk+0x64>)
 80032d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20020000 	.word	0x20020000
 80032e4:	00000400 	.word	0x00000400
 80032e8:	200003cc 	.word	0x200003cc
 80032ec:	20000520 	.word	0x20000520

080032f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <SystemInit+0x20>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	4a05      	ldr	r2, [pc, #20]	@ (8003310 <SystemInit+0x20>)
 80032fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_GetPriorityGrouping>:
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003318:	4b04      	ldr	r3, [pc, #16]	@ (800332c <__NVIC_GetPriorityGrouping+0x18>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 0307 	and.w	r3, r3, #7
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_EnableIRQ>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	2b00      	cmp	r3, #0
 8003340:	db0b      	blt.n	800335a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4907      	ldr	r1, [pc, #28]	@ (8003368 <__NVIC_EnableIRQ+0x38>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2001      	movs	r0, #1
 8003352:	fa00 f202 	lsl.w	r2, r0, r2
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100

0800336c <__NVIC_SetPriority>:
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	@ (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	@ (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	@ 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	@ 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <LL_APB2_GRP1_EnableClock>:
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003430:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003432:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003434:	4907      	ldr	r1, [pc, #28]	@ (8003454 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4313      	orrs	r3, r2
 800343a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <LL_APB2_GRP1_EnableClock+0x2c>)
 800343e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4013      	ands	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40023800 	.word	0x40023800

08003458 <LL_TIM_DisableARRPreload>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_TIM_SetClockSource>:
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800348a:	f023 0307 	bic.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	609a      	str	r2, [r3, #8]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LL_TIM_SetTriggerOutput>:
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	605a      	str	r2, [r3, #4]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_TIM_DisableMasterSlaveMode>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	609a      	str	r2, [r3, #8]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f7ff ff93 	bl	8003428 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003502:	f7ff ff07 	bl	8003314 <__NVIC_GetPriorityGrouping>
 8003506:	4603      	mov	r3, r0
 8003508:	2200      	movs	r2, #0
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff57 	bl	80033c0 <NVIC_EncodePriority>
 8003512:	4603      	mov	r3, r0
 8003514:	4619      	mov	r1, r3
 8003516:	2019      	movs	r0, #25
 8003518:	f7ff ff28 	bl	800336c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800351c:	2019      	movs	r0, #25
 800351e:	f7ff ff07 	bl	8003330 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 29;
 8003522:	231d      	movs	r3, #29
 8003524:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 60000;
 800352a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800352e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	4619      	mov	r1, r3
 800353c:	480a      	ldr	r0, [pc, #40]	@ (8003568 <MX_TIM1_Init+0x80>)
 800353e:	f001 f821 	bl	8004584 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003542:	4809      	ldr	r0, [pc, #36]	@ (8003568 <MX_TIM1_Init+0x80>)
 8003544:	f7ff ff88 	bl	8003458 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003548:	2100      	movs	r1, #0
 800354a:	4807      	ldr	r0, [pc, #28]	@ (8003568 <MX_TIM1_Init+0x80>)
 800354c:	f7ff ff94 	bl	8003478 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003550:	2100      	movs	r1, #0
 8003552:	4805      	ldr	r0, [pc, #20]	@ (8003568 <MX_TIM1_Init+0x80>)
 8003554:	f7ff ffa5 	bl	80034a2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003558:	4803      	ldr	r0, [pc, #12]	@ (8003568 <MX_TIM1_Init+0x80>)
 800355a:	f7ff ffb5 	bl	80034c8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000

0800356c <__NVIC_GetPriorityGrouping>:
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003570:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <__NVIC_GetPriorityGrouping+0x18>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	0a1b      	lsrs	r3, r3, #8
 8003576:	f003 0307 	and.w	r3, r3, #7
}
 800357a:	4618      	mov	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_EnableIRQ>:
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	2b00      	cmp	r3, #0
 8003598:	db0b      	blt.n	80035b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 021f 	and.w	r2, r3, #31
 80035a0:	4907      	ldr	r1, [pc, #28]	@ (80035c0 <__NVIC_EnableIRQ+0x38>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2001      	movs	r0, #1
 80035aa:	fa00 f202 	lsl.w	r2, r0, r2
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e100 	.word	0xe000e100

080035c4 <__NVIC_SetPriority>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	6039      	str	r1, [r7, #0]
 80035ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db0a      	blt.n	80035ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	490c      	ldr	r1, [pc, #48]	@ (8003610 <__NVIC_SetPriority+0x4c>)
 80035de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	440b      	add	r3, r1
 80035e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80035ec:	e00a      	b.n	8003604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	4908      	ldr	r1, [pc, #32]	@ (8003614 <__NVIC_SetPriority+0x50>)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	3b04      	subs	r3, #4
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	440b      	add	r3, r1
 8003602:	761a      	strb	r2, [r3, #24]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	e000e100 	.word	0xe000e100
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <NVIC_EncodePriority>:
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	@ 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f1c3 0307 	rsb	r3, r3, #7
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf28      	it	cs
 8003636:	2304      	movcs	r3, #4
 8003638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3304      	adds	r3, #4
 800363e:	2b06      	cmp	r3, #6
 8003640:	d902      	bls.n	8003648 <NVIC_EncodePriority+0x30>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3b03      	subs	r3, #3
 8003646:	e000      	b.n	800364a <NVIC_EncodePriority+0x32>
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43da      	mvns	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	401a      	ands	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003660:	f04f 31ff 	mov.w	r1, #4294967295
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43d9      	mvns	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	4313      	orrs	r3, r2
}
 8003672:	4618      	mov	r0, r3
 8003674:	3724      	adds	r7, #36	@ 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <LL_DMA_SetDataTransferDirection>:
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <LL_DMA_SetDataTransferDirection+0x44>)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4413      	add	r3, r2
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036a0:	4908      	ldr	r1, [pc, #32]	@ (80036c4 <LL_DMA_SetDataTransferDirection+0x44>)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	440b      	add	r3, r1
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	440b      	add	r3, r1
 80036ae:	4619      	mov	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	08005db4 	.word	0x08005db4

080036c8 <LL_DMA_SetMode>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80036d4:	4a0d      	ldr	r2, [pc, #52]	@ (800370c <LL_DMA_SetMode+0x44>)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4413      	add	r3, r2
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80036e8:	4908      	ldr	r1, [pc, #32]	@ (800370c <LL_DMA_SetMode+0x44>)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	440b      	add	r3, r1
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	440b      	add	r3, r1
 80036f6:	4619      	mov	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	08005db4 	.word	0x08005db4

08003710 <LL_DMA_SetPeriphIncMode>:
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800371c:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <LL_DMA_SetPeriphIncMode+0x44>)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003730:	4908      	ldr	r1, [pc, #32]	@ (8003754 <LL_DMA_SetPeriphIncMode+0x44>)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	440b      	add	r3, r1
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4619      	mov	r1, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	440b      	add	r3, r1
 800373e:	4619      	mov	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	08005db4 	.word	0x08005db4

08003758 <LL_DMA_SetMemoryIncMode>:
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8003764:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <LL_DMA_SetMemoryIncMode+0x44>)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4413      	add	r3, r2
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003778:	4908      	ldr	r1, [pc, #32]	@ (800379c <LL_DMA_SetMemoryIncMode+0x44>)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	440b      	add	r3, r1
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4619      	mov	r1, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	440b      	add	r3, r1
 8003786:	4619      	mov	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	08005db4 	.word	0x08005db4

080037a0 <LL_DMA_SetPeriphSize>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80037ac:	4a0d      	ldr	r2, [pc, #52]	@ (80037e4 <LL_DMA_SetPeriphSize+0x44>)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4413      	add	r3, r2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80037c0:	4908      	ldr	r1, [pc, #32]	@ (80037e4 <LL_DMA_SetPeriphSize+0x44>)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	440b      	add	r3, r1
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	440b      	add	r3, r1
 80037ce:	4619      	mov	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	08005db4 	.word	0x08005db4

080037e8 <LL_DMA_SetMemorySize>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80037f4:	4a0d      	ldr	r2, [pc, #52]	@ (800382c <LL_DMA_SetMemorySize+0x44>)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4413      	add	r3, r2
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8003808:	4908      	ldr	r1, [pc, #32]	@ (800382c <LL_DMA_SetMemorySize+0x44>)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	440b      	add	r3, r1
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	4619      	mov	r1, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	440b      	add	r3, r1
 8003816:	4619      	mov	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	08005db4 	.word	0x08005db4

08003830 <LL_DMA_SetStreamPriorityLevel>:
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800383c:	4a0d      	ldr	r2, [pc, #52]	@ (8003874 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003850:	4908      	ldr	r1, [pc, #32]	@ (8003874 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	440b      	add	r3, r1
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	440b      	add	r3, r1
 800385e:	4619      	mov	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	08005db4 	.word	0x08005db4

08003878 <LL_DMA_SetChannelSelection>:
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8003884:	4a0d      	ldr	r2, [pc, #52]	@ (80038bc <LL_DMA_SetChannelSelection+0x44>)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4413      	add	r3, r2
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003898:	4908      	ldr	r1, [pc, #32]	@ (80038bc <LL_DMA_SetChannelSelection+0x44>)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	440b      	add	r3, r1
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4619      	mov	r1, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	440b      	add	r3, r1
 80038a6:	4619      	mov	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	08005db4 	.word	0x08005db4

080038c0 <LL_DMA_DisableFifoMode>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80038ca:	4a0c      	ldr	r2, [pc, #48]	@ (80038fc <LL_DMA_DisableFifoMode+0x3c>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	4908      	ldr	r1, [pc, #32]	@ (80038fc <LL_DMA_DisableFifoMode+0x3c>)
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	440a      	add	r2, r1
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	4611      	mov	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	440a      	add	r2, r1
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6153      	str	r3, [r2, #20]
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	08005db4 	.word	0x08005db4

08003900 <LL_AHB1_GRP1_EnableClock>:
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003908:	4b08      	ldr	r3, [pc, #32]	@ (800392c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800390a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800390c:	4907      	ldr	r1, [pc, #28]	@ (800392c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4313      	orrs	r3, r2
 8003912:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003914:	4b05      	ldr	r3, [pc, #20]	@ (800392c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4013      	ands	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40023800 	.word	0x40023800

08003930 <LL_APB1_GRP1_EnableClock>:
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003938:	4b08      	ldr	r3, [pc, #32]	@ (800395c <LL_APB1_GRP1_EnableClock+0x2c>)
 800393a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800393c:	4907      	ldr	r1, [pc, #28]	@ (800395c <LL_APB1_GRP1_EnableClock+0x2c>)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4313      	orrs	r3, r2
 8003942:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800394e:	68fb      	ldr	r3, [r7, #12]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	40023800 	.word	0x40023800

08003960 <LL_APB2_GRP1_EnableClock>:
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003968:	4b08      	ldr	r3, [pc, #32]	@ (800398c <LL_APB2_GRP1_EnableClock+0x2c>)
 800396a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800396c:	4907      	ldr	r1, [pc, #28]	@ (800398c <LL_APB2_GRP1_EnableClock+0x2c>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4313      	orrs	r3, r2
 8003972:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003976:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40023800 	.word	0x40023800

08003990 <LL_USART_Enable>:
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <LL_USART_ConfigAsyncMode>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	615a      	str	r2, [r3, #20]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	@ 0x38
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80039e2:	f107 031c 	add.w	r3, r7, #28
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	611a      	str	r2, [r3, #16]
 80039f2:	615a      	str	r2, [r3, #20]
 80039f4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	611a      	str	r2, [r3, #16]
 8003a04:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8003a06:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003a0a:	f7ff ff91 	bl	8003930 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f7ff ff76 	bl	8003900 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8003a14:	2303      	movs	r3, #3
 8003a16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003a28:	2308      	movs	r3, #8
 8003a2a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4846      	ldr	r0, [pc, #280]	@ (8003b4c <MX_UART4_Init+0x170>)
 8003a32:	f000 fb73 	bl	800411c <LL_GPIO_Init>

  /* UART4 DMA Init */

  /* UART4_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8003a36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4844      	ldr	r0, [pc, #272]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a3e:	f7ff ff1b 	bl	8003878 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003a42:	2200      	movs	r2, #0
 8003a44:	2102      	movs	r1, #2
 8003a46:	4842      	ldr	r0, [pc, #264]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a48:	f7ff fe1a 	bl	8003680 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2102      	movs	r1, #2
 8003a50:	483f      	ldr	r0, [pc, #252]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a52:	f7ff feed 	bl	8003830 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2102      	movs	r1, #2
 8003a5a:	483d      	ldr	r0, [pc, #244]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a5c:	f7ff fe34 	bl	80036c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8003a60:	2200      	movs	r2, #0
 8003a62:	2102      	movs	r1, #2
 8003a64:	483a      	ldr	r0, [pc, #232]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a66:	f7ff fe53 	bl	8003710 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8003a6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a6e:	2102      	movs	r1, #2
 8003a70:	4837      	ldr	r0, [pc, #220]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a72:	f7ff fe71 	bl	8003758 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4835      	ldr	r0, [pc, #212]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a7c:	f7ff fe90 	bl	80037a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2102      	movs	r1, #2
 8003a84:	4832      	ldr	r0, [pc, #200]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a86:	f7ff feaf 	bl	80037e8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4830      	ldr	r0, [pc, #192]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a8e:	f7ff ff17 	bl	80038c0 <LL_DMA_DisableFifoMode>

  /* UART4_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_4);
 8003a92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a96:	2104      	movs	r1, #4
 8003a98:	482d      	ldr	r0, [pc, #180]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003a9a:	f7ff feed 	bl	8003878 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003a9e:	2240      	movs	r2, #64	@ 0x40
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	482b      	ldr	r0, [pc, #172]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003aa4:	f7ff fdec 	bl	8003680 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2104      	movs	r1, #4
 8003aac:	4828      	ldr	r0, [pc, #160]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003aae:	f7ff febf 	bl	8003830 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	4826      	ldr	r0, [pc, #152]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003ab8:	f7ff fe06 	bl	80036c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8003abc:	2200      	movs	r2, #0
 8003abe:	2104      	movs	r1, #4
 8003ac0:	4823      	ldr	r0, [pc, #140]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003ac2:	f7ff fe25 	bl	8003710 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8003ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003aca:	2104      	movs	r1, #4
 8003acc:	4820      	ldr	r0, [pc, #128]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003ace:	f7ff fe43 	bl	8003758 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	481e      	ldr	r0, [pc, #120]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003ad8:	f7ff fe62 	bl	80037a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2104      	movs	r1, #4
 8003ae0:	481b      	ldr	r0, [pc, #108]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003ae2:	f7ff fe81 	bl	80037e8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	4819      	ldr	r0, [pc, #100]	@ (8003b50 <MX_UART4_Init+0x174>)
 8003aea:	f7ff fee9 	bl	80038c0 <LL_DMA_DisableFifoMode>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003aee:	f7ff fd3d 	bl	800356c <__NVIC_GetPriorityGrouping>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2200      	movs	r2, #0
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fd8d 	bl	8003618 <NVIC_EncodePriority>
 8003afe:	4603      	mov	r3, r0
 8003b00:	4619      	mov	r1, r3
 8003b02:	2034      	movs	r0, #52	@ 0x34
 8003b04:	f7ff fd5e 	bl	80035c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8003b08:	2034      	movs	r0, #52	@ 0x34
 8003b0a:	f7ff fd3d 	bl	8003588 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 8003b0e:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <MX_UART4_Init+0x178>)
 8003b10:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003b1e:	230c      	movs	r3, #12
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003b26:	2300      	movs	r3, #0
 8003b28:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4809      	ldr	r0, [pc, #36]	@ (8003b58 <MX_UART4_Init+0x17c>)
 8003b32:	f001 f829 	bl	8004b88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8003b36:	4808      	ldr	r0, [pc, #32]	@ (8003b58 <MX_UART4_Init+0x17c>)
 8003b38:	f7ff ff3a 	bl	80039b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8003b3c:	4806      	ldr	r0, [pc, #24]	@ (8003b58 <MX_UART4_Init+0x17c>)
 8003b3e:	f7ff ff27 	bl	8003990 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003b42:	bf00      	nop
 8003b44:	3738      	adds	r7, #56	@ 0x38
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40020000 	.word	0x40020000
 8003b50:	40026000 	.word	0x40026000
 8003b54:	000f4240 	.word	0x000f4240
 8003b58:	40004c00 	.word	0x40004c00

08003b5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08e      	sub	sp, #56	@ 0x38
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003b62:	f107 031c 	add.w	r3, r7, #28
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	611a      	str	r2, [r3, #16]
 8003b72:	615a      	str	r2, [r3, #20]
 8003b74:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b76:	1d3b      	adds	r3, r7, #4
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
 8003b84:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003b86:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003b8a:	f7ff fed1 	bl	8003930 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f7ff feb6 	bl	8003900 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8003b94:	230c      	movs	r3, #12
 8003b96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003ba8:	2307      	movs	r3, #7
 8003baa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bac:	1d3b      	adds	r3, r7, #4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	483e      	ldr	r0, [pc, #248]	@ (8003cac <MX_USART2_UART_Init+0x150>)
 8003bb2:	f000 fab3 	bl	800411c <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8003bb6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003bba:	2105      	movs	r1, #5
 8003bbc:	483c      	ldr	r0, [pc, #240]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003bbe:	f7ff fe5b 	bl	8003878 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2105      	movs	r1, #5
 8003bc6:	483a      	ldr	r0, [pc, #232]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003bc8:	f7ff fd5a 	bl	8003680 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2105      	movs	r1, #5
 8003bd0:	4837      	ldr	r0, [pc, #220]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003bd2:	f7ff fe2d 	bl	8003830 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2105      	movs	r1, #5
 8003bda:	4835      	ldr	r0, [pc, #212]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003bdc:	f7ff fd74 	bl	80036c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8003be0:	2200      	movs	r2, #0
 8003be2:	2105      	movs	r1, #5
 8003be4:	4832      	ldr	r0, [pc, #200]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003be6:	f7ff fd93 	bl	8003710 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8003bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bee:	2105      	movs	r1, #5
 8003bf0:	482f      	ldr	r0, [pc, #188]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003bf2:	f7ff fdb1 	bl	8003758 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2105      	movs	r1, #5
 8003bfa:	482d      	ldr	r0, [pc, #180]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003bfc:	f7ff fdd0 	bl	80037a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8003c00:	2200      	movs	r2, #0
 8003c02:	2105      	movs	r1, #5
 8003c04:	482a      	ldr	r0, [pc, #168]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c06:	f7ff fdef 	bl	80037e8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8003c0a:	2105      	movs	r1, #5
 8003c0c:	4828      	ldr	r0, [pc, #160]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c0e:	f7ff fe57 	bl	80038c0 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8003c12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c16:	2106      	movs	r1, #6
 8003c18:	4825      	ldr	r0, [pc, #148]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c1a:	f7ff fe2d 	bl	8003878 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003c1e:	2240      	movs	r2, #64	@ 0x40
 8003c20:	2106      	movs	r1, #6
 8003c22:	4823      	ldr	r0, [pc, #140]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c24:	f7ff fd2c 	bl	8003680 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2106      	movs	r1, #6
 8003c2c:	4820      	ldr	r0, [pc, #128]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c2e:	f7ff fdff 	bl	8003830 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8003c32:	2200      	movs	r2, #0
 8003c34:	2106      	movs	r1, #6
 8003c36:	481e      	ldr	r0, [pc, #120]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c38:	f7ff fd46 	bl	80036c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2106      	movs	r1, #6
 8003c40:	481b      	ldr	r0, [pc, #108]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c42:	f7ff fd65 	bl	8003710 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8003c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c4a:	2106      	movs	r1, #6
 8003c4c:	4818      	ldr	r0, [pc, #96]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c4e:	f7ff fd83 	bl	8003758 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8003c52:	2200      	movs	r2, #0
 8003c54:	2106      	movs	r1, #6
 8003c56:	4816      	ldr	r0, [pc, #88]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c58:	f7ff fda2 	bl	80037a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2106      	movs	r1, #6
 8003c60:	4813      	ldr	r0, [pc, #76]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c62:	f7ff fdc1 	bl	80037e8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8003c66:	2106      	movs	r1, #6
 8003c68:	4811      	ldr	r0, [pc, #68]	@ (8003cb0 <MX_USART2_UART_Init+0x154>)
 8003c6a:	f7ff fe29 	bl	80038c0 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003c6e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003c72:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003c74:	2300      	movs	r3, #0
 8003c76:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003c80:	230c      	movs	r3, #12
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003c8c:	f107 031c 	add.w	r3, r7, #28
 8003c90:	4619      	mov	r1, r3
 8003c92:	4808      	ldr	r0, [pc, #32]	@ (8003cb4 <MX_USART2_UART_Init+0x158>)
 8003c94:	f000 ff78 	bl	8004b88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003c98:	4806      	ldr	r0, [pc, #24]	@ (8003cb4 <MX_USART2_UART_Init+0x158>)
 8003c9a:	f7ff fe89 	bl	80039b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003c9e:	4805      	ldr	r0, [pc, #20]	@ (8003cb4 <MX_USART2_UART_Init+0x158>)
 8003ca0:	f7ff fe76 	bl	8003990 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ca4:	bf00      	nop
 8003ca6:	3738      	adds	r7, #56	@ 0x38
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40020000 	.word	0x40020000
 8003cb0:	40026000 	.word	0x40026000
 8003cb4:	40004400 	.word	0x40004400

08003cb8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08e      	sub	sp, #56	@ 0x38
 8003cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
 8003cc8:	609a      	str	r2, [r3, #8]
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	611a      	str	r2, [r3, #16]
 8003cce:	615a      	str	r2, [r3, #20]
 8003cd0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	605a      	str	r2, [r3, #4]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	611a      	str	r2, [r3, #16]
 8003ce0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8003ce2:	2020      	movs	r0, #32
 8003ce4:	f7ff fe3c 	bl	8003960 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003ce8:	2004      	movs	r0, #4
 8003cea:	f7ff fe09 	bl	8003900 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003cee:	23c0      	movs	r3, #192	@ 0xc0
 8003cf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003d02:	2308      	movs	r3, #8
 8003d04:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4846      	ldr	r0, [pc, #280]	@ (8003e24 <MX_USART6_UART_Init+0x16c>)
 8003d0c:	f000 fa06 	bl	800411c <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_5);
 8003d10:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003d14:	2106      	movs	r1, #6
 8003d16:	4844      	ldr	r0, [pc, #272]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d18:	f7ff fdae 	bl	8003878 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003d1c:	2240      	movs	r2, #64	@ 0x40
 8003d1e:	2106      	movs	r1, #6
 8003d20:	4841      	ldr	r0, [pc, #260]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d22:	f7ff fcad 	bl	8003680 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2106      	movs	r1, #6
 8003d2a:	483f      	ldr	r0, [pc, #252]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d2c:	f7ff fd80 	bl	8003830 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8003d30:	2200      	movs	r2, #0
 8003d32:	2106      	movs	r1, #6
 8003d34:	483c      	ldr	r0, [pc, #240]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d36:	f7ff fcc7 	bl	80036c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2106      	movs	r1, #6
 8003d3e:	483a      	ldr	r0, [pc, #232]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d40:	f7ff fce6 	bl	8003710 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8003d44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d48:	2106      	movs	r1, #6
 8003d4a:	4837      	ldr	r0, [pc, #220]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d4c:	f7ff fd04 	bl	8003758 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8003d50:	2200      	movs	r2, #0
 8003d52:	2106      	movs	r1, #6
 8003d54:	4834      	ldr	r0, [pc, #208]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d56:	f7ff fd23 	bl	80037a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2106      	movs	r1, #6
 8003d5e:	4832      	ldr	r0, [pc, #200]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d60:	f7ff fd42 	bl	80037e8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8003d64:	2106      	movs	r1, #6
 8003d66:	4830      	ldr	r0, [pc, #192]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d68:	f7ff fdaa 	bl	80038c0 <LL_DMA_DisableFifoMode>

  /* USART6_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 8003d6c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003d70:	2101      	movs	r1, #1
 8003d72:	482d      	ldr	r0, [pc, #180]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d74:	f7ff fd80 	bl	8003878 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	482a      	ldr	r0, [pc, #168]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d7e:	f7ff fc7f 	bl	8003680 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8003d82:	2200      	movs	r2, #0
 8003d84:	2101      	movs	r1, #1
 8003d86:	4828      	ldr	r0, [pc, #160]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d88:	f7ff fd52 	bl	8003830 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4825      	ldr	r0, [pc, #148]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d92:	f7ff fc99 	bl	80036c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4823      	ldr	r0, [pc, #140]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003d9c:	f7ff fcb8 	bl	8003710 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8003da0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003da4:	2101      	movs	r1, #1
 8003da6:	4820      	ldr	r0, [pc, #128]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003da8:	f7ff fcd6 	bl	8003758 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8003dac:	2200      	movs	r2, #0
 8003dae:	2101      	movs	r1, #1
 8003db0:	481d      	ldr	r0, [pc, #116]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003db2:	f7ff fcf5 	bl	80037a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2101      	movs	r1, #1
 8003dba:	481b      	ldr	r0, [pc, #108]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003dbc:	f7ff fd14 	bl	80037e8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4819      	ldr	r0, [pc, #100]	@ (8003e28 <MX_USART6_UART_Init+0x170>)
 8003dc4:	f7ff fd7c 	bl	80038c0 <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003dc8:	f7ff fbd0 	bl	800356c <__NVIC_GetPriorityGrouping>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff fc20 	bl	8003618 <NVIC_EncodePriority>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	2047      	movs	r0, #71	@ 0x47
 8003dde:	f7ff fbf1 	bl	80035c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8003de2:	2047      	movs	r0, #71	@ 0x47
 8003de4:	f7ff fbd0 	bl	8003588 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 8003de8:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <MX_USART6_UART_Init+0x174>)
 8003dea:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003dec:	2300      	movs	r3, #0
 8003dee:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003df8:	230c      	movs	r3, #12
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003e00:	2300      	movs	r3, #0
 8003e02:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8003e04:	f107 031c 	add.w	r3, r7, #28
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4809      	ldr	r0, [pc, #36]	@ (8003e30 <MX_USART6_UART_Init+0x178>)
 8003e0c:	f000 febc 	bl	8004b88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8003e10:	4807      	ldr	r0, [pc, #28]	@ (8003e30 <MX_USART6_UART_Init+0x178>)
 8003e12:	f7ff fdcd 	bl	80039b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8003e16:	4806      	ldr	r0, [pc, #24]	@ (8003e30 <MX_USART6_UART_Init+0x178>)
 8003e18:	f7ff fdba 	bl	8003990 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003e1c:	bf00      	nop
 8003e1e:	3738      	adds	r7, #56	@ 0x38
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40020800 	.word	0x40020800
 8003e28:	40026400 	.word	0x40026400
 8003e2c:	001e8480 	.word	0x001e8480
 8003e30:	40011400 	.word	0x40011400

08003e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003e38:	f7ff fa5a 	bl	80032f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e3c:	480c      	ldr	r0, [pc, #48]	@ (8003e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e3e:	490d      	ldr	r1, [pc, #52]	@ (8003e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e40:	4a0d      	ldr	r2, [pc, #52]	@ (8003e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e44:	e002      	b.n	8003e4c <LoopCopyDataInit>

08003e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e4a:	3304      	adds	r3, #4

08003e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e50:	d3f9      	bcc.n	8003e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e52:	4a0a      	ldr	r2, [pc, #40]	@ (8003e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e54:	4c0a      	ldr	r4, [pc, #40]	@ (8003e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e58:	e001      	b.n	8003e5e <LoopFillZerobss>

08003e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e5c:	3204      	adds	r2, #4

08003e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e60:	d3fb      	bcc.n	8003e5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003e62:	f001 f9cd 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e66:	f7fe fafb 	bl	8002460 <main>
  bx  lr    
 8003e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e74:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8003e78:	08005e00 	.word	0x08005e00
  ldr r2, =_sbss
 8003e7c:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8003e80:	2000051c 	.word	0x2000051c

08003e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e84:	e7fe      	b.n	8003e84 <ADC_IRQHandler>

08003e86 <LL_GPIO_SetPinMode>:
{
 8003e86:	b480      	push	{r7}
 8003e88:	b08b      	sub	sp, #44	@ 0x2c
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	613b      	str	r3, [r7, #16]
  return result;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e003      	b.n	8003eb8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	2103      	movs	r1, #3
 8003ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	61fb      	str	r3, [r7, #28]
  return result;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003eda:	2320      	movs	r3, #32
 8003edc:	e003      	b.n	8003ee6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	372c      	adds	r7, #44	@ 0x2c
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_GPIO_SetPinOutputType>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	401a      	ands	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	605a      	str	r2, [r3, #4]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_GPIO_SetPinSpeed>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b08b      	sub	sp, #44	@ 0x2c
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	613b      	str	r3, [r7, #16]
  return result;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e003      	b.n	8003f62 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	2103      	movs	r1, #3
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	61fb      	str	r3, [r7, #28]
  return result;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003f84:	2320      	movs	r3, #32
 8003f86:	e003      	b.n	8003f90 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	fab3 f383 	clz	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	609a      	str	r2, [r3, #8]
}
 8003f9e:	bf00      	nop
 8003fa0:	372c      	adds	r7, #44	@ 0x2c
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <LL_GPIO_SetPinPull>:
{
 8003faa:	b480      	push	{r7}
 8003fac:	b08b      	sub	sp, #44	@ 0x2c
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	613b      	str	r3, [r7, #16]
  return result;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	e003      	b.n	8003fdc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	2103      	movs	r1, #3
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	fa93 f3a3 	rbit	r3, r3
 8003ff2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003ffe:	2320      	movs	r3, #32
 8004000:	e003      	b.n	800400a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	431a      	orrs	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	60da      	str	r2, [r3, #12]
}
 8004018:	bf00      	nop
 800401a:	372c      	adds	r7, #44	@ 0x2c
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_GPIO_SetAFPin_0_7>:
{
 8004024:	b480      	push	{r7}
 8004026:	b08b      	sub	sp, #44	@ 0x2c
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	613b      	str	r3, [r7, #16]
  return result;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800404a:	2320      	movs	r3, #32
 800404c:	e003      	b.n	8004056 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	210f      	movs	r1, #15
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	401a      	ands	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	61fb      	str	r3, [r7, #28]
  return result;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004078:	2320      	movs	r3, #32
 800407a:	e003      	b.n	8004084 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	431a      	orrs	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	372c      	adds	r7, #44	@ 0x2c
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_GPIO_SetAFPin_8_15>:
{
 800409e:	b480      	push	{r7}
 80040a0:	b08b      	sub	sp, #44	@ 0x2c
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	613b      	str	r3, [r7, #16]
  return result;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80040c6:	2320      	movs	r3, #32
 80040c8:	e003      	b.n	80040d2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	210f      	movs	r1, #15
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	401a      	ands	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	61fb      	str	r3, [r7, #28]
  return result;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80040f6:	2320      	movs	r3, #32
 80040f8:	e003      	b.n	8004102 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	fab3 f383 	clz	r3, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	fa01 f303 	lsl.w	r3, r1, r3
 800410a:	431a      	orrs	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004110:	bf00      	nop
 8004112:	372c      	adds	r7, #44	@ 0x2c
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	@ 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004126:	2300      	movs	r3, #0
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800412a:	2300      	movs	r3, #0
 800412c:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	617b      	str	r3, [r7, #20]
  return result;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <LL_GPIO_Init+0x2e>
    return 32U;
 8004146:	2320      	movs	r3, #32
 8004148:	e003      	b.n	8004152 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004154:	e057      	b.n	8004206 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	2101      	movs	r1, #1
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	fa01 f303 	lsl.w	r3, r1, r3
 8004162:	4013      	ands	r3, r2
 8004164:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d049      	beq.n	8004200 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d003      	beq.n	800417c <LL_GPIO_Init+0x60>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d10d      	bne.n	8004198 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	461a      	mov	r2, r3
 8004182:	6a39      	ldr	r1, [r7, #32]
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fed3 	bl	8003f30 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	6a39      	ldr	r1, [r7, #32]
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff feb4 	bl	8003f00 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	461a      	mov	r2, r3
 800419e:	6a39      	ldr	r1, [r7, #32]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff02 	bl	8003faa <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d121      	bne.n	80041f2 <LL_GPIO_Init+0xd6>
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	60bb      	str	r3, [r7, #8]
  return result;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <LL_GPIO_Init+0xac>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80041d0:	2b07      	cmp	r3, #7
 80041d2:	d807      	bhi.n	80041e4 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	461a      	mov	r2, r3
 80041da:	6a39      	ldr	r1, [r7, #32]
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff ff21 	bl	8004024 <LL_GPIO_SetAFPin_0_7>
 80041e2:	e006      	b.n	80041f2 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6a39      	ldr	r1, [r7, #32]
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff56 	bl	800409e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	461a      	mov	r2, r3
 80041f8:	6a39      	ldr	r1, [r7, #32]
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fe43 	bl	8003e86 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	3301      	adds	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1a0      	bne.n	8004156 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3728      	adds	r7, #40	@ 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <LL_RCC_GetSysClkSource>:
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004224:	4b04      	ldr	r3, [pc, #16]	@ (8004238 <LL_RCC_GetSysClkSource+0x18>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800

0800423c <LL_RCC_GetAHBPrescaler>:
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004240:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <LL_RCC_GetAHBPrescaler+0x18>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800

08004258 <LL_RCC_GetAPB1Prescaler>:
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800425c:	4b04      	ldr	r3, [pc, #16]	@ (8004270 <LL_RCC_GetAPB1Prescaler+0x18>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800

08004274 <LL_RCC_GetAPB2Prescaler>:
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004278:	4b04      	ldr	r3, [pc, #16]	@ (800428c <LL_RCC_GetAPB2Prescaler+0x18>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800

08004290 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004294:	4b04      	ldr	r3, [pc, #16]	@ (80042a8 <LL_RCC_PLL_GetMainSource+0x18>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800

080042ac <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80042b0:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <LL_RCC_PLL_GetN+0x18>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40023800 	.word	0x40023800

080042c8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80042cc:	4b04      	ldr	r3, [pc, #16]	@ (80042e0 <LL_RCC_PLL_GetP+0x18>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800

080042e4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042e8:	4b04      	ldr	r3, [pc, #16]	@ (80042fc <LL_RCC_PLL_GetR+0x18>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800

08004300 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004304:	4b04      	ldr	r3, [pc, #16]	@ (8004318 <LL_RCC_PLL_GetDivider+0x18>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800

0800431c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004324:	f000 f820 	bl	8004368 <RCC_GetSystemClockFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f85c 	bl	80043f0 <RCC_GetHCLKClockFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f86a 	bl	800441c <RCC_GetPCLK1ClockFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f876 	bl	8004444 <RCC_GetPCLK2ClockFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60da      	str	r2, [r3, #12]
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004372:	f7ff ff55 	bl	8004220 <LL_RCC_GetSysClkSource>
 8004376:	4603      	mov	r3, r0
 8004378:	2b0c      	cmp	r3, #12
 800437a:	d82d      	bhi.n	80043d8 <RCC_GetSystemClockFreq+0x70>
 800437c:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <RCC_GetSystemClockFreq+0x1c>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043b9 	.word	0x080043b9
 8004388:	080043d9 	.word	0x080043d9
 800438c:	080043d9 	.word	0x080043d9
 8004390:	080043d9 	.word	0x080043d9
 8004394:	080043bf 	.word	0x080043bf
 8004398:	080043d9 	.word	0x080043d9
 800439c:	080043d9 	.word	0x080043d9
 80043a0:	080043d9 	.word	0x080043d9
 80043a4:	080043c5 	.word	0x080043c5
 80043a8:	080043d9 	.word	0x080043d9
 80043ac:	080043d9 	.word	0x080043d9
 80043b0:	080043d9 	.word	0x080043d9
 80043b4:	080043cf 	.word	0x080043cf
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	@ (80043e8 <RCC_GetSystemClockFreq+0x80>)
 80043ba:	607b      	str	r3, [r7, #4]
      break;
 80043bc:	e00f      	b.n	80043de <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80043be:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <RCC_GetSystemClockFreq+0x84>)
 80043c0:	607b      	str	r3, [r7, #4]
      break;
 80043c2:	e00c      	b.n	80043de <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80043c4:	2008      	movs	r0, #8
 80043c6:	f000 f851 	bl	800446c <RCC_PLL_GetFreqDomain_SYS>
 80043ca:	6078      	str	r0, [r7, #4]
      break;
 80043cc:	e007      	b.n	80043de <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80043ce:	200c      	movs	r0, #12
 80043d0:	f000 f84c 	bl	800446c <RCC_PLL_GetFreqDomain_SYS>
 80043d4:	6078      	str	r0, [r7, #4]
      break;
 80043d6:	e002      	b.n	80043de <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80043d8:	4b03      	ldr	r3, [pc, #12]	@ (80043e8 <RCC_GetSystemClockFreq+0x80>)
 80043da:	607b      	str	r3, [r7, #4]
      break;
 80043dc:	bf00      	nop
  }

  return frequency;
 80043de:	687b      	ldr	r3, [r7, #4]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	00f42400 	.word	0x00f42400
 80043ec:	007a1200 	.word	0x007a1200

080043f0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80043f8:	f7ff ff20 	bl	800423c <LL_RCC_GetAHBPrescaler>
 80043fc:	4603      	mov	r3, r0
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <RCC_GetHCLKClockFreq+0x28>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	40d3      	lsrs	r3, r2
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	08005d9c 	.word	0x08005d9c

0800441c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004424:	f7ff ff18 	bl	8004258 <LL_RCC_GetAPB1Prescaler>
 8004428:	4603      	mov	r3, r0
 800442a:	0a9b      	lsrs	r3, r3, #10
 800442c:	4a04      	ldr	r2, [pc, #16]	@ (8004440 <RCC_GetPCLK1ClockFreq+0x24>)
 800442e:	5cd3      	ldrb	r3, [r2, r3]
 8004430:	461a      	mov	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	40d3      	lsrs	r3, r2
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	08005dac 	.word	0x08005dac

08004444 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800444c:	f7ff ff12 	bl	8004274 <LL_RCC_GetAPB2Prescaler>
 8004450:	4603      	mov	r3, r0
 8004452:	0b5b      	lsrs	r3, r3, #13
 8004454:	4a04      	ldr	r2, [pc, #16]	@ (8004468 <RCC_GetPCLK2ClockFreq+0x24>)
 8004456:	5cd3      	ldrb	r3, [r2, r3]
 8004458:	461a      	mov	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	40d3      	lsrs	r3, r2
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	08005dac 	.word	0x08005dac

0800446c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004480:	f7ff ff06 	bl	8004290 <LL_RCC_PLL_GetMainSource>
 8004484:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004492:	d003      	beq.n	800449c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004494:	e005      	b.n	80044a2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004496:	4b1c      	ldr	r3, [pc, #112]	@ (8004508 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8004498:	617b      	str	r3, [r7, #20]
      break;
 800449a:	e005      	b.n	80044a8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800449c:	4b1b      	ldr	r3, [pc, #108]	@ (800450c <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800449e:	617b      	str	r3, [r7, #20]
      break;
 80044a0:	e002      	b.n	80044a8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80044a2:	4b19      	ldr	r3, [pc, #100]	@ (8004508 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80044a4:	617b      	str	r3, [r7, #20]
      break;
 80044a6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d114      	bne.n	80044d8 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80044ae:	f7ff ff27 	bl	8004300 <LL_RCC_PLL_GetDivider>
 80044b2:	4602      	mov	r2, r0
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	fbb3 f4f2 	udiv	r4, r3, r2
 80044ba:	f7ff fef7 	bl	80042ac <LL_RCC_PLL_GetN>
 80044be:	4603      	mov	r3, r0
 80044c0:	fb03 f404 	mul.w	r4, r3, r4
 80044c4:	f7ff ff00 	bl	80042c8 <LL_RCC_PLL_GetP>
 80044c8:	4603      	mov	r3, r0
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	3301      	adds	r3, #1
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	e011      	b.n	80044fc <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80044d8:	f7ff ff12 	bl	8004300 <LL_RCC_PLL_GetDivider>
 80044dc:	4602      	mov	r2, r0
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	fbb3 f4f2 	udiv	r4, r3, r2
 80044e4:	f7ff fee2 	bl	80042ac <LL_RCC_PLL_GetN>
 80044e8:	4603      	mov	r3, r0
 80044ea:	fb03 f404 	mul.w	r4, r3, r4
 80044ee:	f7ff fef9 	bl	80042e4 <LL_RCC_PLL_GetR>
 80044f2:	4603      	mov	r3, r0
 80044f4:	0f1b      	lsrs	r3, r3, #28
 80044f6:	fbb4 f3f3 	udiv	r3, r4, r3
 80044fa:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80044fc:	693b      	ldr	r3, [r7, #16]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	bd90      	pop	{r4, r7, pc}
 8004506:	bf00      	nop
 8004508:	00f42400 	.word	0x00f42400
 800450c:	007a1200 	.word	0x007a1200

08004510 <LL_TIM_SetPrescaler>:
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_TIM_SetAutoReload>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <LL_TIM_SetRepetitionCounter>:
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	615a      	str	r2, [r3, #20]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3d      	ldr	r2, [pc, #244]	@ (800468c <LL_TIM_Init+0x108>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <LL_TIM_Init+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a2:	d00f      	beq.n	80045c4 <LL_TIM_Init+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3a      	ldr	r2, [pc, #232]	@ (8004690 <LL_TIM_Init+0x10c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <LL_TIM_Init+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a39      	ldr	r2, [pc, #228]	@ (8004694 <LL_TIM_Init+0x110>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <LL_TIM_Init+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a38      	ldr	r2, [pc, #224]	@ (8004698 <LL_TIM_Init+0x114>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <LL_TIM_Init+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a37      	ldr	r2, [pc, #220]	@ (800469c <LL_TIM_Init+0x118>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d106      	bne.n	80045d2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2d      	ldr	r2, [pc, #180]	@ (800468c <LL_TIM_Init+0x108>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02b      	beq.n	8004632 <LL_TIM_Init+0xae>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e0:	d027      	beq.n	8004632 <LL_TIM_Init+0xae>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004690 <LL_TIM_Init+0x10c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d023      	beq.n	8004632 <LL_TIM_Init+0xae>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a29      	ldr	r2, [pc, #164]	@ (8004694 <LL_TIM_Init+0x110>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01f      	beq.n	8004632 <LL_TIM_Init+0xae>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a28      	ldr	r2, [pc, #160]	@ (8004698 <LL_TIM_Init+0x114>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01b      	beq.n	8004632 <LL_TIM_Init+0xae>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a27      	ldr	r2, [pc, #156]	@ (800469c <LL_TIM_Init+0x118>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d017      	beq.n	8004632 <LL_TIM_Init+0xae>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a26      	ldr	r2, [pc, #152]	@ (80046a0 <LL_TIM_Init+0x11c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <LL_TIM_Init+0xae>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a25      	ldr	r2, [pc, #148]	@ (80046a4 <LL_TIM_Init+0x120>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00f      	beq.n	8004632 <LL_TIM_Init+0xae>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a24      	ldr	r2, [pc, #144]	@ (80046a8 <LL_TIM_Init+0x124>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00b      	beq.n	8004632 <LL_TIM_Init+0xae>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a23      	ldr	r2, [pc, #140]	@ (80046ac <LL_TIM_Init+0x128>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <LL_TIM_Init+0xae>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a22      	ldr	r2, [pc, #136]	@ (80046b0 <LL_TIM_Init+0x12c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d003      	beq.n	8004632 <LL_TIM_Init+0xae>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <LL_TIM_Init+0x130>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d106      	bne.n	8004640 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	4619      	mov	r1, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff6d 	bl	800452c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff59 	bl	8004510 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a0a      	ldr	r2, [pc, #40]	@ (800468c <LL_TIM_Init+0x108>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <LL_TIM_Init+0xea>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a0c      	ldr	r2, [pc, #48]	@ (800469c <LL_TIM_Init+0x118>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d105      	bne.n	800467a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff67 	bl	8004548 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ff72 	bl	8004564 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40010400 	.word	0x40010400
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40014400 	.word	0x40014400
 80046a8:	40014800 	.word	0x40014800
 80046ac:	40001800 	.word	0x40001800
 80046b0:	40001c00 	.word	0x40001c00
 80046b4:	40002000 	.word	0x40002000

080046b8 <LL_USART_IsEnabled>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046cc:	bf0c      	ite	eq
 80046ce:	2301      	moveq	r3, #1
 80046d0:	2300      	movne	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_USART_SetStopBitsLength>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <LL_USART_SetHWFlowCtrl>:
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	615a      	str	r2, [r3, #20]
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <LL_USART_SetBaudRate>:
{
 800472c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004730:	b0c0      	sub	sp, #256	@ 0x100
 8004732:	af00      	add	r7, sp, #0
 8004734:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004738:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800473c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004740:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474c:	f040 810c 	bne.w	8004968 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004754:	2200      	movs	r2, #0
 8004756:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800475a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800475e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	1891      	adds	r1, r2, r2
 8004768:	6639      	str	r1, [r7, #96]	@ 0x60
 800476a:	415b      	adcs	r3, r3
 800476c:	667b      	str	r3, [r7, #100]	@ 0x64
 800476e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004772:	4621      	mov	r1, r4
 8004774:	eb12 0801 	adds.w	r8, r2, r1
 8004778:	4629      	mov	r1, r5
 800477a:	eb43 0901 	adc.w	r9, r3, r1
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800478a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800478e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004792:	4690      	mov	r8, r2
 8004794:	4699      	mov	r9, r3
 8004796:	4623      	mov	r3, r4
 8004798:	eb18 0303 	adds.w	r3, r8, r3
 800479c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047a0:	462b      	mov	r3, r5
 80047a2:	eb49 0303 	adc.w	r3, r9, r3
 80047a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80047ae:	2200      	movs	r2, #0
 80047b0:	469a      	mov	sl, r3
 80047b2:	4693      	mov	fp, r2
 80047b4:	eb1a 030a 	adds.w	r3, sl, sl
 80047b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047ba:	eb4b 030b 	adc.w	r3, fp, fp
 80047be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047c8:	f7fc f968 	bl	8000a9c <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4b64      	ldr	r3, [pc, #400]	@ (8004964 <LL_USART_SetBaudRate+0x238>)
 80047d2:	fba3 2302 	umull	r2, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	b29b      	uxth	r3, r3
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	b29c      	uxth	r4, r3
 80047de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047e8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047ec:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	1891      	adds	r1, r2, r2
 80047f6:	6539      	str	r1, [r7, #80]	@ 0x50
 80047f8:	415b      	adcs	r3, r3
 80047fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80047fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004800:	4641      	mov	r1, r8
 8004802:	1851      	adds	r1, r2, r1
 8004804:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004806:	4649      	mov	r1, r9
 8004808:	414b      	adcs	r3, r1
 800480a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8004818:	4659      	mov	r1, fp
 800481a:	00cb      	lsls	r3, r1, #3
 800481c:	4651      	mov	r1, sl
 800481e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004822:	4651      	mov	r1, sl
 8004824:	00ca      	lsls	r2, r1, #3
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	4603      	mov	r3, r0
 800482c:	4642      	mov	r2, r8
 800482e:	189b      	adds	r3, r3, r2
 8004830:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004834:	464b      	mov	r3, r9
 8004836:	460a      	mov	r2, r1
 8004838:	eb42 0303 	adc.w	r3, r2, r3
 800483c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004840:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004844:	2200      	movs	r2, #0
 8004846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800484a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800484e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004852:	460b      	mov	r3, r1
 8004854:	18db      	adds	r3, r3, r3
 8004856:	643b      	str	r3, [r7, #64]	@ 0x40
 8004858:	4613      	mov	r3, r2
 800485a:	eb42 0303 	adc.w	r3, r2, r3
 800485e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004860:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004864:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8004868:	f7fc f918 	bl	8000a9c <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4611      	mov	r1, r2
 8004872:	4b3c      	ldr	r3, [pc, #240]	@ (8004964 <LL_USART_SetBaudRate+0x238>)
 8004874:	fba3 2301 	umull	r2, r3, r3, r1
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	2264      	movs	r2, #100	@ 0x64
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	1acb      	subs	r3, r1, r3
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004888:	4b36      	ldr	r3, [pc, #216]	@ (8004964 <LL_USART_SetBaudRate+0x238>)
 800488a:	fba3 2302 	umull	r2, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	b29b      	uxth	r3, r3
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	b29b      	uxth	r3, r3
 8004896:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800489a:	b29b      	uxth	r3, r3
 800489c:	4423      	add	r3, r4
 800489e:	b29c      	uxth	r4, r3
 80048a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048aa:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048ae:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80048b2:	4642      	mov	r2, r8
 80048b4:	464b      	mov	r3, r9
 80048b6:	1891      	adds	r1, r2, r2
 80048b8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048ba:	415b      	adcs	r3, r3
 80048bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048c2:	4641      	mov	r1, r8
 80048c4:	1851      	adds	r1, r2, r1
 80048c6:	6339      	str	r1, [r7, #48]	@ 0x30
 80048c8:	4649      	mov	r1, r9
 80048ca:	414b      	adcs	r3, r1
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048da:	4659      	mov	r1, fp
 80048dc:	00cb      	lsls	r3, r1, #3
 80048de:	4651      	mov	r1, sl
 80048e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e4:	4651      	mov	r1, sl
 80048e6:	00ca      	lsls	r2, r1, #3
 80048e8:	4610      	mov	r0, r2
 80048ea:	4619      	mov	r1, r3
 80048ec:	4603      	mov	r3, r0
 80048ee:	4642      	mov	r2, r8
 80048f0:	189b      	adds	r3, r3, r2
 80048f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048f6:	464b      	mov	r3, r9
 80048f8:	460a      	mov	r2, r1
 80048fa:	eb42 0303 	adc.w	r3, r2, r3
 80048fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004902:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800490c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004910:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004914:	460b      	mov	r3, r1
 8004916:	18db      	adds	r3, r3, r3
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800491a:	4613      	mov	r3, r2
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004926:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800492a:	f7fc f8b7 	bl	8000a9c <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <LL_USART_SetBaudRate+0x238>)
 8004934:	fba3 1302 	umull	r1, r3, r3, r2
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	2164      	movs	r1, #100	@ 0x64
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	3332      	adds	r3, #50	@ 0x32
 8004946:	4a07      	ldr	r2, [pc, #28]	@ (8004964 <LL_USART_SetBaudRate+0x238>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	b29b      	uxth	r3, r3
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	b29b      	uxth	r3, r3
 8004956:	4423      	add	r3, r4
 8004958:	b29b      	uxth	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004960:	609a      	str	r2, [r3, #8]
}
 8004962:	e108      	b.n	8004b76 <LL_USART_SetBaudRate+0x44a>
 8004964:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004968:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800496c:	2200      	movs	r2, #0
 800496e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004972:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004976:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800497a:	4642      	mov	r2, r8
 800497c:	464b      	mov	r3, r9
 800497e:	1891      	adds	r1, r2, r2
 8004980:	6239      	str	r1, [r7, #32]
 8004982:	415b      	adcs	r3, r3
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
 8004986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800498a:	4641      	mov	r1, r8
 800498c:	1854      	adds	r4, r2, r1
 800498e:	4649      	mov	r1, r9
 8004990:	eb43 0501 	adc.w	r5, r3, r1
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	00eb      	lsls	r3, r5, #3
 800499e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a2:	00e2      	lsls	r2, r4, #3
 80049a4:	4614      	mov	r4, r2
 80049a6:	461d      	mov	r5, r3
 80049a8:	4643      	mov	r3, r8
 80049aa:	18e3      	adds	r3, r4, r3
 80049ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049b0:	464b      	mov	r3, r9
 80049b2:	eb45 0303 	adc.w	r3, r5, r3
 80049b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80049ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049c4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80049d4:	4629      	mov	r1, r5
 80049d6:	008b      	lsls	r3, r1, #2
 80049d8:	4621      	mov	r1, r4
 80049da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049de:	4621      	mov	r1, r4
 80049e0:	008a      	lsls	r2, r1, #2
 80049e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80049e6:	f7fc f859 	bl	8000a9c <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4b65      	ldr	r3, [pc, #404]	@ (8004b84 <LL_USART_SetBaudRate+0x458>)
 80049f0:	fba3 2302 	umull	r2, r3, r3, r2
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	b29c      	uxth	r4, r3
 80049fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a0a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8004a0e:	4642      	mov	r2, r8
 8004a10:	464b      	mov	r3, r9
 8004a12:	1891      	adds	r1, r2, r2
 8004a14:	61b9      	str	r1, [r7, #24]
 8004a16:	415b      	adcs	r3, r3
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a1e:	4641      	mov	r1, r8
 8004a20:	1851      	adds	r1, r2, r1
 8004a22:	6139      	str	r1, [r7, #16]
 8004a24:	4649      	mov	r1, r9
 8004a26:	414b      	adcs	r3, r1
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a36:	4659      	mov	r1, fp
 8004a38:	00cb      	lsls	r3, r1, #3
 8004a3a:	4651      	mov	r1, sl
 8004a3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a40:	4651      	mov	r1, sl
 8004a42:	00ca      	lsls	r2, r1, #3
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4642      	mov	r2, r8
 8004a4c:	189b      	adds	r3, r3, r2
 8004a4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a52:	464b      	mov	r3, r9
 8004a54:	460a      	mov	r2, r1
 8004a56:	eb42 0303 	adc.w	r3, r2, r3
 8004a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004a78:	4649      	mov	r1, r9
 8004a7a:	008b      	lsls	r3, r1, #2
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a82:	4641      	mov	r1, r8
 8004a84:	008a      	lsls	r2, r1, #2
 8004a86:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004a8a:	f7fc f807 	bl	8000a9c <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	4b3b      	ldr	r3, [pc, #236]	@ (8004b84 <LL_USART_SetBaudRate+0x458>)
 8004a96:	fba3 2301 	umull	r2, r3, r3, r1
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2264      	movs	r2, #100	@ 0x64
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	1acb      	subs	r3, r1, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	@ 0x32
 8004aa8:	4a36      	ldr	r2, [pc, #216]	@ (8004b84 <LL_USART_SetBaudRate+0x458>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	4423      	add	r3, r4
 8004aba:	b29c      	uxth	r4, r3
 8004abc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ac4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ac6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004aca:	4642      	mov	r2, r8
 8004acc:	464b      	mov	r3, r9
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ada:	4641      	mov	r1, r8
 8004adc:	1851      	adds	r1, r2, r1
 8004ade:	6039      	str	r1, [r7, #0]
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	414b      	adcs	r3, r1
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004af2:	4659      	mov	r1, fp
 8004af4:	00cb      	lsls	r3, r1, #3
 8004af6:	4651      	mov	r1, sl
 8004af8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afc:	4651      	mov	r1, sl
 8004afe:	00ca      	lsls	r2, r1, #3
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	4603      	mov	r3, r0
 8004b06:	4642      	mov	r2, r8
 8004b08:	189b      	adds	r3, r3, r2
 8004b0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	008b      	lsls	r3, r1, #2
 8004b30:	4641      	mov	r1, r8
 8004b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b36:	4641      	mov	r1, r8
 8004b38:	008a      	lsls	r2, r1, #2
 8004b3a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8004b3e:	f7fb ffad 	bl	8000a9c <__aeabi_uldivmod>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <LL_USART_SetBaudRate+0x458>)
 8004b48:	fba3 1302 	umull	r1, r3, r3, r2
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	2164      	movs	r1, #100	@ 0x64
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	3332      	adds	r3, #50	@ 0x32
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b84 <LL_USART_SetBaudRate+0x458>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	4423      	add	r3, r4
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b74:	609a      	str	r2, [r3, #8]
}
 8004b76:	bf00      	nop
 8004b78:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b82:	bf00      	nop
 8004b84:	51eb851f 	.word	0x51eb851f

08004b88 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fd8c 	bl	80046b8 <LL_USART_IsEnabled>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d15e      	bne.n	8004c64 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004bae:	f023 030c 	bic.w	r3, r3, #12
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	6851      	ldr	r1, [r2, #4]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	68d2      	ldr	r2, [r2, #12]
 8004bba:	4311      	orrs	r1, r2
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	6912      	ldr	r2, [r2, #16]
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	6992      	ldr	r2, [r2, #24]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fd83 	bl	80046e0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fd90 	bl	8004706 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004be6:	f107 0308 	add.w	r3, r7, #8
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fb96 	bl	800431c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c70 <LL_USART_Init+0xe8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d102      	bne.n	8004bfe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	61bb      	str	r3, [r7, #24]
 8004bfc:	e021      	b.n	8004c42 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1c      	ldr	r2, [pc, #112]	@ (8004c74 <LL_USART_Init+0xec>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d102      	bne.n	8004c0c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	e01a      	b.n	8004c42 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c78 <LL_USART_Init+0xf0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d102      	bne.n	8004c1a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e013      	b.n	8004c42 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a17      	ldr	r2, [pc, #92]	@ (8004c7c <LL_USART_Init+0xf4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d102      	bne.n	8004c28 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	e00c      	b.n	8004c42 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a15      	ldr	r2, [pc, #84]	@ (8004c80 <LL_USART_Init+0xf8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d102      	bne.n	8004c36 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e005      	b.n	8004c42 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a12      	ldr	r2, [pc, #72]	@ (8004c84 <LL_USART_Init+0xfc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d101      	bne.n	8004c42 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00d      	beq.n	8004c64 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004c50:	2300      	movs	r3, #0
 8004c52:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004c5c:	69b9      	ldr	r1, [r7, #24]
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fd64 	bl	800472c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004c64:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40011000 	.word	0x40011000
 8004c74:	40004400 	.word	0x40004400
 8004c78:	40004800 	.word	0x40004800
 8004c7c:	40011400 	.word	0x40011400
 8004c80:	40004c00 	.word	0x40004c00
 8004c84:	40005000 	.word	0x40005000

08004c88 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	4a07      	ldr	r2, [pc, #28]	@ (8004cb8 <LL_InitTick+0x30>)
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <LL_InitTick+0x30>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca6:	4b04      	ldr	r3, [pc, #16]	@ (8004cb8 <LL_InitTick+0x30>)
 8004ca8:	2205      	movs	r2, #5
 8004caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000e010 	.word	0xe000e010

08004cbc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004cc4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff ffdd 	bl	8004c88 <LL_InitTick>
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d20 <LL_mDelay+0x48>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004ce6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d00c      	beq.n	8004d0a <LL_mDelay+0x32>
  {
    Delay++;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004cf6:	e008      	b.n	8004d0a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <LL_mDelay+0x48>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <LL_mDelay+0x32>
    {
      Delay--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f3      	bne.n	8004cf8 <LL_mDelay+0x20>
    }
  }
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e010 	.word	0xe000e010

08004d24 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004d2c:	4a04      	ldr	r2, [pc, #16]	@ (8004d40 <LL_SetSystemCoreClock+0x1c>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6013      	str	r3, [r2, #0]
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	200002dc 	.word	0x200002dc

08004d44 <std>:
 8004d44:	2300      	movs	r3, #0
 8004d46:	b510      	push	{r4, lr}
 8004d48:	4604      	mov	r4, r0
 8004d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d52:	6083      	str	r3, [r0, #8]
 8004d54:	8181      	strh	r1, [r0, #12]
 8004d56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d58:	81c2      	strh	r2, [r0, #14]
 8004d5a:	6183      	str	r3, [r0, #24]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	2208      	movs	r2, #8
 8004d60:	305c      	adds	r0, #92	@ 0x5c
 8004d62:	f000 f9f9 	bl	8005158 <memset>
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <std+0x58>)
 8004d68:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004da0 <std+0x5c>)
 8004d6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004da4 <std+0x60>)
 8004d70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <std+0x64>)
 8004d74:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d76:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <std+0x68>)
 8004d78:	6224      	str	r4, [r4, #32]
 8004d7a:	429c      	cmp	r4, r3
 8004d7c:	d006      	beq.n	8004d8c <std+0x48>
 8004d7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d82:	4294      	cmp	r4, r2
 8004d84:	d002      	beq.n	8004d8c <std+0x48>
 8004d86:	33d0      	adds	r3, #208	@ 0xd0
 8004d88:	429c      	cmp	r4, r3
 8004d8a:	d105      	bne.n	8004d98 <std+0x54>
 8004d8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d94:	f000 ba58 	b.w	8005248 <__retarget_lock_init_recursive>
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08004fa9 	.word	0x08004fa9
 8004da0:	08004fcb 	.word	0x08004fcb
 8004da4:	08005003 	.word	0x08005003
 8004da8:	08005027 	.word	0x08005027
 8004dac:	200003d0 	.word	0x200003d0

08004db0 <stdio_exit_handler>:
 8004db0:	4a02      	ldr	r2, [pc, #8]	@ (8004dbc <stdio_exit_handler+0xc>)
 8004db2:	4903      	ldr	r1, [pc, #12]	@ (8004dc0 <stdio_exit_handler+0x10>)
 8004db4:	4803      	ldr	r0, [pc, #12]	@ (8004dc4 <stdio_exit_handler+0x14>)
 8004db6:	f000 b869 	b.w	8004e8c <_fwalk_sglue>
 8004dba:	bf00      	nop
 8004dbc:	200002e0 	.word	0x200002e0
 8004dc0:	08005ae5 	.word	0x08005ae5
 8004dc4:	200002f0 	.word	0x200002f0

08004dc8 <cleanup_stdio>:
 8004dc8:	6841      	ldr	r1, [r0, #4]
 8004dca:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <cleanup_stdio+0x34>)
 8004dcc:	4299      	cmp	r1, r3
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	d001      	beq.n	8004dd8 <cleanup_stdio+0x10>
 8004dd4:	f000 fe86 	bl	8005ae4 <_fflush_r>
 8004dd8:	68a1      	ldr	r1, [r4, #8]
 8004dda:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <cleanup_stdio+0x38>)
 8004ddc:	4299      	cmp	r1, r3
 8004dde:	d002      	beq.n	8004de6 <cleanup_stdio+0x1e>
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 fe7f 	bl	8005ae4 <_fflush_r>
 8004de6:	68e1      	ldr	r1, [r4, #12]
 8004de8:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <cleanup_stdio+0x3c>)
 8004dea:	4299      	cmp	r1, r3
 8004dec:	d004      	beq.n	8004df8 <cleanup_stdio+0x30>
 8004dee:	4620      	mov	r0, r4
 8004df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df4:	f000 be76 	b.w	8005ae4 <_fflush_r>
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200003d0 	.word	0x200003d0
 8004e00:	20000438 	.word	0x20000438
 8004e04:	200004a0 	.word	0x200004a0

08004e08 <global_stdio_init.part.0>:
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <global_stdio_init.part.0+0x30>)
 8004e0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e3c <global_stdio_init.part.0+0x34>)
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e40 <global_stdio_init.part.0+0x38>)
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	4620      	mov	r0, r4
 8004e14:	2200      	movs	r2, #0
 8004e16:	2104      	movs	r1, #4
 8004e18:	f7ff ff94 	bl	8004d44 <std>
 8004e1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e20:	2201      	movs	r2, #1
 8004e22:	2109      	movs	r1, #9
 8004e24:	f7ff ff8e 	bl	8004d44 <std>
 8004e28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e32:	2112      	movs	r1, #18
 8004e34:	f7ff bf86 	b.w	8004d44 <std>
 8004e38:	20000508 	.word	0x20000508
 8004e3c:	200003d0 	.word	0x200003d0
 8004e40:	08004db1 	.word	0x08004db1

08004e44 <__sfp_lock_acquire>:
 8004e44:	4801      	ldr	r0, [pc, #4]	@ (8004e4c <__sfp_lock_acquire+0x8>)
 8004e46:	f000 ba00 	b.w	800524a <__retarget_lock_acquire_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	20000511 	.word	0x20000511

08004e50 <__sfp_lock_release>:
 8004e50:	4801      	ldr	r0, [pc, #4]	@ (8004e58 <__sfp_lock_release+0x8>)
 8004e52:	f000 b9fb 	b.w	800524c <__retarget_lock_release_recursive>
 8004e56:	bf00      	nop
 8004e58:	20000511 	.word	0x20000511

08004e5c <__sinit>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	4604      	mov	r4, r0
 8004e60:	f7ff fff0 	bl	8004e44 <__sfp_lock_acquire>
 8004e64:	6a23      	ldr	r3, [r4, #32]
 8004e66:	b11b      	cbz	r3, 8004e70 <__sinit+0x14>
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	f7ff bff0 	b.w	8004e50 <__sfp_lock_release>
 8004e70:	4b04      	ldr	r3, [pc, #16]	@ (8004e84 <__sinit+0x28>)
 8004e72:	6223      	str	r3, [r4, #32]
 8004e74:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <__sinit+0x2c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f5      	bne.n	8004e68 <__sinit+0xc>
 8004e7c:	f7ff ffc4 	bl	8004e08 <global_stdio_init.part.0>
 8004e80:	e7f2      	b.n	8004e68 <__sinit+0xc>
 8004e82:	bf00      	nop
 8004e84:	08004dc9 	.word	0x08004dc9
 8004e88:	20000508 	.word	0x20000508

08004e8c <_fwalk_sglue>:
 8004e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e90:	4607      	mov	r7, r0
 8004e92:	4688      	mov	r8, r1
 8004e94:	4614      	mov	r4, r2
 8004e96:	2600      	movs	r6, #0
 8004e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8004ea0:	d505      	bpl.n	8004eae <_fwalk_sglue+0x22>
 8004ea2:	6824      	ldr	r4, [r4, #0]
 8004ea4:	2c00      	cmp	r4, #0
 8004ea6:	d1f7      	bne.n	8004e98 <_fwalk_sglue+0xc>
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eae:	89ab      	ldrh	r3, [r5, #12]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d907      	bls.n	8004ec4 <_fwalk_sglue+0x38>
 8004eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	d003      	beq.n	8004ec4 <_fwalk_sglue+0x38>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	47c0      	blx	r8
 8004ec2:	4306      	orrs	r6, r0
 8004ec4:	3568      	adds	r5, #104	@ 0x68
 8004ec6:	e7e9      	b.n	8004e9c <_fwalk_sglue+0x10>

08004ec8 <iprintf>:
 8004ec8:	b40f      	push	{r0, r1, r2, r3}
 8004eca:	b507      	push	{r0, r1, r2, lr}
 8004ecc:	4906      	ldr	r1, [pc, #24]	@ (8004ee8 <iprintf+0x20>)
 8004ece:	ab04      	add	r3, sp, #16
 8004ed0:	6808      	ldr	r0, [r1, #0]
 8004ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed6:	6881      	ldr	r1, [r0, #8]
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	f000 fadb 	bl	8005494 <_vfiprintf_r>
 8004ede:	b003      	add	sp, #12
 8004ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ee4:	b004      	add	sp, #16
 8004ee6:	4770      	bx	lr
 8004ee8:	200002ec 	.word	0x200002ec

08004eec <_puts_r>:
 8004eec:	6a03      	ldr	r3, [r0, #32]
 8004eee:	b570      	push	{r4, r5, r6, lr}
 8004ef0:	6884      	ldr	r4, [r0, #8]
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	460e      	mov	r6, r1
 8004ef6:	b90b      	cbnz	r3, 8004efc <_puts_r+0x10>
 8004ef8:	f7ff ffb0 	bl	8004e5c <__sinit>
 8004efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004efe:	07db      	lsls	r3, r3, #31
 8004f00:	d405      	bmi.n	8004f0e <_puts_r+0x22>
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	0598      	lsls	r0, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_puts_r+0x22>
 8004f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f0a:	f000 f99e 	bl	800524a <__retarget_lock_acquire_recursive>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	0719      	lsls	r1, r3, #28
 8004f12:	d502      	bpl.n	8004f1a <_puts_r+0x2e>
 8004f14:	6923      	ldr	r3, [r4, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d135      	bne.n	8004f86 <_puts_r+0x9a>
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 f8c5 	bl	80050ac <__swsetup_r>
 8004f22:	b380      	cbz	r0, 8004f86 <_puts_r+0x9a>
 8004f24:	f04f 35ff 	mov.w	r5, #4294967295
 8004f28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f2a:	07da      	lsls	r2, r3, #31
 8004f2c:	d405      	bmi.n	8004f3a <_puts_r+0x4e>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	059b      	lsls	r3, r3, #22
 8004f32:	d402      	bmi.n	8004f3a <_puts_r+0x4e>
 8004f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f36:	f000 f989 	bl	800524c <__retarget_lock_release_recursive>
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da04      	bge.n	8004f4c <_puts_r+0x60>
 8004f42:	69a2      	ldr	r2, [r4, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	dc17      	bgt.n	8004f78 <_puts_r+0x8c>
 8004f48:	290a      	cmp	r1, #10
 8004f4a:	d015      	beq.n	8004f78 <_puts_r+0x8c>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	6022      	str	r2, [r4, #0]
 8004f52:	7019      	strb	r1, [r3, #0]
 8004f54:	68a3      	ldr	r3, [r4, #8]
 8004f56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	60a3      	str	r3, [r4, #8]
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	d1ed      	bne.n	8004f3e <_puts_r+0x52>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da11      	bge.n	8004f8a <_puts_r+0x9e>
 8004f66:	4622      	mov	r2, r4
 8004f68:	210a      	movs	r1, #10
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f85f 	bl	800502e <__swbuf_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0d7      	beq.n	8004f24 <_puts_r+0x38>
 8004f74:	250a      	movs	r5, #10
 8004f76:	e7d7      	b.n	8004f28 <_puts_r+0x3c>
 8004f78:	4622      	mov	r2, r4
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f857 	bl	800502e <__swbuf_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d1e7      	bne.n	8004f54 <_puts_r+0x68>
 8004f84:	e7ce      	b.n	8004f24 <_puts_r+0x38>
 8004f86:	3e01      	subs	r6, #1
 8004f88:	e7e4      	b.n	8004f54 <_puts_r+0x68>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	220a      	movs	r2, #10
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e7ee      	b.n	8004f74 <_puts_r+0x88>
	...

08004f98 <puts>:
 8004f98:	4b02      	ldr	r3, [pc, #8]	@ (8004fa4 <puts+0xc>)
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f7ff bfa5 	b.w	8004eec <_puts_r>
 8004fa2:	bf00      	nop
 8004fa4:	200002ec 	.word	0x200002ec

08004fa8 <__sread>:
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	460c      	mov	r4, r1
 8004fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb0:	f000 f8fc 	bl	80051ac <_read_r>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	bfab      	itete	ge
 8004fb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004fba:	89a3      	ldrhlt	r3, [r4, #12]
 8004fbc:	181b      	addge	r3, r3, r0
 8004fbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004fc2:	bfac      	ite	ge
 8004fc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004fc6:	81a3      	strhlt	r3, [r4, #12]
 8004fc8:	bd10      	pop	{r4, pc}

08004fca <__swrite>:
 8004fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fce:	461f      	mov	r7, r3
 8004fd0:	898b      	ldrh	r3, [r1, #12]
 8004fd2:	05db      	lsls	r3, r3, #23
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	4616      	mov	r6, r2
 8004fda:	d505      	bpl.n	8004fe8 <__swrite+0x1e>
 8004fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f000 f8d0 	bl	8005188 <_lseek_r>
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ff2:	81a3      	strh	r3, [r4, #12]
 8004ff4:	4632      	mov	r2, r6
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffe:	f000 b8e7 	b.w	80051d0 <_write_r>

08005002 <__sseek>:
 8005002:	b510      	push	{r4, lr}
 8005004:	460c      	mov	r4, r1
 8005006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500a:	f000 f8bd 	bl	8005188 <_lseek_r>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	bf15      	itete	ne
 8005014:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005016:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800501a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800501e:	81a3      	strheq	r3, [r4, #12]
 8005020:	bf18      	it	ne
 8005022:	81a3      	strhne	r3, [r4, #12]
 8005024:	bd10      	pop	{r4, pc}

08005026 <__sclose>:
 8005026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800502a:	f000 b89d 	b.w	8005168 <_close_r>

0800502e <__swbuf_r>:
 800502e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005030:	460e      	mov	r6, r1
 8005032:	4614      	mov	r4, r2
 8005034:	4605      	mov	r5, r0
 8005036:	b118      	cbz	r0, 8005040 <__swbuf_r+0x12>
 8005038:	6a03      	ldr	r3, [r0, #32]
 800503a:	b90b      	cbnz	r3, 8005040 <__swbuf_r+0x12>
 800503c:	f7ff ff0e 	bl	8004e5c <__sinit>
 8005040:	69a3      	ldr	r3, [r4, #24]
 8005042:	60a3      	str	r3, [r4, #8]
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	071a      	lsls	r2, r3, #28
 8005048:	d501      	bpl.n	800504e <__swbuf_r+0x20>
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	b943      	cbnz	r3, 8005060 <__swbuf_r+0x32>
 800504e:	4621      	mov	r1, r4
 8005050:	4628      	mov	r0, r5
 8005052:	f000 f82b 	bl	80050ac <__swsetup_r>
 8005056:	b118      	cbz	r0, 8005060 <__swbuf_r+0x32>
 8005058:	f04f 37ff 	mov.w	r7, #4294967295
 800505c:	4638      	mov	r0, r7
 800505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	6922      	ldr	r2, [r4, #16]
 8005064:	1a98      	subs	r0, r3, r2
 8005066:	6963      	ldr	r3, [r4, #20]
 8005068:	b2f6      	uxtb	r6, r6
 800506a:	4283      	cmp	r3, r0
 800506c:	4637      	mov	r7, r6
 800506e:	dc05      	bgt.n	800507c <__swbuf_r+0x4e>
 8005070:	4621      	mov	r1, r4
 8005072:	4628      	mov	r0, r5
 8005074:	f000 fd36 	bl	8005ae4 <_fflush_r>
 8005078:	2800      	cmp	r0, #0
 800507a:	d1ed      	bne.n	8005058 <__swbuf_r+0x2a>
 800507c:	68a3      	ldr	r3, [r4, #8]
 800507e:	3b01      	subs	r3, #1
 8005080:	60a3      	str	r3, [r4, #8]
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	6022      	str	r2, [r4, #0]
 8005088:	701e      	strb	r6, [r3, #0]
 800508a:	6962      	ldr	r2, [r4, #20]
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	429a      	cmp	r2, r3
 8005090:	d004      	beq.n	800509c <__swbuf_r+0x6e>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	07db      	lsls	r3, r3, #31
 8005096:	d5e1      	bpl.n	800505c <__swbuf_r+0x2e>
 8005098:	2e0a      	cmp	r6, #10
 800509a:	d1df      	bne.n	800505c <__swbuf_r+0x2e>
 800509c:	4621      	mov	r1, r4
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 fd20 	bl	8005ae4 <_fflush_r>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d0d9      	beq.n	800505c <__swbuf_r+0x2e>
 80050a8:	e7d6      	b.n	8005058 <__swbuf_r+0x2a>
	...

080050ac <__swsetup_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4b29      	ldr	r3, [pc, #164]	@ (8005154 <__swsetup_r+0xa8>)
 80050b0:	4605      	mov	r5, r0
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	460c      	mov	r4, r1
 80050b6:	b118      	cbz	r0, 80050c0 <__swsetup_r+0x14>
 80050b8:	6a03      	ldr	r3, [r0, #32]
 80050ba:	b90b      	cbnz	r3, 80050c0 <__swsetup_r+0x14>
 80050bc:	f7ff fece 	bl	8004e5c <__sinit>
 80050c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c4:	0719      	lsls	r1, r3, #28
 80050c6:	d422      	bmi.n	800510e <__swsetup_r+0x62>
 80050c8:	06da      	lsls	r2, r3, #27
 80050ca:	d407      	bmi.n	80050dc <__swsetup_r+0x30>
 80050cc:	2209      	movs	r2, #9
 80050ce:	602a      	str	r2, [r5, #0]
 80050d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	f04f 30ff 	mov.w	r0, #4294967295
 80050da:	e033      	b.n	8005144 <__swsetup_r+0x98>
 80050dc:	0758      	lsls	r0, r3, #29
 80050de:	d512      	bpl.n	8005106 <__swsetup_r+0x5a>
 80050e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050e2:	b141      	cbz	r1, 80050f6 <__swsetup_r+0x4a>
 80050e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050e8:	4299      	cmp	r1, r3
 80050ea:	d002      	beq.n	80050f2 <__swsetup_r+0x46>
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 f8af 	bl	8005250 <_free_r>
 80050f2:	2300      	movs	r3, #0
 80050f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80050fc:	81a3      	strh	r3, [r4, #12]
 80050fe:	2300      	movs	r3, #0
 8005100:	6063      	str	r3, [r4, #4]
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	f043 0308 	orr.w	r3, r3, #8
 800510c:	81a3      	strh	r3, [r4, #12]
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	b94b      	cbnz	r3, 8005126 <__swsetup_r+0x7a>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800511c:	d003      	beq.n	8005126 <__swsetup_r+0x7a>
 800511e:	4621      	mov	r1, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f000 fd2d 	bl	8005b80 <__smakebuf_r>
 8005126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800512a:	f013 0201 	ands.w	r2, r3, #1
 800512e:	d00a      	beq.n	8005146 <__swsetup_r+0x9a>
 8005130:	2200      	movs	r2, #0
 8005132:	60a2      	str	r2, [r4, #8]
 8005134:	6962      	ldr	r2, [r4, #20]
 8005136:	4252      	negs	r2, r2
 8005138:	61a2      	str	r2, [r4, #24]
 800513a:	6922      	ldr	r2, [r4, #16]
 800513c:	b942      	cbnz	r2, 8005150 <__swsetup_r+0xa4>
 800513e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005142:	d1c5      	bne.n	80050d0 <__swsetup_r+0x24>
 8005144:	bd38      	pop	{r3, r4, r5, pc}
 8005146:	0799      	lsls	r1, r3, #30
 8005148:	bf58      	it	pl
 800514a:	6962      	ldrpl	r2, [r4, #20]
 800514c:	60a2      	str	r2, [r4, #8]
 800514e:	e7f4      	b.n	800513a <__swsetup_r+0x8e>
 8005150:	2000      	movs	r0, #0
 8005152:	e7f7      	b.n	8005144 <__swsetup_r+0x98>
 8005154:	200002ec 	.word	0x200002ec

08005158 <memset>:
 8005158:	4402      	add	r2, r0
 800515a:	4603      	mov	r3, r0
 800515c:	4293      	cmp	r3, r2
 800515e:	d100      	bne.n	8005162 <memset+0xa>
 8005160:	4770      	bx	lr
 8005162:	f803 1b01 	strb.w	r1, [r3], #1
 8005166:	e7f9      	b.n	800515c <memset+0x4>

08005168 <_close_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d06      	ldr	r5, [pc, #24]	@ (8005184 <_close_r+0x1c>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	f7fe f851 	bl	800321a <_close>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_close_r+0x1a>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_close_r+0x1a>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	2000050c 	.word	0x2000050c

08005188 <_lseek_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d07      	ldr	r5, [pc, #28]	@ (80051a8 <_lseek_r+0x20>)
 800518c:	4604      	mov	r4, r0
 800518e:	4608      	mov	r0, r1
 8005190:	4611      	mov	r1, r2
 8005192:	2200      	movs	r2, #0
 8005194:	602a      	str	r2, [r5, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	f7fe f866 	bl	8003268 <_lseek>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_lseek_r+0x1e>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_lseek_r+0x1e>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	2000050c 	.word	0x2000050c

080051ac <_read_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d07      	ldr	r5, [pc, #28]	@ (80051cc <_read_r+0x20>)
 80051b0:	4604      	mov	r4, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	4611      	mov	r1, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fe f810 	bl	80031e0 <_read>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_read_r+0x1e>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_read_r+0x1e>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	2000050c 	.word	0x2000050c

080051d0 <_write_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d07      	ldr	r5, [pc, #28]	@ (80051f0 <_write_r+0x20>)
 80051d4:	4604      	mov	r4, r0
 80051d6:	4608      	mov	r0, r1
 80051d8:	4611      	mov	r1, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	f7fd fa78 	bl	80026d4 <_write>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_write_r+0x1e>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_write_r+0x1e>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	2000050c 	.word	0x2000050c

080051f4 <__errno>:
 80051f4:	4b01      	ldr	r3, [pc, #4]	@ (80051fc <__errno+0x8>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	200002ec 	.word	0x200002ec

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4d0d      	ldr	r5, [pc, #52]	@ (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	@ (800523c <__libc_init_array+0x3c>)
 8005206:	1b64      	subs	r4, r4, r5
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2600      	movs	r6, #0
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4d0b      	ldr	r5, [pc, #44]	@ (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	@ (8005244 <__libc_init_array+0x44>)
 8005214:	f000 fd22 	bl	8005c5c <_init>
 8005218:	1b64      	subs	r4, r4, r5
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2600      	movs	r6, #0
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f855 3b04 	ldr.w	r3, [r5], #4
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	08005df8 	.word	0x08005df8
 800523c:	08005df8 	.word	0x08005df8
 8005240:	08005df8 	.word	0x08005df8
 8005244:	08005dfc 	.word	0x08005dfc

08005248 <__retarget_lock_init_recursive>:
 8005248:	4770      	bx	lr

0800524a <__retarget_lock_acquire_recursive>:
 800524a:	4770      	bx	lr

0800524c <__retarget_lock_release_recursive>:
 800524c:	4770      	bx	lr
	...

08005250 <_free_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4605      	mov	r5, r0
 8005254:	2900      	cmp	r1, #0
 8005256:	d041      	beq.n	80052dc <_free_r+0x8c>
 8005258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800525c:	1f0c      	subs	r4, r1, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	bfb8      	it	lt
 8005262:	18e4      	addlt	r4, r4, r3
 8005264:	f000 f8e0 	bl	8005428 <__malloc_lock>
 8005268:	4a1d      	ldr	r2, [pc, #116]	@ (80052e0 <_free_r+0x90>)
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	b933      	cbnz	r3, 800527c <_free_r+0x2c>
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	6014      	str	r4, [r2, #0]
 8005272:	4628      	mov	r0, r5
 8005274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005278:	f000 b8dc 	b.w	8005434 <__malloc_unlock>
 800527c:	42a3      	cmp	r3, r4
 800527e:	d908      	bls.n	8005292 <_free_r+0x42>
 8005280:	6820      	ldr	r0, [r4, #0]
 8005282:	1821      	adds	r1, r4, r0
 8005284:	428b      	cmp	r3, r1
 8005286:	bf01      	itttt	eq
 8005288:	6819      	ldreq	r1, [r3, #0]
 800528a:	685b      	ldreq	r3, [r3, #4]
 800528c:	1809      	addeq	r1, r1, r0
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	e7ed      	b.n	800526e <_free_r+0x1e>
 8005292:	461a      	mov	r2, r3
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b10b      	cbz	r3, 800529c <_free_r+0x4c>
 8005298:	42a3      	cmp	r3, r4
 800529a:	d9fa      	bls.n	8005292 <_free_r+0x42>
 800529c:	6811      	ldr	r1, [r2, #0]
 800529e:	1850      	adds	r0, r2, r1
 80052a0:	42a0      	cmp	r0, r4
 80052a2:	d10b      	bne.n	80052bc <_free_r+0x6c>
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	4401      	add	r1, r0
 80052a8:	1850      	adds	r0, r2, r1
 80052aa:	4283      	cmp	r3, r0
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	d1e0      	bne.n	8005272 <_free_r+0x22>
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	6053      	str	r3, [r2, #4]
 80052b6:	4408      	add	r0, r1
 80052b8:	6010      	str	r0, [r2, #0]
 80052ba:	e7da      	b.n	8005272 <_free_r+0x22>
 80052bc:	d902      	bls.n	80052c4 <_free_r+0x74>
 80052be:	230c      	movs	r3, #12
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	e7d6      	b.n	8005272 <_free_r+0x22>
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	1821      	adds	r1, r4, r0
 80052c8:	428b      	cmp	r3, r1
 80052ca:	bf04      	itt	eq
 80052cc:	6819      	ldreq	r1, [r3, #0]
 80052ce:	685b      	ldreq	r3, [r3, #4]
 80052d0:	6063      	str	r3, [r4, #4]
 80052d2:	bf04      	itt	eq
 80052d4:	1809      	addeq	r1, r1, r0
 80052d6:	6021      	streq	r1, [r4, #0]
 80052d8:	6054      	str	r4, [r2, #4]
 80052da:	e7ca      	b.n	8005272 <_free_r+0x22>
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
 80052de:	bf00      	nop
 80052e0:	20000518 	.word	0x20000518

080052e4 <sbrk_aligned>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005324 <sbrk_aligned+0x40>)
 80052e8:	460c      	mov	r4, r1
 80052ea:	6831      	ldr	r1, [r6, #0]
 80052ec:	4605      	mov	r5, r0
 80052ee:	b911      	cbnz	r1, 80052f6 <sbrk_aligned+0x12>
 80052f0:	f000 fca4 	bl	8005c3c <_sbrk_r>
 80052f4:	6030      	str	r0, [r6, #0]
 80052f6:	4621      	mov	r1, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 fc9f 	bl	8005c3c <_sbrk_r>
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	d103      	bne.n	800530a <sbrk_aligned+0x26>
 8005302:	f04f 34ff 	mov.w	r4, #4294967295
 8005306:	4620      	mov	r0, r4
 8005308:	bd70      	pop	{r4, r5, r6, pc}
 800530a:	1cc4      	adds	r4, r0, #3
 800530c:	f024 0403 	bic.w	r4, r4, #3
 8005310:	42a0      	cmp	r0, r4
 8005312:	d0f8      	beq.n	8005306 <sbrk_aligned+0x22>
 8005314:	1a21      	subs	r1, r4, r0
 8005316:	4628      	mov	r0, r5
 8005318:	f000 fc90 	bl	8005c3c <_sbrk_r>
 800531c:	3001      	adds	r0, #1
 800531e:	d1f2      	bne.n	8005306 <sbrk_aligned+0x22>
 8005320:	e7ef      	b.n	8005302 <sbrk_aligned+0x1e>
 8005322:	bf00      	nop
 8005324:	20000514 	.word	0x20000514

08005328 <_malloc_r>:
 8005328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800532c:	1ccd      	adds	r5, r1, #3
 800532e:	f025 0503 	bic.w	r5, r5, #3
 8005332:	3508      	adds	r5, #8
 8005334:	2d0c      	cmp	r5, #12
 8005336:	bf38      	it	cc
 8005338:	250c      	movcc	r5, #12
 800533a:	2d00      	cmp	r5, #0
 800533c:	4606      	mov	r6, r0
 800533e:	db01      	blt.n	8005344 <_malloc_r+0x1c>
 8005340:	42a9      	cmp	r1, r5
 8005342:	d904      	bls.n	800534e <_malloc_r+0x26>
 8005344:	230c      	movs	r3, #12
 8005346:	6033      	str	r3, [r6, #0]
 8005348:	2000      	movs	r0, #0
 800534a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005424 <_malloc_r+0xfc>
 8005352:	f000 f869 	bl	8005428 <__malloc_lock>
 8005356:	f8d8 3000 	ldr.w	r3, [r8]
 800535a:	461c      	mov	r4, r3
 800535c:	bb44      	cbnz	r4, 80053b0 <_malloc_r+0x88>
 800535e:	4629      	mov	r1, r5
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff ffbf 	bl	80052e4 <sbrk_aligned>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	4604      	mov	r4, r0
 800536a:	d158      	bne.n	800541e <_malloc_r+0xf6>
 800536c:	f8d8 4000 	ldr.w	r4, [r8]
 8005370:	4627      	mov	r7, r4
 8005372:	2f00      	cmp	r7, #0
 8005374:	d143      	bne.n	80053fe <_malloc_r+0xd6>
 8005376:	2c00      	cmp	r4, #0
 8005378:	d04b      	beq.n	8005412 <_malloc_r+0xea>
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	4639      	mov	r1, r7
 800537e:	4630      	mov	r0, r6
 8005380:	eb04 0903 	add.w	r9, r4, r3
 8005384:	f000 fc5a 	bl	8005c3c <_sbrk_r>
 8005388:	4581      	cmp	r9, r0
 800538a:	d142      	bne.n	8005412 <_malloc_r+0xea>
 800538c:	6821      	ldr	r1, [r4, #0]
 800538e:	1a6d      	subs	r5, r5, r1
 8005390:	4629      	mov	r1, r5
 8005392:	4630      	mov	r0, r6
 8005394:	f7ff ffa6 	bl	80052e4 <sbrk_aligned>
 8005398:	3001      	adds	r0, #1
 800539a:	d03a      	beq.n	8005412 <_malloc_r+0xea>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	442b      	add	r3, r5
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	f8d8 3000 	ldr.w	r3, [r8]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	bb62      	cbnz	r2, 8005404 <_malloc_r+0xdc>
 80053aa:	f8c8 7000 	str.w	r7, [r8]
 80053ae:	e00f      	b.n	80053d0 <_malloc_r+0xa8>
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	1b52      	subs	r2, r2, r5
 80053b4:	d420      	bmi.n	80053f8 <_malloc_r+0xd0>
 80053b6:	2a0b      	cmp	r2, #11
 80053b8:	d917      	bls.n	80053ea <_malloc_r+0xc2>
 80053ba:	1961      	adds	r1, r4, r5
 80053bc:	42a3      	cmp	r3, r4
 80053be:	6025      	str	r5, [r4, #0]
 80053c0:	bf18      	it	ne
 80053c2:	6059      	strne	r1, [r3, #4]
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	bf08      	it	eq
 80053c8:	f8c8 1000 	streq.w	r1, [r8]
 80053cc:	5162      	str	r2, [r4, r5]
 80053ce:	604b      	str	r3, [r1, #4]
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 f82f 	bl	8005434 <__malloc_unlock>
 80053d6:	f104 000b 	add.w	r0, r4, #11
 80053da:	1d23      	adds	r3, r4, #4
 80053dc:	f020 0007 	bic.w	r0, r0, #7
 80053e0:	1ac2      	subs	r2, r0, r3
 80053e2:	bf1c      	itt	ne
 80053e4:	1a1b      	subne	r3, r3, r0
 80053e6:	50a3      	strne	r3, [r4, r2]
 80053e8:	e7af      	b.n	800534a <_malloc_r+0x22>
 80053ea:	6862      	ldr	r2, [r4, #4]
 80053ec:	42a3      	cmp	r3, r4
 80053ee:	bf0c      	ite	eq
 80053f0:	f8c8 2000 	streq.w	r2, [r8]
 80053f4:	605a      	strne	r2, [r3, #4]
 80053f6:	e7eb      	b.n	80053d0 <_malloc_r+0xa8>
 80053f8:	4623      	mov	r3, r4
 80053fa:	6864      	ldr	r4, [r4, #4]
 80053fc:	e7ae      	b.n	800535c <_malloc_r+0x34>
 80053fe:	463c      	mov	r4, r7
 8005400:	687f      	ldr	r7, [r7, #4]
 8005402:	e7b6      	b.n	8005372 <_malloc_r+0x4a>
 8005404:	461a      	mov	r2, r3
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	42a3      	cmp	r3, r4
 800540a:	d1fb      	bne.n	8005404 <_malloc_r+0xdc>
 800540c:	2300      	movs	r3, #0
 800540e:	6053      	str	r3, [r2, #4]
 8005410:	e7de      	b.n	80053d0 <_malloc_r+0xa8>
 8005412:	230c      	movs	r3, #12
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	4630      	mov	r0, r6
 8005418:	f000 f80c 	bl	8005434 <__malloc_unlock>
 800541c:	e794      	b.n	8005348 <_malloc_r+0x20>
 800541e:	6005      	str	r5, [r0, #0]
 8005420:	e7d6      	b.n	80053d0 <_malloc_r+0xa8>
 8005422:	bf00      	nop
 8005424:	20000518 	.word	0x20000518

08005428 <__malloc_lock>:
 8005428:	4801      	ldr	r0, [pc, #4]	@ (8005430 <__malloc_lock+0x8>)
 800542a:	f7ff bf0e 	b.w	800524a <__retarget_lock_acquire_recursive>
 800542e:	bf00      	nop
 8005430:	20000510 	.word	0x20000510

08005434 <__malloc_unlock>:
 8005434:	4801      	ldr	r0, [pc, #4]	@ (800543c <__malloc_unlock+0x8>)
 8005436:	f7ff bf09 	b.w	800524c <__retarget_lock_release_recursive>
 800543a:	bf00      	nop
 800543c:	20000510 	.word	0x20000510

08005440 <__sfputc_r>:
 8005440:	6893      	ldr	r3, [r2, #8]
 8005442:	3b01      	subs	r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	b410      	push	{r4}
 8005448:	6093      	str	r3, [r2, #8]
 800544a:	da08      	bge.n	800545e <__sfputc_r+0x1e>
 800544c:	6994      	ldr	r4, [r2, #24]
 800544e:	42a3      	cmp	r3, r4
 8005450:	db01      	blt.n	8005456 <__sfputc_r+0x16>
 8005452:	290a      	cmp	r1, #10
 8005454:	d103      	bne.n	800545e <__sfputc_r+0x1e>
 8005456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800545a:	f7ff bde8 	b.w	800502e <__swbuf_r>
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	1c58      	adds	r0, r3, #1
 8005462:	6010      	str	r0, [r2, #0]
 8005464:	7019      	strb	r1, [r3, #0]
 8005466:	4608      	mov	r0, r1
 8005468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800546c:	4770      	bx	lr

0800546e <__sfputs_r>:
 800546e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005470:	4606      	mov	r6, r0
 8005472:	460f      	mov	r7, r1
 8005474:	4614      	mov	r4, r2
 8005476:	18d5      	adds	r5, r2, r3
 8005478:	42ac      	cmp	r4, r5
 800547a:	d101      	bne.n	8005480 <__sfputs_r+0x12>
 800547c:	2000      	movs	r0, #0
 800547e:	e007      	b.n	8005490 <__sfputs_r+0x22>
 8005480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005484:	463a      	mov	r2, r7
 8005486:	4630      	mov	r0, r6
 8005488:	f7ff ffda 	bl	8005440 <__sfputc_r>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d1f3      	bne.n	8005478 <__sfputs_r+0xa>
 8005490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005494 <_vfiprintf_r>:
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	460d      	mov	r5, r1
 800549a:	b09d      	sub	sp, #116	@ 0x74
 800549c:	4614      	mov	r4, r2
 800549e:	4698      	mov	r8, r3
 80054a0:	4606      	mov	r6, r0
 80054a2:	b118      	cbz	r0, 80054ac <_vfiprintf_r+0x18>
 80054a4:	6a03      	ldr	r3, [r0, #32]
 80054a6:	b90b      	cbnz	r3, 80054ac <_vfiprintf_r+0x18>
 80054a8:	f7ff fcd8 	bl	8004e5c <__sinit>
 80054ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054ae:	07d9      	lsls	r1, r3, #31
 80054b0:	d405      	bmi.n	80054be <_vfiprintf_r+0x2a>
 80054b2:	89ab      	ldrh	r3, [r5, #12]
 80054b4:	059a      	lsls	r2, r3, #22
 80054b6:	d402      	bmi.n	80054be <_vfiprintf_r+0x2a>
 80054b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054ba:	f7ff fec6 	bl	800524a <__retarget_lock_acquire_recursive>
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	d501      	bpl.n	80054c8 <_vfiprintf_r+0x34>
 80054c4:	692b      	ldr	r3, [r5, #16]
 80054c6:	b99b      	cbnz	r3, 80054f0 <_vfiprintf_r+0x5c>
 80054c8:	4629      	mov	r1, r5
 80054ca:	4630      	mov	r0, r6
 80054cc:	f7ff fdee 	bl	80050ac <__swsetup_r>
 80054d0:	b170      	cbz	r0, 80054f0 <_vfiprintf_r+0x5c>
 80054d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054d4:	07dc      	lsls	r4, r3, #31
 80054d6:	d504      	bpl.n	80054e2 <_vfiprintf_r+0x4e>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b01d      	add	sp, #116	@ 0x74
 80054de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e2:	89ab      	ldrh	r3, [r5, #12]
 80054e4:	0598      	lsls	r0, r3, #22
 80054e6:	d4f7      	bmi.n	80054d8 <_vfiprintf_r+0x44>
 80054e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054ea:	f7ff feaf 	bl	800524c <__retarget_lock_release_recursive>
 80054ee:	e7f3      	b.n	80054d8 <_vfiprintf_r+0x44>
 80054f0:	2300      	movs	r3, #0
 80054f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80054f4:	2320      	movs	r3, #32
 80054f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80054fe:	2330      	movs	r3, #48	@ 0x30
 8005500:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80056b0 <_vfiprintf_r+0x21c>
 8005504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005508:	f04f 0901 	mov.w	r9, #1
 800550c:	4623      	mov	r3, r4
 800550e:	469a      	mov	sl, r3
 8005510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005514:	b10a      	cbz	r2, 800551a <_vfiprintf_r+0x86>
 8005516:	2a25      	cmp	r2, #37	@ 0x25
 8005518:	d1f9      	bne.n	800550e <_vfiprintf_r+0x7a>
 800551a:	ebba 0b04 	subs.w	fp, sl, r4
 800551e:	d00b      	beq.n	8005538 <_vfiprintf_r+0xa4>
 8005520:	465b      	mov	r3, fp
 8005522:	4622      	mov	r2, r4
 8005524:	4629      	mov	r1, r5
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff ffa1 	bl	800546e <__sfputs_r>
 800552c:	3001      	adds	r0, #1
 800552e:	f000 80a7 	beq.w	8005680 <_vfiprintf_r+0x1ec>
 8005532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005534:	445a      	add	r2, fp
 8005536:	9209      	str	r2, [sp, #36]	@ 0x24
 8005538:	f89a 3000 	ldrb.w	r3, [sl]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 809f 	beq.w	8005680 <_vfiprintf_r+0x1ec>
 8005542:	2300      	movs	r3, #0
 8005544:	f04f 32ff 	mov.w	r2, #4294967295
 8005548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554c:	f10a 0a01 	add.w	sl, sl, #1
 8005550:	9304      	str	r3, [sp, #16]
 8005552:	9307      	str	r3, [sp, #28]
 8005554:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005558:	931a      	str	r3, [sp, #104]	@ 0x68
 800555a:	4654      	mov	r4, sl
 800555c:	2205      	movs	r2, #5
 800555e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005562:	4853      	ldr	r0, [pc, #332]	@ (80056b0 <_vfiprintf_r+0x21c>)
 8005564:	f7fa fe54 	bl	8000210 <memchr>
 8005568:	9a04      	ldr	r2, [sp, #16]
 800556a:	b9d8      	cbnz	r0, 80055a4 <_vfiprintf_r+0x110>
 800556c:	06d1      	lsls	r1, r2, #27
 800556e:	bf44      	itt	mi
 8005570:	2320      	movmi	r3, #32
 8005572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005576:	0713      	lsls	r3, r2, #28
 8005578:	bf44      	itt	mi
 800557a:	232b      	movmi	r3, #43	@ 0x2b
 800557c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005580:	f89a 3000 	ldrb.w	r3, [sl]
 8005584:	2b2a      	cmp	r3, #42	@ 0x2a
 8005586:	d015      	beq.n	80055b4 <_vfiprintf_r+0x120>
 8005588:	9a07      	ldr	r2, [sp, #28]
 800558a:	4654      	mov	r4, sl
 800558c:	2000      	movs	r0, #0
 800558e:	f04f 0c0a 	mov.w	ip, #10
 8005592:	4621      	mov	r1, r4
 8005594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005598:	3b30      	subs	r3, #48	@ 0x30
 800559a:	2b09      	cmp	r3, #9
 800559c:	d94b      	bls.n	8005636 <_vfiprintf_r+0x1a2>
 800559e:	b1b0      	cbz	r0, 80055ce <_vfiprintf_r+0x13a>
 80055a0:	9207      	str	r2, [sp, #28]
 80055a2:	e014      	b.n	80055ce <_vfiprintf_r+0x13a>
 80055a4:	eba0 0308 	sub.w	r3, r0, r8
 80055a8:	fa09 f303 	lsl.w	r3, r9, r3
 80055ac:	4313      	orrs	r3, r2
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	46a2      	mov	sl, r4
 80055b2:	e7d2      	b.n	800555a <_vfiprintf_r+0xc6>
 80055b4:	9b03      	ldr	r3, [sp, #12]
 80055b6:	1d19      	adds	r1, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	9103      	str	r1, [sp, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bfbb      	ittet	lt
 80055c0:	425b      	neglt	r3, r3
 80055c2:	f042 0202 	orrlt.w	r2, r2, #2
 80055c6:	9307      	strge	r3, [sp, #28]
 80055c8:	9307      	strlt	r3, [sp, #28]
 80055ca:	bfb8      	it	lt
 80055cc:	9204      	strlt	r2, [sp, #16]
 80055ce:	7823      	ldrb	r3, [r4, #0]
 80055d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80055d2:	d10a      	bne.n	80055ea <_vfiprintf_r+0x156>
 80055d4:	7863      	ldrb	r3, [r4, #1]
 80055d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80055d8:	d132      	bne.n	8005640 <_vfiprintf_r+0x1ac>
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	1d1a      	adds	r2, r3, #4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	9203      	str	r2, [sp, #12]
 80055e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055e6:	3402      	adds	r4, #2
 80055e8:	9305      	str	r3, [sp, #20]
 80055ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80056c0 <_vfiprintf_r+0x22c>
 80055ee:	7821      	ldrb	r1, [r4, #0]
 80055f0:	2203      	movs	r2, #3
 80055f2:	4650      	mov	r0, sl
 80055f4:	f7fa fe0c 	bl	8000210 <memchr>
 80055f8:	b138      	cbz	r0, 800560a <_vfiprintf_r+0x176>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	eba0 000a 	sub.w	r0, r0, sl
 8005600:	2240      	movs	r2, #64	@ 0x40
 8005602:	4082      	lsls	r2, r0
 8005604:	4313      	orrs	r3, r2
 8005606:	3401      	adds	r4, #1
 8005608:	9304      	str	r3, [sp, #16]
 800560a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560e:	4829      	ldr	r0, [pc, #164]	@ (80056b4 <_vfiprintf_r+0x220>)
 8005610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005614:	2206      	movs	r2, #6
 8005616:	f7fa fdfb 	bl	8000210 <memchr>
 800561a:	2800      	cmp	r0, #0
 800561c:	d03f      	beq.n	800569e <_vfiprintf_r+0x20a>
 800561e:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <_vfiprintf_r+0x224>)
 8005620:	bb1b      	cbnz	r3, 800566a <_vfiprintf_r+0x1d6>
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	3307      	adds	r3, #7
 8005626:	f023 0307 	bic.w	r3, r3, #7
 800562a:	3308      	adds	r3, #8
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005630:	443b      	add	r3, r7
 8005632:	9309      	str	r3, [sp, #36]	@ 0x24
 8005634:	e76a      	b.n	800550c <_vfiprintf_r+0x78>
 8005636:	fb0c 3202 	mla	r2, ip, r2, r3
 800563a:	460c      	mov	r4, r1
 800563c:	2001      	movs	r0, #1
 800563e:	e7a8      	b.n	8005592 <_vfiprintf_r+0xfe>
 8005640:	2300      	movs	r3, #0
 8005642:	3401      	adds	r4, #1
 8005644:	9305      	str	r3, [sp, #20]
 8005646:	4619      	mov	r1, r3
 8005648:	f04f 0c0a 	mov.w	ip, #10
 800564c:	4620      	mov	r0, r4
 800564e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005652:	3a30      	subs	r2, #48	@ 0x30
 8005654:	2a09      	cmp	r2, #9
 8005656:	d903      	bls.n	8005660 <_vfiprintf_r+0x1cc>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0c6      	beq.n	80055ea <_vfiprintf_r+0x156>
 800565c:	9105      	str	r1, [sp, #20]
 800565e:	e7c4      	b.n	80055ea <_vfiprintf_r+0x156>
 8005660:	fb0c 2101 	mla	r1, ip, r1, r2
 8005664:	4604      	mov	r4, r0
 8005666:	2301      	movs	r3, #1
 8005668:	e7f0      	b.n	800564c <_vfiprintf_r+0x1b8>
 800566a:	ab03      	add	r3, sp, #12
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	462a      	mov	r2, r5
 8005670:	4b12      	ldr	r3, [pc, #72]	@ (80056bc <_vfiprintf_r+0x228>)
 8005672:	a904      	add	r1, sp, #16
 8005674:	4630      	mov	r0, r6
 8005676:	f3af 8000 	nop.w
 800567a:	4607      	mov	r7, r0
 800567c:	1c78      	adds	r0, r7, #1
 800567e:	d1d6      	bne.n	800562e <_vfiprintf_r+0x19a>
 8005680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005682:	07d9      	lsls	r1, r3, #31
 8005684:	d405      	bmi.n	8005692 <_vfiprintf_r+0x1fe>
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	059a      	lsls	r2, r3, #22
 800568a:	d402      	bmi.n	8005692 <_vfiprintf_r+0x1fe>
 800568c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800568e:	f7ff fddd 	bl	800524c <__retarget_lock_release_recursive>
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	065b      	lsls	r3, r3, #25
 8005696:	f53f af1f 	bmi.w	80054d8 <_vfiprintf_r+0x44>
 800569a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800569c:	e71e      	b.n	80054dc <_vfiprintf_r+0x48>
 800569e:	ab03      	add	r3, sp, #12
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	462a      	mov	r2, r5
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <_vfiprintf_r+0x228>)
 80056a6:	a904      	add	r1, sp, #16
 80056a8:	4630      	mov	r0, r6
 80056aa:	f000 f879 	bl	80057a0 <_printf_i>
 80056ae:	e7e4      	b.n	800567a <_vfiprintf_r+0x1e6>
 80056b0:	08005dbc 	.word	0x08005dbc
 80056b4:	08005dc6 	.word	0x08005dc6
 80056b8:	00000000 	.word	0x00000000
 80056bc:	0800546f 	.word	0x0800546f
 80056c0:	08005dc2 	.word	0x08005dc2

080056c4 <_printf_common>:
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	4616      	mov	r6, r2
 80056ca:	4698      	mov	r8, r3
 80056cc:	688a      	ldr	r2, [r1, #8]
 80056ce:	690b      	ldr	r3, [r1, #16]
 80056d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056d4:	4293      	cmp	r3, r2
 80056d6:	bfb8      	it	lt
 80056d8:	4613      	movlt	r3, r2
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056e0:	4607      	mov	r7, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	b10a      	cbz	r2, 80056ea <_printf_common+0x26>
 80056e6:	3301      	adds	r3, #1
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	0699      	lsls	r1, r3, #26
 80056ee:	bf42      	ittt	mi
 80056f0:	6833      	ldrmi	r3, [r6, #0]
 80056f2:	3302      	addmi	r3, #2
 80056f4:	6033      	strmi	r3, [r6, #0]
 80056f6:	6825      	ldr	r5, [r4, #0]
 80056f8:	f015 0506 	ands.w	r5, r5, #6
 80056fc:	d106      	bne.n	800570c <_printf_common+0x48>
 80056fe:	f104 0a19 	add.w	sl, r4, #25
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	6832      	ldr	r2, [r6, #0]
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	42ab      	cmp	r3, r5
 800570a:	dc26      	bgt.n	800575a <_printf_common+0x96>
 800570c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	3b00      	subs	r3, #0
 8005714:	bf18      	it	ne
 8005716:	2301      	movne	r3, #1
 8005718:	0692      	lsls	r2, r2, #26
 800571a:	d42b      	bmi.n	8005774 <_printf_common+0xb0>
 800571c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005720:	4641      	mov	r1, r8
 8005722:	4638      	mov	r0, r7
 8005724:	47c8      	blx	r9
 8005726:	3001      	adds	r0, #1
 8005728:	d01e      	beq.n	8005768 <_printf_common+0xa4>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	f003 0306 	and.w	r3, r3, #6
 8005732:	2b04      	cmp	r3, #4
 8005734:	bf02      	ittt	eq
 8005736:	68e5      	ldreq	r5, [r4, #12]
 8005738:	6833      	ldreq	r3, [r6, #0]
 800573a:	1aed      	subeq	r5, r5, r3
 800573c:	68a3      	ldr	r3, [r4, #8]
 800573e:	bf0c      	ite	eq
 8005740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005744:	2500      	movne	r5, #0
 8005746:	4293      	cmp	r3, r2
 8005748:	bfc4      	itt	gt
 800574a:	1a9b      	subgt	r3, r3, r2
 800574c:	18ed      	addgt	r5, r5, r3
 800574e:	2600      	movs	r6, #0
 8005750:	341a      	adds	r4, #26
 8005752:	42b5      	cmp	r5, r6
 8005754:	d11a      	bne.n	800578c <_printf_common+0xc8>
 8005756:	2000      	movs	r0, #0
 8005758:	e008      	b.n	800576c <_printf_common+0xa8>
 800575a:	2301      	movs	r3, #1
 800575c:	4652      	mov	r2, sl
 800575e:	4641      	mov	r1, r8
 8005760:	4638      	mov	r0, r7
 8005762:	47c8      	blx	r9
 8005764:	3001      	adds	r0, #1
 8005766:	d103      	bne.n	8005770 <_printf_common+0xac>
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005770:	3501      	adds	r5, #1
 8005772:	e7c6      	b.n	8005702 <_printf_common+0x3e>
 8005774:	18e1      	adds	r1, r4, r3
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	2030      	movs	r0, #48	@ 0x30
 800577a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800577e:	4422      	add	r2, r4
 8005780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005788:	3302      	adds	r3, #2
 800578a:	e7c7      	b.n	800571c <_printf_common+0x58>
 800578c:	2301      	movs	r3, #1
 800578e:	4622      	mov	r2, r4
 8005790:	4641      	mov	r1, r8
 8005792:	4638      	mov	r0, r7
 8005794:	47c8      	blx	r9
 8005796:	3001      	adds	r0, #1
 8005798:	d0e6      	beq.n	8005768 <_printf_common+0xa4>
 800579a:	3601      	adds	r6, #1
 800579c:	e7d9      	b.n	8005752 <_printf_common+0x8e>
	...

080057a0 <_printf_i>:
 80057a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	7e0f      	ldrb	r7, [r1, #24]
 80057a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057a8:	2f78      	cmp	r7, #120	@ 0x78
 80057aa:	4691      	mov	r9, r2
 80057ac:	4680      	mov	r8, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	469a      	mov	sl, r3
 80057b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057b6:	d807      	bhi.n	80057c8 <_printf_i+0x28>
 80057b8:	2f62      	cmp	r7, #98	@ 0x62
 80057ba:	d80a      	bhi.n	80057d2 <_printf_i+0x32>
 80057bc:	2f00      	cmp	r7, #0
 80057be:	f000 80d1 	beq.w	8005964 <_printf_i+0x1c4>
 80057c2:	2f58      	cmp	r7, #88	@ 0x58
 80057c4:	f000 80b8 	beq.w	8005938 <_printf_i+0x198>
 80057c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057d0:	e03a      	b.n	8005848 <_printf_i+0xa8>
 80057d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057d6:	2b15      	cmp	r3, #21
 80057d8:	d8f6      	bhi.n	80057c8 <_printf_i+0x28>
 80057da:	a101      	add	r1, pc, #4	@ (adr r1, 80057e0 <_printf_i+0x40>)
 80057dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e0:	08005839 	.word	0x08005839
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	080057c9 	.word	0x080057c9
 80057ec:	080057c9 	.word	0x080057c9
 80057f0:	080057c9 	.word	0x080057c9
 80057f4:	080057c9 	.word	0x080057c9
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	080057c9 	.word	0x080057c9
 8005800:	080057c9 	.word	0x080057c9
 8005804:	080057c9 	.word	0x080057c9
 8005808:	080057c9 	.word	0x080057c9
 800580c:	0800594b 	.word	0x0800594b
 8005810:	08005877 	.word	0x08005877
 8005814:	08005905 	.word	0x08005905
 8005818:	080057c9 	.word	0x080057c9
 800581c:	080057c9 	.word	0x080057c9
 8005820:	0800596d 	.word	0x0800596d
 8005824:	080057c9 	.word	0x080057c9
 8005828:	08005877 	.word	0x08005877
 800582c:	080057c9 	.word	0x080057c9
 8005830:	080057c9 	.word	0x080057c9
 8005834:	0800590d 	.word	0x0800590d
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	1d1a      	adds	r2, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6032      	str	r2, [r6, #0]
 8005840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005848:	2301      	movs	r3, #1
 800584a:	e09c      	b.n	8005986 <_printf_i+0x1e6>
 800584c:	6833      	ldr	r3, [r6, #0]
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	1d19      	adds	r1, r3, #4
 8005852:	6031      	str	r1, [r6, #0]
 8005854:	0606      	lsls	r6, r0, #24
 8005856:	d501      	bpl.n	800585c <_printf_i+0xbc>
 8005858:	681d      	ldr	r5, [r3, #0]
 800585a:	e003      	b.n	8005864 <_printf_i+0xc4>
 800585c:	0645      	lsls	r5, r0, #25
 800585e:	d5fb      	bpl.n	8005858 <_printf_i+0xb8>
 8005860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005864:	2d00      	cmp	r5, #0
 8005866:	da03      	bge.n	8005870 <_printf_i+0xd0>
 8005868:	232d      	movs	r3, #45	@ 0x2d
 800586a:	426d      	negs	r5, r5
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005870:	4858      	ldr	r0, [pc, #352]	@ (80059d4 <_printf_i+0x234>)
 8005872:	230a      	movs	r3, #10
 8005874:	e011      	b.n	800589a <_printf_i+0xfa>
 8005876:	6821      	ldr	r1, [r4, #0]
 8005878:	6833      	ldr	r3, [r6, #0]
 800587a:	0608      	lsls	r0, r1, #24
 800587c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005880:	d402      	bmi.n	8005888 <_printf_i+0xe8>
 8005882:	0649      	lsls	r1, r1, #25
 8005884:	bf48      	it	mi
 8005886:	b2ad      	uxthmi	r5, r5
 8005888:	2f6f      	cmp	r7, #111	@ 0x6f
 800588a:	4852      	ldr	r0, [pc, #328]	@ (80059d4 <_printf_i+0x234>)
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	bf14      	ite	ne
 8005890:	230a      	movne	r3, #10
 8005892:	2308      	moveq	r3, #8
 8005894:	2100      	movs	r1, #0
 8005896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800589a:	6866      	ldr	r6, [r4, #4]
 800589c:	60a6      	str	r6, [r4, #8]
 800589e:	2e00      	cmp	r6, #0
 80058a0:	db05      	blt.n	80058ae <_printf_i+0x10e>
 80058a2:	6821      	ldr	r1, [r4, #0]
 80058a4:	432e      	orrs	r6, r5
 80058a6:	f021 0104 	bic.w	r1, r1, #4
 80058aa:	6021      	str	r1, [r4, #0]
 80058ac:	d04b      	beq.n	8005946 <_printf_i+0x1a6>
 80058ae:	4616      	mov	r6, r2
 80058b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80058b4:	fb03 5711 	mls	r7, r3, r1, r5
 80058b8:	5dc7      	ldrb	r7, [r0, r7]
 80058ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058be:	462f      	mov	r7, r5
 80058c0:	42bb      	cmp	r3, r7
 80058c2:	460d      	mov	r5, r1
 80058c4:	d9f4      	bls.n	80058b0 <_printf_i+0x110>
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d10b      	bne.n	80058e2 <_printf_i+0x142>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	07df      	lsls	r7, r3, #31
 80058ce:	d508      	bpl.n	80058e2 <_printf_i+0x142>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	6861      	ldr	r1, [r4, #4]
 80058d4:	4299      	cmp	r1, r3
 80058d6:	bfde      	ittt	le
 80058d8:	2330      	movle	r3, #48	@ 0x30
 80058da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058e2:	1b92      	subs	r2, r2, r6
 80058e4:	6122      	str	r2, [r4, #16]
 80058e6:	f8cd a000 	str.w	sl, [sp]
 80058ea:	464b      	mov	r3, r9
 80058ec:	aa03      	add	r2, sp, #12
 80058ee:	4621      	mov	r1, r4
 80058f0:	4640      	mov	r0, r8
 80058f2:	f7ff fee7 	bl	80056c4 <_printf_common>
 80058f6:	3001      	adds	r0, #1
 80058f8:	d14a      	bne.n	8005990 <_printf_i+0x1f0>
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295
 80058fe:	b004      	add	sp, #16
 8005900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	f043 0320 	orr.w	r3, r3, #32
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	4832      	ldr	r0, [pc, #200]	@ (80059d8 <_printf_i+0x238>)
 800590e:	2778      	movs	r7, #120	@ 0x78
 8005910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	6831      	ldr	r1, [r6, #0]
 8005918:	061f      	lsls	r7, r3, #24
 800591a:	f851 5b04 	ldr.w	r5, [r1], #4
 800591e:	d402      	bmi.n	8005926 <_printf_i+0x186>
 8005920:	065f      	lsls	r7, r3, #25
 8005922:	bf48      	it	mi
 8005924:	b2ad      	uxthmi	r5, r5
 8005926:	6031      	str	r1, [r6, #0]
 8005928:	07d9      	lsls	r1, r3, #31
 800592a:	bf44      	itt	mi
 800592c:	f043 0320 	orrmi.w	r3, r3, #32
 8005930:	6023      	strmi	r3, [r4, #0]
 8005932:	b11d      	cbz	r5, 800593c <_printf_i+0x19c>
 8005934:	2310      	movs	r3, #16
 8005936:	e7ad      	b.n	8005894 <_printf_i+0xf4>
 8005938:	4826      	ldr	r0, [pc, #152]	@ (80059d4 <_printf_i+0x234>)
 800593a:	e7e9      	b.n	8005910 <_printf_i+0x170>
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	f023 0320 	bic.w	r3, r3, #32
 8005942:	6023      	str	r3, [r4, #0]
 8005944:	e7f6      	b.n	8005934 <_printf_i+0x194>
 8005946:	4616      	mov	r6, r2
 8005948:	e7bd      	b.n	80058c6 <_printf_i+0x126>
 800594a:	6833      	ldr	r3, [r6, #0]
 800594c:	6825      	ldr	r5, [r4, #0]
 800594e:	6961      	ldr	r1, [r4, #20]
 8005950:	1d18      	adds	r0, r3, #4
 8005952:	6030      	str	r0, [r6, #0]
 8005954:	062e      	lsls	r6, r5, #24
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	d501      	bpl.n	800595e <_printf_i+0x1be>
 800595a:	6019      	str	r1, [r3, #0]
 800595c:	e002      	b.n	8005964 <_printf_i+0x1c4>
 800595e:	0668      	lsls	r0, r5, #25
 8005960:	d5fb      	bpl.n	800595a <_printf_i+0x1ba>
 8005962:	8019      	strh	r1, [r3, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	4616      	mov	r6, r2
 800596a:	e7bc      	b.n	80058e6 <_printf_i+0x146>
 800596c:	6833      	ldr	r3, [r6, #0]
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	6032      	str	r2, [r6, #0]
 8005972:	681e      	ldr	r6, [r3, #0]
 8005974:	6862      	ldr	r2, [r4, #4]
 8005976:	2100      	movs	r1, #0
 8005978:	4630      	mov	r0, r6
 800597a:	f7fa fc49 	bl	8000210 <memchr>
 800597e:	b108      	cbz	r0, 8005984 <_printf_i+0x1e4>
 8005980:	1b80      	subs	r0, r0, r6
 8005982:	6060      	str	r0, [r4, #4]
 8005984:	6863      	ldr	r3, [r4, #4]
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	2300      	movs	r3, #0
 800598a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800598e:	e7aa      	b.n	80058e6 <_printf_i+0x146>
 8005990:	6923      	ldr	r3, [r4, #16]
 8005992:	4632      	mov	r2, r6
 8005994:	4649      	mov	r1, r9
 8005996:	4640      	mov	r0, r8
 8005998:	47d0      	blx	sl
 800599a:	3001      	adds	r0, #1
 800599c:	d0ad      	beq.n	80058fa <_printf_i+0x15a>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	079b      	lsls	r3, r3, #30
 80059a2:	d413      	bmi.n	80059cc <_printf_i+0x22c>
 80059a4:	68e0      	ldr	r0, [r4, #12]
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	4298      	cmp	r0, r3
 80059aa:	bfb8      	it	lt
 80059ac:	4618      	movlt	r0, r3
 80059ae:	e7a6      	b.n	80058fe <_printf_i+0x15e>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4632      	mov	r2, r6
 80059b4:	4649      	mov	r1, r9
 80059b6:	4640      	mov	r0, r8
 80059b8:	47d0      	blx	sl
 80059ba:	3001      	adds	r0, #1
 80059bc:	d09d      	beq.n	80058fa <_printf_i+0x15a>
 80059be:	3501      	adds	r5, #1
 80059c0:	68e3      	ldr	r3, [r4, #12]
 80059c2:	9903      	ldr	r1, [sp, #12]
 80059c4:	1a5b      	subs	r3, r3, r1
 80059c6:	42ab      	cmp	r3, r5
 80059c8:	dcf2      	bgt.n	80059b0 <_printf_i+0x210>
 80059ca:	e7eb      	b.n	80059a4 <_printf_i+0x204>
 80059cc:	2500      	movs	r5, #0
 80059ce:	f104 0619 	add.w	r6, r4, #25
 80059d2:	e7f5      	b.n	80059c0 <_printf_i+0x220>
 80059d4:	08005dcd 	.word	0x08005dcd
 80059d8:	08005dde 	.word	0x08005dde

080059dc <__sflush_r>:
 80059dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	0716      	lsls	r6, r2, #28
 80059e6:	4605      	mov	r5, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	d454      	bmi.n	8005a96 <__sflush_r+0xba>
 80059ec:	684b      	ldr	r3, [r1, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dc02      	bgt.n	80059f8 <__sflush_r+0x1c>
 80059f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dd48      	ble.n	8005a8a <__sflush_r+0xae>
 80059f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d045      	beq.n	8005a8a <__sflush_r+0xae>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a04:	682f      	ldr	r7, [r5, #0]
 8005a06:	6a21      	ldr	r1, [r4, #32]
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	d030      	beq.n	8005a6e <__sflush_r+0x92>
 8005a0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	0759      	lsls	r1, r3, #29
 8005a12:	d505      	bpl.n	8005a20 <__sflush_r+0x44>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a1a:	b10b      	cbz	r3, 8005a20 <__sflush_r+0x44>
 8005a1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a24:	6a21      	ldr	r1, [r4, #32]
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b0      	blx	r6
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	d106      	bne.n	8005a3e <__sflush_r+0x62>
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	291d      	cmp	r1, #29
 8005a34:	d82b      	bhi.n	8005a8e <__sflush_r+0xb2>
 8005a36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae0 <__sflush_r+0x104>)
 8005a38:	40ca      	lsrs	r2, r1
 8005a3a:	07d6      	lsls	r6, r2, #31
 8005a3c:	d527      	bpl.n	8005a8e <__sflush_r+0xb2>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6062      	str	r2, [r4, #4]
 8005a42:	04d9      	lsls	r1, r3, #19
 8005a44:	6922      	ldr	r2, [r4, #16]
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	d504      	bpl.n	8005a54 <__sflush_r+0x78>
 8005a4a:	1c42      	adds	r2, r0, #1
 8005a4c:	d101      	bne.n	8005a52 <__sflush_r+0x76>
 8005a4e:	682b      	ldr	r3, [r5, #0]
 8005a50:	b903      	cbnz	r3, 8005a54 <__sflush_r+0x78>
 8005a52:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a56:	602f      	str	r7, [r5, #0]
 8005a58:	b1b9      	cbz	r1, 8005a8a <__sflush_r+0xae>
 8005a5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	d002      	beq.n	8005a68 <__sflush_r+0x8c>
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7ff fbf4 	bl	8005250 <_free_r>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a6c:	e00d      	b.n	8005a8a <__sflush_r+0xae>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b0      	blx	r6
 8005a74:	4602      	mov	r2, r0
 8005a76:	1c50      	adds	r0, r2, #1
 8005a78:	d1c9      	bne.n	8005a0e <__sflush_r+0x32>
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0c6      	beq.n	8005a0e <__sflush_r+0x32>
 8005a80:	2b1d      	cmp	r3, #29
 8005a82:	d001      	beq.n	8005a88 <__sflush_r+0xac>
 8005a84:	2b16      	cmp	r3, #22
 8005a86:	d11e      	bne.n	8005ac6 <__sflush_r+0xea>
 8005a88:	602f      	str	r7, [r5, #0]
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e022      	b.n	8005ad4 <__sflush_r+0xf8>
 8005a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	e01b      	b.n	8005ace <__sflush_r+0xf2>
 8005a96:	690f      	ldr	r7, [r1, #16]
 8005a98:	2f00      	cmp	r7, #0
 8005a9a:	d0f6      	beq.n	8005a8a <__sflush_r+0xae>
 8005a9c:	0793      	lsls	r3, r2, #30
 8005a9e:	680e      	ldr	r6, [r1, #0]
 8005aa0:	bf08      	it	eq
 8005aa2:	694b      	ldreq	r3, [r1, #20]
 8005aa4:	600f      	str	r7, [r1, #0]
 8005aa6:	bf18      	it	ne
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	eba6 0807 	sub.w	r8, r6, r7
 8005aae:	608b      	str	r3, [r1, #8]
 8005ab0:	f1b8 0f00 	cmp.w	r8, #0
 8005ab4:	dde9      	ble.n	8005a8a <__sflush_r+0xae>
 8005ab6:	6a21      	ldr	r1, [r4, #32]
 8005ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005aba:	4643      	mov	r3, r8
 8005abc:	463a      	mov	r2, r7
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b0      	blx	r6
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	dc08      	bgt.n	8005ad8 <__sflush_r+0xfc>
 8005ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad8:	4407      	add	r7, r0
 8005ada:	eba8 0800 	sub.w	r8, r8, r0
 8005ade:	e7e7      	b.n	8005ab0 <__sflush_r+0xd4>
 8005ae0:	20400001 	.word	0x20400001

08005ae4 <_fflush_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	4605      	mov	r5, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	b913      	cbnz	r3, 8005af4 <_fflush_r+0x10>
 8005aee:	2500      	movs	r5, #0
 8005af0:	4628      	mov	r0, r5
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	b118      	cbz	r0, 8005afe <_fflush_r+0x1a>
 8005af6:	6a03      	ldr	r3, [r0, #32]
 8005af8:	b90b      	cbnz	r3, 8005afe <_fflush_r+0x1a>
 8005afa:	f7ff f9af 	bl	8004e5c <__sinit>
 8005afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f3      	beq.n	8005aee <_fflush_r+0xa>
 8005b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b08:	07d0      	lsls	r0, r2, #31
 8005b0a:	d404      	bmi.n	8005b16 <_fflush_r+0x32>
 8005b0c:	0599      	lsls	r1, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_fflush_r+0x32>
 8005b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b12:	f7ff fb9a 	bl	800524a <__retarget_lock_acquire_recursive>
 8005b16:	4628      	mov	r0, r5
 8005b18:	4621      	mov	r1, r4
 8005b1a:	f7ff ff5f 	bl	80059dc <__sflush_r>
 8005b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b20:	07da      	lsls	r2, r3, #31
 8005b22:	4605      	mov	r5, r0
 8005b24:	d4e4      	bmi.n	8005af0 <_fflush_r+0xc>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	059b      	lsls	r3, r3, #22
 8005b2a:	d4e1      	bmi.n	8005af0 <_fflush_r+0xc>
 8005b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b2e:	f7ff fb8d 	bl	800524c <__retarget_lock_release_recursive>
 8005b32:	e7dd      	b.n	8005af0 <_fflush_r+0xc>

08005b34 <__swhatbuf_r>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	460c      	mov	r4, r1
 8005b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	b096      	sub	sp, #88	@ 0x58
 8005b40:	4615      	mov	r5, r2
 8005b42:	461e      	mov	r6, r3
 8005b44:	da0d      	bge.n	8005b62 <__swhatbuf_r+0x2e>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b4c:	f04f 0100 	mov.w	r1, #0
 8005b50:	bf14      	ite	ne
 8005b52:	2340      	movne	r3, #64	@ 0x40
 8005b54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b58:	2000      	movs	r0, #0
 8005b5a:	6031      	str	r1, [r6, #0]
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	b016      	add	sp, #88	@ 0x58
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	466a      	mov	r2, sp
 8005b64:	f000 f848 	bl	8005bf8 <_fstat_r>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	dbec      	blt.n	8005b46 <__swhatbuf_r+0x12>
 8005b6c:	9901      	ldr	r1, [sp, #4]
 8005b6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b76:	4259      	negs	r1, r3
 8005b78:	4159      	adcs	r1, r3
 8005b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b7e:	e7eb      	b.n	8005b58 <__swhatbuf_r+0x24>

08005b80 <__smakebuf_r>:
 8005b80:	898b      	ldrh	r3, [r1, #12]
 8005b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b84:	079d      	lsls	r5, r3, #30
 8005b86:	4606      	mov	r6, r0
 8005b88:	460c      	mov	r4, r1
 8005b8a:	d507      	bpl.n	8005b9c <__smakebuf_r+0x1c>
 8005b8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	6123      	str	r3, [r4, #16]
 8005b94:	2301      	movs	r3, #1
 8005b96:	6163      	str	r3, [r4, #20]
 8005b98:	b003      	add	sp, #12
 8005b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9c:	ab01      	add	r3, sp, #4
 8005b9e:	466a      	mov	r2, sp
 8005ba0:	f7ff ffc8 	bl	8005b34 <__swhatbuf_r>
 8005ba4:	9f00      	ldr	r7, [sp, #0]
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	4639      	mov	r1, r7
 8005baa:	4630      	mov	r0, r6
 8005bac:	f7ff fbbc 	bl	8005328 <_malloc_r>
 8005bb0:	b948      	cbnz	r0, 8005bc6 <__smakebuf_r+0x46>
 8005bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb6:	059a      	lsls	r2, r3, #22
 8005bb8:	d4ee      	bmi.n	8005b98 <__smakebuf_r+0x18>
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	e7e2      	b.n	8005b8c <__smakebuf_r+0xc>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	6020      	str	r0, [r4, #0]
 8005bca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bce:	81a3      	strh	r3, [r4, #12]
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bd6:	b15b      	cbz	r3, 8005bf0 <__smakebuf_r+0x70>
 8005bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f000 f81d 	bl	8005c1c <_isatty_r>
 8005be2:	b128      	cbz	r0, 8005bf0 <__smakebuf_r+0x70>
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	81a3      	strh	r3, [r4, #12]
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	431d      	orrs	r5, r3
 8005bf4:	81a5      	strh	r5, [r4, #12]
 8005bf6:	e7cf      	b.n	8005b98 <__smakebuf_r+0x18>

08005bf8 <_fstat_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4d07      	ldr	r5, [pc, #28]	@ (8005c18 <_fstat_r+0x20>)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	f7fd fb14 	bl	8003232 <_fstat>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d102      	bne.n	8005c14 <_fstat_r+0x1c>
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	b103      	cbz	r3, 8005c14 <_fstat_r+0x1c>
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	bf00      	nop
 8005c18:	2000050c 	.word	0x2000050c

08005c1c <_isatty_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4d06      	ldr	r5, [pc, #24]	@ (8005c38 <_isatty_r+0x1c>)
 8005c20:	2300      	movs	r3, #0
 8005c22:	4604      	mov	r4, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	602b      	str	r3, [r5, #0]
 8005c28:	f7fd fb13 	bl	8003252 <_isatty>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_isatty_r+0x1a>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_isatty_r+0x1a>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	2000050c 	.word	0x2000050c

08005c3c <_sbrk_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d06      	ldr	r5, [pc, #24]	@ (8005c58 <_sbrk_r+0x1c>)
 8005c40:	2300      	movs	r3, #0
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	602b      	str	r3, [r5, #0]
 8005c48:	f7fd fb1c 	bl	8003284 <_sbrk>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_sbrk_r+0x1a>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_sbrk_r+0x1a>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	2000050c 	.word	0x2000050c

08005c5c <_init>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	bf00      	nop
 8005c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c62:	bc08      	pop	{r3}
 8005c64:	469e      	mov	lr, r3
 8005c66:	4770      	bx	lr

08005c68 <_fini>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr
