
robot_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a98  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004c68  08004c68  00005c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e14  08004e14  0000632c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e14  08004e14  00005e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e1c  08004e1c  0000632c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e1c  08004e1c  00005e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e20  08004e20  00005e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000032c  20000000  08004e24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  2000032c  08005150  0000632c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  08005150  00006904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000632c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac2a  00000000  00000000  0000635c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6c  00000000  00000000  00010f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00012ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a09  00000000  00000000  00013c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f64b  00000000  00000000  00014671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab1e  00000000  00000000  00033cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a99c1  00000000  00000000  0003e7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e819b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fcc  00000000  00000000  000e81e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ec1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000032c 	.word	0x2000032c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c50 	.word	0x08004c50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000330 	.word	0x20000330
 800020c:	08004c50 	.word	0x08004c50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80005e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <LL_DMA_EnableStream+0x3c>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4908      	ldr	r1, [pc, #32]	@ (8000618 <LL_DMA_EnableStream+0x3c>)
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	440a      	add	r2, r1
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	4611      	mov	r1, r2
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	440a      	add	r2, r1
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6013      	str	r3, [r2, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	08004db0 	.word	0x08004db0

0800061c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000626:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <LL_DMA_DisableStream+0x3c>)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4908      	ldr	r1, [pc, #32]	@ (8000658 <LL_DMA_DisableStream+0x3c>)
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	440a      	add	r2, r1
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	440a      	add	r2, r1
 8000644:	f023 0301 	bic.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	08004db0 	.word	0x08004db0

0800065c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LL_DMA_SetDataLength+0x44>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4413      	add	r3, r2
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	0c1b      	lsrs	r3, r3, #16
 800067a:	041b      	lsls	r3, r3, #16
 800067c:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <LL_DMA_SetDataLength+0x44>)
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	440a      	add	r2, r1
 8000682:	7812      	ldrb	r2, [r2, #0]
 8000684:	4611      	mov	r1, r2
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	440a      	add	r2, r1
 800068a:	4611      	mov	r1, r2
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	604b      	str	r3, [r1, #4]
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	08004db0 	.word	0x08004db0

080006a4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80006b0:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <LL_DMA_SetMemoryAddress+0x2c>)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	08004db0 	.word	0x08004db0

080006d4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	2b20      	cmp	r3, #32
 80006e6:	bf0c      	ite	eq
 80006e8:	2301      	moveq	r3, #1
 80006ea:	2300      	movne	r3, #0
 80006ec:	b2db      	uxtb	r3, r3
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b089      	sub	sp, #36	@ 0x24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3314      	adds	r3, #20
 8000706:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	e853 3f00 	ldrex	r3, [r3]
 800070e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3314      	adds	r3, #20
 800071c:	69fa      	ldr	r2, [r7, #28]
 800071e:	61ba      	str	r2, [r7, #24]
 8000720:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	e841 2300 	strex	r3, r2, [r1]
 800072a:	613b      	str	r3, [r7, #16]
   return(result);
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1e7      	bne.n	8000702 <LL_USART_EnableDMAReq_TX+0x8>
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3724      	adds	r7, #36	@ 0x24
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	b2db      	uxtb	r3, r3
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	619a      	str	r2, [r3, #24]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <transmitInstructionPacket4>:
	for(int i = 0; i < 15; i++)
		printf("%x, ", debug_Status_Packet_Array[i]);
	printf("\r\nyou recieved!\r\n");
}

void transmitInstructionPacket4(void) {  // Transmit instruction packet to Dynamixel
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	dynamixel_Ready = 0;
 800077e:	4b28      	ldr	r3, [pc, #160]	@ (8000820 <transmitInstructionPacket4+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
//	  1. Disable DMA Stream (先停)
	 LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8000784:	2104      	movs	r1, #4
 8000786:	4827      	ldr	r0, [pc, #156]	@ (8000824 <transmitInstructionPacket4+0xac>)
 8000788:	f7ff ff48 	bl	800061c <LL_DMA_DisableStream>
//	  2. 設置 DMA memory 與 data length
	 LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)Instruction_Packet_Array);
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <transmitInstructionPacket4+0xb0>)
 800078e:	461a      	mov	r2, r3
 8000790:	2104      	movs	r1, #4
 8000792:	4824      	ldr	r0, [pc, #144]	@ (8000824 <transmitInstructionPacket4+0xac>)
 8000794:	f7ff ff86 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	 LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5] + 7);
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <transmitInstructionPacket4+0xb0>)
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	3307      	adds	r3, #7
 800079e:	461a      	mov	r2, r3
 80007a0:	2104      	movs	r1, #4
 80007a2:	4820      	ldr	r0, [pc, #128]	@ (8000824 <transmitInstructionPacket4+0xac>)
 80007a4:	f7ff ff5a 	bl	800065c <LL_DMA_SetDataLength>
//	  3. Enable DMA Stream again
	 LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 80007a8:	2104      	movs	r1, #4
 80007aa:	481e      	ldr	r0, [pc, #120]	@ (8000824 <transmitInstructionPacket4+0xac>)
 80007ac:	f7ff ff16 	bl	80005dc <LL_DMA_EnableStream>
	 LL_USART_EnableDMAReq_TX(UART4);  // 確保 USART TX DMA 也啟用
 80007b0:	481e      	ldr	r0, [pc, #120]	@ (800082c <transmitInstructionPacket4+0xb4>)
 80007b2:	f7ff ffa2 	bl	80006fa <LL_USART_EnableDMAReq_TX>
	#if USE_THREE_STATE_GATE == 1
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80007b6:	2110      	movs	r1, #16
 80007b8:	481d      	ldr	r0, [pc, #116]	@ (8000830 <transmitInstructionPacket4+0xb8>)
 80007ba:	f7ff ffce 	bl	800075a <LL_GPIO_SetOutputPin>
		printf("1\r\n");
 80007be:	481d      	ldr	r0, [pc, #116]	@ (8000834 <transmitInstructionPacket4+0xbc>)
 80007c0:	f003 fbe4 	bl	8003f8c <puts>
		printf("TX Packet: ");
 80007c4:	481c      	ldr	r0, [pc, #112]	@ (8000838 <transmitInstructionPacket4+0xc0>)
 80007c6:	f003 fb79 	bl	8003ebc <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	e00a      	b.n	80007e6 <transmitInstructionPacket4+0x6e>
			printf("%02X ", Instruction_Packet_Array[i]);
 80007d0:	4a15      	ldr	r2, [pc, #84]	@ (8000828 <transmitInstructionPacket4+0xb0>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4818      	ldr	r0, [pc, #96]	@ (800083c <transmitInstructionPacket4+0xc4>)
 80007dc:	f003 fb6e 	bl	8003ebc <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3301      	adds	r3, #1
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <transmitInstructionPacket4+0xb0>)
 80007e8:	795b      	ldrb	r3, [r3, #5]
 80007ea:	3306      	adds	r3, #6
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	ddee      	ble.n	80007d0 <transmitInstructionPacket4+0x58>
		}
		printf("\r\n");
 80007f2:	4813      	ldr	r0, [pc, #76]	@ (8000840 <transmitInstructionPacket4+0xc8>)
 80007f4:	f003 fbca 	bl	8003f8c <puts>
	#else
		LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_TX);
		printf("2\r\n");
	#endif
		printf("3\r\n");
 80007f8:	4812      	ldr	r0, [pc, #72]	@ (8000844 <transmitInstructionPacket4+0xcc>)
 80007fa:	f003 fbc7 	bl	8003f8c <puts>
		LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <transmitInstructionPacket4+0xb0>)
 8000800:	795b      	ldrb	r3, [r3, #5]
 8000802:	3307      	adds	r3, #7
 8000804:	461a      	mov	r2, r3
 8000806:	2104      	movs	r1, #4
 8000808:	4806      	ldr	r0, [pc, #24]	@ (8000824 <transmitInstructionPacket4+0xac>)
 800080a:	f7ff ff27 	bl	800065c <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 800080e:	2104      	movs	r1, #4
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <transmitInstructionPacket4+0xac>)
 8000812:	f7ff fee3 	bl	80005dc <LL_DMA_EnableStream>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000000 	.word	0x20000000
 8000824:	40026000 	.word	0x40026000
 8000828:	20000004 	.word	0x20000004
 800082c:	40004c00 	.word	0x40004c00
 8000830:	40020000 	.word	0x40020000
 8000834:	08004c98 	.word	0x08004c98
 8000838:	08004c9c 	.word	0x08004c9c
 800083c:	08004ca8 	.word	0x08004ca8
 8000840:	08004cb0 	.word	0x08004cb0
 8000844:	08004cb4 	.word	0x08004cb4

08000848 <readStatusPacket4>:
		printf("3\r\n");
		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
}

void readStatusPacket4(void) {
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
	// 清空 RX buffer（保險）
	while (LL_USART_IsActiveFlag_RXNE(UART4)) {
 800084e:	e002      	b.n	8000856 <readStatusPacket4+0xe>
	    (void)LL_USART_ReceiveData8(UART4);  // 清空舊資料，避免警告
 8000850:	4823      	ldr	r0, [pc, #140]	@ (80008e0 <readStatusPacket4+0x98>)
 8000852:	f7ff ff75 	bl	8000740 <LL_USART_ReceiveData8>
	while (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8000856:	4822      	ldr	r0, [pc, #136]	@ (80008e0 <readStatusPacket4+0x98>)
 8000858:	f7ff ff3c 	bl	80006d4 <LL_USART_IsActiveFlag_RXNE>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f6      	bne.n	8000850 <readStatusPacket4+0x8>
	}
	for(uint8_t i = 0; i < Status_packet_length + 4; i++) {
 8000862:	2300      	movs	r3, #0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	e014      	b.n	8000892 <readStatusPacket4+0x4a>
		while(LL_USART_IsActiveFlag_RXNE(UART4) == RESET) {
 8000868:	bf00      	nop
 800086a:	481d      	ldr	r0, [pc, #116]	@ (80008e0 <readStatusPacket4+0x98>)
 800086c:	f7ff ff32 	bl	80006d4 <LL_USART_IsActiveFlag_RXNE>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0f9      	beq.n	800086a <readStatusPacket4+0x22>
		}
		printf("read\r\n");
 8000876:	481b      	ldr	r0, [pc, #108]	@ (80008e4 <readStatusPacket4+0x9c>)
 8000878:	f003 fb88 	bl	8003f8c <puts>
		Status_Packet_Array[i] = LL_USART_ReceiveData8(UART4);
 800087c:	79fc      	ldrb	r4, [r7, #7]
 800087e:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <readStatusPacket4+0x98>)
 8000880:	f7ff ff5e 	bl	8000740 <LL_USART_ReceiveData8>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <readStatusPacket4+0xa0>)
 800088a:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i < Status_packet_length + 4; i++) {
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3301      	adds	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	79fa      	ldrb	r2, [r7, #7]
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <readStatusPacket4+0xa4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3304      	adds	r3, #4
 800089a:	429a      	cmp	r2, r3
 800089c:	d3e4      	bcc.n	8000868 <readStatusPacket4+0x20>
	}
	printf(".RX Packet: ");
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <readStatusPacket4+0xa8>)
 80008a0:	f003 fb0c 	bl	8003ebc <iprintf>
	for (int i = 0; i < Status_packet_length + 4; i++) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	e00a      	b.n	80008c0 <readStatusPacket4+0x78>
	    printf("%02X ", Status_Packet_Array[i]);
 80008aa:	4a0f      	ldr	r2, [pc, #60]	@ (80008e8 <readStatusPacket4+0xa0>)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <readStatusPacket4+0xac>)
 80008b6:	f003 fb01 	bl	8003ebc <iprintf>
	for (int i = 0; i < Status_packet_length + 4; i++) {
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <readStatusPacket4+0xa4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	1d1a      	adds	r2, r3, #4
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d8ee      	bhi.n	80008aa <readStatusPacket4+0x62>
	}
	printf("\r\n");
 80008cc:	480a      	ldr	r0, [pc, #40]	@ (80008f8 <readStatusPacket4+0xb0>)
 80008ce:	f003 fb5d 	bl	8003f8c <puts>
	dynamixel_Ready = 1;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <readStatusPacket4+0xb4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	40004c00 	.word	0x40004c00
 80008e4:	08004cb8 	.word	0x08004cb8
 80008e8:	2000039c 	.word	0x2000039c
 80008ec:	20000398 	.word	0x20000398
 80008f0:	08004cc0 	.word	0x08004cc0
 80008f4:	08004ca8 	.word	0x08004ca8
 80008f8:	08004cb0 	.word	0x08004cb0
 80008fc:	20000000 	.word	0x20000000

08000900 <readStatusPacket_pos_DMA>:
		Status_Packet_Array[i] = LL_USART_ReceiveData8(USART6);
	}
	dynamixel_Ready = 1;
}

void readStatusPacket_pos_DMA(int32_t* position) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	if(Status_Packet_Array[8] == 0) {   //確認錯誤碼
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <readStatusPacket_pos_DMA+0x48>)
 800090a:	7a1b      	ldrb	r3, [r3, #8]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d114      	bne.n	800093a <readStatusPacket_pos_DMA+0x3a>
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000910:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <readStatusPacket_pos_DMA+0x48>)
 8000912:	7b1b      	ldrb	r3, [r3, #12]
 8000914:	061a      	lsls	r2, r3, #24
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <readStatusPacket_pos_DMA+0x48>)
 8000918:	7adb      	ldrb	r3, [r3, #11]
 800091a:	041b      	lsls	r3, r3, #16
 800091c:	431a      	orrs	r2, r3
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <readStatusPacket_pos_DMA+0x48>)
 8000920:	7a9b      	ldrb	r3, [r3, #10]
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	431a      	orrs	r2, r3
			| Status_Packet_Array[9];
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <readStatusPacket_pos_DMA+0x48>)
 8000928:	7a5b      	ldrb	r3, [r3, #9]
 800092a:	4618      	mov	r0, r3
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <readStatusPacket_pos_DMA+0x48>)
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	440b      	add	r3, r1
			| Status_Packet_Array[9];
 8000936:	4302      	orrs	r2, r0
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000938:	601a      	str	r2, [r3, #0]
	}
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	2000039c 	.word	0x2000039c

0800094c <StatusReturnLevel>:
		else
			return (Status_Packet_Array[8] | 0xF000);
	}
}

uint8_t StatusReturnLevel(uint8_t ID, uint8_t level) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	4613      	mov	r3, r2
 800095a:	71bb      	strb	r3, [r7, #6]
	while(dynamixel_Ready != 1) {
 800095c:	bf00      	nop
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <StatusReturnLevel+0xc4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d1fb      	bne.n	800095e <StatusReturnLevel+0x12>
	}
	Instruction_Packet_Array[4] = ID;
 8000966:	4a2b      	ldr	r2, [pc, #172]	@ (8000a14 <StatusReturnLevel+0xc8>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x06;
 800096c:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <StatusReturnLevel+0xc8>)
 800096e:	2206      	movs	r2, #6
 8000970:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <StatusReturnLevel+0xc8>)
 8000974:	2200      	movs	r2, #0
 8000976:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_WRITE_DATA;
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <StatusReturnLevel+0xc8>)
 800097a:	2203      	movs	r2, #3
 800097c:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_STATUS_RETURN_LEVEL;
 800097e:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <StatusReturnLevel+0xc8>)
 8000980:	2244      	movs	r2, #68	@ 0x44
 8000982:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000984:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <StatusReturnLevel+0xc8>)
 8000986:	2200      	movs	r2, #0
 8000988:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = level;
 800098a:	4a22      	ldr	r2, [pc, #136]	@ (8000a14 <StatusReturnLevel+0xc8>)
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	7293      	strb	r3, [r2, #10]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000990:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <StatusReturnLevel+0xc8>)
 8000992:	795b      	ldrb	r3, [r3, #5]
 8000994:	3305      	adds	r3, #5
 8000996:	b29b      	uxth	r3, r3
 8000998:	4619      	mov	r1, r3
 800099a:	481e      	ldr	r0, [pc, #120]	@ (8000a14 <StatusReturnLevel+0xc8>)
 800099c:	f000 f8bc 	bl	8000b18 <update_crc>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <StatusReturnLevel+0xcc>)
 80009a6:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[11] = crc & 0x00FF;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <StatusReturnLevel+0xcc>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <StatusReturnLevel+0xc8>)
 80009b0:	72da      	strb	r2, [r3, #11]
	Instruction_Packet_Array[12] = (crc >> 8) & 0x00FF;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <StatusReturnLevel+0xcc>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	0a1b      	lsrs	r3, r3, #8
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <StatusReturnLevel+0xc8>)
 80009be:	731a      	strb	r2, [r3, #12]

	Status_packet_length = 7; // ID(1) + LEN(2) + INS(1) + ERR(1) + CRC(2)
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <StatusReturnLevel+0xd0>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	601a      	str	r2, [r3, #0]

	Status_Return_Level = level;
 80009c6:	4a16      	ldr	r2, [pc, #88]	@ (8000a20 <StatusReturnLevel+0xd4>)
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	7013      	strb	r3, [r2, #0]

	if(ID == 0XFE || Status_Return_Level != ALL) {
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80009d0:	d003      	beq.n	80009da <StatusReturnLevel+0x8e>
 80009d2:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <StatusReturnLevel+0xd4>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d006      	beq.n	80009e8 <StatusReturnLevel+0x9c>
		Packet_Return = 0;
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <StatusReturnLevel+0xd8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80009e0:	f7ff feca 	bl	8000778 <transmitInstructionPacket4>
		return (0x00);
 80009e4:	2300      	movs	r3, #0
 80009e6:	e00e      	b.n	8000a06 <StatusReturnLevel+0xba>
	}
	else {
		Packet_Return = 1;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <StatusReturnLevel+0xd8>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80009ee:	f7ff fec3 	bl	8000778 <transmitInstructionPacket4>
		readStatusPacket4();
 80009f2:	f7ff ff29 	bl	8000848 <readStatusPacket4>
		if(Status_Packet_Array[8] == 0)
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <StatusReturnLevel+0xdc>)
 80009f8:	7a1b      	ldrb	r3, [r3, #8]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <StatusReturnLevel+0xb6>
			return (0x00);
 80009fe:	2300      	movs	r3, #0
 8000a00:	e001      	b.n	8000a06 <StatusReturnLevel+0xba>
		else
			return (Status_Packet_Array[8] | 0xF000);
 8000a02:	4b09      	ldr	r3, [pc, #36]	@ (8000a28 <StatusReturnLevel+0xdc>)
 8000a04:	7a1b      	ldrb	r3, [r3, #8]
	}
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000004 	.word	0x20000004
 8000a18:	200003b6 	.word	0x200003b6
 8000a1c:	20000398 	.word	0x20000398
 8000a20:	20000002 	.word	0x20000002
 8000a24:	20000001 	.word	0x20000001
 8000a28:	2000039c 	.word	0x2000039c

08000a2c <ReadPosition>:
		else
			return (Status_Packet_Array[8] | 0xF000);
	}
}

int32_t ReadPosition(uint8_t ID) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8000a36:	bf00      	nop
 8000a38:	4b31      	ldr	r3, [pc, #196]	@ (8000b00 <ReadPosition+0xd4>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d1fb      	bne.n	8000a38 <ReadPosition+0xc>
	}
	Instruction_Packet_Array[0] = 0xFF;
 8000a40:	4b30      	ldr	r3, [pc, #192]	@ (8000b04 <ReadPosition+0xd8>)
 8000a42:	22ff      	movs	r2, #255	@ 0xff
 8000a44:	701a      	strb	r2, [r3, #0]
	Instruction_Packet_Array[1] = 0xFF;
 8000a46:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <ReadPosition+0xd8>)
 8000a48:	22ff      	movs	r2, #255	@ 0xff
 8000a4a:	705a      	strb	r2, [r3, #1]
	Instruction_Packet_Array[2] = 0xFD;
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <ReadPosition+0xd8>)
 8000a4e:	22fd      	movs	r2, #253	@ 0xfd
 8000a50:	709a      	strb	r2, [r3, #2]
	Instruction_Packet_Array[3] = 0x00;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <ReadPosition+0xd8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	70da      	strb	r2, [r3, #3]
	Instruction_Packet_Array[4] = ID;
 8000a58:	4a2a      	ldr	r2, [pc, #168]	@ (8000b04 <ReadPosition+0xd8>)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x07;
 8000a5e:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <ReadPosition+0xd8>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000a64:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <ReadPosition+0xd8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_READ_DATA;
 8000a6a:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <ReadPosition+0xd8>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_PRESENT_POSITION_1;
 8000a70:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <ReadPosition+0xd8>)
 8000a72:	2284      	movs	r2, #132	@ 0x84
 8000a74:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000a76:	4b23      	ldr	r3, [pc, #140]	@ (8000b04 <ReadPosition+0xd8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = READ_FOUR_BYTE_LENGTH;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <ReadPosition+0xd8>)
 8000a7e:	2204      	movs	r2, #4
 8000a80:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8000a82:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <ReadPosition+0xd8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	72da      	strb	r2, [r3, #11]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <ReadPosition+0xd8>)
 8000a8a:	795b      	ldrb	r3, [r3, #5]
 8000a8c:	3305      	adds	r3, #5
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	481c      	ldr	r0, [pc, #112]	@ (8000b04 <ReadPosition+0xd8>)
 8000a94:	f000 f840 	bl	8000b18 <update_crc>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <ReadPosition+0xdc>)
 8000a9e:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[12] = crc & 0x00FF;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <ReadPosition+0xdc>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <ReadPosition+0xd8>)
 8000aa8:	731a      	strb	r2, [r3, #12]
	Instruction_Packet_Array[13] = (crc >> 8) & 0x00FF;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <ReadPosition+0xdc>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <ReadPosition+0xd8>)
 8000ab6:	735a      	strb	r2, [r3, #13]

	Status_packet_length = 11; // ID(1) + LEN(2) + INS(1) + ERR(1) + PARA(4) + CRC(2)
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <ReadPosition+0xe0>)
 8000aba:	220b      	movs	r2, #11
 8000abc:	601a      	str	r2, [r3, #0]
	Packet_Return = 1;
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <ReadPosition+0xe4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 8000ac4:	f7ff fe58 	bl	8000778 <transmitInstructionPacket4>
	readStatusPacket4();
 8000ac8:	f7ff febe 	bl	8000848 <readStatusPacket4>

	if(Status_Packet_Array[8] == 0) {               // If there is no status packet error return value
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <ReadPosition+0xe8>)
 8000ace:	7a1b      	ldrb	r3, [r3, #8]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d10e      	bne.n	8000af2 <ReadPosition+0xc6>
		return (Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8 | Status_Packet_Array[9]); // Return present position value
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <ReadPosition+0xe8>)
 8000ad6:	7b1b      	ldrb	r3, [r3, #12]
 8000ad8:	061a      	lsls	r2, r3, #24
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <ReadPosition+0xe8>)
 8000adc:	7adb      	ldrb	r3, [r3, #11]
 8000ade:	041b      	lsls	r3, r3, #16
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <ReadPosition+0xe8>)
 8000ae4:	7a9b      	ldrb	r3, [r3, #10]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <ReadPosition+0xe8>)
 8000aec:	7a52      	ldrb	r2, [r2, #9]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	e001      	b.n	8000af6 <ReadPosition+0xca>
	}
	else {
		return (Status_Packet_Array[8]);            // If there is a error Returns error value
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <ReadPosition+0xe8>)
 8000af4:	7a1b      	ldrb	r3, [r3, #8]
	}
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000004 	.word	0x20000004
 8000b08:	200003b6 	.word	0x200003b6
 8000b0c:	20000398 	.word	0x20000398
 8000b10:	20000001 	.word	0x20000001
 8000b14:	2000039c 	.word	0x2000039c

08000b18 <update_crc>:
	0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
	0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
	0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
	0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

uint16_t update_crc(uint8_t* data_blk_ptr, uint16_t data_blk_size) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	807b      	strh	r3, [r7, #2]
	uint16_t crc_accum = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	81fb      	strh	r3, [r7, #14]
	uint16_t i, j;

	for(j = 0; j < data_blk_size; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81bb      	strh	r3, [r7, #12]
 8000b2c:	e019      	b.n	8000b62 <update_crc+0x4a>
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	89ba      	ldrh	r2, [r7, #12]
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	440a      	add	r2, r1
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	4053      	eors	r3, r2
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000b44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	897b      	ldrh	r3, [r7, #10]
 8000b4e:	490a      	ldr	r1, [pc, #40]	@ (8000b78 <update_crc+0x60>)
 8000b50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	4053      	eors	r3, r2
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	81fb      	strh	r3, [r7, #14]
	for(j = 0; j < data_blk_size; j++) {
 8000b5c:	89bb      	ldrh	r3, [r7, #12]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	81bb      	strh	r3, [r7, #12]
 8000b62:	89ba      	ldrh	r2, [r7, #12]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d3e1      	bcc.n	8000b2e <update_crc+0x16>
	}

	return crc_accum;
 8000b6a:	89fb      	ldrh	r3, [r7, #14]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	200000cc 	.word	0x200000cc

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	@ (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	@ (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	@ 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	@ 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c9c:	4907      	ldr	r1, [pc, #28]	@ (8000cbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4013      	ands	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000cc4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000cc8:	f7ff ffe2 	bl	8000c90 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000ccc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000cd0:	f7ff ffde 	bl	8000c90 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cd4:	f7ff ff52 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ffa2 	bl	8000c28 <NVIC_EncodePriority>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	200d      	movs	r0, #13
 8000cea:	f7ff ff73 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cee:	200d      	movs	r0, #13
 8000cf0:	f7ff ff52 	bl	8000b98 <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cf4:	f7ff ff42 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff92 	bl	8000c28 <NVIC_EncodePriority>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4619      	mov	r1, r3
 8000d08:	200f      	movs	r0, #15
 8000d0a:	f7ff ff63 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f7ff ff42 	bl	8000b98 <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d14:	f7ff ff32 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff82 	bl	8000c28 <NVIC_EncodePriority>
 8000d24:	4603      	mov	r3, r0
 8000d26:	4619      	mov	r1, r3
 8000d28:	2010      	movs	r0, #16
 8000d2a:	f7ff ff53 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f7ff ff32 	bl	8000b98 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d34:	f7ff ff22 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff72 	bl	8000c28 <NVIC_EncodePriority>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4619      	mov	r1, r3
 8000d48:	2011      	movs	r0, #17
 8000d4a:	f7ff ff43 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d4e:	2011      	movs	r0, #17
 8000d50:	f7ff ff22 	bl	8000b98 <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d54:	f7ff ff12 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff62 	bl	8000c28 <NVIC_EncodePriority>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4619      	mov	r1, r3
 8000d68:	2039      	movs	r0, #57	@ 0x39
 8000d6a:	f7ff ff33 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d6e:	2039      	movs	r0, #57	@ 0x39
 8000d70:	f7ff ff12 	bl	8000b98 <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d74:	f7ff ff02 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff52 	bl	8000c28 <NVIC_EncodePriority>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4619      	mov	r1, r3
 8000d88:	2045      	movs	r0, #69	@ 0x45
 8000d8a:	f7ff ff23 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000d8e:	2045      	movs	r0, #69	@ 0x45
 8000d90:	f7ff ff02 	bl	8000b98 <__NVIC_EnableIRQ>

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <LL_AHB1_GRP1_EnableClock>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	041a      	lsls	r2, r3, #16
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	619a      	str	r2, [r3, #24]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f7ff ffca 	bl	8000d98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000e04:	2080      	movs	r0, #128	@ 0x80
 8000e06:	f7ff ffc7 	bl	8000d98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff ffc4 	bl	8000d98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff ffc1 	bl	8000d98 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000e16:	2008      	movs	r0, #8
 8000e18:	f7ff ffbe 	bl	8000d98 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel4_CS_GPIO_Port, Dynamixel4_CS_Pin);
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4814      	ldr	r0, [pc, #80]	@ (8000e70 <MX_GPIO_Init+0x88>)
 8000e20:	f7ff ffd2 	bl	8000dc8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel6_CS_GPIO_Port, Dynamixel6_CS_Pin);
 8000e24:	2101      	movs	r1, #1
 8000e26:	4813      	ldr	r0, [pc, #76]	@ (8000e74 <MX_GPIO_Init+0x8c>)
 8000e28:	f7ff ffce 	bl	8000dc8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Dynamixel4_CS_Pin;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e30:	2301      	movs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000e34:	2302      	movs	r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel4_CS_GPIO_Port, &GPIO_InitStruct);
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	480a      	ldr	r0, [pc, #40]	@ (8000e70 <MX_GPIO_Init+0x88>)
 8000e46:	f002 f963 	bl	8003110 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Dynamixel6_CS_Pin;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000e52:	2302      	movs	r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel6_CS_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <MX_GPIO_Init+0x8c>)
 8000e64:	f002 f954 	bl	8003110 <LL_GPIO_Init>

}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020400 	.word	0x40020400

08000e78 <__NVIC_SetPriorityGrouping>:
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <LL_RCC_HSE_EnableBypass+0x1c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a04      	ldr	r2, [pc, #16]	@ (8000edc <LL_RCC_HSE_EnableBypass+0x1c>)
 8000eca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <LL_RCC_HSE_Enable+0x1c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <LL_RCC_HSE_Enable+0x1c>)
 8000eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800

08000f00 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <LL_RCC_HSE_IsReady+0x24>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000f10:	bf0c      	ite	eq
 8000f12:	2301      	moveq	r3, #1
 8000f14:	2300      	movne	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <LL_RCC_SetSysClkSource+0x24>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f023 0203 	bic.w	r2, r3, #3
 8000f38:	4904      	ldr	r1, [pc, #16]	@ (8000f4c <LL_RCC_SetSysClkSource+0x24>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	608b      	str	r3, [r1, #8]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40023800 	.word	0x40023800

08000f50 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <LL_RCC_GetSysClkSource+0x18>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 030c 	and.w	r3, r3, #12
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f7c:	4904      	ldr	r1, [pc, #16]	@ (8000f90 <LL_RCC_SetAHBPrescaler+0x24>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40023800 	.word	0x40023800

08000f94 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000fa4:	4904      	ldr	r1, [pc, #16]	@ (8000fb8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	608b      	str	r3, [r1, #8]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40023800 	.word	0x40023800

08000fbc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000fcc:	4904      	ldr	r1, [pc, #16]	@ (8000fe0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <LL_RCC_SetTIMPrescaler+0x28>)
 8000fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ff2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000ff6:	4905      	ldr	r1, [pc, #20]	@ (800100c <LL_RCC_SetTIMPrescaler+0x28>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40023800 	.word	0x40023800

08001010 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <LL_RCC_PLL_Enable+0x1c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <LL_RCC_PLL_Enable+0x1c>)
 800101a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800

08001030 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <LL_RCC_PLL_IsReady+0x24>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 800106c:	4013      	ands	r3, r2
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	4311      	orrs	r1, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	0192      	lsls	r2, r2, #6
 8001078:	430a      	orrs	r2, r1
 800107a:	490c      	ldr	r1, [pc, #48]	@ (80010ac <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001088:	4908      	ldr	r1, [pc, #32]	@ (80010ac <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001098:	4904      	ldr	r1, [pc, #16]	@ (80010ac <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40023800 	.word	0x40023800
 80010b0:	ffbf8000 	.word	0xffbf8000

080010b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40023800 	.word	0x40023800

080010e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010f0:	4907      	ldr	r1, [pc, #28]	@ (8001110 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4013      	ands	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40023800 	.word	0x40023800

08001114 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <LL_FLASH_SetLatency+0x24>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 020f 	bic.w	r2, r3, #15
 8001124:	4904      	ldr	r1, [pc, #16]	@ (8001138 <LL_FLASH_SetLatency+0x24>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023c00 	.word	0x40023c00

0800113c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <LL_FLASH_GetLatency+0x18>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 030f 	and.w	r3, r3, #15
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00

08001158 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b04      	cmp	r3, #4
 8001164:	d106      	bne.n	8001174 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <LL_SYSTICK_SetClkSource+0x34>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a08      	ldr	r2, [pc, #32]	@ (800118c <LL_SYSTICK_SetClkSource+0x34>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001172:	e005      	b.n	8001180 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <LL_SYSTICK_SetClkSource+0x34>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a04      	ldr	r2, [pc, #16]	@ (800118c <LL_SYSTICK_SetClkSource+0x34>)
 800117a:	f023 0304 	bic.w	r3, r3, #4
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e010 	.word	0xe000e010

08001190 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <LL_SYSTICK_EnableIT+0x1c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <LL_SYSTICK_EnableIT+0x1c>)
 800119a:	f043 0302 	orr.w	r3, r3, #2
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <LL_PWR_EnableOverDriveMode+0x1c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <LL_PWR_EnableOverDriveMode+0x1c>)
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000

080011d0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80011e0:	4904      	ldr	r1, [pc, #16]	@ (80011f4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40007000 	.word	0x40007000

080011f8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <LL_PWR_IsActiveFlag_VOS+0x24>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001208:	bf0c      	ite	eq
 800120a:	2301      	moveq	r3, #1
 800120c:	2300      	movne	r3, #0
 800120e:	b2db      	uxtb	r3, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000

08001220 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f06f 0201 	mvn.w	r2, #1
 800124e:	611a      	str	r2, [r3, #16]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_USART_IsActiveFlag_TXE>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128c:	2b80      	cmp	r3, #128	@ 0x80
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80012ae:	78fa      	ldrb	r2, [r7, #3]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	605a      	str	r2, [r3, #4]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_GPIO_ResetOutputPin>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	041a      	lsls	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80012e6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80012ea:	f7ff fee3 	bl	80010b4 <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80012ee:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80012f2:	f7ff fef7 	bl	80010e4 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80012f6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80012fa:	f7ff fedb 	bl	80010b4 <LL_APB1_GRP1_EnableClock>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80012fe:	2110      	movs	r1, #16
 8001300:	4835      	ldr	r0, [pc, #212]	@ (80013d8 <main+0xf8>)
 8001302:	f7ff ffdd 	bl	80012c0 <LL_GPIO_ResetOutputPin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001306:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800130a:	f7ff feeb 	bl	80010e4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800130e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001312:	f7ff fecf 	bl	80010b4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001316:	2007      	movs	r0, #7
 8001318:	f7ff fdae 	bl	8000e78 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131c:	f000 f86c 	bl	80013f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_Init1msTick(180000000);			//Add here to fix MX generated code
 8001320:	482e      	ldr	r0, [pc, #184]	@ (80013dc <main+0xfc>)
 8001322:	f002 fcc5 	bl	8003cb0 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001326:	2004      	movs	r0, #4
 8001328:	f7ff ff16 	bl	8001158 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 800132c:	f7ff ff30 	bl	8001190 <LL_SYSTICK_EnableIT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f7ff fd5a 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001334:	f7ff fcc4 	bl	8000cc0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001338:	f001 fb92 	bl	8002a60 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800133c:	f000 ffde 	bl	80022fc <MX_TIM1_Init>
  MX_UART4_Init();
 8001340:	f001 fa56 	bl	80027f0 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8001344:	f001 fcb2 	bl	8002cac <MX_USART6_UART_Init>
  MX_UART5_Init();
 8001348:	f001 fb12 	bl	8002970 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800134c:	f001 fc36 	bl	8002bbc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 8001350:	4823      	ldr	r0, [pc, #140]	@ (80013e0 <main+0x100>)
 8001352:	f7ff ff75 	bl	8001240 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM1);
 8001356:	4822      	ldr	r0, [pc, #136]	@ (80013e0 <main+0x100>)
 8001358:	f7ff ff80 	bl	800125c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 800135c:	4820      	ldr	r0, [pc, #128]	@ (80013e0 <main+0x100>)
 800135e:	f7ff ff5f 	bl	8001220 <LL_TIM_EnableCounter>
//		SyncWrite_PositionWithVelocityProfile(6, ID_list, cmd, vel);
//		LL_mDelay(1000);
//		SyncWrite_PositionWithVelocityProfile(2, ID_list, cmd2, vel);
//		LL_mDelay(1000);
//	}
  StatusReturnLevel(1, 1);  // 只設 ID 1 → 這樣你可以加 while 等回應
 8001362:	2101      	movs	r1, #1
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff faf1 	bl	800094c <StatusReturnLevel>
  while (dynamixel_Ready != 1);
 800136a:	bf00      	nop
 800136c:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <main+0x104>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d1fb      	bne.n	800136c <main+0x8c>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	int32_t pos = ReadPosition(1);
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fb59 	bl	8000a2c <ReadPosition>
 800137a:	60f8      	str	r0, [r7, #12]
	float deg = pos * 0.087891f;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001386:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80013e8 <main+0x108>
 800138a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138e:	edc7 7a02 	vstr	s15, [r7, #8]
	int deg_x100 = (int)(deg * 100);  // 乘 100 轉成整數
 8001392:	edd7 7a02 	vldr	s15, [r7, #8]
 8001396:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80013ec <main+0x10c>
 800139a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	ee17 3a90 	vmov	r3, s15
 80013a6:	607b      	str	r3, [r7, #4]
	printf("Angle ≈ %d.%02d°\r\n", deg_x100 / 100, deg_x100 % 100);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a11      	ldr	r2, [pc, #68]	@ (80013f0 <main+0x110>)
 80013ac:	fb82 1203 	smull	r1, r2, r2, r3
 80013b0:	1152      	asrs	r2, r2, #5
 80013b2:	17db      	asrs	r3, r3, #31
 80013b4:	1ad0      	subs	r0, r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <main+0x110>)
 80013ba:	fb82 1203 	smull	r1, r2, r2, r3
 80013be:	1151      	asrs	r1, r2, #5
 80013c0:	17da      	asrs	r2, r3, #31
 80013c2:	1a8a      	subs	r2, r1, r2
 80013c4:	2164      	movs	r1, #100	@ 0x64
 80013c6:	fb01 f202 	mul.w	r2, r1, r2
 80013ca:	1a9a      	subs	r2, r3, r2
 80013cc:	4601      	mov	r1, r0
 80013ce:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <main+0x114>)
 80013d0:	f002 fd74 	bl	8003ebc <iprintf>
  {
 80013d4:	bf00      	nop
 80013d6:	e7cd      	b.n	8001374 <main+0x94>
 80013d8:	40020000 	.word	0x40020000
 80013dc:	0aba9500 	.word	0x0aba9500
 80013e0:	40010000 	.word	0x40010000
 80013e4:	20000000 	.word	0x20000000
 80013e8:	3db40032 	.word	0x3db40032
 80013ec:	42c80000 	.word	0x42c80000
 80013f0:	51eb851f 	.word	0x51eb851f
 80013f4:	08004d00 	.word	0x08004d00

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80013fc:	2005      	movs	r0, #5
 80013fe:	f7ff fe89 	bl	8001114 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001402:	bf00      	nop
 8001404:	f7ff fe9a 	bl	800113c <LL_FLASH_GetLatency>
 8001408:	4603      	mov	r3, r0
 800140a:	2b05      	cmp	r3, #5
 800140c:	d1fa      	bne.n	8001404 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800140e:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8001412:	f7ff fedd 	bl	80011d0 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8001416:	f7ff fecb 	bl	80011b0 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 800141a:	f7ff fd51 	bl	8000ec0 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 800141e:	f7ff fd5f 	bl	8000ee0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001422:	bf00      	nop
 8001424:	f7ff fd6c 	bl	8000f00 <LL_RCC_HSE_IsReady>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d1fa      	bne.n	8001424 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800142e:	2300      	movs	r3, #0
 8001430:	22b4      	movs	r2, #180	@ 0xb4
 8001432:	2104      	movs	r1, #4
 8001434:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001438:	f7ff fe0e 	bl	8001058 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800143c:	f7ff fde8 	bl	8001010 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001440:	bf00      	nop
 8001442:	f7ff fdf5 	bl	8001030 <LL_RCC_PLL_IsReady>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	d1fa      	bne.n	8001442 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800144c:	bf00      	nop
 800144e:	f7ff fed3 	bl	80011f8 <LL_PWR_IsActiveFlag_VOS>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0fa      	beq.n	800144e <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fd87 	bl	8000f6c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800145e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001462:	f7ff fd97 	bl	8000f94 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001466:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800146a:	f7ff fda7 	bl	8000fbc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800146e:	2002      	movs	r0, #2
 8001470:	f7ff fd5a 	bl	8000f28 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001474:	bf00      	nop
 8001476:	f7ff fd6b 	bl	8000f50 <LL_RCC_GetSysClkSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b08      	cmp	r3, #8
 800147e:	d1fa      	bne.n	8001476 <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <SystemClock_Config+0xa0>)
 8001482:	f002 fc15 	bl	8003cb0 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <SystemClock_Config+0xa0>)
 8001488:	f002 fc46 	bl	8003d18 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fda9 	bl	8000fe4 <LL_RCC_SetTIMPrescaler>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	0aba9500 	.word	0x0aba9500

0800149c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e011      	b.n	80014d2 <_write+0x36>
		LL_USART_TransmitData8(USART2, (uint8_t)*ptr++);
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	480a      	ldr	r0, [pc, #40]	@ (80014e4 <_write+0x48>)
 80014ba:	f7ff fef2 	bl	80012a2 <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2) == RESET)
 80014be:	bf00      	nop
 80014c0:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <_write+0x48>)
 80014c2:	f7ff fedb 	bl	800127c <LL_USART_IsActiveFlag_TXE>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f9      	beq.n	80014c0 <_write+0x24>
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dbe9      	blt.n	80014ae <_write+0x12>
			;
	}
	return len;
 80014da:	687b      	ldr	r3, [r7, #4]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40004400 	.word	0x40004400

080014e8 <LL_DMA_EnableStream>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80014f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001524 <LL_DMA_EnableStream+0x3c>)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4908      	ldr	r1, [pc, #32]	@ (8001524 <LL_DMA_EnableStream+0x3c>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	440a      	add	r2, r1
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	4611      	mov	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	440a      	add	r2, r1
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	08004db8 	.word	0x08004db8

08001528 <LL_DMA_DisableStream>:
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001532:	4a0c      	ldr	r2, [pc, #48]	@ (8001564 <LL_DMA_DisableStream+0x3c>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4908      	ldr	r1, [pc, #32]	@ (8001564 <LL_DMA_DisableStream+0x3c>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	440a      	add	r2, r1
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	4611      	mov	r1, r2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	440a      	add	r2, r1
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6013      	str	r3, [r2, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	08004db8 	.word	0x08004db8

08001568 <LL_DMA_IsEnabledStream>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LL_DMA_IsEnabledStream+0x34>)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	08004db8 	.word	0x08004db8

080015a0 <LL_DMA_SetDataLength>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <LL_DMA_SetDataLength+0x44>)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	0c1b      	lsrs	r3, r3, #16
 80015be:	041b      	lsls	r3, r3, #16
 80015c0:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <LL_DMA_SetDataLength+0x44>)
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	440a      	add	r2, r1
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	4611      	mov	r1, r2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	440a      	add	r2, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	08004db8 	.word	0x08004db8

080015e8 <LL_DMA_SetMemoryAddress>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80015f4:	4a07      	ldr	r2, [pc, #28]	@ (8001614 <LL_DMA_SetMemoryAddress+0x2c>)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	461a      	mov	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	08004db8 	.word	0x08004db8

08001618 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8001624:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <LL_DMA_SetPeriphAddress+0x2c>)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6093      	str	r3, [r2, #8]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	08004db8 	.word	0x08004db8

08001648 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll LISR  TCIF1    LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800165c:	bf0c      	ite	eq
 800165e:	2301      	moveq	r3, #1
 8001660:	2300      	movne	r3, #0
 8001662:	b2db      	uxtb	r3, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll LISR  TCIF2    LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001684:	bf0c      	ite	eq
 8001686:	2301      	moveq	r3, #1
 8001688:	2300      	movne	r3, #0
 800168a:	b2db      	uxtb	r3, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_DMA_IsActiveFlag_TC4>:
  * @rmtoll HISR  TCIF4    LL_DMA_IsActiveFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0320 	and.w	r3, r3, #32
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll HISR  TCIF0    LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016d2:	bf0c      	ite	eq
 80016d4:	2301      	moveq	r3, #1
 80016d6:	2300      	movne	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll HISR  TCIF6    LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_DMA_ClearFlag_HT1>:
  * @rmtoll LIFCR  CHTIF1    LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800171c:	609a      	str	r2, [r3, #8]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_DMA_ClearFlag_HT2>:
  * @rmtoll LIFCR  CHTIF2    LL_DMA_ClearFlag_HT2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001738:	609a      	str	r2, [r3, #8]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001754:	609a      	str	r2, [r3, #8]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001770:	609a      	str	r2, [r3, #8]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	60da      	str	r2, [r3, #12]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll HIFCR  CTCIF5    LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017a6:	60da      	str	r2, [r3, #12]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80017c2:	60da      	str	r2, [r3, #12]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll LIFCR  CTEIF1    LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017de:	609a      	str	r2, [r3, #8]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_DMA_ClearFlag_TE2>:
  * @rmtoll LIFCR  CTEIF2    LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017fa:	609a      	str	r2, [r3, #8]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8001812:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <LL_DMA_EnableIT_TC+0x3c>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4413      	add	r3, r2
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4908      	ldr	r1, [pc, #32]	@ (8001844 <LL_DMA_EnableIT_TC+0x3c>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	440a      	add	r2, r1
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	4611      	mov	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	440a      	add	r2, r1
 8001830:	f043 0310 	orr.w	r3, r3, #16
 8001834:	6013      	str	r3, [r2, #0]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	08004db8 	.word	0x08004db8

08001848 <LL_TIM_ClearFlag_UPDATE>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f06f 0201 	mvn.w	r2, #1
 8001856:	611a      	str	r2, [r3, #16]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_USART_IsActiveFlag_RXNE>:
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b20      	cmp	r3, #32
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_USART_IsActiveFlag_TC>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c0:	2b40      	cmp	r3, #64	@ 0x40
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_USART_ClearFlag_TC>:
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018e4:	601a      	str	r2, [r3, #0]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_USART_EnableIT_TC>:
{
 80018f2:	b480      	push	{r7}
 80018f4:	b089      	sub	sp, #36	@ 0x24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	330c      	adds	r3, #12
 80018fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	e853 3f00 	ldrex	r3, [r3]
 8001906:	60bb      	str	r3, [r7, #8]
   return(result);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	330c      	adds	r3, #12
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	61ba      	str	r2, [r7, #24]
 8001918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800191a:	6979      	ldr	r1, [r7, #20]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	e841 2300 	strex	r3, r2, [r1]
 8001922:	613b      	str	r3, [r7, #16]
   return(result);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1e7      	bne.n	80018fa <LL_USART_EnableIT_TC+0x8>
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3724      	adds	r7, #36	@ 0x24
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_USART_DisableIT_TC>:
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	330c      	adds	r3, #12
 8001944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	e853 3f00 	ldrex	r3, [r3]
 800194c:	60bb      	str	r3, [r7, #8]
   return(result);
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	330c      	adds	r3, #12
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	61ba      	str	r2, [r7, #24]
 800195e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001960:	6979      	ldr	r1, [r7, #20]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	e841 2300 	strex	r3, r2, [r1]
 8001968:	613b      	str	r3, [r7, #16]
   return(result);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e7      	bne.n	8001940 <LL_USART_DisableIT_TC+0x8>
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	@ 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_USART_IsEnabledIT_RXNE>:
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b20      	cmp	r3, #32
 8001990:	bf0c      	ite	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	2300      	movne	r3, #0
 8001996:	b2db      	uxtb	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_USART_EnableDMAReq_RX>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3314      	adds	r3, #20
 80019b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	e853 3f00 	ldrex	r3, [r3]
 80019b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3314      	adds	r3, #20
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	61ba      	str	r2, [r7, #24]
 80019ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019cc:	6979      	ldr	r1, [r7, #20]
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	e841 2300 	strex	r3, r2, [r1]
 80019d4:	613b      	str	r3, [r7, #16]
   return(result);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1e7      	bne.n	80019ac <LL_USART_EnableDMAReq_RX+0x8>
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	@ 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_USART_DisableDMAReq_TX>:
{
 80019ea:	b480      	push	{r7}
 80019ec:	b089      	sub	sp, #36	@ 0x24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3314      	adds	r3, #20
 80019f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	e853 3f00 	ldrex	r3, [r3]
 80019fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3314      	adds	r3, #20
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	61ba      	str	r2, [r7, #24]
 8001a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a12:	6979      	ldr	r1, [r7, #20]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	e841 2300 	strex	r3, r2, [r1]
 8001a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1e7      	bne.n	80019f2 <LL_USART_DisableDMAReq_TX+0x8>
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3724      	adds	r7, #36	@ 0x24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_USART_DMA_GetRegAddr>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3304      	adds	r3, #4
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_USART_ReceiveData8>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	b2db      	uxtb	r3, r3
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_GPIO_ResetOutputPin>:
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	041a      	lsls	r2, r3, #16
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <NMI_Handler+0x4>

08001a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <MemManage_Handler+0x4>

08001a98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1)) {
 8001ae4:	4814      	ldr	r0, [pc, #80]	@ (8001b38 <DMA1_Stream2_IRQHandler+0x58>)
 8001ae6:	f7ff fdc3 	bl	8001670 <LL_DMA_IsActiveFlag_TC2>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d021      	beq.n	8001b34 <DMA1_Stream2_IRQHandler+0x54>
			LL_DMA_ClearFlag_TC2(DMA1);
 8001af0:	4811      	ldr	r0, [pc, #68]	@ (8001b38 <DMA1_Stream2_IRQHandler+0x58>)
 8001af2:	f7ff fe36 	bl	8001762 <LL_DMA_ClearFlag_TC2>
			printf("stream2 it\r\n");
 8001af6:	4811      	ldr	r0, [pc, #68]	@ (8001b3c <DMA1_Stream2_IRQHandler+0x5c>)
 8001af8:	f002 fa48 	bl	8003f8c <puts>
			readStatusPacket_pos_DMA(dynamixel_position);
 8001afc:	4810      	ldr	r0, [pc, #64]	@ (8001b40 <DMA1_Stream2_IRQHandler+0x60>)
 8001afe:	f7fe feff 	bl	8000900 <readStatusPacket_pos_DMA>
//			readStatusPacket_PING(dynamixel_position);
//	        readStatusPacket_pos_vel_DMA(dynamixel_position, dynamixel_velocity);
//	        readStatusPacket_pos_vel_cur_DMA(dynamixel_position, dynamixel_velocity, dynamixel_current);
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8001b02:	2102      	movs	r1, #2
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <DMA1_Stream2_IRQHandler+0x58>)
 8001b06:	f7ff fd0f 	bl	8001528 <LL_DMA_DisableStream>
			Packet_Return -= 1;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <DMA1_Stream2_IRQHandler+0x64>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <DMA1_Stream2_IRQHandler+0x64>)
 8001b14:	701a      	strb	r2, [r3, #0]
			if(Packet_Return == 0) {
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <DMA1_Stream2_IRQHandler+0x64>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <DMA1_Stream2_IRQHandler+0x4c>
				Is_dynamixel_GetData = 1;
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <DMA1_Stream2_IRQHandler+0x68>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
				dynamixel_Ready = 1;
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <DMA1_Stream2_IRQHandler+0x6c>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b2a:	e003      	b.n	8001b34 <DMA1_Stream2_IRQHandler+0x54>
			    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <DMA1_Stream2_IRQHandler+0x58>)
 8001b30:	f7ff fcda 	bl	80014e8 <LL_DMA_EnableStream>
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40026000 	.word	0x40026000
 8001b3c:	08004d18 	.word	0x08004d18
 8001b40:	20000348 	.word	0x20000348
 8001b44:	20000001 	.word	0x20000001
 8001b48:	20000394 	.word	0x20000394
 8001b4c:	20000000 	.word	0x20000000

08001b50 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1) {
 8001b54:	4812      	ldr	r0, [pc, #72]	@ (8001ba0 <DMA1_Stream4_IRQHandler+0x50>)
 8001b56:	f7ff fd9f 	bl	8001698 <LL_DMA_IsActiveFlag_TC4>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11c      	bne.n	8001b9a <DMA1_Stream4_IRQHandler+0x4a>
		printf("DMA TX Complete\r\n");
 8001b60:	4810      	ldr	r0, [pc, #64]	@ (8001ba4 <DMA1_Stream4_IRQHandler+0x54>)
 8001b62:	f002 fa13 	bl	8003f8c <puts>
		LL_DMA_ClearFlag_TC4(DMA1);
 8001b66:	480e      	ldr	r0, [pc, #56]	@ (8001ba0 <DMA1_Stream4_IRQHandler+0x50>)
 8001b68:	f7ff fe09 	bl	800177e <LL_DMA_ClearFlag_TC4>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <DMA1_Stream4_IRQHandler+0x50>)
 8001b70:	f7ff fcda 	bl	8001528 <LL_DMA_DisableStream>
		LL_USART_DisableDMAReq_TX(UART4);
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <DMA1_Stream4_IRQHandler+0x58>)
 8001b76:	f7ff ff38 	bl	80019ea <LL_USART_DisableDMAReq_TX>
		while (!LL_USART_IsActiveFlag_TC(UART4));
 8001b7a:	bf00      	nop
 8001b7c:	480a      	ldr	r0, [pc, #40]	@ (8001ba8 <DMA1_Stream4_IRQHandler+0x58>)
 8001b7e:	f7ff fe97 	bl	80018b0 <LL_USART_IsActiveFlag_TC>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f9      	beq.n	8001b7c <DMA1_Stream4_IRQHandler+0x2c>
		LL_USART_ClearFlag_TC(UART4);
 8001b88:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <DMA1_Stream4_IRQHandler+0x58>)
 8001b8a:	f7ff fea4 	bl	80018d6 <LL_USART_ClearFlag_TC>
		LL_USART_EnableIT_TC(UART4);
 8001b8e:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <DMA1_Stream4_IRQHandler+0x58>)
 8001b90:	f7ff feaf 	bl	80018f2 <LL_USART_EnableIT_TC>
		dynamixel_Ready = 1;
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <DMA1_Stream4_IRQHandler+0x5c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40026000 	.word	0x40026000
 8001ba4:	08004d24 	.word	0x08004d24
 8001ba8:	40004c00 	.word	0x40004c00
 8001bac:	20000000 	.word	0x20000000

08001bb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 8001bb4:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <DMA1_Stream5_IRQHandler+0x24>)
 8001bb6:	f7ff fd82 	bl	80016be <LL_DMA_IsActiveFlag_TC5>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <DMA1_Stream5_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC5(DMA1);
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <DMA1_Stream5_IRQHandler+0x24>)
 8001bc2:	f7ff fde9 	bl	8001798 <LL_DMA_ClearFlag_TC5>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8001bc6:	2105      	movs	r1, #5
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <DMA1_Stream5_IRQHandler+0x24>)
 8001bca:	f7ff fcad 	bl	8001528 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40026000 	.word	0x40026000

08001bd8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1) {
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <DMA1_Stream6_IRQHandler+0x24>)
 8001bde:	f7ff fd82 	bl	80016e6 <LL_DMA_IsActiveFlag_TC6>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d106      	bne.n	8001bf6 <DMA1_Stream6_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC6(DMA1);
 8001be8:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <DMA1_Stream6_IRQHandler+0x24>)
 8001bea:	f7ff fde3 	bl	80017b4 <LL_DMA_ClearFlag_TC6>

			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8001bee:	2106      	movs	r1, #6
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <DMA1_Stream6_IRQHandler+0x24>)
 8001bf2:	f7ff fc99 	bl	8001528 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40026000 	.word	0x40026000

08001c00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 8001c04:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001c06:	f7ff fe2d 	bl	8001864 <LL_TIM_IsActiveFlag_UPDATE>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <TIM1_UP_TIM10_IRQHandler+0x1c>
			LL_TIM_ClearFlag_UPDATE(TIM1);
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001c12:	f7ff fe19 	bl	8001848 <LL_TIM_ClearFlag_UPDATE>
			start_trans_mx = 1;
 8001c16:	4b03      	ldr	r3, [pc, #12]	@ (8001c24 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40010000 	.word	0x40010000
 8001c24:	200003b8 	.word	0x200003b8

08001c28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART3) && LL_USART_IsEnabledIT_RXNE(USART3))
 8001c2c:	481d      	ldr	r0, [pc, #116]	@ (8001ca4 <USART3_IRQHandler+0x7c>)
 8001c2e:	f7ff fe2c 	bl	800188a <LL_USART_IsActiveFlag_RXNE>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d033      	beq.n	8001ca0 <USART3_IRQHandler+0x78>
 8001c38:	481a      	ldr	r0, [pc, #104]	@ (8001ca4 <USART3_IRQHandler+0x7c>)
 8001c3a:	f7ff fea0 	bl	800197e <LL_USART_IsEnabledIT_RXNE>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d02d      	beq.n	8001ca0 <USART3_IRQHandler+0x78>
	{
		rx_data = LL_USART_ReceiveData8(USART3);
 8001c44:	4817      	ldr	r0, [pc, #92]	@ (8001ca4 <USART3_IRQHandler+0x7c>)
 8001c46:	f7ff feff 	bl	8001a48 <LL_USART_ReceiveData8>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <USART3_IRQHandler+0x80>)
 8001c50:	701a      	strb	r2, [r3, #0]

		// 檢查是否資料結束（這裡用 ! 當作結尾）
		if (rx_data == '!' || rx_index >= RX_BUFFER_SIZE - 1)
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <USART3_IRQHandler+0x80>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b21      	cmp	r3, #33	@ 0x21
 8001c5a:	d006      	beq.n	8001c6a <USART3_IRQHandler+0x42>
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <USART3_IRQHandler+0x84>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	f240 32e6 	movw	r2, #998	@ 0x3e6
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d90d      	bls.n	8001c86 <USART3_IRQHandler+0x5e>
		{
		    rx_buffer[rx_index] = '\0';  // 加上結尾字元
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <USART3_IRQHandler+0x84>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <USART3_IRQHandler+0x88>)
 8001c74:	2100      	movs	r1, #0
 8001c76:	5499      	strb	r1, [r3, r2]
		    rx_index = 0;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <USART3_IRQHandler+0x84>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
		    data_ready = 1;  // 設定資料完成旗標
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <USART3_IRQHandler+0x8c>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
		{
		    rx_buffer[rx_index++] = rx_data;
		}
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001c84:	e00c      	b.n	8001ca0 <USART3_IRQHandler+0x78>
		    rx_buffer[rx_index++] = rx_data;
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <USART3_IRQHandler+0x84>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	b291      	uxth	r1, r2
 8001c90:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <USART3_IRQHandler+0x84>)
 8001c92:	8011      	strh	r1, [r2, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <USART3_IRQHandler+0x80>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b2d9      	uxtb	r1, r3
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <USART3_IRQHandler+0x88>)
 8001c9e:	5499      	strb	r1, [r3, r2]
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40004800 	.word	0x40004800
 8001ca8:	200003b9 	.word	0x200003b9
 8001cac:	200003ba 	.word	0x200003ba
 8001cb0:	200003bc 	.word	0x200003bc
 8001cb4:	200007a4 	.word	0x200007a4

08001cb8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	printf("uart4 it\r\n");
 8001cbc:	4821      	ldr	r0, [pc, #132]	@ (8001d44 <UART4_IRQHandler+0x8c>)
 8001cbe:	f002 f965 	bl	8003f8c <puts>
	LL_mDelay(100);
 8001cc2:	2064      	movs	r0, #100	@ 0x64
 8001cc4:	f002 f802 	bl	8003ccc <LL_mDelay>
	if(LL_USART_IsActiveFlag_TC(UART4) == 1) {
 8001cc8:	481f      	ldr	r0, [pc, #124]	@ (8001d48 <UART4_IRQHandler+0x90>)
 8001cca:	f7ff fdf1 	bl	80018b0 <LL_USART_IsActiveFlag_TC>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d136      	bne.n	8001d42 <UART4_IRQHandler+0x8a>
		printf("TX complete, switching to RX mode\r\n");
 8001cd4:	481d      	ldr	r0, [pc, #116]	@ (8001d4c <UART4_IRQHandler+0x94>)
 8001cd6:	f002 f959 	bl	8003f8c <puts>
		LL_USART_ClearFlag_TC(UART4);
 8001cda:	481b      	ldr	r0, [pc, #108]	@ (8001d48 <UART4_IRQHandler+0x90>)
 8001cdc:	f7ff fdfb 	bl	80018d6 <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(UART4);  // 避免反覆進中斷
 8001ce0:	4819      	ldr	r0, [pc, #100]	@ (8001d48 <UART4_IRQHandler+0x90>)
 8001ce2:	f7ff fe29 	bl	8001938 <LL_USART_DisableIT_TC>
	#if USE_THREE_STATE_GATE == 1
		LL_mDelay(1);  // 多數 buffer 切換需要時間
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f001 fff0 	bl	8003ccc <LL_mDelay>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001cec:	2110      	movs	r1, #16
 8001cee:	4818      	ldr	r0, [pc, #96]	@ (8001d50 <UART4_IRQHandler+0x98>)
 8001cf0:	f7ff feb7 	bl	8001a62 <LL_GPIO_ResetOutputPin>
	#else
	    LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_RX); //change UART direction
	#endif
	    uart4_dma_rx_start();
 8001cf4:	f000 f8f4 	bl	8001ee0 <uart4_dma_rx_start>
		if(Packet_Return == 0) {
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <UART4_IRQHandler+0x9c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d103      	bne.n	8001d08 <UART4_IRQHandler+0x50>
			dynamixel_Ready = 1;
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <UART4_IRQHandler+0xa0>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
			return;
 8001d06:	e01c      	b.n	8001d42 <UART4_IRQHandler+0x8a>
		}
		else if(Packet_Return == 1) {
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <UART4_IRQHandler+0x9c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d103      	bne.n	8001d18 <UART4_IRQHandler+0x60>
			dynamixel_Ready = 2;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <UART4_IRQHandler+0xa0>)
 8001d12:	2202      	movs	r2, #2
 8001d14:	701a      	strb	r2, [r3, #0]
			return;
 8001d16:	e014      	b.n	8001d42 <UART4_IRQHandler+0x8a>
		}
		else {
			printf("Packet_Return \r\n");
 8001d18:	4810      	ldr	r0, [pc, #64]	@ (8001d5c <UART4_IRQHandler+0xa4>)
 8001d1a:	f002 f937 	bl	8003f8c <puts>
			dynamixel_Ready = 2;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <UART4_IRQHandler+0xa0>)
 8001d20:	2202      	movs	r2, #2
 8001d22:	701a      	strb	r2, [r3, #0]

			LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <UART4_IRQHandler+0xa8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	480d      	ldr	r0, [pc, #52]	@ (8001d64 <UART4_IRQHandler+0xac>)
 8001d30:	f7ff fc36 	bl	80015a0 <LL_DMA_SetDataLength>
			LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8001d34:	2102      	movs	r1, #2
 8001d36:	480b      	ldr	r0, [pc, #44]	@ (8001d64 <UART4_IRQHandler+0xac>)
 8001d38:	f7ff fbd6 	bl	80014e8 <LL_DMA_EnableStream>
			LL_USART_EnableDMAReq_RX(UART4);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <UART4_IRQHandler+0x90>)
 8001d3e:	f7ff fe31 	bl	80019a4 <LL_USART_EnableDMAReq_RX>
	}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	08004d38 	.word	0x08004d38
 8001d48:	40004c00 	.word	0x40004c00
 8001d4c:	08004d44 	.word	0x08004d44
 8001d50:	40020000 	.word	0x40020000
 8001d54:	20000001 	.word	0x20000001
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	08004d68 	.word	0x08004d68
 8001d60:	20000398 	.word	0x20000398
 8001d64:	40026000 	.word	0x40026000

08001d68 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(UART5) && LL_USART_IsEnabledIT_RXNE(UART5)) {
 8001d6e:	4815      	ldr	r0, [pc, #84]	@ (8001dc4 <UART5_IRQHandler+0x5c>)
 8001d70:	f7ff fd8b 	bl	800188a <LL_USART_IsActiveFlag_RXNE>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d015      	beq.n	8001da6 <UART5_IRQHandler+0x3e>
 8001d7a:	4812      	ldr	r0, [pc, #72]	@ (8001dc4 <UART5_IRQHandler+0x5c>)
 8001d7c:	f7ff fdff 	bl	800197e <LL_USART_IsEnabledIT_RXNE>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00f      	beq.n	8001da6 <UART5_IRQHandler+0x3e>
	    uint8_t byte = LL_USART_ReceiveData8(UART5);
 8001d86:	480f      	ldr	r0, [pc, #60]	@ (8001dc4 <UART5_IRQHandler+0x5c>)
 8001d88:	f7ff fe5e 	bl	8001a48 <LL_USART_ReceiveData8>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
	    uart5_rx_buffer[uart5_rx_index++] = byte;
 8001d90:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <UART5_IRQHandler+0x60>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	b2d1      	uxtb	r1, r2
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc8 <UART5_IRQHandler+0x60>)
 8001d9c:	7011      	strb	r1, [r2, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <UART5_IRQHandler+0x64>)
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	5453      	strb	r3, [r2, r1]
	}
	if (uart5_rx_index >= PACKET_SIZE) {
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <UART5_IRQHandler+0x60>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d905      	bls.n	8001dbc <UART5_IRQHandler+0x54>
	   uart5_rx_index = 0;
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <UART5_IRQHandler+0x60>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
	   uart5_packet_ready = 1;
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <UART5_IRQHandler+0x68>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART5_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40005000 	.word	0x40005000
 8001dc8:	200007b1 	.word	0x200007b1
 8001dcc:	200007a8 	.word	0x200007a8
 8001dd0:	200007b2 	.word	0x200007b2

08001dd4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA2)) {
 8001dd8:	4814      	ldr	r0, [pc, #80]	@ (8001e2c <DMA2_Stream1_IRQHandler+0x58>)
 8001dda:	f7ff fc35 	bl	8001648 <LL_DMA_IsActiveFlag_TC1>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d021      	beq.n	8001e28 <DMA2_Stream1_IRQHandler+0x54>
		LL_DMA_ClearFlag_TC1(DMA2);
 8001de4:	4811      	ldr	r0, [pc, #68]	@ (8001e2c <DMA2_Stream1_IRQHandler+0x58>)
 8001de6:	f7ff fcae 	bl	8001746 <LL_DMA_ClearFlag_TC1>
		printf("stream1 it\r\n");
 8001dea:	4811      	ldr	r0, [pc, #68]	@ (8001e30 <DMA2_Stream1_IRQHandler+0x5c>)
 8001dec:	f002 f8ce 	bl	8003f8c <puts>
		readStatusPacket_pos_DMA(dynamixel_position);
 8001df0:	4810      	ldr	r0, [pc, #64]	@ (8001e34 <DMA2_Stream1_IRQHandler+0x60>)
 8001df2:	f7fe fd85 	bl	8000900 <readStatusPacket_pos_DMA>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8001df6:	2101      	movs	r1, #1
 8001df8:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <DMA2_Stream1_IRQHandler+0x58>)
 8001dfa:	f7ff fb95 	bl	8001528 <LL_DMA_DisableStream>
		Packet_Return -= 1;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <DMA2_Stream1_IRQHandler+0x64>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <DMA2_Stream1_IRQHandler+0x64>)
 8001e08:	701a      	strb	r2, [r3, #0]
		if(Packet_Return == 0) {
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <DMA2_Stream1_IRQHandler+0x64>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <DMA2_Stream1_IRQHandler+0x4c>
			Is_dynamixel_GetData = 1;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <DMA2_Stream1_IRQHandler+0x68>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
			dynamixel_Ready = 1;
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <DMA2_Stream1_IRQHandler+0x6c>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e1e:	e003      	b.n	8001e28 <DMA2_Stream1_IRQHandler+0x54>
			LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8001e20:	2101      	movs	r1, #1
 8001e22:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA2_Stream1_IRQHandler+0x58>)
 8001e24:	f7ff fb60 	bl	80014e8 <LL_DMA_EnableStream>
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40026400 	.word	0x40026400
 8001e30:	08004d78 	.word	0x08004d78
 8001e34:	20000348 	.word	0x20000348
 8001e38:	20000001 	.word	0x20000001
 8001e3c:	20000394 	.word	0x20000394
 8001e40:	20000000 	.word	0x20000000

08001e44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA2) == 1) {
 8001e48:	480c      	ldr	r0, [pc, #48]	@ (8001e7c <DMA2_Stream6_IRQHandler+0x38>)
 8001e4a:	f7ff fc4c 	bl	80016e6 <LL_DMA_IsActiveFlag_TC6>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d111      	bne.n	8001e78 <DMA2_Stream6_IRQHandler+0x34>
		printf("DMA TX Complete\r\n");
 8001e54:	480a      	ldr	r0, [pc, #40]	@ (8001e80 <DMA2_Stream6_IRQHandler+0x3c>)
 8001e56:	f002 f899 	bl	8003f8c <puts>
		LL_DMA_ClearFlag_TC6(DMA2);
 8001e5a:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <DMA2_Stream6_IRQHandler+0x38>)
 8001e5c:	f7ff fcaa 	bl	80017b4 <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8001e60:	2106      	movs	r1, #6
 8001e62:	4806      	ldr	r0, [pc, #24]	@ (8001e7c <DMA2_Stream6_IRQHandler+0x38>)
 8001e64:	f7ff fb60 	bl	8001528 <LL_DMA_DisableStream>
		LL_USART_DisableDMAReq_TX(USART6);
 8001e68:	4806      	ldr	r0, [pc, #24]	@ (8001e84 <DMA2_Stream6_IRQHandler+0x40>)
 8001e6a:	f7ff fdbe 	bl	80019ea <LL_USART_DisableDMAReq_TX>
		usart6_dma_rx_start();
 8001e6e:	f000 f87d 	bl	8001f6c <usart6_dma_rx_start>
		dynamixel_Ready = 1;
 8001e72:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <DMA2_Stream6_IRQHandler+0x44>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40026400 	.word	0x40026400
 8001e80:	08004d24 	.word	0x08004d24
 8001e84:	40011400 	.word	0x40011400
 8001e88:	20000000 	.word	0x20000000

08001e8c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	printf("usart6 it\r\n");
 8001e90:	480d      	ldr	r0, [pc, #52]	@ (8001ec8 <USART6_IRQHandler+0x3c>)
 8001e92:	f002 f87b 	bl	8003f8c <puts>
//		LL_mDelay(100);
		if(LL_USART_IsActiveFlag_TC(USART6) == 1) {
 8001e96:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <USART6_IRQHandler+0x40>)
 8001e98:	f7ff fd0a 	bl	80018b0 <LL_USART_IsActiveFlag_TC>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d111      	bne.n	8001ec6 <USART6_IRQHandler+0x3a>
			    printf("TX complete, switching to RX mode\r\n");
 8001ea2:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <USART6_IRQHandler+0x44>)
 8001ea4:	f002 f872 	bl	8003f8c <puts>
			    LL_USART_ClearFlag_TC(USART6);
 8001ea8:	4808      	ldr	r0, [pc, #32]	@ (8001ecc <USART6_IRQHandler+0x40>)
 8001eaa:	f7ff fd14 	bl	80018d6 <LL_USART_ClearFlag_TC>
		#if USE_THREE_STATE_GATE == 1
				LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4808      	ldr	r0, [pc, #32]	@ (8001ed4 <USART6_IRQHandler+0x48>)
 8001eb2:	f7ff fdd6 	bl	8001a62 <LL_GPIO_ResetOutputPin>
		#else
				LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_RX); //change UART direction
		#endif
					if(Packet_Return == 0) {
 8001eb6:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <USART6_IRQHandler+0x4c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <USART6_IRQHandler+0x3a>
						dynamixel_Ready = 1;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <USART6_IRQHandler+0x50>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
						return;
 8001ec4:	bf00      	nop
		}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	08004d84 	.word	0x08004d84
 8001ecc:	40011400 	.word	0x40011400
 8001ed0:	08004d44 	.word	0x08004d44
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	20000001 	.word	0x20000001
 8001edc:	20000000 	.word	0x20000000

08001ee0 <uart4_dma_rx_start>:
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
    LL_USART_EnableDMAReq_TX(UART4);
}
void uart4_dma_rx_start(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	481c      	ldr	r0, [pc, #112]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001ee8:	f7ff fb1e 	bl	8001528 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_2));
 8001eec:	bf00      	nop
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4819      	ldr	r0, [pc, #100]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001ef2:	f7ff fb39 	bl	8001568 <LL_DMA_IsEnabledStream>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f8      	bne.n	8001eee <uart4_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC2(DMA1);
 8001efc:	4816      	ldr	r0, [pc, #88]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001efe:	f7ff fc30 	bl	8001762 <LL_DMA_ClearFlag_TC2>
    LL_DMA_ClearFlag_TE2(DMA1);
 8001f02:	4815      	ldr	r0, [pc, #84]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001f04:	f7ff fc72 	bl	80017ec <LL_DMA_ClearFlag_TE2>
    LL_DMA_ClearFlag_HT2(DMA2);
 8001f08:	4814      	ldr	r0, [pc, #80]	@ (8001f5c <uart4_dma_rx_start+0x7c>)
 8001f0a:	f7ff fc0e 	bl	800172a <LL_DMA_ClearFlag_HT2>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 8001f0e:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <uart4_dma_rx_start+0x80>)
 8001f10:	461a      	mov	r2, r3
 8001f12:	2102      	movs	r1, #2
 8001f14:	4810      	ldr	r0, [pc, #64]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001f16:	f7ff fb67 	bl	80015e8 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 8001f1a:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <uart4_dma_rx_start+0x84>)
 8001f1c:	f7ff fd88 	bl	8001a30 <LL_USART_DMA_GetRegAddr>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	2102      	movs	r1, #2
 8001f26:	480c      	ldr	r0, [pc, #48]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001f28:	f7ff fb76 	bl	8001618 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <uart4_dma_rx_start+0x88>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3304      	adds	r3, #4
 8001f32:	461a      	mov	r2, r3
 8001f34:	2102      	movs	r1, #2
 8001f36:	4808      	ldr	r0, [pc, #32]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001f38:	f7ff fb32 	bl	80015a0 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001f40:	f7ff fc62 	bl	8001808 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8001f44:	2102      	movs	r1, #2
 8001f46:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <uart4_dma_rx_start+0x78>)
 8001f48:	f7ff face 	bl	80014e8 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(UART4);
 8001f4c:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <uart4_dma_rx_start+0x84>)
 8001f4e:	f7ff fd29 	bl	80019a4 <LL_USART_EnableDMAReq_RX>
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40026000 	.word	0x40026000
 8001f5c:	40026400 	.word	0x40026400
 8001f60:	2000039c 	.word	0x2000039c
 8001f64:	40004c00 	.word	0x40004c00
 8001f68:	20000398 	.word	0x20000398

08001f6c <usart6_dma_rx_start>:
    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
    LL_USART_EnableDMAReq_TX(USART6);
}
void usart6_dma_rx_start(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8001f70:	2101      	movs	r1, #1
 8001f72:	481c      	ldr	r0, [pc, #112]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001f74:	f7ff fad8 	bl	8001528 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_1));
 8001f78:	bf00      	nop
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	4819      	ldr	r0, [pc, #100]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001f7e:	f7ff faf3 	bl	8001568 <LL_DMA_IsEnabledStream>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f8      	bne.n	8001f7a <usart6_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC1(DMA2);
 8001f88:	4816      	ldr	r0, [pc, #88]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001f8a:	f7ff fbdc 	bl	8001746 <LL_DMA_ClearFlag_TC1>
    LL_DMA_ClearFlag_TE1(DMA2);
 8001f8e:	4815      	ldr	r0, [pc, #84]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001f90:	f7ff fc1e 	bl	80017d0 <LL_DMA_ClearFlag_TE1>
    LL_DMA_ClearFlag_HT1(DMA2);
 8001f94:	4813      	ldr	r0, [pc, #76]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001f96:	f7ff fbba 	bl	800170e <LL_DMA_ClearFlag_HT1>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 8001f9a:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <usart6_dma_rx_start+0x7c>)
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4810      	ldr	r0, [pc, #64]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001fa2:	f7ff fb21 	bl	80015e8 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 8001fa6:	4811      	ldr	r0, [pc, #68]	@ (8001fec <usart6_dma_rx_start+0x80>)
 8001fa8:	f7ff fd42 	bl	8001a30 <LL_USART_DMA_GetRegAddr>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	480c      	ldr	r0, [pc, #48]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001fb4:	f7ff fb30 	bl	8001618 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <usart6_dma_rx_start+0x84>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4808      	ldr	r0, [pc, #32]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001fc4:	f7ff faec 	bl	80015a0 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4806      	ldr	r0, [pc, #24]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001fcc:	f7ff fc1c 	bl	8001808 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <usart6_dma_rx_start+0x78>)
 8001fd4:	f7ff fa88 	bl	80014e8 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(USART6);
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <usart6_dma_rx_start+0x80>)
 8001fda:	f7ff fce3 	bl	80019a4 <LL_USART_EnableDMAReq_RX>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40026400 	.word	0x40026400
 8001fe8:	2000039c 	.word	0x2000039c
 8001fec:	40011400 	.word	0x40011400
 8001ff0:	20000398 	.word	0x20000398

08001ff4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e00a      	b.n	800201c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002006:	f3af 8000 	nop.w
 800200a:	4601      	mov	r1, r0
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf0      	blt.n	8002006 <_read+0x12>
  }

  return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_close>:
  }
  return len;
}

int _close(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002056:	605a      	str	r2, [r3, #4]
  return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_isatty>:

int _isatty(int file)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f002 f88e 	bl	80041e8 <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20020000 	.word	0x20020000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	200007b4 	.word	0x200007b4
 8002100:	20000908 	.word	0x20000908

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_GetPriorityGrouping>:
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_EnableIRQ>:
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db0b      	blt.n	800216e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	4907      	ldr	r1, [pc, #28]	@ (800217c <__NVIC_EnableIRQ+0x38>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100

08002180 <__NVIC_SetPriority>:
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	@ (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	@ 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <LL_APB2_GRP1_EnableClock>:
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002246:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002248:	4907      	ldr	r1, [pc, #28]	@ (8002268 <LL_APB2_GRP1_EnableClock+0x2c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4313      	orrs	r3, r2
 800224e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002252:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4013      	ands	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40023800 	.word	0x40023800

0800226c <LL_TIM_DisableARRPreload>:
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	601a      	str	r2, [r3, #0]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_TIM_SetClockSource>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800229e:	f023 0307 	bic.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	609a      	str	r2, [r3, #8]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_TIM_SetTriggerOutput>:
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	605a      	str	r2, [r3, #4]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_TIM_DisableMasterSlaveMode>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002310:	2001      	movs	r0, #1
 8002312:	f7ff ff93 	bl	800223c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002316:	f7ff ff07 	bl	8002128 <__NVIC_GetPriorityGrouping>
 800231a:	4603      	mov	r3, r0
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff57 	bl	80021d4 <NVIC_EncodePriority>
 8002326:	4603      	mov	r3, r0
 8002328:	4619      	mov	r1, r3
 800232a:	2019      	movs	r0, #25
 800232c:	f7ff ff28 	bl	8002180 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002330:	2019      	movs	r0, #25
 8002332:	f7ff ff07 	bl	8002144 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 29;
 8002336:	231d      	movs	r3, #29
 8002338:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 60000;
 800233e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002342:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	4619      	mov	r1, r3
 8002350:	480a      	ldr	r0, [pc, #40]	@ (800237c <MX_TIM1_Init+0x80>)
 8002352:	f001 f911 	bl	8003578 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002356:	4809      	ldr	r0, [pc, #36]	@ (800237c <MX_TIM1_Init+0x80>)
 8002358:	f7ff ff88 	bl	800226c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800235c:	2100      	movs	r1, #0
 800235e:	4807      	ldr	r0, [pc, #28]	@ (800237c <MX_TIM1_Init+0x80>)
 8002360:	f7ff ff94 	bl	800228c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002364:	2100      	movs	r1, #0
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <MX_TIM1_Init+0x80>)
 8002368:	f7ff ffa5 	bl	80022b6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800236c:	4803      	ldr	r0, [pc, #12]	@ (800237c <MX_TIM1_Init+0x80>)
 800236e:	f7ff ffb5 	bl	80022dc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40010000 	.word	0x40010000

08002380 <__NVIC_GetPriorityGrouping>:
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	@ (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <LL_DMA_SetDataTransferDirection>:
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <LL_DMA_SetDataTransferDirection+0x44>)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4413      	add	r3, r2
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024b4:	4908      	ldr	r1, [pc, #32]	@ (80024d8 <LL_DMA_SetDataTransferDirection+0x44>)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	440b      	add	r3, r1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	440b      	add	r3, r1
 80024c2:	4619      	mov	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	08004dd8 	.word	0x08004dd8

080024dc <LL_DMA_SetMode>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <LL_DMA_SetMode+0x44>)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4413      	add	r3, r2
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80024fc:	4908      	ldr	r1, [pc, #32]	@ (8002520 <LL_DMA_SetMode+0x44>)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	440b      	add	r3, r1
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	440b      	add	r3, r1
 800250a:	4619      	mov	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	08004dd8 	.word	0x08004dd8

08002524 <LL_DMA_SetPeriphIncMode>:
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002530:	4a0d      	ldr	r2, [pc, #52]	@ (8002568 <LL_DMA_SetPeriphIncMode+0x44>)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4413      	add	r3, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4413      	add	r3, r2
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002544:	4908      	ldr	r1, [pc, #32]	@ (8002568 <LL_DMA_SetPeriphIncMode+0x44>)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	440b      	add	r3, r1
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	440b      	add	r3, r1
 8002552:	4619      	mov	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	08004dd8 	.word	0x08004dd8

0800256c <LL_DMA_SetMemoryIncMode>:
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002578:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <LL_DMA_SetMemoryIncMode+0x44>)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4413      	add	r3, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800258c:	4908      	ldr	r1, [pc, #32]	@ (80025b0 <LL_DMA_SetMemoryIncMode+0x44>)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	440b      	add	r3, r1
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	440b      	add	r3, r1
 800259a:	4619      	mov	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	08004dd8 	.word	0x08004dd8

080025b4 <LL_DMA_SetPeriphSize>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80025c0:	4a0d      	ldr	r2, [pc, #52]	@ (80025f8 <LL_DMA_SetPeriphSize+0x44>)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4413      	add	r3, r2
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80025d4:	4908      	ldr	r1, [pc, #32]	@ (80025f8 <LL_DMA_SetPeriphSize+0x44>)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	440b      	add	r3, r1
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	440b      	add	r3, r1
 80025e2:	4619      	mov	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	08004dd8 	.word	0x08004dd8

080025fc <LL_DMA_SetMemorySize>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002608:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <LL_DMA_SetMemorySize+0x44>)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4413      	add	r3, r2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 800261c:	4908      	ldr	r1, [pc, #32]	@ (8002640 <LL_DMA_SetMemorySize+0x44>)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	440b      	add	r3, r1
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	440b      	add	r3, r1
 800262a:	4619      	mov	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	08004dd8 	.word	0x08004dd8

08002644 <LL_DMA_SetStreamPriorityLevel>:
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4413      	add	r3, r2
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002664:	4908      	ldr	r1, [pc, #32]	@ (8002688 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	440b      	add	r3, r1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	440b      	add	r3, r1
 8002672:	4619      	mov	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	08004dd8 	.word	0x08004dd8

0800268c <LL_DMA_SetChannelSelection>:
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <LL_DMA_SetChannelSelection+0x44>)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4413      	add	r3, r2
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80026ac:	4908      	ldr	r1, [pc, #32]	@ (80026d0 <LL_DMA_SetChannelSelection+0x44>)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	440b      	add	r3, r1
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	440b      	add	r3, r1
 80026ba:	4619      	mov	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	08004dd8 	.word	0x08004dd8

080026d4 <LL_DMA_DisableFifoMode>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80026de:	4a0c      	ldr	r2, [pc, #48]	@ (8002710 <LL_DMA_DisableFifoMode+0x3c>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	4908      	ldr	r1, [pc, #32]	@ (8002710 <LL_DMA_DisableFifoMode+0x3c>)
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	440a      	add	r2, r1
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	4611      	mov	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	440a      	add	r2, r1
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6153      	str	r3, [r2, #20]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	08004dd8 	.word	0x08004dd8

08002714 <LL_AHB1_GRP1_EnableClock>:
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800271c:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800271e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4313      	orrs	r3, r2
 8002726:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800272a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4013      	ands	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40023800 	.word	0x40023800

08002744 <LL_APB1_GRP1_EnableClock>:
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <LL_APB1_GRP1_EnableClock+0x2c>)
 800274e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002750:	4907      	ldr	r1, [pc, #28]	@ (8002770 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4313      	orrs	r3, r2
 8002756:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <LL_APB1_GRP1_EnableClock+0x2c>)
 800275a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4013      	ands	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40023800 	.word	0x40023800

08002774 <LL_APB2_GRP1_EnableClock>:
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800277c:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800277e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002780:	4907      	ldr	r1, [pc, #28]	@ (80027a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800278a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40023800 	.word	0x40023800

080027a4 <LL_USART_Enable>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	60da      	str	r2, [r3, #12]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_USART_ConfigAsyncMode>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	615a      	str	r2, [r3, #20]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08e      	sub	sp, #56	@ 0x38
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
 8002818:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800281a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800281e:	f7ff ff91 	bl	8002744 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002822:	2001      	movs	r0, #1
 8002824:	f7ff ff76 	bl	8002714 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002828:	2303      	movs	r3, #3
 800282a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800282c:	2302      	movs	r3, #2
 800282e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800283c:	2308      	movs	r3, #8
 800283e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	4619      	mov	r1, r3
 8002844:	4846      	ldr	r0, [pc, #280]	@ (8002960 <MX_UART4_Init+0x170>)
 8002846:	f000 fc63 	bl	8003110 <LL_GPIO_Init>

  /* UART4 DMA Init */

  /* UART4_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 800284a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800284e:	2102      	movs	r1, #2
 8002850:	4844      	ldr	r0, [pc, #272]	@ (8002964 <MX_UART4_Init+0x174>)
 8002852:	f7ff ff1b 	bl	800268c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002856:	2200      	movs	r2, #0
 8002858:	2102      	movs	r1, #2
 800285a:	4842      	ldr	r0, [pc, #264]	@ (8002964 <MX_UART4_Init+0x174>)
 800285c:	f7ff fe1a 	bl	8002494 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 8002860:	2200      	movs	r2, #0
 8002862:	2102      	movs	r1, #2
 8002864:	483f      	ldr	r0, [pc, #252]	@ (8002964 <MX_UART4_Init+0x174>)
 8002866:	f7ff feed 	bl	8002644 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 800286a:	2200      	movs	r2, #0
 800286c:	2102      	movs	r1, #2
 800286e:	483d      	ldr	r0, [pc, #244]	@ (8002964 <MX_UART4_Init+0x174>)
 8002870:	f7ff fe34 	bl	80024dc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8002874:	2200      	movs	r2, #0
 8002876:	2102      	movs	r1, #2
 8002878:	483a      	ldr	r0, [pc, #232]	@ (8002964 <MX_UART4_Init+0x174>)
 800287a:	f7ff fe53 	bl	8002524 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 800287e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002882:	2102      	movs	r1, #2
 8002884:	4837      	ldr	r0, [pc, #220]	@ (8002964 <MX_UART4_Init+0x174>)
 8002886:	f7ff fe71 	bl	800256c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 800288a:	2200      	movs	r2, #0
 800288c:	2102      	movs	r1, #2
 800288e:	4835      	ldr	r0, [pc, #212]	@ (8002964 <MX_UART4_Init+0x174>)
 8002890:	f7ff fe90 	bl	80025b4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8002894:	2200      	movs	r2, #0
 8002896:	2102      	movs	r1, #2
 8002898:	4832      	ldr	r0, [pc, #200]	@ (8002964 <MX_UART4_Init+0x174>)
 800289a:	f7ff feaf 	bl	80025fc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 800289e:	2102      	movs	r1, #2
 80028a0:	4830      	ldr	r0, [pc, #192]	@ (8002964 <MX_UART4_Init+0x174>)
 80028a2:	f7ff ff17 	bl	80026d4 <LL_DMA_DisableFifoMode>

  /* UART4_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_4);
 80028a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028aa:	2104      	movs	r1, #4
 80028ac:	482d      	ldr	r0, [pc, #180]	@ (8002964 <MX_UART4_Init+0x174>)
 80028ae:	f7ff feed 	bl	800268c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80028b2:	2240      	movs	r2, #64	@ 0x40
 80028b4:	2104      	movs	r1, #4
 80028b6:	482b      	ldr	r0, [pc, #172]	@ (8002964 <MX_UART4_Init+0x174>)
 80028b8:	f7ff fdec 	bl	8002494 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 80028bc:	2200      	movs	r2, #0
 80028be:	2104      	movs	r1, #4
 80028c0:	4828      	ldr	r0, [pc, #160]	@ (8002964 <MX_UART4_Init+0x174>)
 80028c2:	f7ff febf 	bl	8002644 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2104      	movs	r1, #4
 80028ca:	4826      	ldr	r0, [pc, #152]	@ (8002964 <MX_UART4_Init+0x174>)
 80028cc:	f7ff fe06 	bl	80024dc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2104      	movs	r1, #4
 80028d4:	4823      	ldr	r0, [pc, #140]	@ (8002964 <MX_UART4_Init+0x174>)
 80028d6:	f7ff fe25 	bl	8002524 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 80028da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028de:	2104      	movs	r1, #4
 80028e0:	4820      	ldr	r0, [pc, #128]	@ (8002964 <MX_UART4_Init+0x174>)
 80028e2:	f7ff fe43 	bl	800256c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2104      	movs	r1, #4
 80028ea:	481e      	ldr	r0, [pc, #120]	@ (8002964 <MX_UART4_Init+0x174>)
 80028ec:	f7ff fe62 	bl	80025b4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2104      	movs	r1, #4
 80028f4:	481b      	ldr	r0, [pc, #108]	@ (8002964 <MX_UART4_Init+0x174>)
 80028f6:	f7ff fe81 	bl	80025fc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 80028fa:	2104      	movs	r1, #4
 80028fc:	4819      	ldr	r0, [pc, #100]	@ (8002964 <MX_UART4_Init+0x174>)
 80028fe:	f7ff fee9 	bl	80026d4 <LL_DMA_DisableFifoMode>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002902:	f7ff fd3d 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002906:	4603      	mov	r3, r0
 8002908:	2200      	movs	r2, #0
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fd8d 	bl	800242c <NVIC_EncodePriority>
 8002912:	4603      	mov	r3, r0
 8002914:	4619      	mov	r1, r3
 8002916:	2034      	movs	r0, #52	@ 0x34
 8002918:	f7ff fd5e 	bl	80023d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800291c:	2034      	movs	r0, #52	@ 0x34
 800291e:	f7ff fd3d 	bl	800239c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 8002922:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <MX_UART4_Init+0x178>)
 8002924:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800292e:	2300      	movs	r3, #0
 8002930:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002932:	230c      	movs	r3, #12
 8002934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002936:	2300      	movs	r3, #0
 8002938:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800293a:	2300      	movs	r3, #0
 800293c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800293e:	f107 031c 	add.w	r3, r7, #28
 8002942:	4619      	mov	r1, r3
 8002944:	4809      	ldr	r0, [pc, #36]	@ (800296c <MX_UART4_Init+0x17c>)
 8002946:	f001 f919 	bl	8003b7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800294a:	4808      	ldr	r0, [pc, #32]	@ (800296c <MX_UART4_Init+0x17c>)
 800294c:	f7ff ff3a 	bl	80027c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8002950:	4806      	ldr	r0, [pc, #24]	@ (800296c <MX_UART4_Init+0x17c>)
 8002952:	f7ff ff27 	bl	80027a4 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002956:	bf00      	nop
 8002958:	3738      	adds	r7, #56	@ 0x38
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40020000 	.word	0x40020000
 8002964:	40026000 	.word	0x40026000
 8002968:	000f4240 	.word	0x000f4240
 800296c:	40004c00 	.word	0x40004c00

08002970 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08e      	sub	sp, #56	@ 0x38
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	615a      	str	r2, [r3, #20]
 8002988:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
 8002998:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800299a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800299e:	f7ff fed1 	bl	8002744 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80029a2:	2004      	movs	r0, #4
 80029a4:	f7ff feb6 	bl	8002714 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80029a8:	2008      	movs	r0, #8
 80029aa:	f7ff feb3 	bl	8002714 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80029ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029b4:	2302      	movs	r3, #2
 80029b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80029c4:	2308      	movs	r3, #8
 80029c6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4821      	ldr	r0, [pc, #132]	@ (8002a54 <MX_UART5_Init+0xe4>)
 80029ce:	f000 fb9f 	bl	8003110 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80029d2:	2304      	movs	r3, #4
 80029d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029d6:	2302      	movs	r3, #2
 80029d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80029e6:	2308      	movs	r3, #8
 80029e8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	481a      	ldr	r0, [pc, #104]	@ (8002a58 <MX_UART5_Init+0xe8>)
 80029f0:	f000 fb8e 	bl	8003110 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80029f4:	f7ff fcc4 	bl	8002380 <__NVIC_GetPriorityGrouping>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2200      	movs	r2, #0
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fd14 	bl	800242c <NVIC_EncodePriority>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4619      	mov	r1, r3
 8002a08:	2035      	movs	r0, #53	@ 0x35
 8002a0a:	f7ff fce5 	bl	80023d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8002a0e:	2035      	movs	r0, #53	@ 0x35
 8002a10:	f7ff fcc4 	bl	800239c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002a14:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002a18:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002a26:	230c      	movs	r3, #12
 8002a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	4619      	mov	r1, r3
 8002a38:	4808      	ldr	r0, [pc, #32]	@ (8002a5c <MX_UART5_Init+0xec>)
 8002a3a:	f001 f89f 	bl	8003b7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002a3e:	4807      	ldr	r0, [pc, #28]	@ (8002a5c <MX_UART5_Init+0xec>)
 8002a40:	f7ff fec0 	bl	80027c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8002a44:	4805      	ldr	r0, [pc, #20]	@ (8002a5c <MX_UART5_Init+0xec>)
 8002a46:	f7ff fead 	bl	80027a4 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	3738      	adds	r7, #56	@ 0x38
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40005000 	.word	0x40005000

08002a60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08e      	sub	sp, #56	@ 0x38
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a8a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002a8e:	f7ff fe59 	bl	8002744 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7ff fe3e 	bl	8002714 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002a98:	230c      	movs	r3, #12
 8002a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002aac:	2307      	movs	r3, #7
 8002aae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	483e      	ldr	r0, [pc, #248]	@ (8002bb0 <MX_USART2_UART_Init+0x150>)
 8002ab6:	f000 fb2b 	bl	8003110 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8002aba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002abe:	2105      	movs	r1, #5
 8002ac0:	483c      	ldr	r0, [pc, #240]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002ac2:	f7ff fde3 	bl	800268c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2105      	movs	r1, #5
 8002aca:	483a      	ldr	r0, [pc, #232]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002acc:	f7ff fce2 	bl	8002494 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	4837      	ldr	r0, [pc, #220]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002ad6:	f7ff fdb5 	bl	8002644 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2105      	movs	r1, #5
 8002ade:	4835      	ldr	r0, [pc, #212]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002ae0:	f7ff fcfc 	bl	80024dc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2105      	movs	r1, #5
 8002ae8:	4832      	ldr	r0, [pc, #200]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002aea:	f7ff fd1b 	bl	8002524 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8002aee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002af2:	2105      	movs	r1, #5
 8002af4:	482f      	ldr	r0, [pc, #188]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002af6:	f7ff fd39 	bl	800256c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2105      	movs	r1, #5
 8002afe:	482d      	ldr	r0, [pc, #180]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b00:	f7ff fd58 	bl	80025b4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8002b04:	2200      	movs	r2, #0
 8002b06:	2105      	movs	r1, #5
 8002b08:	482a      	ldr	r0, [pc, #168]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b0a:	f7ff fd77 	bl	80025fc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8002b0e:	2105      	movs	r1, #5
 8002b10:	4828      	ldr	r0, [pc, #160]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b12:	f7ff fddf 	bl	80026d4 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8002b16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b1a:	2106      	movs	r1, #6
 8002b1c:	4825      	ldr	r0, [pc, #148]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b1e:	f7ff fdb5 	bl	800268c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	2106      	movs	r1, #6
 8002b26:	4823      	ldr	r0, [pc, #140]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b28:	f7ff fcb4 	bl	8002494 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2106      	movs	r1, #6
 8002b30:	4820      	ldr	r0, [pc, #128]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b32:	f7ff fd87 	bl	8002644 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2106      	movs	r1, #6
 8002b3a:	481e      	ldr	r0, [pc, #120]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b3c:	f7ff fcce 	bl	80024dc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2106      	movs	r1, #6
 8002b44:	481b      	ldr	r0, [pc, #108]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b46:	f7ff fced 	bl	8002524 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8002b4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b4e:	2106      	movs	r1, #6
 8002b50:	4818      	ldr	r0, [pc, #96]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b52:	f7ff fd0b 	bl	800256c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2106      	movs	r1, #6
 8002b5a:	4816      	ldr	r0, [pc, #88]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b5c:	f7ff fd2a 	bl	80025b4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2106      	movs	r1, #6
 8002b64:	4813      	ldr	r0, [pc, #76]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b66:	f7ff fd49 	bl	80025fc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8002b6a:	2106      	movs	r1, #6
 8002b6c:	4811      	ldr	r0, [pc, #68]	@ (8002bb4 <MX_USART2_UART_Init+0x154>)
 8002b6e:	f7ff fdb1 	bl	80026d4 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002b72:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002b76:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002b84:	230c      	movs	r3, #12
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002b90:	f107 031c 	add.w	r3, r7, #28
 8002b94:	4619      	mov	r1, r3
 8002b96:	4808      	ldr	r0, [pc, #32]	@ (8002bb8 <MX_USART2_UART_Init+0x158>)
 8002b98:	f000 fff0 	bl	8003b7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002b9c:	4806      	ldr	r0, [pc, #24]	@ (8002bb8 <MX_USART2_UART_Init+0x158>)
 8002b9e:	f7ff fe11 	bl	80027c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002ba2:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <MX_USART2_UART_Init+0x158>)
 8002ba4:	f7ff fdfe 	bl	80027a4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	3738      	adds	r7, #56	@ 0x38
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40026000 	.word	0x40026000
 8002bb8:	40004400 	.word	0x40004400

08002bbc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	@ 0x38
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
 8002bd2:	615a      	str	r2, [r3, #20]
 8002bd4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002be6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002bea:	f7ff fdab 	bl	8002744 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002bee:	2004      	movs	r0, #4
 8002bf0:	f7ff fd90 	bl	8002714 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002bf4:	2002      	movs	r0, #2
 8002bf6:	f7ff fd8d 	bl	8002714 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002c0e:	2307      	movs	r3, #7
 8002c10:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4822      	ldr	r0, [pc, #136]	@ (8002ca0 <MX_USART3_UART_Init+0xe4>)
 8002c18:	f000 fa7a 	bl	8003110 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002c1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c22:	2302      	movs	r3, #2
 8002c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c26:	2303      	movs	r3, #3
 8002c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002c32:	2307      	movs	r3, #7
 8002c34:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	481a      	ldr	r0, [pc, #104]	@ (8002ca4 <MX_USART3_UART_Init+0xe8>)
 8002c3c:	f000 fa68 	bl	8003110 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002c40:	f7ff fb9e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fbee 	bl	800242c <NVIC_EncodePriority>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4619      	mov	r1, r3
 8002c54:	2027      	movs	r0, #39	@ 0x27
 8002c56:	f7ff fbbf 	bl	80023d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002c5a:	2027      	movs	r0, #39	@ 0x27
 8002c5c:	f7ff fb9e 	bl	800239c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002c60:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002c64:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c72:	230c      	movs	r3, #12
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8002c7e:	f107 031c 	add.w	r3, r7, #28
 8002c82:	4619      	mov	r1, r3
 8002c84:	4808      	ldr	r0, [pc, #32]	@ (8002ca8 <MX_USART3_UART_Init+0xec>)
 8002c86:	f000 ff79 	bl	8003b7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002c8a:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <MX_USART3_UART_Init+0xec>)
 8002c8c:	f7ff fd9a 	bl	80027c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002c90:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <MX_USART3_UART_Init+0xec>)
 8002c92:	f7ff fd87 	bl	80027a4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c96:	bf00      	nop
 8002c98:	3738      	adds	r7, #56	@ 0x38
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40004800 	.word	0x40004800

08002cac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08e      	sub	sp, #56	@ 0x38
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	615a      	str	r2, [r3, #20]
 8002cc4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
 8002cd4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002cd6:	2020      	movs	r0, #32
 8002cd8:	f7ff fd4c 	bl	8002774 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002cdc:	2004      	movs	r0, #4
 8002cde:	f7ff fd19 	bl	8002714 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002ce2:	23c0      	movs	r3, #192	@ 0xc0
 8002ce4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4846      	ldr	r0, [pc, #280]	@ (8002e18 <MX_USART6_UART_Init+0x16c>)
 8002d00:	f000 fa06 	bl	8003110 <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_5);
 8002d04:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002d08:	2106      	movs	r1, #6
 8002d0a:	4844      	ldr	r0, [pc, #272]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d0c:	f7ff fcbe 	bl	800268c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	2106      	movs	r1, #6
 8002d14:	4841      	ldr	r0, [pc, #260]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d16:	f7ff fbbd 	bl	8002494 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2106      	movs	r1, #6
 8002d1e:	483f      	ldr	r0, [pc, #252]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d20:	f7ff fc90 	bl	8002644 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2106      	movs	r1, #6
 8002d28:	483c      	ldr	r0, [pc, #240]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d2a:	f7ff fbd7 	bl	80024dc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2106      	movs	r1, #6
 8002d32:	483a      	ldr	r0, [pc, #232]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d34:	f7ff fbf6 	bl	8002524 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8002d38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d3c:	2106      	movs	r1, #6
 8002d3e:	4837      	ldr	r0, [pc, #220]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d40:	f7ff fc14 	bl	800256c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2106      	movs	r1, #6
 8002d48:	4834      	ldr	r0, [pc, #208]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d4a:	f7ff fc33 	bl	80025b4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2106      	movs	r1, #6
 8002d52:	4832      	ldr	r0, [pc, #200]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d54:	f7ff fc52 	bl	80025fc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8002d58:	2106      	movs	r1, #6
 8002d5a:	4830      	ldr	r0, [pc, #192]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d5c:	f7ff fcba 	bl	80026d4 <LL_DMA_DisableFifoMode>

  /* USART6_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 8002d60:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002d64:	2101      	movs	r1, #1
 8002d66:	482d      	ldr	r0, [pc, #180]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d68:	f7ff fc90 	bl	800268c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2101      	movs	r1, #1
 8002d70:	482a      	ldr	r0, [pc, #168]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d72:	f7ff fb8f 	bl	8002494 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4828      	ldr	r0, [pc, #160]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d7c:	f7ff fc62 	bl	8002644 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2101      	movs	r1, #1
 8002d84:	4825      	ldr	r0, [pc, #148]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d86:	f7ff fba9 	bl	80024dc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4823      	ldr	r0, [pc, #140]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d90:	f7ff fbc8 	bl	8002524 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8002d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4820      	ldr	r0, [pc, #128]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002d9c:	f7ff fbe6 	bl	800256c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2101      	movs	r1, #1
 8002da4:	481d      	ldr	r0, [pc, #116]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002da6:	f7ff fc05 	bl	80025b4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2101      	movs	r1, #1
 8002dae:	481b      	ldr	r0, [pc, #108]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002db0:	f7ff fc24 	bl	80025fc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 8002db4:	2101      	movs	r1, #1
 8002db6:	4819      	ldr	r0, [pc, #100]	@ (8002e1c <MX_USART6_UART_Init+0x170>)
 8002db8:	f7ff fc8c 	bl	80026d4 <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002dbc:	f7ff fae0 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fb30 	bl	800242c <NVIC_EncodePriority>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	2047      	movs	r0, #71	@ 0x47
 8002dd2:	f7ff fb01 	bl	80023d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002dd6:	2047      	movs	r0, #71	@ 0x47
 8002dd8:	f7ff fae0 	bl	800239c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 8002ddc:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <MX_USART6_UART_Init+0x174>)
 8002dde:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002de0:	2300      	movs	r3, #0
 8002de2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002dec:	230c      	movs	r3, #12
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002df4:	2300      	movs	r3, #0
 8002df6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002df8:	f107 031c 	add.w	r3, r7, #28
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4809      	ldr	r0, [pc, #36]	@ (8002e24 <MX_USART6_UART_Init+0x178>)
 8002e00:	f000 febc 	bl	8003b7c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002e04:	4807      	ldr	r0, [pc, #28]	@ (8002e24 <MX_USART6_UART_Init+0x178>)
 8002e06:	f7ff fcdd 	bl	80027c4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002e0a:	4806      	ldr	r0, [pc, #24]	@ (8002e24 <MX_USART6_UART_Init+0x178>)
 8002e0c:	f7ff fcca 	bl	80027a4 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e10:	bf00      	nop
 8002e12:	3738      	adds	r7, #56	@ 0x38
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40026400 	.word	0x40026400
 8002e20:	001e8480 	.word	0x001e8480
 8002e24:	40011400 	.word	0x40011400

08002e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e2c:	f7ff f96a 	bl	8002104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e30:	480c      	ldr	r0, [pc, #48]	@ (8002e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e32:	490d      	ldr	r1, [pc, #52]	@ (8002e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e48:	4c0a      	ldr	r4, [pc, #40]	@ (8002e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e56:	f001 f9cd 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5a:	f7fe fa41 	bl	80012e0 <main>
  bx  lr    
 8002e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e68:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 8002e6c:	08004e24 	.word	0x08004e24
  ldr r2, =_sbss
 8002e70:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8002e74:	20000904 	.word	0x20000904

08002e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e78:	e7fe      	b.n	8002e78 <ADC_IRQHandler>

08002e7a <LL_GPIO_SetPinMode>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b08b      	sub	sp, #44	@ 0x2c
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	613b      	str	r3, [r7, #16]
  return result;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	e003      	b.n	8002eac <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2103      	movs	r1, #3
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e003      	b.n	8002eda <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	372c      	adds	r7, #44	@ 0x2c
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_GPIO_SetPinOutputType>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	401a      	ands	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	605a      	str	r2, [r3, #4]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_GPIO_SetPinSpeed>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	b08b      	sub	sp, #44	@ 0x2c
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	613b      	str	r3, [r7, #16]
  return result;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	e003      	b.n	8002f56 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2103      	movs	r1, #3
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	401a      	ands	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	61fb      	str	r3, [r7, #28]
  return result;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e003      	b.n	8002f84 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	609a      	str	r2, [r3, #8]
}
 8002f92:	bf00      	nop
 8002f94:	372c      	adds	r7, #44	@ 0x2c
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_GPIO_SetPinPull>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b08b      	sub	sp, #44	@ 0x2c
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	613b      	str	r3, [r7, #16]
  return result;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e003      	b.n	8002fd0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2103      	movs	r1, #3
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	401a      	ands	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	fa93 f3a3 	rbit	r3, r3
 8002fe6:	61fb      	str	r3, [r7, #28]
  return result;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e003      	b.n	8002ffe <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	fab3 f383 	clz	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	431a      	orrs	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	60da      	str	r2, [r3, #12]
}
 800300c:	bf00      	nop
 800300e:	372c      	adds	r7, #44	@ 0x2c
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_GPIO_SetAFPin_0_7>:
{
 8003018:	b480      	push	{r7}
 800301a:	b08b      	sub	sp, #44	@ 0x2c
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	613b      	str	r3, [r7, #16]
  return result;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e003      	b.n	800304a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	210f      	movs	r1, #15
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	401a      	ands	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	61fb      	str	r3, [r7, #28]
  return result;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e003      	b.n	8003078 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	372c      	adds	r7, #44	@ 0x2c
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <LL_GPIO_SetAFPin_8_15>:
{
 8003092:	b480      	push	{r7}
 8003094:	b08b      	sub	sp, #44	@ 0x2c
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	613b      	str	r3, [r7, #16]
  return result;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80030ba:	2320      	movs	r3, #32
 80030bc:	e003      	b.n	80030c6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	210f      	movs	r1, #15
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	401a      	ands	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	61fb      	str	r3, [r7, #28]
  return result;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80030ea:	2320      	movs	r3, #32
 80030ec:	e003      	b.n	80030f6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	431a      	orrs	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003104:	bf00      	nop
 8003106:	372c      	adds	r7, #44	@ 0x2c
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	@ 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	617b      	str	r3, [r7, #20]
  return result;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <LL_GPIO_Init+0x2e>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e003      	b.n	8003146 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003148:	e057      	b.n	80031fa <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	4013      	ands	r3, r2
 8003158:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d049      	beq.n	80031f4 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d003      	beq.n	8003170 <LL_GPIO_Init+0x60>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d10d      	bne.n	800318c <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	461a      	mov	r2, r3
 8003176:	6a39      	ldr	r1, [r7, #32]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff fed3 	bl	8002f24 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	6a39      	ldr	r1, [r7, #32]
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff feb4 	bl	8002ef4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	461a      	mov	r2, r3
 8003192:	6a39      	ldr	r1, [r7, #32]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff02 	bl	8002f9e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d121      	bne.n	80031e6 <LL_GPIO_Init+0xd6>
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	60bb      	str	r3, [r7, #8]
  return result;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <LL_GPIO_Init+0xac>
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e003      	b.n	80031c4 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80031c4:	2b07      	cmp	r3, #7
 80031c6:	d807      	bhi.n	80031d8 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	461a      	mov	r2, r3
 80031ce:	6a39      	ldr	r1, [r7, #32]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff21 	bl	8003018 <LL_GPIO_SetAFPin_0_7>
 80031d6:	e006      	b.n	80031e6 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	461a      	mov	r2, r3
 80031de:	6a39      	ldr	r1, [r7, #32]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff56 	bl	8003092 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	461a      	mov	r2, r3
 80031ec:	6a39      	ldr	r1, [r7, #32]
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fe43 	bl	8002e7a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	3301      	adds	r3, #1
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1a0      	bne.n	800314a <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3728      	adds	r7, #40	@ 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <LL_RCC_GetSysClkSource>:
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003218:	4b04      	ldr	r3, [pc, #16]	@ (800322c <LL_RCC_GetSysClkSource+0x18>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 030c 	and.w	r3, r3, #12
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800

08003230 <LL_RCC_GetAHBPrescaler>:
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003234:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <LL_RCC_GetAHBPrescaler+0x18>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <LL_RCC_GetAPB1Prescaler>:
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <LL_RCC_GetAPB2Prescaler>:
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800326c:	4b04      	ldr	r3, [pc, #16]	@ (8003280 <LL_RCC_GetAPB2Prescaler+0x18>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <LL_RCC_PLL_GetMainSource+0x18>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800

080032a0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <LL_RCC_PLL_GetN+0x18>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40023800 	.word	0x40023800

080032bc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <LL_RCC_PLL_GetP+0x18>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800

080032d8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80032dc:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <LL_RCC_PLL_GetR+0x18>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800

080032f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80032f8:	4b04      	ldr	r3, [pc, #16]	@ (800330c <LL_RCC_PLL_GetDivider+0x18>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003318:	f000 f820 	bl	800335c <RCC_GetSystemClockFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f85c 	bl	80033e4 <RCC_GetHCLKClockFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f86a 	bl	8003410 <RCC_GetPCLK1ClockFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f876 	bl	8003438 <RCC_GetPCLK2ClockFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60da      	str	r2, [r3, #12]
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003366:	f7ff ff55 	bl	8003214 <LL_RCC_GetSysClkSource>
 800336a:	4603      	mov	r3, r0
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d82d      	bhi.n	80033cc <RCC_GetSystemClockFreq+0x70>
 8003370:	a201      	add	r2, pc, #4	@ (adr r2, 8003378 <RCC_GetSystemClockFreq+0x1c>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	080033ad 	.word	0x080033ad
 800337c:	080033cd 	.word	0x080033cd
 8003380:	080033cd 	.word	0x080033cd
 8003384:	080033cd 	.word	0x080033cd
 8003388:	080033b3 	.word	0x080033b3
 800338c:	080033cd 	.word	0x080033cd
 8003390:	080033cd 	.word	0x080033cd
 8003394:	080033cd 	.word	0x080033cd
 8003398:	080033b9 	.word	0x080033b9
 800339c:	080033cd 	.word	0x080033cd
 80033a0:	080033cd 	.word	0x080033cd
 80033a4:	080033cd 	.word	0x080033cd
 80033a8:	080033c3 	.word	0x080033c3
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80033ac:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <RCC_GetSystemClockFreq+0x80>)
 80033ae:	607b      	str	r3, [r7, #4]
      break;
 80033b0:	e00f      	b.n	80033d2 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80033b2:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <RCC_GetSystemClockFreq+0x84>)
 80033b4:	607b      	str	r3, [r7, #4]
      break;
 80033b6:	e00c      	b.n	80033d2 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80033b8:	2008      	movs	r0, #8
 80033ba:	f000 f851 	bl	8003460 <RCC_PLL_GetFreqDomain_SYS>
 80033be:	6078      	str	r0, [r7, #4]
      break;
 80033c0:	e007      	b.n	80033d2 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80033c2:	200c      	movs	r0, #12
 80033c4:	f000 f84c 	bl	8003460 <RCC_PLL_GetFreqDomain_SYS>
 80033c8:	6078      	str	r0, [r7, #4]
      break;
 80033ca:	e002      	b.n	80033d2 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <RCC_GetSystemClockFreq+0x80>)
 80033ce:	607b      	str	r3, [r7, #4]
      break;
 80033d0:	bf00      	nop
  }

  return frequency;
 80033d2:	687b      	ldr	r3, [r7, #4]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	00f42400 	.word	0x00f42400
 80033e0:	007a1200 	.word	0x007a1200

080033e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80033ec:	f7ff ff20 	bl	8003230 <LL_RCC_GetAHBPrescaler>
 80033f0:	4603      	mov	r3, r0
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	4a04      	ldr	r2, [pc, #16]	@ (800340c <RCC_GetHCLKClockFreq+0x28>)
 80033fa:	5cd3      	ldrb	r3, [r2, r3]
 80033fc:	461a      	mov	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	40d3      	lsrs	r3, r2
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	08004dc0 	.word	0x08004dc0

08003410 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003418:	f7ff ff18 	bl	800324c <LL_RCC_GetAPB1Prescaler>
 800341c:	4603      	mov	r3, r0
 800341e:	0a9b      	lsrs	r3, r3, #10
 8003420:	4a04      	ldr	r2, [pc, #16]	@ (8003434 <RCC_GetPCLK1ClockFreq+0x24>)
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	40d3      	lsrs	r3, r2
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	08004dd0 	.word	0x08004dd0

08003438 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003440:	f7ff ff12 	bl	8003268 <LL_RCC_GetAPB2Prescaler>
 8003444:	4603      	mov	r3, r0
 8003446:	0b5b      	lsrs	r3, r3, #13
 8003448:	4a04      	ldr	r2, [pc, #16]	@ (800345c <RCC_GetPCLK2ClockFreq+0x24>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	461a      	mov	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	40d3      	lsrs	r3, r2
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	08004dd0 	.word	0x08004dd0

08003460 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003474:	f7ff ff06 	bl	8003284 <LL_RCC_PLL_GetMainSource>
 8003478:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003486:	d003      	beq.n	8003490 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003488:	e005      	b.n	8003496 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800348a:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800348c:	617b      	str	r3, [r7, #20]
      break;
 800348e:	e005      	b.n	800349c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003492:	617b      	str	r3, [r7, #20]
      break;
 8003494:	e002      	b.n	800349c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003496:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003498:	617b      	str	r3, [r7, #20]
      break;
 800349a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d114      	bne.n	80034cc <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80034a2:	f7ff ff27 	bl	80032f4 <LL_RCC_PLL_GetDivider>
 80034a6:	4602      	mov	r2, r0
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fbb3 f4f2 	udiv	r4, r3, r2
 80034ae:	f7ff fef7 	bl	80032a0 <LL_RCC_PLL_GetN>
 80034b2:	4603      	mov	r3, r0
 80034b4:	fb03 f404 	mul.w	r4, r3, r4
 80034b8:	f7ff ff00 	bl	80032bc <LL_RCC_PLL_GetP>
 80034bc:	4603      	mov	r3, r0
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	3301      	adds	r3, #1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	e011      	b.n	80034f0 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80034cc:	f7ff ff12 	bl	80032f4 <LL_RCC_PLL_GetDivider>
 80034d0:	4602      	mov	r2, r0
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fbb3 f4f2 	udiv	r4, r3, r2
 80034d8:	f7ff fee2 	bl	80032a0 <LL_RCC_PLL_GetN>
 80034dc:	4603      	mov	r3, r0
 80034de:	fb03 f404 	mul.w	r4, r3, r4
 80034e2:	f7ff fef9 	bl	80032d8 <LL_RCC_PLL_GetR>
 80034e6:	4603      	mov	r3, r0
 80034e8:	0f1b      	lsrs	r3, r3, #28
 80034ea:	fbb4 f3f3 	udiv	r3, r4, r3
 80034ee:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80034f0:	693b      	ldr	r3, [r7, #16]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	007a1200 	.word	0x007a1200

08003504 <LL_TIM_SetPrescaler>:
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_TIM_SetAutoReload>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_TIM_SetRepetitionCounter>:
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	615a      	str	r2, [r3, #20]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a3d      	ldr	r2, [pc, #244]	@ (8003680 <LL_TIM_Init+0x108>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <LL_TIM_Init+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003596:	d00f      	beq.n	80035b8 <LL_TIM_Init+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a3a      	ldr	r2, [pc, #232]	@ (8003684 <LL_TIM_Init+0x10c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00b      	beq.n	80035b8 <LL_TIM_Init+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a39      	ldr	r2, [pc, #228]	@ (8003688 <LL_TIM_Init+0x110>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d007      	beq.n	80035b8 <LL_TIM_Init+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a38      	ldr	r2, [pc, #224]	@ (800368c <LL_TIM_Init+0x114>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <LL_TIM_Init+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a37      	ldr	r2, [pc, #220]	@ (8003690 <LL_TIM_Init+0x118>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d106      	bne.n	80035c6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003680 <LL_TIM_Init+0x108>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02b      	beq.n	8003626 <LL_TIM_Init+0xae>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d027      	beq.n	8003626 <LL_TIM_Init+0xae>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003684 <LL_TIM_Init+0x10c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d023      	beq.n	8003626 <LL_TIM_Init+0xae>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a29      	ldr	r2, [pc, #164]	@ (8003688 <LL_TIM_Init+0x110>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <LL_TIM_Init+0xae>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a28      	ldr	r2, [pc, #160]	@ (800368c <LL_TIM_Init+0x114>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01b      	beq.n	8003626 <LL_TIM_Init+0xae>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a27      	ldr	r2, [pc, #156]	@ (8003690 <LL_TIM_Init+0x118>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d017      	beq.n	8003626 <LL_TIM_Init+0xae>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a26      	ldr	r2, [pc, #152]	@ (8003694 <LL_TIM_Init+0x11c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <LL_TIM_Init+0xae>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a25      	ldr	r2, [pc, #148]	@ (8003698 <LL_TIM_Init+0x120>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00f      	beq.n	8003626 <LL_TIM_Init+0xae>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a24      	ldr	r2, [pc, #144]	@ (800369c <LL_TIM_Init+0x124>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00b      	beq.n	8003626 <LL_TIM_Init+0xae>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a23      	ldr	r2, [pc, #140]	@ (80036a0 <LL_TIM_Init+0x128>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <LL_TIM_Init+0xae>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a22      	ldr	r2, [pc, #136]	@ (80036a4 <LL_TIM_Init+0x12c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <LL_TIM_Init+0xae>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a21      	ldr	r2, [pc, #132]	@ (80036a8 <LL_TIM_Init+0x130>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d106      	bne.n	8003634 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff6d 	bl	8003520 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff59 	bl	8003504 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <LL_TIM_Init+0x108>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <LL_TIM_Init+0xea>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a0c      	ldr	r2, [pc, #48]	@ (8003690 <LL_TIM_Init+0x118>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d105      	bne.n	800366e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	4619      	mov	r1, r3
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff67 	bl	800353c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ff72 	bl	8003558 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40010400 	.word	0x40010400
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800
 80036a0:	40001800 	.word	0x40001800
 80036a4:	40001c00 	.word	0x40001c00
 80036a8:	40002000 	.word	0x40002000

080036ac <LL_USART_IsEnabled>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_USART_SetStopBitsLength>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	611a      	str	r2, [r3, #16]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <LL_USART_SetHWFlowCtrl>:
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	615a      	str	r2, [r3, #20]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_USART_SetBaudRate>:
{
 8003720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003724:	b0c0      	sub	sp, #256	@ 0x100
 8003726:	af00      	add	r7, sp, #0
 8003728:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800372c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8003730:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003734:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003740:	f040 810c 	bne.w	800395c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003744:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003748:	2200      	movs	r2, #0
 800374a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800374e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003752:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003756:	4622      	mov	r2, r4
 8003758:	462b      	mov	r3, r5
 800375a:	1891      	adds	r1, r2, r2
 800375c:	6639      	str	r1, [r7, #96]	@ 0x60
 800375e:	415b      	adcs	r3, r3
 8003760:	667b      	str	r3, [r7, #100]	@ 0x64
 8003762:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003766:	4621      	mov	r1, r4
 8003768:	eb12 0801 	adds.w	r8, r2, r1
 800376c:	4629      	mov	r1, r5
 800376e:	eb43 0901 	adc.w	r9, r3, r1
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800377e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003786:	4690      	mov	r8, r2
 8003788:	4699      	mov	r9, r3
 800378a:	4623      	mov	r3, r4
 800378c:	eb18 0303 	adds.w	r3, r8, r3
 8003790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003794:	462b      	mov	r3, r5
 8003796:	eb49 0303 	adc.w	r3, r9, r3
 800379a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800379e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80037a2:	2200      	movs	r2, #0
 80037a4:	469a      	mov	sl, r3
 80037a6:	4693      	mov	fp, r2
 80037a8:	eb1a 030a 	adds.w	r3, sl, sl
 80037ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ae:	eb4b 030b 	adc.w	r3, fp, fp
 80037b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80037bc:	f7fc fd78 	bl	80002b0 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4b64      	ldr	r3, [pc, #400]	@ (8003958 <LL_USART_SetBaudRate+0x238>)
 80037c6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	b29c      	uxth	r4, r3
 80037d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037dc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037e0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	1891      	adds	r1, r2, r2
 80037ea:	6539      	str	r1, [r7, #80]	@ 0x50
 80037ec:	415b      	adcs	r3, r3
 80037ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80037f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037f4:	4641      	mov	r1, r8
 80037f6:	1851      	adds	r1, r2, r1
 80037f8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037fa:	4649      	mov	r1, r9
 80037fc:	414b      	adcs	r3, r1
 80037fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800380c:	4659      	mov	r1, fp
 800380e:	00cb      	lsls	r3, r1, #3
 8003810:	4651      	mov	r1, sl
 8003812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003816:	4651      	mov	r1, sl
 8003818:	00ca      	lsls	r2, r1, #3
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	4603      	mov	r3, r0
 8003820:	4642      	mov	r2, r8
 8003822:	189b      	adds	r3, r3, r2
 8003824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003828:	464b      	mov	r3, r9
 800382a:	460a      	mov	r2, r1
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003834:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003838:	2200      	movs	r2, #0
 800383a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800383e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003842:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003846:	460b      	mov	r3, r1
 8003848:	18db      	adds	r3, r3, r3
 800384a:	643b      	str	r3, [r7, #64]	@ 0x40
 800384c:	4613      	mov	r3, r2
 800384e:	eb42 0303 	adc.w	r3, r2, r3
 8003852:	647b      	str	r3, [r7, #68]	@ 0x44
 8003854:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003858:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800385c:	f7fc fd28 	bl	80002b0 <__aeabi_uldivmod>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4611      	mov	r1, r2
 8003866:	4b3c      	ldr	r3, [pc, #240]	@ (8003958 <LL_USART_SetBaudRate+0x238>)
 8003868:	fba3 2301 	umull	r2, r3, r3, r1
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	2264      	movs	r2, #100	@ 0x64
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	1acb      	subs	r3, r1, r3
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800387c:	4b36      	ldr	r3, [pc, #216]	@ (8003958 <LL_USART_SetBaudRate+0x238>)
 800387e:	fba3 2302 	umull	r2, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	b29b      	uxth	r3, r3
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800388e:	b29b      	uxth	r3, r3
 8003890:	4423      	add	r3, r4
 8003892:	b29c      	uxth	r4, r3
 8003894:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003898:	2200      	movs	r2, #0
 800389a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800389e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038a2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80038a6:	4642      	mov	r2, r8
 80038a8:	464b      	mov	r3, r9
 80038aa:	1891      	adds	r1, r2, r2
 80038ac:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038ae:	415b      	adcs	r3, r3
 80038b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038b6:	4641      	mov	r1, r8
 80038b8:	1851      	adds	r1, r2, r1
 80038ba:	6339      	str	r1, [r7, #48]	@ 0x30
 80038bc:	4649      	mov	r1, r9
 80038be:	414b      	adcs	r3, r1
 80038c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80038ce:	4659      	mov	r1, fp
 80038d0:	00cb      	lsls	r3, r1, #3
 80038d2:	4651      	mov	r1, sl
 80038d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d8:	4651      	mov	r1, sl
 80038da:	00ca      	lsls	r2, r1, #3
 80038dc:	4610      	mov	r0, r2
 80038de:	4619      	mov	r1, r3
 80038e0:	4603      	mov	r3, r0
 80038e2:	4642      	mov	r2, r8
 80038e4:	189b      	adds	r3, r3, r2
 80038e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038ea:	464b      	mov	r3, r9
 80038ec:	460a      	mov	r2, r1
 80038ee:	eb42 0303 	adc.w	r3, r2, r3
 80038f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80038f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003900:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003904:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003908:	460b      	mov	r3, r1
 800390a:	18db      	adds	r3, r3, r3
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800390e:	4613      	mov	r3, r2
 8003910:	eb42 0303 	adc.w	r3, r2, r3
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800391a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800391e:	f7fc fcc7 	bl	80002b0 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <LL_USART_SetBaudRate+0x238>)
 8003928:	fba3 1302 	umull	r1, r3, r3, r2
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	2164      	movs	r1, #100	@ 0x64
 8003930:	fb01 f303 	mul.w	r3, r1, r3
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	3332      	adds	r3, #50	@ 0x32
 800393a:	4a07      	ldr	r2, [pc, #28]	@ (8003958 <LL_USART_SetBaudRate+0x238>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	b29b      	uxth	r3, r3
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	b29b      	uxth	r3, r3
 800394a:	4423      	add	r3, r4
 800394c:	b29b      	uxth	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003954:	609a      	str	r2, [r3, #8]
}
 8003956:	e108      	b.n	8003b6a <LL_USART_SetBaudRate+0x44a>
 8003958:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800395c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003966:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800396a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800396e:	4642      	mov	r2, r8
 8003970:	464b      	mov	r3, r9
 8003972:	1891      	adds	r1, r2, r2
 8003974:	6239      	str	r1, [r7, #32]
 8003976:	415b      	adcs	r3, r3
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
 800397a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800397e:	4641      	mov	r1, r8
 8003980:	1854      	adds	r4, r2, r1
 8003982:	4649      	mov	r1, r9
 8003984:	eb43 0501 	adc.w	r5, r3, r1
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	00eb      	lsls	r3, r5, #3
 8003992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003996:	00e2      	lsls	r2, r4, #3
 8003998:	4614      	mov	r4, r2
 800399a:	461d      	mov	r5, r3
 800399c:	4643      	mov	r3, r8
 800399e:	18e3      	adds	r3, r4, r3
 80039a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039a4:	464b      	mov	r3, r9
 80039a6:	eb45 0303 	adc.w	r3, r5, r3
 80039aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80039c8:	4629      	mov	r1, r5
 80039ca:	008b      	lsls	r3, r1, #2
 80039cc:	4621      	mov	r1, r4
 80039ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039d2:	4621      	mov	r1, r4
 80039d4:	008a      	lsls	r2, r1, #2
 80039d6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80039da:	f7fc fc69 	bl	80002b0 <__aeabi_uldivmod>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4b65      	ldr	r3, [pc, #404]	@ (8003b78 <LL_USART_SetBaudRate+0x458>)
 80039e4:	fba3 2302 	umull	r2, r3, r3, r2
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	b29c      	uxth	r4, r3
 80039f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80039fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039fe:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003a02:	4642      	mov	r2, r8
 8003a04:	464b      	mov	r3, r9
 8003a06:	1891      	adds	r1, r2, r2
 8003a08:	61b9      	str	r1, [r7, #24]
 8003a0a:	415b      	adcs	r3, r3
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a12:	4641      	mov	r1, r8
 8003a14:	1851      	adds	r1, r2, r1
 8003a16:	6139      	str	r1, [r7, #16]
 8003a18:	4649      	mov	r1, r9
 8003a1a:	414b      	adcs	r3, r1
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a2a:	4659      	mov	r1, fp
 8003a2c:	00cb      	lsls	r3, r1, #3
 8003a2e:	4651      	mov	r1, sl
 8003a30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a34:	4651      	mov	r1, sl
 8003a36:	00ca      	lsls	r2, r1, #3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4642      	mov	r2, r8
 8003a40:	189b      	adds	r3, r3, r2
 8003a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a46:	464b      	mov	r3, r9
 8003a48:	460a      	mov	r2, r1
 8003a4a:	eb42 0303 	adc.w	r3, r2, r3
 8003a4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	008b      	lsls	r3, r1, #2
 8003a70:	4641      	mov	r1, r8
 8003a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a76:	4641      	mov	r1, r8
 8003a78:	008a      	lsls	r2, r1, #2
 8003a7a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003a7e:	f7fc fc17 	bl	80002b0 <__aeabi_uldivmod>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	4b3b      	ldr	r3, [pc, #236]	@ (8003b78 <LL_USART_SetBaudRate+0x458>)
 8003a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2264      	movs	r2, #100	@ 0x64
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	1acb      	subs	r3, r1, r3
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	3332      	adds	r3, #50	@ 0x32
 8003a9c:	4a36      	ldr	r2, [pc, #216]	@ (8003b78 <LL_USART_SetBaudRate+0x458>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	4423      	add	r3, r4
 8003aae:	b29c      	uxth	r4, r3
 8003ab0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ab8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003aba:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003abe:	4642      	mov	r2, r8
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	1891      	adds	r1, r2, r2
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	415b      	adcs	r3, r3
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ace:	4641      	mov	r1, r8
 8003ad0:	1851      	adds	r1, r2, r1
 8003ad2:	6039      	str	r1, [r7, #0]
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	414b      	adcs	r3, r1
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ae6:	4659      	mov	r1, fp
 8003ae8:	00cb      	lsls	r3, r1, #3
 8003aea:	4651      	mov	r1, sl
 8003aec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af0:	4651      	mov	r1, sl
 8003af2:	00ca      	lsls	r2, r1, #3
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	4603      	mov	r3, r0
 8003afa:	4642      	mov	r2, r8
 8003afc:	189b      	adds	r3, r3, r2
 8003afe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b00:	464b      	mov	r3, r9
 8003b02:	460a      	mov	r2, r1
 8003b04:	eb42 0303 	adc.w	r3, r2, r3
 8003b08:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003b0e:	2200      	movs	r2, #0
 8003b10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003b20:	4649      	mov	r1, r9
 8003b22:	008b      	lsls	r3, r1, #2
 8003b24:	4641      	mov	r1, r8
 8003b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	008a      	lsls	r2, r1, #2
 8003b2e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003b32:	f7fc fbbd 	bl	80002b0 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <LL_USART_SetBaudRate+0x458>)
 8003b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	2164      	movs	r1, #100	@ 0x64
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	3332      	adds	r3, #50	@ 0x32
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <LL_USART_SetBaudRate+0x458>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	4423      	add	r3, r4
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b68:	609a      	str	r2, [r3, #8]
}
 8003b6a:	bf00      	nop
 8003b6c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b76:	bf00      	nop
 8003b78:	51eb851f 	.word	0x51eb851f

08003b7c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fd8c 	bl	80036ac <LL_USART_IsEnabled>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d15e      	bne.n	8003c58 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003ba2:	f023 030c 	bic.w	r3, r3, #12
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	6851      	ldr	r1, [r2, #4]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	6912      	ldr	r2, [r2, #16]
 8003bb4:	4311      	orrs	r1, r2
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	6992      	ldr	r2, [r2, #24]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fd83 	bl	80036d4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fd90 	bl	80036fa <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003bda:	f107 0308 	add.w	r3, r7, #8
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fb96 	bl	8003310 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c64 <LL_USART_Init+0xe8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d102      	bne.n	8003bf2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e021      	b.n	8003c36 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c68 <LL_USART_Init+0xec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d102      	bne.n	8003c00 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	e01a      	b.n	8003c36 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	@ (8003c6c <LL_USART_Init+0xf0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d102      	bne.n	8003c0e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e013      	b.n	8003c36 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a17      	ldr	r2, [pc, #92]	@ (8003c70 <LL_USART_Init+0xf4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d102      	bne.n	8003c1c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	e00c      	b.n	8003c36 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a15      	ldr	r2, [pc, #84]	@ (8003c74 <LL_USART_Init+0xf8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d102      	bne.n	8003c2a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	e005      	b.n	8003c36 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a12      	ldr	r2, [pc, #72]	@ (8003c78 <LL_USART_Init+0xfc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003c50:	69b9      	ldr	r1, [r7, #24]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff fd64 	bl	8003720 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40011000 	.word	0x40011000
 8003c68:	40004400 	.word	0x40004400
 8003c6c:	40004800 	.word	0x40004800
 8003c70:	40011400 	.word	0x40011400
 8003c74:	40004c00 	.word	0x40004c00
 8003c78:	40005000 	.word	0x40005000

08003c7c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	4a07      	ldr	r2, [pc, #28]	@ (8003cac <LL_InitTick+0x30>)
 8003c90:	3b01      	subs	r3, #1
 8003c92:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003c94:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <LL_InitTick+0x30>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c9a:	4b04      	ldr	r3, [pc, #16]	@ (8003cac <LL_InitTick+0x30>)
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	e000e010 	.word	0xe000e010

08003cb0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003cb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ffdd 	bl	8003c7c <LL_InitTick>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d14 <LL_mDelay+0x48>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003cda:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d00c      	beq.n	8003cfe <LL_mDelay+0x32>
  {
    Delay++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003cea:	e008      	b.n	8003cfe <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003cec:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <LL_mDelay+0x48>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <LL_mDelay+0x32>
    {
      Delay--;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f3      	bne.n	8003cec <LL_mDelay+0x20>
    }
  }
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000e010 	.word	0xe000e010

08003d18 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d20:	4a04      	ldr	r2, [pc, #16]	@ (8003d34 <LL_SetSystemCoreClock+0x1c>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	200002cc 	.word	0x200002cc

08003d38 <std>:
 8003d38:	2300      	movs	r3, #0
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d46:	6083      	str	r3, [r0, #8]
 8003d48:	8181      	strh	r1, [r0, #12]
 8003d4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d4c:	81c2      	strh	r2, [r0, #14]
 8003d4e:	6183      	str	r3, [r0, #24]
 8003d50:	4619      	mov	r1, r3
 8003d52:	2208      	movs	r2, #8
 8003d54:	305c      	adds	r0, #92	@ 0x5c
 8003d56:	f000 f9f9 	bl	800414c <memset>
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <std+0x58>)
 8003d5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <std+0x5c>)
 8003d60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <std+0x60>)
 8003d64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d66:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <std+0x64>)
 8003d68:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <std+0x68>)
 8003d6c:	6224      	str	r4, [r4, #32]
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	d006      	beq.n	8003d80 <std+0x48>
 8003d72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d76:	4294      	cmp	r4, r2
 8003d78:	d002      	beq.n	8003d80 <std+0x48>
 8003d7a:	33d0      	adds	r3, #208	@ 0xd0
 8003d7c:	429c      	cmp	r4, r3
 8003d7e:	d105      	bne.n	8003d8c <std+0x54>
 8003d80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d88:	f000 ba58 	b.w	800423c <__retarget_lock_init_recursive>
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	bf00      	nop
 8003d90:	08003f9d 	.word	0x08003f9d
 8003d94:	08003fbf 	.word	0x08003fbf
 8003d98:	08003ff7 	.word	0x08003ff7
 8003d9c:	0800401b 	.word	0x0800401b
 8003da0:	200007b8 	.word	0x200007b8

08003da4 <stdio_exit_handler>:
 8003da4:	4a02      	ldr	r2, [pc, #8]	@ (8003db0 <stdio_exit_handler+0xc>)
 8003da6:	4903      	ldr	r1, [pc, #12]	@ (8003db4 <stdio_exit_handler+0x10>)
 8003da8:	4803      	ldr	r0, [pc, #12]	@ (8003db8 <stdio_exit_handler+0x14>)
 8003daa:	f000 b869 	b.w	8003e80 <_fwalk_sglue>
 8003dae:	bf00      	nop
 8003db0:	200002d0 	.word	0x200002d0
 8003db4:	08004ad9 	.word	0x08004ad9
 8003db8:	200002e0 	.word	0x200002e0

08003dbc <cleanup_stdio>:
 8003dbc:	6841      	ldr	r1, [r0, #4]
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <cleanup_stdio+0x34>)
 8003dc0:	4299      	cmp	r1, r3
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	d001      	beq.n	8003dcc <cleanup_stdio+0x10>
 8003dc8:	f000 fe86 	bl	8004ad8 <_fflush_r>
 8003dcc:	68a1      	ldr	r1, [r4, #8]
 8003dce:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <cleanup_stdio+0x38>)
 8003dd0:	4299      	cmp	r1, r3
 8003dd2:	d002      	beq.n	8003dda <cleanup_stdio+0x1e>
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f000 fe7f 	bl	8004ad8 <_fflush_r>
 8003dda:	68e1      	ldr	r1, [r4, #12]
 8003ddc:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <cleanup_stdio+0x3c>)
 8003dde:	4299      	cmp	r1, r3
 8003de0:	d004      	beq.n	8003dec <cleanup_stdio+0x30>
 8003de2:	4620      	mov	r0, r4
 8003de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de8:	f000 be76 	b.w	8004ad8 <_fflush_r>
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	bf00      	nop
 8003df0:	200007b8 	.word	0x200007b8
 8003df4:	20000820 	.word	0x20000820
 8003df8:	20000888 	.word	0x20000888

08003dfc <global_stdio_init.part.0>:
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <global_stdio_init.part.0+0x30>)
 8003e00:	4c0b      	ldr	r4, [pc, #44]	@ (8003e30 <global_stdio_init.part.0+0x34>)
 8003e02:	4a0c      	ldr	r2, [pc, #48]	@ (8003e34 <global_stdio_init.part.0+0x38>)
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	4620      	mov	r0, r4
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2104      	movs	r1, #4
 8003e0c:	f7ff ff94 	bl	8003d38 <std>
 8003e10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e14:	2201      	movs	r2, #1
 8003e16:	2109      	movs	r1, #9
 8003e18:	f7ff ff8e 	bl	8003d38 <std>
 8003e1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e20:	2202      	movs	r2, #2
 8003e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e26:	2112      	movs	r1, #18
 8003e28:	f7ff bf86 	b.w	8003d38 <std>
 8003e2c:	200008f0 	.word	0x200008f0
 8003e30:	200007b8 	.word	0x200007b8
 8003e34:	08003da5 	.word	0x08003da5

08003e38 <__sfp_lock_acquire>:
 8003e38:	4801      	ldr	r0, [pc, #4]	@ (8003e40 <__sfp_lock_acquire+0x8>)
 8003e3a:	f000 ba00 	b.w	800423e <__retarget_lock_acquire_recursive>
 8003e3e:	bf00      	nop
 8003e40:	200008f9 	.word	0x200008f9

08003e44 <__sfp_lock_release>:
 8003e44:	4801      	ldr	r0, [pc, #4]	@ (8003e4c <__sfp_lock_release+0x8>)
 8003e46:	f000 b9fb 	b.w	8004240 <__retarget_lock_release_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	200008f9 	.word	0x200008f9

08003e50 <__sinit>:
 8003e50:	b510      	push	{r4, lr}
 8003e52:	4604      	mov	r4, r0
 8003e54:	f7ff fff0 	bl	8003e38 <__sfp_lock_acquire>
 8003e58:	6a23      	ldr	r3, [r4, #32]
 8003e5a:	b11b      	cbz	r3, 8003e64 <__sinit+0x14>
 8003e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e60:	f7ff bff0 	b.w	8003e44 <__sfp_lock_release>
 8003e64:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <__sinit+0x28>)
 8003e66:	6223      	str	r3, [r4, #32]
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <__sinit+0x2c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f5      	bne.n	8003e5c <__sinit+0xc>
 8003e70:	f7ff ffc4 	bl	8003dfc <global_stdio_init.part.0>
 8003e74:	e7f2      	b.n	8003e5c <__sinit+0xc>
 8003e76:	bf00      	nop
 8003e78:	08003dbd 	.word	0x08003dbd
 8003e7c:	200008f0 	.word	0x200008f0

08003e80 <_fwalk_sglue>:
 8003e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e84:	4607      	mov	r7, r0
 8003e86:	4688      	mov	r8, r1
 8003e88:	4614      	mov	r4, r2
 8003e8a:	2600      	movs	r6, #0
 8003e8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e90:	f1b9 0901 	subs.w	r9, r9, #1
 8003e94:	d505      	bpl.n	8003ea2 <_fwalk_sglue+0x22>
 8003e96:	6824      	ldr	r4, [r4, #0]
 8003e98:	2c00      	cmp	r4, #0
 8003e9a:	d1f7      	bne.n	8003e8c <_fwalk_sglue+0xc>
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ea2:	89ab      	ldrh	r3, [r5, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d907      	bls.n	8003eb8 <_fwalk_sglue+0x38>
 8003ea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003eac:	3301      	adds	r3, #1
 8003eae:	d003      	beq.n	8003eb8 <_fwalk_sglue+0x38>
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	47c0      	blx	r8
 8003eb6:	4306      	orrs	r6, r0
 8003eb8:	3568      	adds	r5, #104	@ 0x68
 8003eba:	e7e9      	b.n	8003e90 <_fwalk_sglue+0x10>

08003ebc <iprintf>:
 8003ebc:	b40f      	push	{r0, r1, r2, r3}
 8003ebe:	b507      	push	{r0, r1, r2, lr}
 8003ec0:	4906      	ldr	r1, [pc, #24]	@ (8003edc <iprintf+0x20>)
 8003ec2:	ab04      	add	r3, sp, #16
 8003ec4:	6808      	ldr	r0, [r1, #0]
 8003ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eca:	6881      	ldr	r1, [r0, #8]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	f000 fadb 	bl	8004488 <_vfiprintf_r>
 8003ed2:	b003      	add	sp, #12
 8003ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed8:	b004      	add	sp, #16
 8003eda:	4770      	bx	lr
 8003edc:	200002dc 	.word	0x200002dc

08003ee0 <_puts_r>:
 8003ee0:	6a03      	ldr	r3, [r0, #32]
 8003ee2:	b570      	push	{r4, r5, r6, lr}
 8003ee4:	6884      	ldr	r4, [r0, #8]
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	460e      	mov	r6, r1
 8003eea:	b90b      	cbnz	r3, 8003ef0 <_puts_r+0x10>
 8003eec:	f7ff ffb0 	bl	8003e50 <__sinit>
 8003ef0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ef2:	07db      	lsls	r3, r3, #31
 8003ef4:	d405      	bmi.n	8003f02 <_puts_r+0x22>
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	0598      	lsls	r0, r3, #22
 8003efa:	d402      	bmi.n	8003f02 <_puts_r+0x22>
 8003efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003efe:	f000 f99e 	bl	800423e <__retarget_lock_acquire_recursive>
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	0719      	lsls	r1, r3, #28
 8003f06:	d502      	bpl.n	8003f0e <_puts_r+0x2e>
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d135      	bne.n	8003f7a <_puts_r+0x9a>
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 f8c5 	bl	80040a0 <__swsetup_r>
 8003f16:	b380      	cbz	r0, 8003f7a <_puts_r+0x9a>
 8003f18:	f04f 35ff 	mov.w	r5, #4294967295
 8003f1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f1e:	07da      	lsls	r2, r3, #31
 8003f20:	d405      	bmi.n	8003f2e <_puts_r+0x4e>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d402      	bmi.n	8003f2e <_puts_r+0x4e>
 8003f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f2a:	f000 f989 	bl	8004240 <__retarget_lock_release_recursive>
 8003f2e:	4628      	mov	r0, r5
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da04      	bge.n	8003f40 <_puts_r+0x60>
 8003f36:	69a2      	ldr	r2, [r4, #24]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	dc17      	bgt.n	8003f6c <_puts_r+0x8c>
 8003f3c:	290a      	cmp	r1, #10
 8003f3e:	d015      	beq.n	8003f6c <_puts_r+0x8c>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	6022      	str	r2, [r4, #0]
 8003f46:	7019      	strb	r1, [r3, #0]
 8003f48:	68a3      	ldr	r3, [r4, #8]
 8003f4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	60a3      	str	r3, [r4, #8]
 8003f52:	2900      	cmp	r1, #0
 8003f54:	d1ed      	bne.n	8003f32 <_puts_r+0x52>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da11      	bge.n	8003f7e <_puts_r+0x9e>
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	210a      	movs	r1, #10
 8003f5e:	4628      	mov	r0, r5
 8003f60:	f000 f85f 	bl	8004022 <__swbuf_r>
 8003f64:	3001      	adds	r0, #1
 8003f66:	d0d7      	beq.n	8003f18 <_puts_r+0x38>
 8003f68:	250a      	movs	r5, #10
 8003f6a:	e7d7      	b.n	8003f1c <_puts_r+0x3c>
 8003f6c:	4622      	mov	r2, r4
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f000 f857 	bl	8004022 <__swbuf_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d1e7      	bne.n	8003f48 <_puts_r+0x68>
 8003f78:	e7ce      	b.n	8003f18 <_puts_r+0x38>
 8003f7a:	3e01      	subs	r6, #1
 8003f7c:	e7e4      	b.n	8003f48 <_puts_r+0x68>
 8003f7e:	6823      	ldr	r3, [r4, #0]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	6022      	str	r2, [r4, #0]
 8003f84:	220a      	movs	r2, #10
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e7ee      	b.n	8003f68 <_puts_r+0x88>
	...

08003f8c <puts>:
 8003f8c:	4b02      	ldr	r3, [pc, #8]	@ (8003f98 <puts+0xc>)
 8003f8e:	4601      	mov	r1, r0
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f7ff bfa5 	b.w	8003ee0 <_puts_r>
 8003f96:	bf00      	nop
 8003f98:	200002dc 	.word	0x200002dc

08003f9c <__sread>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa4:	f000 f8fc 	bl	80041a0 <_read_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	bfab      	itete	ge
 8003fac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003fae:	89a3      	ldrhlt	r3, [r4, #12]
 8003fb0:	181b      	addge	r3, r3, r0
 8003fb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003fb6:	bfac      	ite	ge
 8003fb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fba:	81a3      	strhlt	r3, [r4, #12]
 8003fbc:	bd10      	pop	{r4, pc}

08003fbe <__swrite>:
 8003fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	898b      	ldrh	r3, [r1, #12]
 8003fc6:	05db      	lsls	r3, r3, #23
 8003fc8:	4605      	mov	r5, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	4616      	mov	r6, r2
 8003fce:	d505      	bpl.n	8003fdc <__swrite+0x1e>
 8003fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f000 f8d0 	bl	800417c <_lseek_r>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	4632      	mov	r2, r6
 8003fea:	463b      	mov	r3, r7
 8003fec:	4628      	mov	r0, r5
 8003fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff2:	f000 b8e7 	b.w	80041c4 <_write_r>

08003ff6 <__sseek>:
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffe:	f000 f8bd 	bl	800417c <_lseek_r>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	bf15      	itete	ne
 8004008:	6560      	strne	r0, [r4, #84]	@ 0x54
 800400a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800400e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004012:	81a3      	strheq	r3, [r4, #12]
 8004014:	bf18      	it	ne
 8004016:	81a3      	strhne	r3, [r4, #12]
 8004018:	bd10      	pop	{r4, pc}

0800401a <__sclose>:
 800401a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401e:	f000 b89d 	b.w	800415c <_close_r>

08004022 <__swbuf_r>:
 8004022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004024:	460e      	mov	r6, r1
 8004026:	4614      	mov	r4, r2
 8004028:	4605      	mov	r5, r0
 800402a:	b118      	cbz	r0, 8004034 <__swbuf_r+0x12>
 800402c:	6a03      	ldr	r3, [r0, #32]
 800402e:	b90b      	cbnz	r3, 8004034 <__swbuf_r+0x12>
 8004030:	f7ff ff0e 	bl	8003e50 <__sinit>
 8004034:	69a3      	ldr	r3, [r4, #24]
 8004036:	60a3      	str	r3, [r4, #8]
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	071a      	lsls	r2, r3, #28
 800403c:	d501      	bpl.n	8004042 <__swbuf_r+0x20>
 800403e:	6923      	ldr	r3, [r4, #16]
 8004040:	b943      	cbnz	r3, 8004054 <__swbuf_r+0x32>
 8004042:	4621      	mov	r1, r4
 8004044:	4628      	mov	r0, r5
 8004046:	f000 f82b 	bl	80040a0 <__swsetup_r>
 800404a:	b118      	cbz	r0, 8004054 <__swbuf_r+0x32>
 800404c:	f04f 37ff 	mov.w	r7, #4294967295
 8004050:	4638      	mov	r0, r7
 8004052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	6922      	ldr	r2, [r4, #16]
 8004058:	1a98      	subs	r0, r3, r2
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	b2f6      	uxtb	r6, r6
 800405e:	4283      	cmp	r3, r0
 8004060:	4637      	mov	r7, r6
 8004062:	dc05      	bgt.n	8004070 <__swbuf_r+0x4e>
 8004064:	4621      	mov	r1, r4
 8004066:	4628      	mov	r0, r5
 8004068:	f000 fd36 	bl	8004ad8 <_fflush_r>
 800406c:	2800      	cmp	r0, #0
 800406e:	d1ed      	bne.n	800404c <__swbuf_r+0x2a>
 8004070:	68a3      	ldr	r3, [r4, #8]
 8004072:	3b01      	subs	r3, #1
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	6022      	str	r2, [r4, #0]
 800407c:	701e      	strb	r6, [r3, #0]
 800407e:	6962      	ldr	r2, [r4, #20]
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	429a      	cmp	r2, r3
 8004084:	d004      	beq.n	8004090 <__swbuf_r+0x6e>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	07db      	lsls	r3, r3, #31
 800408a:	d5e1      	bpl.n	8004050 <__swbuf_r+0x2e>
 800408c:	2e0a      	cmp	r6, #10
 800408e:	d1df      	bne.n	8004050 <__swbuf_r+0x2e>
 8004090:	4621      	mov	r1, r4
 8004092:	4628      	mov	r0, r5
 8004094:	f000 fd20 	bl	8004ad8 <_fflush_r>
 8004098:	2800      	cmp	r0, #0
 800409a:	d0d9      	beq.n	8004050 <__swbuf_r+0x2e>
 800409c:	e7d6      	b.n	800404c <__swbuf_r+0x2a>
	...

080040a0 <__swsetup_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4b29      	ldr	r3, [pc, #164]	@ (8004148 <__swsetup_r+0xa8>)
 80040a4:	4605      	mov	r5, r0
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	460c      	mov	r4, r1
 80040aa:	b118      	cbz	r0, 80040b4 <__swsetup_r+0x14>
 80040ac:	6a03      	ldr	r3, [r0, #32]
 80040ae:	b90b      	cbnz	r3, 80040b4 <__swsetup_r+0x14>
 80040b0:	f7ff fece 	bl	8003e50 <__sinit>
 80040b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b8:	0719      	lsls	r1, r3, #28
 80040ba:	d422      	bmi.n	8004102 <__swsetup_r+0x62>
 80040bc:	06da      	lsls	r2, r3, #27
 80040be:	d407      	bmi.n	80040d0 <__swsetup_r+0x30>
 80040c0:	2209      	movs	r2, #9
 80040c2:	602a      	str	r2, [r5, #0]
 80040c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	f04f 30ff 	mov.w	r0, #4294967295
 80040ce:	e033      	b.n	8004138 <__swsetup_r+0x98>
 80040d0:	0758      	lsls	r0, r3, #29
 80040d2:	d512      	bpl.n	80040fa <__swsetup_r+0x5a>
 80040d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040d6:	b141      	cbz	r1, 80040ea <__swsetup_r+0x4a>
 80040d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040dc:	4299      	cmp	r1, r3
 80040de:	d002      	beq.n	80040e6 <__swsetup_r+0x46>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f8af 	bl	8004244 <_free_r>
 80040e6:	2300      	movs	r3, #0
 80040e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	2300      	movs	r3, #0
 80040f4:	6063      	str	r3, [r4, #4]
 80040f6:	6923      	ldr	r3, [r4, #16]
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	f043 0308 	orr.w	r3, r3, #8
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	b94b      	cbnz	r3, 800411a <__swsetup_r+0x7a>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800410c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004110:	d003      	beq.n	800411a <__swsetup_r+0x7a>
 8004112:	4621      	mov	r1, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f000 fd2d 	bl	8004b74 <__smakebuf_r>
 800411a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411e:	f013 0201 	ands.w	r2, r3, #1
 8004122:	d00a      	beq.n	800413a <__swsetup_r+0x9a>
 8004124:	2200      	movs	r2, #0
 8004126:	60a2      	str	r2, [r4, #8]
 8004128:	6962      	ldr	r2, [r4, #20]
 800412a:	4252      	negs	r2, r2
 800412c:	61a2      	str	r2, [r4, #24]
 800412e:	6922      	ldr	r2, [r4, #16]
 8004130:	b942      	cbnz	r2, 8004144 <__swsetup_r+0xa4>
 8004132:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004136:	d1c5      	bne.n	80040c4 <__swsetup_r+0x24>
 8004138:	bd38      	pop	{r3, r4, r5, pc}
 800413a:	0799      	lsls	r1, r3, #30
 800413c:	bf58      	it	pl
 800413e:	6962      	ldrpl	r2, [r4, #20]
 8004140:	60a2      	str	r2, [r4, #8]
 8004142:	e7f4      	b.n	800412e <__swsetup_r+0x8e>
 8004144:	2000      	movs	r0, #0
 8004146:	e7f7      	b.n	8004138 <__swsetup_r+0x98>
 8004148:	200002dc 	.word	0x200002dc

0800414c <memset>:
 800414c:	4402      	add	r2, r0
 800414e:	4603      	mov	r3, r0
 8004150:	4293      	cmp	r3, r2
 8004152:	d100      	bne.n	8004156 <memset+0xa>
 8004154:	4770      	bx	lr
 8004156:	f803 1b01 	strb.w	r1, [r3], #1
 800415a:	e7f9      	b.n	8004150 <memset+0x4>

0800415c <_close_r>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4d06      	ldr	r5, [pc, #24]	@ (8004178 <_close_r+0x1c>)
 8004160:	2300      	movs	r3, #0
 8004162:	4604      	mov	r4, r0
 8004164:	4608      	mov	r0, r1
 8004166:	602b      	str	r3, [r5, #0]
 8004168:	f7fd ff61 	bl	800202e <_close>
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d102      	bne.n	8004176 <_close_r+0x1a>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	b103      	cbz	r3, 8004176 <_close_r+0x1a>
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	bd38      	pop	{r3, r4, r5, pc}
 8004178:	200008f4 	.word	0x200008f4

0800417c <_lseek_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d07      	ldr	r5, [pc, #28]	@ (800419c <_lseek_r+0x20>)
 8004180:	4604      	mov	r4, r0
 8004182:	4608      	mov	r0, r1
 8004184:	4611      	mov	r1, r2
 8004186:	2200      	movs	r2, #0
 8004188:	602a      	str	r2, [r5, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	f7fd ff76 	bl	800207c <_lseek>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_lseek_r+0x1e>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_lseek_r+0x1e>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	200008f4 	.word	0x200008f4

080041a0 <_read_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d07      	ldr	r5, [pc, #28]	@ (80041c0 <_read_r+0x20>)
 80041a4:	4604      	mov	r4, r0
 80041a6:	4608      	mov	r0, r1
 80041a8:	4611      	mov	r1, r2
 80041aa:	2200      	movs	r2, #0
 80041ac:	602a      	str	r2, [r5, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f7fd ff20 	bl	8001ff4 <_read>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d102      	bne.n	80041be <_read_r+0x1e>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	b103      	cbz	r3, 80041be <_read_r+0x1e>
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	200008f4 	.word	0x200008f4

080041c4 <_write_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d07      	ldr	r5, [pc, #28]	@ (80041e4 <_write_r+0x20>)
 80041c8:	4604      	mov	r4, r0
 80041ca:	4608      	mov	r0, r1
 80041cc:	4611      	mov	r1, r2
 80041ce:	2200      	movs	r2, #0
 80041d0:	602a      	str	r2, [r5, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7fd f962 	bl	800149c <_write>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_write_r+0x1e>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_write_r+0x1e>
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	200008f4 	.word	0x200008f4

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	@ (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	200002dc 	.word	0x200002dc

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	@ (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	@ (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	@ (8004238 <__libc_init_array+0x44>)
 8004208:	f000 fd22 	bl	8004c50 <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08004e1c 	.word	0x08004e1c
 8004230:	08004e1c 	.word	0x08004e1c
 8004234:	08004e1c 	.word	0x08004e1c
 8004238:	08004e20 	.word	0x08004e20

0800423c <__retarget_lock_init_recursive>:
 800423c:	4770      	bx	lr

0800423e <__retarget_lock_acquire_recursive>:
 800423e:	4770      	bx	lr

08004240 <__retarget_lock_release_recursive>:
 8004240:	4770      	bx	lr
	...

08004244 <_free_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4605      	mov	r5, r0
 8004248:	2900      	cmp	r1, #0
 800424a:	d041      	beq.n	80042d0 <_free_r+0x8c>
 800424c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004250:	1f0c      	subs	r4, r1, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	bfb8      	it	lt
 8004256:	18e4      	addlt	r4, r4, r3
 8004258:	f000 f8e0 	bl	800441c <__malloc_lock>
 800425c:	4a1d      	ldr	r2, [pc, #116]	@ (80042d4 <_free_r+0x90>)
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	b933      	cbnz	r3, 8004270 <_free_r+0x2c>
 8004262:	6063      	str	r3, [r4, #4]
 8004264:	6014      	str	r4, [r2, #0]
 8004266:	4628      	mov	r0, r5
 8004268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800426c:	f000 b8dc 	b.w	8004428 <__malloc_unlock>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d908      	bls.n	8004286 <_free_r+0x42>
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	1821      	adds	r1, r4, r0
 8004278:	428b      	cmp	r3, r1
 800427a:	bf01      	itttt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	1809      	addeq	r1, r1, r0
 8004282:	6021      	streq	r1, [r4, #0]
 8004284:	e7ed      	b.n	8004262 <_free_r+0x1e>
 8004286:	461a      	mov	r2, r3
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b10b      	cbz	r3, 8004290 <_free_r+0x4c>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d9fa      	bls.n	8004286 <_free_r+0x42>
 8004290:	6811      	ldr	r1, [r2, #0]
 8004292:	1850      	adds	r0, r2, r1
 8004294:	42a0      	cmp	r0, r4
 8004296:	d10b      	bne.n	80042b0 <_free_r+0x6c>
 8004298:	6820      	ldr	r0, [r4, #0]
 800429a:	4401      	add	r1, r0
 800429c:	1850      	adds	r0, r2, r1
 800429e:	4283      	cmp	r3, r0
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	d1e0      	bne.n	8004266 <_free_r+0x22>
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	6053      	str	r3, [r2, #4]
 80042aa:	4408      	add	r0, r1
 80042ac:	6010      	str	r0, [r2, #0]
 80042ae:	e7da      	b.n	8004266 <_free_r+0x22>
 80042b0:	d902      	bls.n	80042b8 <_free_r+0x74>
 80042b2:	230c      	movs	r3, #12
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	e7d6      	b.n	8004266 <_free_r+0x22>
 80042b8:	6820      	ldr	r0, [r4, #0]
 80042ba:	1821      	adds	r1, r4, r0
 80042bc:	428b      	cmp	r3, r1
 80042be:	bf04      	itt	eq
 80042c0:	6819      	ldreq	r1, [r3, #0]
 80042c2:	685b      	ldreq	r3, [r3, #4]
 80042c4:	6063      	str	r3, [r4, #4]
 80042c6:	bf04      	itt	eq
 80042c8:	1809      	addeq	r1, r1, r0
 80042ca:	6021      	streq	r1, [r4, #0]
 80042cc:	6054      	str	r4, [r2, #4]
 80042ce:	e7ca      	b.n	8004266 <_free_r+0x22>
 80042d0:	bd38      	pop	{r3, r4, r5, pc}
 80042d2:	bf00      	nop
 80042d4:	20000900 	.word	0x20000900

080042d8 <sbrk_aligned>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4e0f      	ldr	r6, [pc, #60]	@ (8004318 <sbrk_aligned+0x40>)
 80042dc:	460c      	mov	r4, r1
 80042de:	6831      	ldr	r1, [r6, #0]
 80042e0:	4605      	mov	r5, r0
 80042e2:	b911      	cbnz	r1, 80042ea <sbrk_aligned+0x12>
 80042e4:	f000 fca4 	bl	8004c30 <_sbrk_r>
 80042e8:	6030      	str	r0, [r6, #0]
 80042ea:	4621      	mov	r1, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 fc9f 	bl	8004c30 <_sbrk_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	d103      	bne.n	80042fe <sbrk_aligned+0x26>
 80042f6:	f04f 34ff 	mov.w	r4, #4294967295
 80042fa:	4620      	mov	r0, r4
 80042fc:	bd70      	pop	{r4, r5, r6, pc}
 80042fe:	1cc4      	adds	r4, r0, #3
 8004300:	f024 0403 	bic.w	r4, r4, #3
 8004304:	42a0      	cmp	r0, r4
 8004306:	d0f8      	beq.n	80042fa <sbrk_aligned+0x22>
 8004308:	1a21      	subs	r1, r4, r0
 800430a:	4628      	mov	r0, r5
 800430c:	f000 fc90 	bl	8004c30 <_sbrk_r>
 8004310:	3001      	adds	r0, #1
 8004312:	d1f2      	bne.n	80042fa <sbrk_aligned+0x22>
 8004314:	e7ef      	b.n	80042f6 <sbrk_aligned+0x1e>
 8004316:	bf00      	nop
 8004318:	200008fc 	.word	0x200008fc

0800431c <_malloc_r>:
 800431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004320:	1ccd      	adds	r5, r1, #3
 8004322:	f025 0503 	bic.w	r5, r5, #3
 8004326:	3508      	adds	r5, #8
 8004328:	2d0c      	cmp	r5, #12
 800432a:	bf38      	it	cc
 800432c:	250c      	movcc	r5, #12
 800432e:	2d00      	cmp	r5, #0
 8004330:	4606      	mov	r6, r0
 8004332:	db01      	blt.n	8004338 <_malloc_r+0x1c>
 8004334:	42a9      	cmp	r1, r5
 8004336:	d904      	bls.n	8004342 <_malloc_r+0x26>
 8004338:	230c      	movs	r3, #12
 800433a:	6033      	str	r3, [r6, #0]
 800433c:	2000      	movs	r0, #0
 800433e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004418 <_malloc_r+0xfc>
 8004346:	f000 f869 	bl	800441c <__malloc_lock>
 800434a:	f8d8 3000 	ldr.w	r3, [r8]
 800434e:	461c      	mov	r4, r3
 8004350:	bb44      	cbnz	r4, 80043a4 <_malloc_r+0x88>
 8004352:	4629      	mov	r1, r5
 8004354:	4630      	mov	r0, r6
 8004356:	f7ff ffbf 	bl	80042d8 <sbrk_aligned>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	4604      	mov	r4, r0
 800435e:	d158      	bne.n	8004412 <_malloc_r+0xf6>
 8004360:	f8d8 4000 	ldr.w	r4, [r8]
 8004364:	4627      	mov	r7, r4
 8004366:	2f00      	cmp	r7, #0
 8004368:	d143      	bne.n	80043f2 <_malloc_r+0xd6>
 800436a:	2c00      	cmp	r4, #0
 800436c:	d04b      	beq.n	8004406 <_malloc_r+0xea>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	4639      	mov	r1, r7
 8004372:	4630      	mov	r0, r6
 8004374:	eb04 0903 	add.w	r9, r4, r3
 8004378:	f000 fc5a 	bl	8004c30 <_sbrk_r>
 800437c:	4581      	cmp	r9, r0
 800437e:	d142      	bne.n	8004406 <_malloc_r+0xea>
 8004380:	6821      	ldr	r1, [r4, #0]
 8004382:	1a6d      	subs	r5, r5, r1
 8004384:	4629      	mov	r1, r5
 8004386:	4630      	mov	r0, r6
 8004388:	f7ff ffa6 	bl	80042d8 <sbrk_aligned>
 800438c:	3001      	adds	r0, #1
 800438e:	d03a      	beq.n	8004406 <_malloc_r+0xea>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	442b      	add	r3, r5
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	f8d8 3000 	ldr.w	r3, [r8]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	bb62      	cbnz	r2, 80043f8 <_malloc_r+0xdc>
 800439e:	f8c8 7000 	str.w	r7, [r8]
 80043a2:	e00f      	b.n	80043c4 <_malloc_r+0xa8>
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	1b52      	subs	r2, r2, r5
 80043a8:	d420      	bmi.n	80043ec <_malloc_r+0xd0>
 80043aa:	2a0b      	cmp	r2, #11
 80043ac:	d917      	bls.n	80043de <_malloc_r+0xc2>
 80043ae:	1961      	adds	r1, r4, r5
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	6025      	str	r5, [r4, #0]
 80043b4:	bf18      	it	ne
 80043b6:	6059      	strne	r1, [r3, #4]
 80043b8:	6863      	ldr	r3, [r4, #4]
 80043ba:	bf08      	it	eq
 80043bc:	f8c8 1000 	streq.w	r1, [r8]
 80043c0:	5162      	str	r2, [r4, r5]
 80043c2:	604b      	str	r3, [r1, #4]
 80043c4:	4630      	mov	r0, r6
 80043c6:	f000 f82f 	bl	8004428 <__malloc_unlock>
 80043ca:	f104 000b 	add.w	r0, r4, #11
 80043ce:	1d23      	adds	r3, r4, #4
 80043d0:	f020 0007 	bic.w	r0, r0, #7
 80043d4:	1ac2      	subs	r2, r0, r3
 80043d6:	bf1c      	itt	ne
 80043d8:	1a1b      	subne	r3, r3, r0
 80043da:	50a3      	strne	r3, [r4, r2]
 80043dc:	e7af      	b.n	800433e <_malloc_r+0x22>
 80043de:	6862      	ldr	r2, [r4, #4]
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	bf0c      	ite	eq
 80043e4:	f8c8 2000 	streq.w	r2, [r8]
 80043e8:	605a      	strne	r2, [r3, #4]
 80043ea:	e7eb      	b.n	80043c4 <_malloc_r+0xa8>
 80043ec:	4623      	mov	r3, r4
 80043ee:	6864      	ldr	r4, [r4, #4]
 80043f0:	e7ae      	b.n	8004350 <_malloc_r+0x34>
 80043f2:	463c      	mov	r4, r7
 80043f4:	687f      	ldr	r7, [r7, #4]
 80043f6:	e7b6      	b.n	8004366 <_malloc_r+0x4a>
 80043f8:	461a      	mov	r2, r3
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d1fb      	bne.n	80043f8 <_malloc_r+0xdc>
 8004400:	2300      	movs	r3, #0
 8004402:	6053      	str	r3, [r2, #4]
 8004404:	e7de      	b.n	80043c4 <_malloc_r+0xa8>
 8004406:	230c      	movs	r3, #12
 8004408:	6033      	str	r3, [r6, #0]
 800440a:	4630      	mov	r0, r6
 800440c:	f000 f80c 	bl	8004428 <__malloc_unlock>
 8004410:	e794      	b.n	800433c <_malloc_r+0x20>
 8004412:	6005      	str	r5, [r0, #0]
 8004414:	e7d6      	b.n	80043c4 <_malloc_r+0xa8>
 8004416:	bf00      	nop
 8004418:	20000900 	.word	0x20000900

0800441c <__malloc_lock>:
 800441c:	4801      	ldr	r0, [pc, #4]	@ (8004424 <__malloc_lock+0x8>)
 800441e:	f7ff bf0e 	b.w	800423e <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	200008f8 	.word	0x200008f8

08004428 <__malloc_unlock>:
 8004428:	4801      	ldr	r0, [pc, #4]	@ (8004430 <__malloc_unlock+0x8>)
 800442a:	f7ff bf09 	b.w	8004240 <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	200008f8 	.word	0x200008f8

08004434 <__sfputc_r>:
 8004434:	6893      	ldr	r3, [r2, #8]
 8004436:	3b01      	subs	r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	b410      	push	{r4}
 800443c:	6093      	str	r3, [r2, #8]
 800443e:	da08      	bge.n	8004452 <__sfputc_r+0x1e>
 8004440:	6994      	ldr	r4, [r2, #24]
 8004442:	42a3      	cmp	r3, r4
 8004444:	db01      	blt.n	800444a <__sfputc_r+0x16>
 8004446:	290a      	cmp	r1, #10
 8004448:	d103      	bne.n	8004452 <__sfputc_r+0x1e>
 800444a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800444e:	f7ff bde8 	b.w	8004022 <__swbuf_r>
 8004452:	6813      	ldr	r3, [r2, #0]
 8004454:	1c58      	adds	r0, r3, #1
 8004456:	6010      	str	r0, [r2, #0]
 8004458:	7019      	strb	r1, [r3, #0]
 800445a:	4608      	mov	r0, r1
 800445c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004460:	4770      	bx	lr

08004462 <__sfputs_r>:
 8004462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004464:	4606      	mov	r6, r0
 8004466:	460f      	mov	r7, r1
 8004468:	4614      	mov	r4, r2
 800446a:	18d5      	adds	r5, r2, r3
 800446c:	42ac      	cmp	r4, r5
 800446e:	d101      	bne.n	8004474 <__sfputs_r+0x12>
 8004470:	2000      	movs	r0, #0
 8004472:	e007      	b.n	8004484 <__sfputs_r+0x22>
 8004474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004478:	463a      	mov	r2, r7
 800447a:	4630      	mov	r0, r6
 800447c:	f7ff ffda 	bl	8004434 <__sfputc_r>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d1f3      	bne.n	800446c <__sfputs_r+0xa>
 8004484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004488 <_vfiprintf_r>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	460d      	mov	r5, r1
 800448e:	b09d      	sub	sp, #116	@ 0x74
 8004490:	4614      	mov	r4, r2
 8004492:	4698      	mov	r8, r3
 8004494:	4606      	mov	r6, r0
 8004496:	b118      	cbz	r0, 80044a0 <_vfiprintf_r+0x18>
 8004498:	6a03      	ldr	r3, [r0, #32]
 800449a:	b90b      	cbnz	r3, 80044a0 <_vfiprintf_r+0x18>
 800449c:	f7ff fcd8 	bl	8003e50 <__sinit>
 80044a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044a2:	07d9      	lsls	r1, r3, #31
 80044a4:	d405      	bmi.n	80044b2 <_vfiprintf_r+0x2a>
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	059a      	lsls	r2, r3, #22
 80044aa:	d402      	bmi.n	80044b2 <_vfiprintf_r+0x2a>
 80044ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044ae:	f7ff fec6 	bl	800423e <__retarget_lock_acquire_recursive>
 80044b2:	89ab      	ldrh	r3, [r5, #12]
 80044b4:	071b      	lsls	r3, r3, #28
 80044b6:	d501      	bpl.n	80044bc <_vfiprintf_r+0x34>
 80044b8:	692b      	ldr	r3, [r5, #16]
 80044ba:	b99b      	cbnz	r3, 80044e4 <_vfiprintf_r+0x5c>
 80044bc:	4629      	mov	r1, r5
 80044be:	4630      	mov	r0, r6
 80044c0:	f7ff fdee 	bl	80040a0 <__swsetup_r>
 80044c4:	b170      	cbz	r0, 80044e4 <_vfiprintf_r+0x5c>
 80044c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044c8:	07dc      	lsls	r4, r3, #31
 80044ca:	d504      	bpl.n	80044d6 <_vfiprintf_r+0x4e>
 80044cc:	f04f 30ff 	mov.w	r0, #4294967295
 80044d0:	b01d      	add	sp, #116	@ 0x74
 80044d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d6:	89ab      	ldrh	r3, [r5, #12]
 80044d8:	0598      	lsls	r0, r3, #22
 80044da:	d4f7      	bmi.n	80044cc <_vfiprintf_r+0x44>
 80044dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044de:	f7ff feaf 	bl	8004240 <__retarget_lock_release_recursive>
 80044e2:	e7f3      	b.n	80044cc <_vfiprintf_r+0x44>
 80044e4:	2300      	movs	r3, #0
 80044e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80044e8:	2320      	movs	r3, #32
 80044ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f2:	2330      	movs	r3, #48	@ 0x30
 80044f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046a4 <_vfiprintf_r+0x21c>
 80044f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044fc:	f04f 0901 	mov.w	r9, #1
 8004500:	4623      	mov	r3, r4
 8004502:	469a      	mov	sl, r3
 8004504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004508:	b10a      	cbz	r2, 800450e <_vfiprintf_r+0x86>
 800450a:	2a25      	cmp	r2, #37	@ 0x25
 800450c:	d1f9      	bne.n	8004502 <_vfiprintf_r+0x7a>
 800450e:	ebba 0b04 	subs.w	fp, sl, r4
 8004512:	d00b      	beq.n	800452c <_vfiprintf_r+0xa4>
 8004514:	465b      	mov	r3, fp
 8004516:	4622      	mov	r2, r4
 8004518:	4629      	mov	r1, r5
 800451a:	4630      	mov	r0, r6
 800451c:	f7ff ffa1 	bl	8004462 <__sfputs_r>
 8004520:	3001      	adds	r0, #1
 8004522:	f000 80a7 	beq.w	8004674 <_vfiprintf_r+0x1ec>
 8004526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004528:	445a      	add	r2, fp
 800452a:	9209      	str	r2, [sp, #36]	@ 0x24
 800452c:	f89a 3000 	ldrb.w	r3, [sl]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 809f 	beq.w	8004674 <_vfiprintf_r+0x1ec>
 8004536:	2300      	movs	r3, #0
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004540:	f10a 0a01 	add.w	sl, sl, #1
 8004544:	9304      	str	r3, [sp, #16]
 8004546:	9307      	str	r3, [sp, #28]
 8004548:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800454c:	931a      	str	r3, [sp, #104]	@ 0x68
 800454e:	4654      	mov	r4, sl
 8004550:	2205      	movs	r2, #5
 8004552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004556:	4853      	ldr	r0, [pc, #332]	@ (80046a4 <_vfiprintf_r+0x21c>)
 8004558:	f7fb fe5a 	bl	8000210 <memchr>
 800455c:	9a04      	ldr	r2, [sp, #16]
 800455e:	b9d8      	cbnz	r0, 8004598 <_vfiprintf_r+0x110>
 8004560:	06d1      	lsls	r1, r2, #27
 8004562:	bf44      	itt	mi
 8004564:	2320      	movmi	r3, #32
 8004566:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800456a:	0713      	lsls	r3, r2, #28
 800456c:	bf44      	itt	mi
 800456e:	232b      	movmi	r3, #43	@ 0x2b
 8004570:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004574:	f89a 3000 	ldrb.w	r3, [sl]
 8004578:	2b2a      	cmp	r3, #42	@ 0x2a
 800457a:	d015      	beq.n	80045a8 <_vfiprintf_r+0x120>
 800457c:	9a07      	ldr	r2, [sp, #28]
 800457e:	4654      	mov	r4, sl
 8004580:	2000      	movs	r0, #0
 8004582:	f04f 0c0a 	mov.w	ip, #10
 8004586:	4621      	mov	r1, r4
 8004588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800458c:	3b30      	subs	r3, #48	@ 0x30
 800458e:	2b09      	cmp	r3, #9
 8004590:	d94b      	bls.n	800462a <_vfiprintf_r+0x1a2>
 8004592:	b1b0      	cbz	r0, 80045c2 <_vfiprintf_r+0x13a>
 8004594:	9207      	str	r2, [sp, #28]
 8004596:	e014      	b.n	80045c2 <_vfiprintf_r+0x13a>
 8004598:	eba0 0308 	sub.w	r3, r0, r8
 800459c:	fa09 f303 	lsl.w	r3, r9, r3
 80045a0:	4313      	orrs	r3, r2
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	46a2      	mov	sl, r4
 80045a6:	e7d2      	b.n	800454e <_vfiprintf_r+0xc6>
 80045a8:	9b03      	ldr	r3, [sp, #12]
 80045aa:	1d19      	adds	r1, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	9103      	str	r1, [sp, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bfbb      	ittet	lt
 80045b4:	425b      	neglt	r3, r3
 80045b6:	f042 0202 	orrlt.w	r2, r2, #2
 80045ba:	9307      	strge	r3, [sp, #28]
 80045bc:	9307      	strlt	r3, [sp, #28]
 80045be:	bfb8      	it	lt
 80045c0:	9204      	strlt	r2, [sp, #16]
 80045c2:	7823      	ldrb	r3, [r4, #0]
 80045c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80045c6:	d10a      	bne.n	80045de <_vfiprintf_r+0x156>
 80045c8:	7863      	ldrb	r3, [r4, #1]
 80045ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80045cc:	d132      	bne.n	8004634 <_vfiprintf_r+0x1ac>
 80045ce:	9b03      	ldr	r3, [sp, #12]
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	9203      	str	r2, [sp, #12]
 80045d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045da:	3402      	adds	r4, #2
 80045dc:	9305      	str	r3, [sp, #20]
 80045de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046b4 <_vfiprintf_r+0x22c>
 80045e2:	7821      	ldrb	r1, [r4, #0]
 80045e4:	2203      	movs	r2, #3
 80045e6:	4650      	mov	r0, sl
 80045e8:	f7fb fe12 	bl	8000210 <memchr>
 80045ec:	b138      	cbz	r0, 80045fe <_vfiprintf_r+0x176>
 80045ee:	9b04      	ldr	r3, [sp, #16]
 80045f0:	eba0 000a 	sub.w	r0, r0, sl
 80045f4:	2240      	movs	r2, #64	@ 0x40
 80045f6:	4082      	lsls	r2, r0
 80045f8:	4313      	orrs	r3, r2
 80045fa:	3401      	adds	r4, #1
 80045fc:	9304      	str	r3, [sp, #16]
 80045fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004602:	4829      	ldr	r0, [pc, #164]	@ (80046a8 <_vfiprintf_r+0x220>)
 8004604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004608:	2206      	movs	r2, #6
 800460a:	f7fb fe01 	bl	8000210 <memchr>
 800460e:	2800      	cmp	r0, #0
 8004610:	d03f      	beq.n	8004692 <_vfiprintf_r+0x20a>
 8004612:	4b26      	ldr	r3, [pc, #152]	@ (80046ac <_vfiprintf_r+0x224>)
 8004614:	bb1b      	cbnz	r3, 800465e <_vfiprintf_r+0x1d6>
 8004616:	9b03      	ldr	r3, [sp, #12]
 8004618:	3307      	adds	r3, #7
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	3308      	adds	r3, #8
 8004620:	9303      	str	r3, [sp, #12]
 8004622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004624:	443b      	add	r3, r7
 8004626:	9309      	str	r3, [sp, #36]	@ 0x24
 8004628:	e76a      	b.n	8004500 <_vfiprintf_r+0x78>
 800462a:	fb0c 3202 	mla	r2, ip, r2, r3
 800462e:	460c      	mov	r4, r1
 8004630:	2001      	movs	r0, #1
 8004632:	e7a8      	b.n	8004586 <_vfiprintf_r+0xfe>
 8004634:	2300      	movs	r3, #0
 8004636:	3401      	adds	r4, #1
 8004638:	9305      	str	r3, [sp, #20]
 800463a:	4619      	mov	r1, r3
 800463c:	f04f 0c0a 	mov.w	ip, #10
 8004640:	4620      	mov	r0, r4
 8004642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004646:	3a30      	subs	r2, #48	@ 0x30
 8004648:	2a09      	cmp	r2, #9
 800464a:	d903      	bls.n	8004654 <_vfiprintf_r+0x1cc>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0c6      	beq.n	80045de <_vfiprintf_r+0x156>
 8004650:	9105      	str	r1, [sp, #20]
 8004652:	e7c4      	b.n	80045de <_vfiprintf_r+0x156>
 8004654:	fb0c 2101 	mla	r1, ip, r1, r2
 8004658:	4604      	mov	r4, r0
 800465a:	2301      	movs	r3, #1
 800465c:	e7f0      	b.n	8004640 <_vfiprintf_r+0x1b8>
 800465e:	ab03      	add	r3, sp, #12
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	462a      	mov	r2, r5
 8004664:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <_vfiprintf_r+0x228>)
 8004666:	a904      	add	r1, sp, #16
 8004668:	4630      	mov	r0, r6
 800466a:	f3af 8000 	nop.w
 800466e:	4607      	mov	r7, r0
 8004670:	1c78      	adds	r0, r7, #1
 8004672:	d1d6      	bne.n	8004622 <_vfiprintf_r+0x19a>
 8004674:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004676:	07d9      	lsls	r1, r3, #31
 8004678:	d405      	bmi.n	8004686 <_vfiprintf_r+0x1fe>
 800467a:	89ab      	ldrh	r3, [r5, #12]
 800467c:	059a      	lsls	r2, r3, #22
 800467e:	d402      	bmi.n	8004686 <_vfiprintf_r+0x1fe>
 8004680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004682:	f7ff fddd 	bl	8004240 <__retarget_lock_release_recursive>
 8004686:	89ab      	ldrh	r3, [r5, #12]
 8004688:	065b      	lsls	r3, r3, #25
 800468a:	f53f af1f 	bmi.w	80044cc <_vfiprintf_r+0x44>
 800468e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004690:	e71e      	b.n	80044d0 <_vfiprintf_r+0x48>
 8004692:	ab03      	add	r3, sp, #12
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	462a      	mov	r2, r5
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <_vfiprintf_r+0x228>)
 800469a:	a904      	add	r1, sp, #16
 800469c:	4630      	mov	r0, r6
 800469e:	f000 f879 	bl	8004794 <_printf_i>
 80046a2:	e7e4      	b.n	800466e <_vfiprintf_r+0x1e6>
 80046a4:	08004de0 	.word	0x08004de0
 80046a8:	08004dea 	.word	0x08004dea
 80046ac:	00000000 	.word	0x00000000
 80046b0:	08004463 	.word	0x08004463
 80046b4:	08004de6 	.word	0x08004de6

080046b8 <_printf_common>:
 80046b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046bc:	4616      	mov	r6, r2
 80046be:	4698      	mov	r8, r3
 80046c0:	688a      	ldr	r2, [r1, #8]
 80046c2:	690b      	ldr	r3, [r1, #16]
 80046c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bfb8      	it	lt
 80046cc:	4613      	movlt	r3, r2
 80046ce:	6033      	str	r3, [r6, #0]
 80046d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046d4:	4607      	mov	r7, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	b10a      	cbz	r2, 80046de <_printf_common+0x26>
 80046da:	3301      	adds	r3, #1
 80046dc:	6033      	str	r3, [r6, #0]
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	0699      	lsls	r1, r3, #26
 80046e2:	bf42      	ittt	mi
 80046e4:	6833      	ldrmi	r3, [r6, #0]
 80046e6:	3302      	addmi	r3, #2
 80046e8:	6033      	strmi	r3, [r6, #0]
 80046ea:	6825      	ldr	r5, [r4, #0]
 80046ec:	f015 0506 	ands.w	r5, r5, #6
 80046f0:	d106      	bne.n	8004700 <_printf_common+0x48>
 80046f2:	f104 0a19 	add.w	sl, r4, #25
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	6832      	ldr	r2, [r6, #0]
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	42ab      	cmp	r3, r5
 80046fe:	dc26      	bgt.n	800474e <_printf_common+0x96>
 8004700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	3b00      	subs	r3, #0
 8004708:	bf18      	it	ne
 800470a:	2301      	movne	r3, #1
 800470c:	0692      	lsls	r2, r2, #26
 800470e:	d42b      	bmi.n	8004768 <_printf_common+0xb0>
 8004710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004714:	4641      	mov	r1, r8
 8004716:	4638      	mov	r0, r7
 8004718:	47c8      	blx	r9
 800471a:	3001      	adds	r0, #1
 800471c:	d01e      	beq.n	800475c <_printf_common+0xa4>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	6922      	ldr	r2, [r4, #16]
 8004722:	f003 0306 	and.w	r3, r3, #6
 8004726:	2b04      	cmp	r3, #4
 8004728:	bf02      	ittt	eq
 800472a:	68e5      	ldreq	r5, [r4, #12]
 800472c:	6833      	ldreq	r3, [r6, #0]
 800472e:	1aed      	subeq	r5, r5, r3
 8004730:	68a3      	ldr	r3, [r4, #8]
 8004732:	bf0c      	ite	eq
 8004734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004738:	2500      	movne	r5, #0
 800473a:	4293      	cmp	r3, r2
 800473c:	bfc4      	itt	gt
 800473e:	1a9b      	subgt	r3, r3, r2
 8004740:	18ed      	addgt	r5, r5, r3
 8004742:	2600      	movs	r6, #0
 8004744:	341a      	adds	r4, #26
 8004746:	42b5      	cmp	r5, r6
 8004748:	d11a      	bne.n	8004780 <_printf_common+0xc8>
 800474a:	2000      	movs	r0, #0
 800474c:	e008      	b.n	8004760 <_printf_common+0xa8>
 800474e:	2301      	movs	r3, #1
 8004750:	4652      	mov	r2, sl
 8004752:	4641      	mov	r1, r8
 8004754:	4638      	mov	r0, r7
 8004756:	47c8      	blx	r9
 8004758:	3001      	adds	r0, #1
 800475a:	d103      	bne.n	8004764 <_printf_common+0xac>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004764:	3501      	adds	r5, #1
 8004766:	e7c6      	b.n	80046f6 <_printf_common+0x3e>
 8004768:	18e1      	adds	r1, r4, r3
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	2030      	movs	r0, #48	@ 0x30
 800476e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004772:	4422      	add	r2, r4
 8004774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800477c:	3302      	adds	r3, #2
 800477e:	e7c7      	b.n	8004710 <_printf_common+0x58>
 8004780:	2301      	movs	r3, #1
 8004782:	4622      	mov	r2, r4
 8004784:	4641      	mov	r1, r8
 8004786:	4638      	mov	r0, r7
 8004788:	47c8      	blx	r9
 800478a:	3001      	adds	r0, #1
 800478c:	d0e6      	beq.n	800475c <_printf_common+0xa4>
 800478e:	3601      	adds	r6, #1
 8004790:	e7d9      	b.n	8004746 <_printf_common+0x8e>
	...

08004794 <_printf_i>:
 8004794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	7e0f      	ldrb	r7, [r1, #24]
 800479a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800479c:	2f78      	cmp	r7, #120	@ 0x78
 800479e:	4691      	mov	r9, r2
 80047a0:	4680      	mov	r8, r0
 80047a2:	460c      	mov	r4, r1
 80047a4:	469a      	mov	sl, r3
 80047a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80047aa:	d807      	bhi.n	80047bc <_printf_i+0x28>
 80047ac:	2f62      	cmp	r7, #98	@ 0x62
 80047ae:	d80a      	bhi.n	80047c6 <_printf_i+0x32>
 80047b0:	2f00      	cmp	r7, #0
 80047b2:	f000 80d1 	beq.w	8004958 <_printf_i+0x1c4>
 80047b6:	2f58      	cmp	r7, #88	@ 0x58
 80047b8:	f000 80b8 	beq.w	800492c <_printf_i+0x198>
 80047bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047c4:	e03a      	b.n	800483c <_printf_i+0xa8>
 80047c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047ca:	2b15      	cmp	r3, #21
 80047cc:	d8f6      	bhi.n	80047bc <_printf_i+0x28>
 80047ce:	a101      	add	r1, pc, #4	@ (adr r1, 80047d4 <_printf_i+0x40>)
 80047d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047d4:	0800482d 	.word	0x0800482d
 80047d8:	08004841 	.word	0x08004841
 80047dc:	080047bd 	.word	0x080047bd
 80047e0:	080047bd 	.word	0x080047bd
 80047e4:	080047bd 	.word	0x080047bd
 80047e8:	080047bd 	.word	0x080047bd
 80047ec:	08004841 	.word	0x08004841
 80047f0:	080047bd 	.word	0x080047bd
 80047f4:	080047bd 	.word	0x080047bd
 80047f8:	080047bd 	.word	0x080047bd
 80047fc:	080047bd 	.word	0x080047bd
 8004800:	0800493f 	.word	0x0800493f
 8004804:	0800486b 	.word	0x0800486b
 8004808:	080048f9 	.word	0x080048f9
 800480c:	080047bd 	.word	0x080047bd
 8004810:	080047bd 	.word	0x080047bd
 8004814:	08004961 	.word	0x08004961
 8004818:	080047bd 	.word	0x080047bd
 800481c:	0800486b 	.word	0x0800486b
 8004820:	080047bd 	.word	0x080047bd
 8004824:	080047bd 	.word	0x080047bd
 8004828:	08004901 	.word	0x08004901
 800482c:	6833      	ldr	r3, [r6, #0]
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6032      	str	r2, [r6, #0]
 8004834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800483c:	2301      	movs	r3, #1
 800483e:	e09c      	b.n	800497a <_printf_i+0x1e6>
 8004840:	6833      	ldr	r3, [r6, #0]
 8004842:	6820      	ldr	r0, [r4, #0]
 8004844:	1d19      	adds	r1, r3, #4
 8004846:	6031      	str	r1, [r6, #0]
 8004848:	0606      	lsls	r6, r0, #24
 800484a:	d501      	bpl.n	8004850 <_printf_i+0xbc>
 800484c:	681d      	ldr	r5, [r3, #0]
 800484e:	e003      	b.n	8004858 <_printf_i+0xc4>
 8004850:	0645      	lsls	r5, r0, #25
 8004852:	d5fb      	bpl.n	800484c <_printf_i+0xb8>
 8004854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004858:	2d00      	cmp	r5, #0
 800485a:	da03      	bge.n	8004864 <_printf_i+0xd0>
 800485c:	232d      	movs	r3, #45	@ 0x2d
 800485e:	426d      	negs	r5, r5
 8004860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004864:	4858      	ldr	r0, [pc, #352]	@ (80049c8 <_printf_i+0x234>)
 8004866:	230a      	movs	r3, #10
 8004868:	e011      	b.n	800488e <_printf_i+0xfa>
 800486a:	6821      	ldr	r1, [r4, #0]
 800486c:	6833      	ldr	r3, [r6, #0]
 800486e:	0608      	lsls	r0, r1, #24
 8004870:	f853 5b04 	ldr.w	r5, [r3], #4
 8004874:	d402      	bmi.n	800487c <_printf_i+0xe8>
 8004876:	0649      	lsls	r1, r1, #25
 8004878:	bf48      	it	mi
 800487a:	b2ad      	uxthmi	r5, r5
 800487c:	2f6f      	cmp	r7, #111	@ 0x6f
 800487e:	4852      	ldr	r0, [pc, #328]	@ (80049c8 <_printf_i+0x234>)
 8004880:	6033      	str	r3, [r6, #0]
 8004882:	bf14      	ite	ne
 8004884:	230a      	movne	r3, #10
 8004886:	2308      	moveq	r3, #8
 8004888:	2100      	movs	r1, #0
 800488a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800488e:	6866      	ldr	r6, [r4, #4]
 8004890:	60a6      	str	r6, [r4, #8]
 8004892:	2e00      	cmp	r6, #0
 8004894:	db05      	blt.n	80048a2 <_printf_i+0x10e>
 8004896:	6821      	ldr	r1, [r4, #0]
 8004898:	432e      	orrs	r6, r5
 800489a:	f021 0104 	bic.w	r1, r1, #4
 800489e:	6021      	str	r1, [r4, #0]
 80048a0:	d04b      	beq.n	800493a <_printf_i+0x1a6>
 80048a2:	4616      	mov	r6, r2
 80048a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80048a8:	fb03 5711 	mls	r7, r3, r1, r5
 80048ac:	5dc7      	ldrb	r7, [r0, r7]
 80048ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048b2:	462f      	mov	r7, r5
 80048b4:	42bb      	cmp	r3, r7
 80048b6:	460d      	mov	r5, r1
 80048b8:	d9f4      	bls.n	80048a4 <_printf_i+0x110>
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d10b      	bne.n	80048d6 <_printf_i+0x142>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	07df      	lsls	r7, r3, #31
 80048c2:	d508      	bpl.n	80048d6 <_printf_i+0x142>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	6861      	ldr	r1, [r4, #4]
 80048c8:	4299      	cmp	r1, r3
 80048ca:	bfde      	ittt	le
 80048cc:	2330      	movle	r3, #48	@ 0x30
 80048ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048d6:	1b92      	subs	r2, r2, r6
 80048d8:	6122      	str	r2, [r4, #16]
 80048da:	f8cd a000 	str.w	sl, [sp]
 80048de:	464b      	mov	r3, r9
 80048e0:	aa03      	add	r2, sp, #12
 80048e2:	4621      	mov	r1, r4
 80048e4:	4640      	mov	r0, r8
 80048e6:	f7ff fee7 	bl	80046b8 <_printf_common>
 80048ea:	3001      	adds	r0, #1
 80048ec:	d14a      	bne.n	8004984 <_printf_i+0x1f0>
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295
 80048f2:	b004      	add	sp, #16
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	f043 0320 	orr.w	r3, r3, #32
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	4832      	ldr	r0, [pc, #200]	@ (80049cc <_printf_i+0x238>)
 8004902:	2778      	movs	r7, #120	@ 0x78
 8004904:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	6831      	ldr	r1, [r6, #0]
 800490c:	061f      	lsls	r7, r3, #24
 800490e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004912:	d402      	bmi.n	800491a <_printf_i+0x186>
 8004914:	065f      	lsls	r7, r3, #25
 8004916:	bf48      	it	mi
 8004918:	b2ad      	uxthmi	r5, r5
 800491a:	6031      	str	r1, [r6, #0]
 800491c:	07d9      	lsls	r1, r3, #31
 800491e:	bf44      	itt	mi
 8004920:	f043 0320 	orrmi.w	r3, r3, #32
 8004924:	6023      	strmi	r3, [r4, #0]
 8004926:	b11d      	cbz	r5, 8004930 <_printf_i+0x19c>
 8004928:	2310      	movs	r3, #16
 800492a:	e7ad      	b.n	8004888 <_printf_i+0xf4>
 800492c:	4826      	ldr	r0, [pc, #152]	@ (80049c8 <_printf_i+0x234>)
 800492e:	e7e9      	b.n	8004904 <_printf_i+0x170>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f023 0320 	bic.w	r3, r3, #32
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	e7f6      	b.n	8004928 <_printf_i+0x194>
 800493a:	4616      	mov	r6, r2
 800493c:	e7bd      	b.n	80048ba <_printf_i+0x126>
 800493e:	6833      	ldr	r3, [r6, #0]
 8004940:	6825      	ldr	r5, [r4, #0]
 8004942:	6961      	ldr	r1, [r4, #20]
 8004944:	1d18      	adds	r0, r3, #4
 8004946:	6030      	str	r0, [r6, #0]
 8004948:	062e      	lsls	r6, r5, #24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	d501      	bpl.n	8004952 <_printf_i+0x1be>
 800494e:	6019      	str	r1, [r3, #0]
 8004950:	e002      	b.n	8004958 <_printf_i+0x1c4>
 8004952:	0668      	lsls	r0, r5, #25
 8004954:	d5fb      	bpl.n	800494e <_printf_i+0x1ba>
 8004956:	8019      	strh	r1, [r3, #0]
 8004958:	2300      	movs	r3, #0
 800495a:	6123      	str	r3, [r4, #16]
 800495c:	4616      	mov	r6, r2
 800495e:	e7bc      	b.n	80048da <_printf_i+0x146>
 8004960:	6833      	ldr	r3, [r6, #0]
 8004962:	1d1a      	adds	r2, r3, #4
 8004964:	6032      	str	r2, [r6, #0]
 8004966:	681e      	ldr	r6, [r3, #0]
 8004968:	6862      	ldr	r2, [r4, #4]
 800496a:	2100      	movs	r1, #0
 800496c:	4630      	mov	r0, r6
 800496e:	f7fb fc4f 	bl	8000210 <memchr>
 8004972:	b108      	cbz	r0, 8004978 <_printf_i+0x1e4>
 8004974:	1b80      	subs	r0, r0, r6
 8004976:	6060      	str	r0, [r4, #4]
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	2300      	movs	r3, #0
 800497e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004982:	e7aa      	b.n	80048da <_printf_i+0x146>
 8004984:	6923      	ldr	r3, [r4, #16]
 8004986:	4632      	mov	r2, r6
 8004988:	4649      	mov	r1, r9
 800498a:	4640      	mov	r0, r8
 800498c:	47d0      	blx	sl
 800498e:	3001      	adds	r0, #1
 8004990:	d0ad      	beq.n	80048ee <_printf_i+0x15a>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	079b      	lsls	r3, r3, #30
 8004996:	d413      	bmi.n	80049c0 <_printf_i+0x22c>
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	4298      	cmp	r0, r3
 800499e:	bfb8      	it	lt
 80049a0:	4618      	movlt	r0, r3
 80049a2:	e7a6      	b.n	80048f2 <_printf_i+0x15e>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4632      	mov	r2, r6
 80049a8:	4649      	mov	r1, r9
 80049aa:	4640      	mov	r0, r8
 80049ac:	47d0      	blx	sl
 80049ae:	3001      	adds	r0, #1
 80049b0:	d09d      	beq.n	80048ee <_printf_i+0x15a>
 80049b2:	3501      	adds	r5, #1
 80049b4:	68e3      	ldr	r3, [r4, #12]
 80049b6:	9903      	ldr	r1, [sp, #12]
 80049b8:	1a5b      	subs	r3, r3, r1
 80049ba:	42ab      	cmp	r3, r5
 80049bc:	dcf2      	bgt.n	80049a4 <_printf_i+0x210>
 80049be:	e7eb      	b.n	8004998 <_printf_i+0x204>
 80049c0:	2500      	movs	r5, #0
 80049c2:	f104 0619 	add.w	r6, r4, #25
 80049c6:	e7f5      	b.n	80049b4 <_printf_i+0x220>
 80049c8:	08004df1 	.word	0x08004df1
 80049cc:	08004e02 	.word	0x08004e02

080049d0 <__sflush_r>:
 80049d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d8:	0716      	lsls	r6, r2, #28
 80049da:	4605      	mov	r5, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	d454      	bmi.n	8004a8a <__sflush_r+0xba>
 80049e0:	684b      	ldr	r3, [r1, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	dc02      	bgt.n	80049ec <__sflush_r+0x1c>
 80049e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dd48      	ble.n	8004a7e <__sflush_r+0xae>
 80049ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	d045      	beq.n	8004a7e <__sflush_r+0xae>
 80049f2:	2300      	movs	r3, #0
 80049f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049f8:	682f      	ldr	r7, [r5, #0]
 80049fa:	6a21      	ldr	r1, [r4, #32]
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	d030      	beq.n	8004a62 <__sflush_r+0x92>
 8004a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a02:	89a3      	ldrh	r3, [r4, #12]
 8004a04:	0759      	lsls	r1, r3, #29
 8004a06:	d505      	bpl.n	8004a14 <__sflush_r+0x44>
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a0e:	b10b      	cbz	r3, 8004a14 <__sflush_r+0x44>
 8004a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a12:	1ad2      	subs	r2, r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a18:	6a21      	ldr	r1, [r4, #32]
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	47b0      	blx	r6
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	d106      	bne.n	8004a32 <__sflush_r+0x62>
 8004a24:	6829      	ldr	r1, [r5, #0]
 8004a26:	291d      	cmp	r1, #29
 8004a28:	d82b      	bhi.n	8004a82 <__sflush_r+0xb2>
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad4 <__sflush_r+0x104>)
 8004a2c:	40ca      	lsrs	r2, r1
 8004a2e:	07d6      	lsls	r6, r2, #31
 8004a30:	d527      	bpl.n	8004a82 <__sflush_r+0xb2>
 8004a32:	2200      	movs	r2, #0
 8004a34:	6062      	str	r2, [r4, #4]
 8004a36:	04d9      	lsls	r1, r3, #19
 8004a38:	6922      	ldr	r2, [r4, #16]
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	d504      	bpl.n	8004a48 <__sflush_r+0x78>
 8004a3e:	1c42      	adds	r2, r0, #1
 8004a40:	d101      	bne.n	8004a46 <__sflush_r+0x76>
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	b903      	cbnz	r3, 8004a48 <__sflush_r+0x78>
 8004a46:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a4a:	602f      	str	r7, [r5, #0]
 8004a4c:	b1b9      	cbz	r1, 8004a7e <__sflush_r+0xae>
 8004a4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a52:	4299      	cmp	r1, r3
 8004a54:	d002      	beq.n	8004a5c <__sflush_r+0x8c>
 8004a56:	4628      	mov	r0, r5
 8004a58:	f7ff fbf4 	bl	8004244 <_free_r>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a60:	e00d      	b.n	8004a7e <__sflush_r+0xae>
 8004a62:	2301      	movs	r3, #1
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b0      	blx	r6
 8004a68:	4602      	mov	r2, r0
 8004a6a:	1c50      	adds	r0, r2, #1
 8004a6c:	d1c9      	bne.n	8004a02 <__sflush_r+0x32>
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0c6      	beq.n	8004a02 <__sflush_r+0x32>
 8004a74:	2b1d      	cmp	r3, #29
 8004a76:	d001      	beq.n	8004a7c <__sflush_r+0xac>
 8004a78:	2b16      	cmp	r3, #22
 8004a7a:	d11e      	bne.n	8004aba <__sflush_r+0xea>
 8004a7c:	602f      	str	r7, [r5, #0]
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e022      	b.n	8004ac8 <__sflush_r+0xf8>
 8004a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a86:	b21b      	sxth	r3, r3
 8004a88:	e01b      	b.n	8004ac2 <__sflush_r+0xf2>
 8004a8a:	690f      	ldr	r7, [r1, #16]
 8004a8c:	2f00      	cmp	r7, #0
 8004a8e:	d0f6      	beq.n	8004a7e <__sflush_r+0xae>
 8004a90:	0793      	lsls	r3, r2, #30
 8004a92:	680e      	ldr	r6, [r1, #0]
 8004a94:	bf08      	it	eq
 8004a96:	694b      	ldreq	r3, [r1, #20]
 8004a98:	600f      	str	r7, [r1, #0]
 8004a9a:	bf18      	it	ne
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	eba6 0807 	sub.w	r8, r6, r7
 8004aa2:	608b      	str	r3, [r1, #8]
 8004aa4:	f1b8 0f00 	cmp.w	r8, #0
 8004aa8:	dde9      	ble.n	8004a7e <__sflush_r+0xae>
 8004aaa:	6a21      	ldr	r1, [r4, #32]
 8004aac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004aae:	4643      	mov	r3, r8
 8004ab0:	463a      	mov	r2, r7
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	47b0      	blx	r6
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	dc08      	bgt.n	8004acc <__sflush_r+0xfc>
 8004aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004acc:	4407      	add	r7, r0
 8004ace:	eba8 0800 	sub.w	r8, r8, r0
 8004ad2:	e7e7      	b.n	8004aa4 <__sflush_r+0xd4>
 8004ad4:	20400001 	.word	0x20400001

08004ad8 <_fflush_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	690b      	ldr	r3, [r1, #16]
 8004adc:	4605      	mov	r5, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	b913      	cbnz	r3, 8004ae8 <_fflush_r+0x10>
 8004ae2:	2500      	movs	r5, #0
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	b118      	cbz	r0, 8004af2 <_fflush_r+0x1a>
 8004aea:	6a03      	ldr	r3, [r0, #32]
 8004aec:	b90b      	cbnz	r3, 8004af2 <_fflush_r+0x1a>
 8004aee:	f7ff f9af 	bl	8003e50 <__sinit>
 8004af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f3      	beq.n	8004ae2 <_fflush_r+0xa>
 8004afa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004afc:	07d0      	lsls	r0, r2, #31
 8004afe:	d404      	bmi.n	8004b0a <_fflush_r+0x32>
 8004b00:	0599      	lsls	r1, r3, #22
 8004b02:	d402      	bmi.n	8004b0a <_fflush_r+0x32>
 8004b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b06:	f7ff fb9a 	bl	800423e <__retarget_lock_acquire_recursive>
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	f7ff ff5f 	bl	80049d0 <__sflush_r>
 8004b12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b14:	07da      	lsls	r2, r3, #31
 8004b16:	4605      	mov	r5, r0
 8004b18:	d4e4      	bmi.n	8004ae4 <_fflush_r+0xc>
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	059b      	lsls	r3, r3, #22
 8004b1e:	d4e1      	bmi.n	8004ae4 <_fflush_r+0xc>
 8004b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b22:	f7ff fb8d 	bl	8004240 <__retarget_lock_release_recursive>
 8004b26:	e7dd      	b.n	8004ae4 <_fflush_r+0xc>

08004b28 <__swhatbuf_r>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b30:	2900      	cmp	r1, #0
 8004b32:	b096      	sub	sp, #88	@ 0x58
 8004b34:	4615      	mov	r5, r2
 8004b36:	461e      	mov	r6, r3
 8004b38:	da0d      	bge.n	8004b56 <__swhatbuf_r+0x2e>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b40:	f04f 0100 	mov.w	r1, #0
 8004b44:	bf14      	ite	ne
 8004b46:	2340      	movne	r3, #64	@ 0x40
 8004b48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	6031      	str	r1, [r6, #0]
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	b016      	add	sp, #88	@ 0x58
 8004b54:	bd70      	pop	{r4, r5, r6, pc}
 8004b56:	466a      	mov	r2, sp
 8004b58:	f000 f848 	bl	8004bec <_fstat_r>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	dbec      	blt.n	8004b3a <__swhatbuf_r+0x12>
 8004b60:	9901      	ldr	r1, [sp, #4]
 8004b62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b6a:	4259      	negs	r1, r3
 8004b6c:	4159      	adcs	r1, r3
 8004b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b72:	e7eb      	b.n	8004b4c <__swhatbuf_r+0x24>

08004b74 <__smakebuf_r>:
 8004b74:	898b      	ldrh	r3, [r1, #12]
 8004b76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b78:	079d      	lsls	r5, r3, #30
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	d507      	bpl.n	8004b90 <__smakebuf_r+0x1c>
 8004b80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	6123      	str	r3, [r4, #16]
 8004b88:	2301      	movs	r3, #1
 8004b8a:	6163      	str	r3, [r4, #20]
 8004b8c:	b003      	add	sp, #12
 8004b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b90:	ab01      	add	r3, sp, #4
 8004b92:	466a      	mov	r2, sp
 8004b94:	f7ff ffc8 	bl	8004b28 <__swhatbuf_r>
 8004b98:	9f00      	ldr	r7, [sp, #0]
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	4639      	mov	r1, r7
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f7ff fbbc 	bl	800431c <_malloc_r>
 8004ba4:	b948      	cbnz	r0, 8004bba <__smakebuf_r+0x46>
 8004ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004baa:	059a      	lsls	r2, r3, #22
 8004bac:	d4ee      	bmi.n	8004b8c <__smakebuf_r+0x18>
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	f043 0302 	orr.w	r3, r3, #2
 8004bb6:	81a3      	strh	r3, [r4, #12]
 8004bb8:	e7e2      	b.n	8004b80 <__smakebuf_r+0xc>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	6020      	str	r0, [r4, #0]
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	9b01      	ldr	r3, [sp, #4]
 8004bc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bca:	b15b      	cbz	r3, 8004be4 <__smakebuf_r+0x70>
 8004bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 f81d 	bl	8004c10 <_isatty_r>
 8004bd6:	b128      	cbz	r0, 8004be4 <__smakebuf_r+0x70>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	431d      	orrs	r5, r3
 8004be8:	81a5      	strh	r5, [r4, #12]
 8004bea:	e7cf      	b.n	8004b8c <__smakebuf_r+0x18>

08004bec <_fstat_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4d07      	ldr	r5, [pc, #28]	@ (8004c0c <_fstat_r+0x20>)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	602b      	str	r3, [r5, #0]
 8004bfa:	f7fd fa24 	bl	8002046 <_fstat>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	d102      	bne.n	8004c08 <_fstat_r+0x1c>
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	b103      	cbz	r3, 8004c08 <_fstat_r+0x1c>
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	bd38      	pop	{r3, r4, r5, pc}
 8004c0a:	bf00      	nop
 8004c0c:	200008f4 	.word	0x200008f4

08004c10 <_isatty_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d06      	ldr	r5, [pc, #24]	@ (8004c2c <_isatty_r+0x1c>)
 8004c14:	2300      	movs	r3, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	f7fd fa23 	bl	8002066 <_isatty>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_isatty_r+0x1a>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_isatty_r+0x1a>
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	200008f4 	.word	0x200008f4

08004c30 <_sbrk_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d06      	ldr	r5, [pc, #24]	@ (8004c4c <_sbrk_r+0x1c>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fd fa2c 	bl	8002098 <_sbrk>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_sbrk_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_sbrk_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	200008f4 	.word	0x200008f4

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
