
robot_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004ab8  08004ab8  00005ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c34  08004c34  00006338  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c34  08004c34  00005c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c3c  08004c3c  00006338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c3c  08004c3c  00005c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c40  08004c40  00005c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  08004c44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000338  08004f7c  00006338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08004f7c  00006518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a832  00000000  00000000  00006368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef2  00000000  00000000  00010b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00012a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ce  00000000  00000000  000137b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f64f  00000000  00000000  00014186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a812  00000000  00000000  000337d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a98c9  00000000  00000000  0003dfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e78b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  000e78f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000eb770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000338 	.word	0x20000338
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004aa0 	.word	0x08004aa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000033c 	.word	0x2000033c
 800020c:	08004aa0 	.word	0x08004aa0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80005e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <LL_DMA_EnableStream+0x3c>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4908      	ldr	r1, [pc, #32]	@ (8000618 <LL_DMA_EnableStream+0x3c>)
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	440a      	add	r2, r1
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	4611      	mov	r1, r2
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	440a      	add	r2, r1
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6013      	str	r3, [r2, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	08004bd0 	.word	0x08004bd0

0800061c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000626:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <LL_DMA_DisableStream+0x3c>)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4908      	ldr	r1, [pc, #32]	@ (8000658 <LL_DMA_DisableStream+0x3c>)
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	440a      	add	r2, r1
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	440a      	add	r2, r1
 8000644:	f023 0301 	bic.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	08004bd0 	.word	0x08004bd0

0800065c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LL_DMA_SetDataLength+0x44>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4413      	add	r3, r2
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	0c1b      	lsrs	r3, r3, #16
 800067a:	041b      	lsls	r3, r3, #16
 800067c:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <LL_DMA_SetDataLength+0x44>)
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	440a      	add	r2, r1
 8000682:	7812      	ldrb	r2, [r2, #0]
 8000684:	4611      	mov	r1, r2
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	440a      	add	r2, r1
 800068a:	4611      	mov	r1, r2
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	604b      	str	r3, [r1, #4]
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	08004bd0 	.word	0x08004bd0

080006a4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80006b0:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <LL_DMA_SetMemoryAddress+0x2c>)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	08004bd0 	.word	0x08004bd0

080006d4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80006e0:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <LL_DMA_SetPeriphAddress+0x2c>)
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4413      	add	r3, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6093      	str	r3, [r2, #8]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	08004bd0 	.word	0x08004bd0

08000704 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000712:	609a      	str	r2, [r3, #8]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800072e:	609a      	str	r2, [r3, #8]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2220      	movs	r2, #32
 8000748:	60da      	str	r2, [r3, #12]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000764:	60da      	str	r2, [r3, #12]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800077e:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <LL_DMA_EnableIT_TC+0x3c>)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4908      	ldr	r1, [pc, #32]	@ (80007b0 <LL_DMA_EnableIT_TC+0x3c>)
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	440a      	add	r2, r1
 8000794:	7812      	ldrb	r2, [r2, #0]
 8000796:	4611      	mov	r1, r2
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	440a      	add	r2, r1
 800079c:	f043 0310 	orr.w	r3, r3, #16
 80007a0:	6013      	str	r3, [r2, #0]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	08004bd0 	.word	0x08004bd0

080007b4 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80007c2:	601a      	str	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	@ 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	330c      	adds	r3, #12
 80007dc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	e853 3f00 	ldrex	r3, [r3]
 80007e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	330c      	adds	r3, #12
 80007f2:	69fa      	ldr	r2, [r7, #28]
 80007f4:	61ba      	str	r2, [r7, #24]
 80007f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007f8:	6979      	ldr	r1, [r7, #20]
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	e841 2300 	strex	r3, r2, [r1]
 8000800:	613b      	str	r3, [r7, #16]
   return(result);
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1e7      	bne.n	80007d8 <LL_USART_EnableIT_TC+0x8>
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3724      	adds	r7, #36	@ 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000816:	b480      	push	{r7}
 8000818:	b089      	sub	sp, #36	@ 0x24
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3314      	adds	r3, #20
 8000822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	e853 3f00 	ldrex	r3, [r3]
 800082a:	60bb      	str	r3, [r7, #8]
   return(result);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3314      	adds	r3, #20
 8000838:	69fa      	ldr	r2, [r7, #28]
 800083a:	61ba      	str	r2, [r7, #24]
 800083c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800083e:	6979      	ldr	r1, [r7, #20]
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	e841 2300 	strex	r3, r2, [r1]
 8000846:	613b      	str	r3, [r7, #16]
   return(result);
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1e7      	bne.n	800081e <LL_USART_EnableDMAReq_RX+0x8>
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3724      	adds	r7, #36	@ 0x24
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	@ 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3314      	adds	r3, #20
 8000868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	e853 3f00 	ldrex	r3, [r3]
 8000870:	60bb      	str	r3, [r7, #8]
   return(result);
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000878:	61fb      	str	r3, [r7, #28]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3314      	adds	r3, #20
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	61ba      	str	r2, [r7, #24]
 8000882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	e841 2300 	strex	r3, r2, [r1]
 800088c:	613b      	str	r3, [r7, #16]
   return(result);
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1e7      	bne.n	8000864 <LL_USART_EnableDMAReq_TX+0x8>
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3724      	adds	r7, #36	@ 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3304      	adds	r3, #4
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	619a      	str	r2, [r3, #24]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <UART4_DMA_Config>:
uint8_t debug_Instruction_Packet_Array[35] = { 0 };  // Array to debug instruction packet data
uint8_t debug_Status_Packet_Array[15] = { 0 };       // Array to debug status packet data

uint16_t crc = 0;

void UART4_DMA_Config() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_4, LL_USART_DMA_GetRegAddr(UART4));
 80008dc:	4824      	ldr	r0, [pc, #144]	@ (8000970 <UART4_DMA_Config+0x98>)
 80008de:	f7ff ffe0 	bl	80008a2 <LL_USART_DMA_GetRegAddr>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	2104      	movs	r1, #4
 80008e8:	4822      	ldr	r0, [pc, #136]	@ (8000974 <UART4_DMA_Config+0x9c>)
 80008ea:	f7ff fef3 	bl	80006d4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)Instruction_Packet_Array);
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <UART4_DMA_Config+0xa0>)
 80008f0:	461a      	mov	r2, r3
 80008f2:	2104      	movs	r1, #4
 80008f4:	481f      	ldr	r0, [pc, #124]	@ (8000974 <UART4_DMA_Config+0x9c>)
 80008f6:	f7ff fed5 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5] + 7);
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <UART4_DMA_Config+0xa0>)
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	3307      	adds	r3, #7
 8000900:	461a      	mov	r2, r3
 8000902:	2104      	movs	r1, #4
 8000904:	481b      	ldr	r0, [pc, #108]	@ (8000974 <UART4_DMA_Config+0x9c>)
 8000906:	f7ff fea9 	bl	800065c <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(UART4);
 800090a:	4819      	ldr	r0, [pc, #100]	@ (8000970 <UART4_DMA_Config+0x98>)
 800090c:	f7ff ffa6 	bl	800085c <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC4(DMA1);
 8000910:	4818      	ldr	r0, [pc, #96]	@ (8000974 <UART4_DMA_Config+0x9c>)
 8000912:	f7ff ff13 	bl	800073c <LL_DMA_ClearFlag_TC4>
	LL_USART_ClearFlag_TC(UART4);
 8000916:	4816      	ldr	r0, [pc, #88]	@ (8000970 <UART4_DMA_Config+0x98>)
 8000918:	f7ff ff4c 	bl	80007b4 <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
 800091c:	2104      	movs	r1, #4
 800091e:	4815      	ldr	r0, [pc, #84]	@ (8000974 <UART4_DMA_Config+0x9c>)
 8000920:	f7ff ff28 	bl	8000774 <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(UART4);
 8000924:	4812      	ldr	r0, [pc, #72]	@ (8000970 <UART4_DMA_Config+0x98>)
 8000926:	f7ff ff53 	bl	80007d0 <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 800092a:	4811      	ldr	r0, [pc, #68]	@ (8000970 <UART4_DMA_Config+0x98>)
 800092c:	f7ff ffb9 	bl	80008a2 <LL_USART_DMA_GetRegAddr>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	2102      	movs	r1, #2
 8000936:	480f      	ldr	r0, [pc, #60]	@ (8000974 <UART4_DMA_Config+0x9c>)
 8000938:	f7ff fecc 	bl	80006d4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <UART4_DMA_Config+0xa4>)
 800093e:	461a      	mov	r2, r3
 8000940:	2102      	movs	r1, #2
 8000942:	480c      	ldr	r0, [pc, #48]	@ (8000974 <UART4_DMA_Config+0x9c>)
 8000944:	f7ff feae 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8000948:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <UART4_DMA_Config+0xa8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3304      	adds	r3, #4
 800094e:	461a      	mov	r2, r3
 8000950:	2102      	movs	r1, #2
 8000952:	4808      	ldr	r0, [pc, #32]	@ (8000974 <UART4_DMA_Config+0x9c>)
 8000954:	f7ff fe82 	bl	800065c <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(UART4);
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <UART4_DMA_Config+0x98>)
 800095a:	f7ff ff5c 	bl	8000816 <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC2(DMA1);
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <UART4_DMA_Config+0x9c>)
 8000960:	f7ff fede 	bl	8000720 <LL_DMA_ClearFlag_TC2>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 8000964:	2102      	movs	r1, #2
 8000966:	4803      	ldr	r0, [pc, #12]	@ (8000974 <UART4_DMA_Config+0x9c>)
 8000968:	f7ff ff04 	bl	8000774 <LL_DMA_EnableIT_TC>

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40004c00 	.word	0x40004c00
 8000974:	40026000 	.word	0x40026000
 8000978:	20000004 	.word	0x20000004
 800097c:	200003a8 	.word	0x200003a8
 8000980:	200003a4 	.word	0x200003a4

08000984 <USART6_DMA_Config>:

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);  // 傳輸完成中斷
    NVIC_SetPriority(DMA1_Stream2_IRQn, 0);
    NVIC_EnableIRQ(DMA1_Stream2_IRQn);
}
void USART6_DMA_Config() {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_6, LL_USART_DMA_GetRegAddr(USART6));
 8000988:	4824      	ldr	r0, [pc, #144]	@ (8000a1c <USART6_DMA_Config+0x98>)
 800098a:	f7ff ff8a 	bl	80008a2 <LL_USART_DMA_GetRegAddr>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	2106      	movs	r1, #6
 8000994:	4822      	ldr	r0, [pc, #136]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 8000996:	f7ff fe9d 	bl	80006d4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)Instruction_Packet_Array);
 800099a:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <USART6_DMA_Config+0xa0>)
 800099c:	461a      	mov	r2, r3
 800099e:	2106      	movs	r1, #6
 80009a0:	481f      	ldr	r0, [pc, #124]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 80009a2:	f7ff fe7f 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5] + 7);
 80009a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <USART6_DMA_Config+0xa0>)
 80009a8:	795b      	ldrb	r3, [r3, #5]
 80009aa:	3307      	adds	r3, #7
 80009ac:	461a      	mov	r2, r3
 80009ae:	2106      	movs	r1, #6
 80009b0:	481b      	ldr	r0, [pc, #108]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 80009b2:	f7ff fe53 	bl	800065c <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(USART6);
 80009b6:	4819      	ldr	r0, [pc, #100]	@ (8000a1c <USART6_DMA_Config+0x98>)
 80009b8:	f7ff ff50 	bl	800085c <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC6(DMA2);
 80009bc:	4818      	ldr	r0, [pc, #96]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 80009be:	f7ff feca 	bl	8000756 <LL_DMA_ClearFlag_TC6>
	LL_USART_ClearFlag_TC(USART6);
 80009c2:	4816      	ldr	r0, [pc, #88]	@ (8000a1c <USART6_DMA_Config+0x98>)
 80009c4:	f7ff fef6 	bl	80007b4 <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
 80009c8:	2106      	movs	r1, #6
 80009ca:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 80009cc:	f7ff fed2 	bl	8000774 <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(USART6);
 80009d0:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <USART6_DMA_Config+0x98>)
 80009d2:	f7ff fefd 	bl	80007d0 <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 80009d6:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <USART6_DMA_Config+0x98>)
 80009d8:	f7ff ff63 	bl	80008a2 <LL_USART_DMA_GetRegAddr>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	2101      	movs	r1, #1
 80009e2:	480f      	ldr	r0, [pc, #60]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 80009e4:	f7ff fe76 	bl	80006d4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <USART6_DMA_Config+0xa4>)
 80009ea:	461a      	mov	r2, r3
 80009ec:	2101      	movs	r1, #1
 80009ee:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 80009f0:	f7ff fe58 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 80009f4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <USART6_DMA_Config+0xa8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3304      	adds	r3, #4
 80009fa:	461a      	mov	r2, r3
 80009fc:	2101      	movs	r1, #1
 80009fe:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 8000a00:	f7ff fe2c 	bl	800065c <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(USART6);
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <USART6_DMA_Config+0x98>)
 8000a06:	f7ff ff06 	bl	8000816 <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC1(DMA2);
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 8000a0c:	f7ff fe7a 	bl	8000704 <LL_DMA_ClearFlag_TC1>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 8000a10:	2101      	movs	r1, #1
 8000a12:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <USART6_DMA_Config+0x9c>)
 8000a14:	f7ff feae 	bl	8000774 <LL_DMA_EnableIT_TC>

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40011400 	.word	0x40011400
 8000a20:	40026400 	.word	0x40026400
 8000a24:	20000004 	.word	0x20000004
 8000a28:	200003a8 	.word	0x200003a8
 8000a2c:	200003a4 	.word	0x200003a4

08000a30 <transmitInstructionPacket6>:
		printf("3\r\n");
		LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
}

void transmitInstructionPacket6(void) {  // Transmit instruction packet to Dynamixel
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	dynamixel_Ready = 0;
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <transmitInstructionPacket6+0xa8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
	 LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8000a3c:	2106      	movs	r1, #6
 8000a3e:	4827      	ldr	r0, [pc, #156]	@ (8000adc <transmitInstructionPacket6+0xac>)
 8000a40:	f7ff fdec 	bl	800061c <LL_DMA_DisableStream>
	 LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)Instruction_Packet_Array);
 8000a44:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <transmitInstructionPacket6+0xb0>)
 8000a46:	461a      	mov	r2, r3
 8000a48:	2106      	movs	r1, #6
 8000a4a:	4824      	ldr	r0, [pc, #144]	@ (8000adc <transmitInstructionPacket6+0xac>)
 8000a4c:	f7ff fe2a 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	 LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5] + 7);
 8000a50:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <transmitInstructionPacket6+0xb0>)
 8000a52:	795b      	ldrb	r3, [r3, #5]
 8000a54:	3307      	adds	r3, #7
 8000a56:	461a      	mov	r2, r3
 8000a58:	2106      	movs	r1, #6
 8000a5a:	4820      	ldr	r0, [pc, #128]	@ (8000adc <transmitInstructionPacket6+0xac>)
 8000a5c:	f7ff fdfe 	bl	800065c <LL_DMA_SetDataLength>
	 LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 8000a60:	2106      	movs	r1, #6
 8000a62:	481e      	ldr	r0, [pc, #120]	@ (8000adc <transmitInstructionPacket6+0xac>)
 8000a64:	f7ff fdba 	bl	80005dc <LL_DMA_EnableStream>
	 LL_USART_EnableDMAReq_TX(USART6);
 8000a68:	481e      	ldr	r0, [pc, #120]	@ (8000ae4 <transmitInstructionPacket6+0xb4>)
 8000a6a:	f7ff fef7 	bl	800085c <LL_USART_EnableDMAReq_TX>
	#if USE_THREE_STATE_GATE == 1
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000a6e:	2101      	movs	r1, #1
 8000a70:	481d      	ldr	r0, [pc, #116]	@ (8000ae8 <transmitInstructionPacket6+0xb8>)
 8000a72:	f7ff ff22 	bl	80008ba <LL_GPIO_SetOutputPin>
		printf("1\r\n");
 8000a76:	481d      	ldr	r0, [pc, #116]	@ (8000aec <transmitInstructionPacket6+0xbc>)
 8000a78:	f003 f9b0 	bl	8003ddc <puts>
		printf("TX Packet: ");
 8000a7c:	481c      	ldr	r0, [pc, #112]	@ (8000af0 <transmitInstructionPacket6+0xc0>)
 8000a7e:	f003 f945 	bl	8003d0c <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	e00a      	b.n	8000a9e <transmitInstructionPacket6+0x6e>
			printf("%02X ", Instruction_Packet_Array[i]);
 8000a88:	4a15      	ldr	r2, [pc, #84]	@ (8000ae0 <transmitInstructionPacket6+0xb0>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	4818      	ldr	r0, [pc, #96]	@ (8000af4 <transmitInstructionPacket6+0xc4>)
 8000a94:	f003 f93a 	bl	8003d0c <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <transmitInstructionPacket6+0xb0>)
 8000aa0:	795b      	ldrb	r3, [r3, #5]
 8000aa2:	3306      	adds	r3, #6
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	ddee      	ble.n	8000a88 <transmitInstructionPacket6+0x58>
		}
		printf("\r\n");
 8000aaa:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <transmitInstructionPacket6+0xc8>)
 8000aac:	f003 f996 	bl	8003ddc <puts>
	#else
		LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_TX);
		printf("2\r\n");
	#endif
		printf("3\r\n");
 8000ab0:	4812      	ldr	r0, [pc, #72]	@ (8000afc <transmitInstructionPacket6+0xcc>)
 8000ab2:	f003 f993 	bl	8003ddc <puts>
		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <transmitInstructionPacket6+0xb0>)
 8000ab8:	795b      	ldrb	r3, [r3, #5]
 8000aba:	3307      	adds	r3, #7
 8000abc:	461a      	mov	r2, r3
 8000abe:	2106      	movs	r1, #6
 8000ac0:	4806      	ldr	r0, [pc, #24]	@ (8000adc <transmitInstructionPacket6+0xac>)
 8000ac2:	f7ff fdcb 	bl	800065c <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 8000ac6:	2106      	movs	r1, #6
 8000ac8:	4804      	ldr	r0, [pc, #16]	@ (8000adc <transmitInstructionPacket6+0xac>)
 8000aca:	f7ff fd87 	bl	80005dc <LL_DMA_EnableStream>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	40026400 	.word	0x40026400
 8000ae0:	20000004 	.word	0x20000004
 8000ae4:	40011400 	.word	0x40011400
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	08004ae8 	.word	0x08004ae8
 8000af0:	08004aec 	.word	0x08004aec
 8000af4:	08004af8 	.word	0x08004af8
 8000af8:	08004b00 	.word	0x08004b00
 8000afc:	08004b04 	.word	0x08004b04

08000b00 <readStatusPacket_pos_DMA>:
		Status_Packet_Array[i] = LL_USART_ReceiveData8(USART6);
	}
	dynamixel_Ready = 1;
}

void readStatusPacket_pos_DMA(int32_t* position) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	if(Status_Packet_Array[8] == 0) {   //確認錯誤碼
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <readStatusPacket_pos_DMA+0x48>)
 8000b0a:	7a1b      	ldrb	r3, [r3, #8]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d114      	bne.n	8000b3a <readStatusPacket_pos_DMA+0x3a>
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <readStatusPacket_pos_DMA+0x48>)
 8000b12:	7b1b      	ldrb	r3, [r3, #12]
 8000b14:	061a      	lsls	r2, r3, #24
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <readStatusPacket_pos_DMA+0x48>)
 8000b18:	7adb      	ldrb	r3, [r3, #11]
 8000b1a:	041b      	lsls	r3, r3, #16
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <readStatusPacket_pos_DMA+0x48>)
 8000b20:	7a9b      	ldrb	r3, [r3, #10]
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	431a      	orrs	r2, r3
			| Status_Packet_Array[9];
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <readStatusPacket_pos_DMA+0x48>)
 8000b28:	7a5b      	ldrb	r3, [r3, #9]
 8000b2a:	4618      	mov	r0, r3
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <readStatusPacket_pos_DMA+0x48>)
 8000b2e:	791b      	ldrb	r3, [r3, #4]
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	440b      	add	r3, r1
			| Status_Packet_Array[9];
 8000b36:	4302      	orrs	r2, r0
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000b38:	601a      	str	r2, [r3, #0]
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200003a8 	.word	0x200003a8

08000b4c <SyncLED_Disable>:

	Packet_Return = 0;
	transmitInstructionPacket6();
}

void SyncLED_Disable(uint8_t n, uint8_t *ID_list) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8000b58:	bf00      	nop
 8000b5a:	4b30      	ldr	r3, [pc, #192]	@ (8000c1c <SyncLED_Disable+0xd0>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d1fb      	bne.n	8000b5a <SyncLED_Disable+0xe>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8000b62:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000b64:	22fe      	movs	r2, #254	@ 0xfe
 8000b66:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	3307      	adds	r3, #7
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4b2b      	ldr	r3, [pc, #172]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000b74:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000b76:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8000b7c:	4b28      	ldr	r3, [pc, #160]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000b7e:	2283      	movs	r2, #131	@ 0x83
 8000b80:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_LED;
 8000b82:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000b84:	2241      	movs	r2, #65	@ 0x41
 8000b86:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000b88:	4b25      	ldr	r3, [pc, #148]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8000b8e:	4b24      	ldr	r3, [pc, #144]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e012      	b.n	8000bc6 <SyncLED_Disable+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	441a      	add	r2, r3
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3305      	adds	r3, #5
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	7811      	ldrb	r1, [r2, #0]
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000bb2:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x00;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	330b      	adds	r3, #11
 8000bba:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	7bfa      	ldrb	r2, [r7, #15]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d9e8      	bls.n	8000ba0 <SyncLED_Disable+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000bd0:	795b      	ldrb	r3, [r3, #5]
 8000bd2:	3305      	adds	r3, #5
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000bda:	f000 f897 	bl	8000d0c <update_crc>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <SyncLED_Disable+0xd8>)
 8000be4:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <SyncLED_Disable+0xd8>)
 8000be8:	881a      	ldrh	r2, [r3, #0]
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	3306      	adds	r3, #6
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	b2d1      	uxtb	r1, r2
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000bf4:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <SyncLED_Disable+0xd8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	330d      	adds	r3, #13
 8000c04:	b2d1      	uxtb	r1, r2
 8000c06:	4a06      	ldr	r2, [pc, #24]	@ (8000c20 <SyncLED_Disable+0xd4>)
 8000c08:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <SyncLED_Disable+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket6();
 8000c10:	f7ff ff0e 	bl	8000a30 <transmitInstructionPacket6>
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000004 	.word	0x20000004
 8000c24:	200003c2 	.word	0x200003c2
 8000c28:	20000001 	.word	0x20000001

08000c2c <SyncLED_Enable>:

void SyncLED_Enable(uint8_t n, uint8_t *ID_list) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8000c38:	bf00      	nop
 8000c3a:	4b30      	ldr	r3, [pc, #192]	@ (8000cfc <SyncLED_Enable+0xd0>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d1fb      	bne.n	8000c3a <SyncLED_Enable+0xe>
	}
	Instruction_Packet_Array[4] = 0xFE;
 8000c42:	4b2f      	ldr	r3, [pc, #188]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c44:	22fe      	movs	r2, #254	@ 0xfe
 8000c46:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	3307      	adds	r3, #7
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b2b      	ldr	r3, [pc, #172]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c54:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000c56:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8000c5c:	4b28      	ldr	r3, [pc, #160]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c5e:	2283      	movs	r2, #131	@ 0x83
 8000c60:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_LED;
 8000c62:	4b27      	ldr	r3, [pc, #156]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c64:	2241      	movs	r2, #65	@ 0x41
 8000c66:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000c68:	4b25      	ldr	r3, [pc, #148]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8000c6e:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e012      	b.n	8000ca6 <SyncLED_Enable+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	441a      	add	r2, r3
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	3305      	adds	r3, #5
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	7811      	ldrb	r1, [r2, #0]
 8000c90:	4a1b      	ldr	r2, [pc, #108]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c92:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x01;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	330b      	adds	r3, #11
 8000c9a:	4a19      	ldr	r2, [pc, #100]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d9e8      	bls.n	8000c80 <SyncLED_Enable+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000cb0:	795b      	ldrb	r3, [r3, #5]
 8000cb2:	3305      	adds	r3, #5
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000cba:	f000 f827 	bl	8000d0c <update_crc>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <SyncLED_Enable+0xd8>)
 8000cc4:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <SyncLED_Enable+0xd8>)
 8000cc8:	881a      	ldrh	r2, [r3, #0]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	3306      	adds	r3, #6
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	b2d1      	uxtb	r1, r2
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000cd4:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <SyncLED_Enable+0xd8>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	330d      	adds	r3, #13
 8000ce4:	b2d1      	uxtb	r1, r2
 8000ce6:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <SyncLED_Enable+0xd4>)
 8000ce8:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <SyncLED_Enable+0xdc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket6();
 8000cf0:	f7ff fe9e 	bl	8000a30 <transmitInstructionPacket6>
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004
 8000d04:	200003c2 	.word	0x200003c2
 8000d08:	20000001 	.word	0x20000001

08000d0c <update_crc>:
	0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
	0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
	0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
	0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

uint16_t update_crc(uint8_t* data_blk_ptr, uint16_t data_blk_size) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
	uint16_t crc_accum = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	81fb      	strh	r3, [r7, #14]
	uint16_t i, j;

	for(j = 0; j < data_blk_size; j++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	81bb      	strh	r3, [r7, #12]
 8000d20:	e019      	b.n	8000d56 <update_crc+0x4a>
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	89ba      	ldrh	r2, [r7, #12]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	440a      	add	r2, r1
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	4053      	eors	r3, r2
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d3c:	021b      	lsls	r3, r3, #8
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	897b      	ldrh	r3, [r7, #10]
 8000d42:	490a      	ldr	r1, [pc, #40]	@ (8000d6c <update_crc+0x60>)
 8000d44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4053      	eors	r3, r2
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	81fb      	strh	r3, [r7, #14]
	for(j = 0; j < data_blk_size; j++) {
 8000d50:	89bb      	ldrh	r3, [r7, #12]
 8000d52:	3301      	adds	r3, #1
 8000d54:	81bb      	strh	r3, [r7, #12]
 8000d56:	89ba      	ldrh	r2, [r7, #12]
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3e1      	bcc.n	8000d22 <update_crc+0x16>
	}

	return crc_accum;
 8000d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	200000cc 	.word	0x200000cc

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e90:	4907      	ldr	r1, [pc, #28]	@ (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000eb8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000ebc:	f7ff ffe2 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000ec0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000ec4:	f7ff ffde 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ec8:	f7ff ff52 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ffa2 	bl	8000e1c <NVIC_EncodePriority>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4619      	mov	r1, r3
 8000edc:	200d      	movs	r0, #13
 8000ede:	f7ff ff73 	bl	8000dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ee2:	200d      	movs	r0, #13
 8000ee4:	f7ff ff52 	bl	8000d8c <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ee8:	f7ff ff42 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff92 	bl	8000e1c <NVIC_EncodePriority>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4619      	mov	r1, r3
 8000efc:	200f      	movs	r0, #15
 8000efe:	f7ff ff63 	bl	8000dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f7ff ff42 	bl	8000d8c <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f08:	f7ff ff32 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff82 	bl	8000e1c <NVIC_EncodePriority>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	2010      	movs	r0, #16
 8000f1e:	f7ff ff53 	bl	8000dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f22:	2010      	movs	r0, #16
 8000f24:	f7ff ff32 	bl	8000d8c <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f28:	f7ff ff22 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff72 	bl	8000e1c <NVIC_EncodePriority>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2011      	movs	r0, #17
 8000f3e:	f7ff ff43 	bl	8000dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f42:	2011      	movs	r0, #17
 8000f44:	f7ff ff22 	bl	8000d8c <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f48:	f7ff ff12 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff62 	bl	8000e1c <NVIC_EncodePriority>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2039      	movs	r0, #57	@ 0x39
 8000f5e:	f7ff ff33 	bl	8000dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f62:	2039      	movs	r0, #57	@ 0x39
 8000f64:	f7ff ff12 	bl	8000d8c <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f68:	f7ff ff02 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff52 	bl	8000e1c <NVIC_EncodePriority>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2045      	movs	r0, #69	@ 0x45
 8000f7e:	f7ff ff23 	bl	8000dc8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f82:	2045      	movs	r0, #69	@ 0x45
 8000f84:	f7ff ff02 	bl	8000d8c <__NVIC_EnableIRQ>

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <LL_AHB1_GRP1_EnableClock>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f98:	4907      	ldr	r1, [pc, #28]	@ (8000fb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40023800 	.word	0x40023800

08000fbc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000ff2:	2080      	movs	r0, #128	@ 0x80
 8000ff4:	f7ff ffca 	bl	8000f8c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ffc7 	bl	8000f8c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff ffc4 	bl	8000f8c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001004:	2004      	movs	r0, #4
 8001006:	f7ff ffc1 	bl	8000f8c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel4_CS_GPIO_Port, Dynamixel4_CS_Pin);
 800100a:	2110      	movs	r1, #16
 800100c:	4814      	ldr	r0, [pc, #80]	@ (8001060 <MX_GPIO_Init+0x84>)
 800100e:	f7ff ffd5 	bl	8000fbc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel6_CS_GPIO_Port, Dynamixel6_CS_Pin);
 8001012:	2101      	movs	r1, #1
 8001014:	4813      	ldr	r0, [pc, #76]	@ (8001064 <MX_GPIO_Init+0x88>)
 8001016:	f7ff ffd1 	bl	8000fbc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Dynamixel4_CS_Pin;
 800101a:	2310      	movs	r3, #16
 800101c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800101e:	2301      	movs	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001022:	2302      	movs	r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800102a:	2302      	movs	r3, #2
 800102c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel4_CS_GPIO_Port, &GPIO_InitStruct);
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	480b      	ldr	r0, [pc, #44]	@ (8001060 <MX_GPIO_Init+0x84>)
 8001034:	f001 ff94 	bl	8002f60 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Dynamixel6_CS_Pin;
 8001038:	2301      	movs	r3, #1
 800103a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800103c:	2301      	movs	r3, #1
 800103e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001040:	2302      	movs	r3, #2
 8001042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel6_CS_GPIO_Port, &GPIO_InitStruct);
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <MX_GPIO_Init+0x88>)
 8001052:	f001 ff85 	bl	8002f60 <LL_GPIO_Init>

}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400

08001068 <__NVIC_SetPriorityGrouping>:
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <LL_RCC_HSE_EnableBypass+0x1c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <LL_RCC_HSE_EnableBypass+0x1c>)
 80010ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <LL_RCC_HSE_Enable+0x1c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <LL_RCC_HSE_Enable+0x1c>)
 80010da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <LL_RCC_HSE_IsReady+0x24>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001100:	bf0c      	ite	eq
 8001102:	2301      	moveq	r3, #1
 8001104:	2300      	movne	r3, #0
 8001106:	b2db      	uxtb	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <LL_RCC_SetSysClkSource+0x24>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f023 0203 	bic.w	r2, r3, #3
 8001128:	4904      	ldr	r1, [pc, #16]	@ (800113c <LL_RCC_SetSysClkSource+0x24>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	608b      	str	r3, [r1, #8]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800

08001140 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <LL_RCC_GetSysClkSource+0x18>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 030c 	and.w	r3, r3, #12
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <LL_RCC_SetAHBPrescaler+0x24>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800116c:	4904      	ldr	r1, [pc, #16]	@ (8001180 <LL_RCC_SetAHBPrescaler+0x24>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	608b      	str	r3, [r1, #8]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40023800 	.word	0x40023800

08001184 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001194:	4904      	ldr	r1, [pc, #16]	@ (80011a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40023800 	.word	0x40023800

080011ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011bc:	4904      	ldr	r1, [pc, #16]	@ (80011d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	608b      	str	r3, [r1, #8]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40023800 	.word	0x40023800

080011d4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <LL_RCC_SetTIMPrescaler+0x28>)
 80011de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80011e6:	4905      	ldr	r1, [pc, #20]	@ (80011fc <LL_RCC_SetTIMPrescaler+0x28>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40023800 	.word	0x40023800

08001200 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <LL_RCC_PLL_Enable+0x1c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <LL_RCC_PLL_Enable+0x1c>)
 800120a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <LL_RCC_PLL_IsReady+0x24>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 800125c:	4013      	ands	r3, r2
 800125e:	68f9      	ldr	r1, [r7, #12]
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	4311      	orrs	r1, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	0192      	lsls	r2, r2, #6
 8001268:	430a      	orrs	r2, r1
 800126a:	490c      	ldr	r1, [pc, #48]	@ (800129c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001278:	4908      	ldr	r1, [pc, #32]	@ (800129c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001288:	4904      	ldr	r1, [pc, #16]	@ (800129c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40023800 	.word	0x40023800
 80012a0:	ffbf8000 	.word	0xffbf8000

080012a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012b8:	4b05      	ldr	r3, [pc, #20]	@ (80012d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4013      	ands	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40023800 	.word	0x40023800

080012d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012e0:	4907      	ldr	r1, [pc, #28]	@ (8001300 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <LL_APB2_GRP1_EnableClock+0x2c>)
 80012ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4013      	ands	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40023800 	.word	0x40023800

08001304 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <LL_FLASH_SetLatency+0x24>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 020f 	bic.w	r2, r3, #15
 8001314:	4904      	ldr	r1, [pc, #16]	@ (8001328 <LL_FLASH_SetLatency+0x24>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40023c00 	.word	0x40023c00

0800132c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <LL_FLASH_GetLatency+0x18>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 030f 	and.w	r3, r3, #15
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b04      	cmp	r3, #4
 8001354:	d106      	bne.n	8001364 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <LL_SYSTICK_SetClkSource+0x34>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a08      	ldr	r2, [pc, #32]	@ (800137c <LL_SYSTICK_SetClkSource+0x34>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001362:	e005      	b.n	8001370 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <LL_SYSTICK_SetClkSource+0x34>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <LL_SYSTICK_SetClkSource+0x34>)
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e010 	.word	0xe000e010

08001380 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <LL_SYSTICK_EnableIT+0x1c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a04      	ldr	r2, [pc, #16]	@ (800139c <LL_SYSTICK_EnableIT+0x1c>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <LL_PWR_EnableOverDriveMode+0x1c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <LL_PWR_EnableOverDriveMode+0x1c>)
 80013aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40007000 	.word	0x40007000

080013c0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80013d0:	4904      	ldr	r1, [pc, #16]	@ (80013e4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40007000 	.word	0x40007000

080013e8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <LL_PWR_IsActiveFlag_VOS+0x24>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40007000 	.word	0x40007000

08001410 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f06f 0201 	mvn.w	r2, #1
 800143e:	611a      	str	r2, [r3, #16]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f043 0201 	orr.w	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60da      	str	r2, [r3, #12]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_USART_IsActiveFlag_TXE>:
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147c:	2b80      	cmp	r3, #128	@ 0x80
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800149e:	78fa      	ldrb	r2, [r7, #3]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	605a      	str	r2, [r3, #4]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80014b6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80014ba:	f7ff ff0b 	bl	80012d4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014be:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80014c2:	f7ff feef 	bl	80012a4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014c6:	2007      	movs	r0, #7
 80014c8:	f7ff fdce 	bl	8001068 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014cc:	f000 f844 	bl	8001558 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_Init1msTick(180000000);			//Add here to fix MX generated code
 80014d0:	481e      	ldr	r0, [pc, #120]	@ (800154c <main+0x9c>)
 80014d2:	f002 fb15 	bl	8003b00 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80014d6:	2004      	movs	r0, #4
 80014d8:	f7ff ff36 	bl	8001348 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 80014dc:	f7ff ff50 	bl	8001380 <LL_SYSTICK_EnableIT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e0:	f7ff fd7c 	bl	8000fdc <MX_GPIO_Init>
  MX_DMA_Init();
 80014e4:	f7ff fce6 	bl	8000eb4 <MX_DMA_Init>
  MX_UART4_Init();
 80014e8:	f001 f996 	bl	8002818 <MX_UART4_Init>
  MX_USART6_UART_Init();
 80014ec:	f001 fb02 	bl	8002af4 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80014f0:	f000 ff08 	bl	8002304 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80014f4:	f001 fa50 	bl	8002998 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 80014f8:	4815      	ldr	r0, [pc, #84]	@ (8001550 <main+0xa0>)
 80014fa:	f7ff ff99 	bl	8001430 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM1);
 80014fe:	4814      	ldr	r0, [pc, #80]	@ (8001550 <main+0xa0>)
 8001500:	f7ff ffa4 	bl	800144c <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <main+0xa0>)
 8001506:	f7ff ff83 	bl	8001410 <LL_TIM_EnableCounter>
//  uart4_dma_tx_start();
  usart6_dma_tx_start();
 800150a:	f000 fcf1 	bl	8001ef0 <usart6_dma_tx_start>
  printf("start\r\n");
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <main+0xa4>)
 8001510:	f002 fc64 	bl	8003ddc <puts>
  LL_mDelay(100);
 8001514:	2064      	movs	r0, #100	@ 0x64
 8001516:	f002 fb01 	bl	8003b1c <LL_mDelay>
  UART4_DMA_Config();
 800151a:	f7ff f9dd 	bl	80008d8 <UART4_DMA_Config>
  USART6_DMA_Config();
 800151e:	f7ff fa31 	bl	8000984 <USART6_DMA_Config>
  uint8_t ID_list[1] = { 1 };
 8001522:	2301      	movs	r3, #1
 8001524:	713b      	strb	r3, [r7, #4]
//  SyncWrite_EnableDynamixels(1, ID_list);
//  LL_mDelay(1);
//  PING(1);

	while(1){
		SyncLED_Enable(1, ID_list);
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	2001      	movs	r0, #1
 800152c:	f7ff fb7e 	bl	8000c2c <SyncLED_Enable>
		LL_mDelay(100);
 8001530:	2064      	movs	r0, #100	@ 0x64
 8001532:	f002 faf3 	bl	8003b1c <LL_mDelay>
		SyncLED_Disable(1, ID_list);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff fb06 	bl	8000b4c <SyncLED_Disable>
		LL_mDelay(100);
 8001540:	2064      	movs	r0, #100	@ 0x64
 8001542:	f002 faeb 	bl	8003b1c <LL_mDelay>
		SyncLED_Enable(1, ID_list);
 8001546:	bf00      	nop
 8001548:	e7ed      	b.n	8001526 <main+0x76>
 800154a:	bf00      	nop
 800154c:	0aba9500 	.word	0x0aba9500
 8001550:	40010000 	.word	0x40010000
 8001554:	08004b40 	.word	0x08004b40

08001558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800155c:	2005      	movs	r0, #5
 800155e:	f7ff fed1 	bl	8001304 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001562:	bf00      	nop
 8001564:	f7ff fee2 	bl	800132c <LL_FLASH_GetLatency>
 8001568:	4603      	mov	r3, r0
 800156a:	2b05      	cmp	r3, #5
 800156c:	d1fa      	bne.n	8001564 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800156e:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8001572:	f7ff ff25 	bl	80013c0 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8001576:	f7ff ff13 	bl	80013a0 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 800157a:	f7ff fd99 	bl	80010b0 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 800157e:	f7ff fda7 	bl	80010d0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001582:	bf00      	nop
 8001584:	f7ff fdb4 	bl	80010f0 <LL_RCC_HSE_IsReady>
 8001588:	4603      	mov	r3, r0
 800158a:	2b01      	cmp	r3, #1
 800158c:	d1fa      	bne.n	8001584 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800158e:	2300      	movs	r3, #0
 8001590:	22b4      	movs	r2, #180	@ 0xb4
 8001592:	2104      	movs	r1, #4
 8001594:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001598:	f7ff fe56 	bl	8001248 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800159c:	f7ff fe30 	bl	8001200 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80015a0:	bf00      	nop
 80015a2:	f7ff fe3d 	bl	8001220 <LL_RCC_PLL_IsReady>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d1fa      	bne.n	80015a2 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80015ac:	bf00      	nop
 80015ae:	f7ff ff1b 	bl	80013e8 <LL_PWR_IsActiveFlag_VOS>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0fa      	beq.n	80015ae <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fdcf 	bl	800115c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80015be:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80015c2:	f7ff fddf 	bl	8001184 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80015c6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80015ca:	f7ff fdef 	bl	80011ac <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff fda2 	bl	8001118 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80015d4:	bf00      	nop
 80015d6:	f7ff fdb3 	bl	8001140 <LL_RCC_GetSysClkSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d1fa      	bne.n	80015d6 <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 80015e0:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <SystemClock_Config+0xa0>)
 80015e2:	f002 fa8d 	bl	8003b00 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 80015e6:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <SystemClock_Config+0xa0>)
 80015e8:	f002 fabe 	bl	8003b68 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fdf1 	bl	80011d4 <LL_RCC_SetTIMPrescaler>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	0aba9500 	.word	0x0aba9500

080015fc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e011      	b.n	8001632 <_write+0x36>
		LL_USART_TransmitData8(USART2, (uint8_t)*ptr++);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	480a      	ldr	r0, [pc, #40]	@ (8001644 <_write+0x48>)
 800161a:	f7ff ff3a 	bl	8001492 <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2) == RESET)
 800161e:	bf00      	nop
 8001620:	4808      	ldr	r0, [pc, #32]	@ (8001644 <_write+0x48>)
 8001622:	f7ff ff23 	bl	800146c <LL_USART_IsActiveFlag_TXE>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f9      	beq.n	8001620 <_write+0x24>
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	dbe9      	blt.n	800160e <_write+0x12>
			;
	}
	return len;
 800163a:	687b      	ldr	r3, [r7, #4]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40004400 	.word	0x40004400

08001648 <LL_DMA_EnableStream>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001652:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <LL_DMA_EnableStream+0x3c>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4908      	ldr	r1, [pc, #32]	@ (8001684 <LL_DMA_EnableStream+0x3c>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	440a      	add	r2, r1
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	4611      	mov	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	440a      	add	r2, r1
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	08004bd8 	.word	0x08004bd8

08001688 <LL_DMA_DisableStream>:
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001692:	4a0c      	ldr	r2, [pc, #48]	@ (80016c4 <LL_DMA_DisableStream+0x3c>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4908      	ldr	r1, [pc, #32]	@ (80016c4 <LL_DMA_DisableStream+0x3c>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	440a      	add	r2, r1
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	4611      	mov	r1, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	440a      	add	r2, r1
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	08004bd8 	.word	0x08004bd8

080016c8 <LL_DMA_IsEnabledStream>:
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <LL_DMA_IsEnabledStream+0x34>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	bf0c      	ite	eq
 80016ea:	2301      	moveq	r3, #1
 80016ec:	2300      	movne	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	08004bd8 	.word	0x08004bd8

08001700 <LL_DMA_SetDataLength>:
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <LL_DMA_SetDataLength+0x44>)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4413      	add	r3, r2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	0c1b      	lsrs	r3, r3, #16
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	4908      	ldr	r1, [pc, #32]	@ (8001744 <LL_DMA_SetDataLength+0x44>)
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	440a      	add	r2, r1
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	4611      	mov	r1, r2
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	440a      	add	r2, r1
 800172e:	4611      	mov	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	08004bd8 	.word	0x08004bd8

08001748 <LL_DMA_SetMemoryAddress>:
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <LL_DMA_SetMemoryAddress+0x2c>)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	4413      	add	r3, r2
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	08004bd8 	.word	0x08004bd8

08001778 <LL_DMA_SetPeriphAddress>:
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8001784:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <LL_DMA_SetPeriphAddress+0x2c>)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6093      	str	r3, [r2, #8]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	08004bd8 	.word	0x08004bd8

080017a8 <LL_DMA_IsActiveFlag_TC1>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017bc:	bf0c      	ite	eq
 80017be:	2301      	moveq	r3, #1
 80017c0:	2300      	movne	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_DMA_IsActiveFlag_TC2>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_DMA_IsActiveFlag_TC4>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b20      	cmp	r3, #32
 800180a:	bf0c      	ite	eq
 800180c:	2301      	moveq	r3, #1
 800180e:	2300      	movne	r3, #0
 8001810:	b2db      	uxtb	r3, r3
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_DMA_IsActiveFlag_TC5>:
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800182e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_DMA_IsActiveFlag_TC6>:
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_DMA_ClearFlag_HT1>:
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800187c:	609a      	str	r2, [r3, #8]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_DMA_ClearFlag_HT2>:
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001898:	609a      	str	r2, [r3, #8]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_DMA_ClearFlag_HT6>:
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80018b4:	60da      	str	r2, [r3, #12]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_DMA_ClearFlag_TC1>:
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018d0:	609a      	str	r2, [r3, #8]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <LL_DMA_ClearFlag_TC2>:
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80018ec:	609a      	str	r2, [r3, #8]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_DMA_ClearFlag_TC4>:
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2220      	movs	r2, #32
 8001906:	60da      	str	r2, [r3, #12]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_DMA_ClearFlag_TC5>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001922:	60da      	str	r2, [r3, #12]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_DMA_ClearFlag_TC6>:
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_DMA_ClearFlag_TE1>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800195a:	609a      	str	r2, [r3, #8]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_DMA_ClearFlag_TE2>:
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001976:	609a      	str	r2, [r3, #8]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_DMA_ClearFlag_TE6>:
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001992:	60da      	str	r2, [r3, #12]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_DMA_EnableIT_TC>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80019aa:	4a0c      	ldr	r2, [pc, #48]	@ (80019dc <LL_DMA_EnableIT_TC+0x3c>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4908      	ldr	r1, [pc, #32]	@ (80019dc <LL_DMA_EnableIT_TC+0x3c>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	440a      	add	r2, r1
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	4611      	mov	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	440a      	add	r2, r1
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	6013      	str	r3, [r2, #0]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	08004bd8 	.word	0x08004bd8

080019e0 <LL_TIM_ClearFlag_UPDATE>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f06f 0201 	mvn.w	r2, #1
 80019ee:	611a      	str	r2, [r3, #16]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_TIM_IsActiveFlag_UPDATE>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_USART_IsActiveFlag_TC>:
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a32:	2b40      	cmp	r3, #64	@ 0x40
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_USART_ClearFlag_TC>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001a56:	601a      	str	r2, [r3, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_USART_EnableDMAReq_RX>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	@ 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3314      	adds	r3, #20
 8001a70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	e853 3f00 	ldrex	r3, [r3]
 8001a78:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3314      	adds	r3, #20
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	61ba      	str	r2, [r7, #24]
 8001a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a8c:	6979      	ldr	r1, [r7, #20]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	e841 2300 	strex	r3, r2, [r1]
 8001a94:	613b      	str	r3, [r7, #16]
   return(result);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1e7      	bne.n	8001a6c <LL_USART_EnableDMAReq_RX+0x8>
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3724      	adds	r7, #36	@ 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_USART_EnableDMAReq_TX>:
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b089      	sub	sp, #36	@ 0x24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3314      	adds	r3, #20
 8001ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	e853 3f00 	ldrex	r3, [r3]
 8001abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3314      	adds	r3, #20
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	61ba      	str	r2, [r7, #24]
 8001ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ad2:	6979      	ldr	r1, [r7, #20]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	e841 2300 	strex	r3, r2, [r1]
 8001ada:	613b      	str	r3, [r7, #16]
   return(result);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1e7      	bne.n	8001ab2 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3724      	adds	r7, #36	@ 0x24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_USART_DisableDMAReq_TX>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	@ 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3314      	adds	r3, #20
 8001afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	e853 3f00 	ldrex	r3, [r3]
 8001b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3314      	adds	r3, #20
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	61ba      	str	r2, [r7, #24]
 8001b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b18:	6979      	ldr	r1, [r7, #20]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	e841 2300 	strex	r3, r2, [r1]
 8001b20:	613b      	str	r3, [r7, #16]
   return(result);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e7      	bne.n	8001af8 <LL_USART_DisableDMAReq_TX+0x8>
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3724      	adds	r7, #36	@ 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_USART_DMA_GetRegAddr>:
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_GPIO_ResetOutputPin>:
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	041a      	lsls	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	619a      	str	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <NMI_Handler+0x4>

08001b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <MemManage_Handler+0x4>

08001b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1)) {
 8001bd0:	4814      	ldr	r0, [pc, #80]	@ (8001c24 <DMA1_Stream2_IRQHandler+0x58>)
 8001bd2:	f7ff fdfd 	bl	80017d0 <LL_DMA_IsActiveFlag_TC2>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d021      	beq.n	8001c20 <DMA1_Stream2_IRQHandler+0x54>
			LL_DMA_ClearFlag_TC2(DMA1);
 8001bdc:	4811      	ldr	r0, [pc, #68]	@ (8001c24 <DMA1_Stream2_IRQHandler+0x58>)
 8001bde:	f7ff fe7e 	bl	80018de <LL_DMA_ClearFlag_TC2>
			printf("stream2 it\r\n");
 8001be2:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <DMA1_Stream2_IRQHandler+0x5c>)
 8001be4:	f002 f8fa 	bl	8003ddc <puts>
			readStatusPacket_pos_DMA(dynamixel_position);
 8001be8:	4810      	ldr	r0, [pc, #64]	@ (8001c2c <DMA1_Stream2_IRQHandler+0x60>)
 8001bea:	f7fe ff89 	bl	8000b00 <readStatusPacket_pos_DMA>
//			readStatusPacket_PING(dynamixel_position);
//	        readStatusPacket_pos_vel_DMA(dynamixel_position, dynamixel_velocity);
//	        readStatusPacket_pos_vel_cur_DMA(dynamixel_position, dynamixel_velocity, dynamixel_current);
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8001bee:	2102      	movs	r1, #2
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <DMA1_Stream2_IRQHandler+0x58>)
 8001bf2:	f7ff fd49 	bl	8001688 <LL_DMA_DisableStream>
			Packet_Return -= 1;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <DMA1_Stream2_IRQHandler+0x64>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <DMA1_Stream2_IRQHandler+0x64>)
 8001c00:	701a      	strb	r2, [r3, #0]
			if(Packet_Return == 0) {
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <DMA1_Stream2_IRQHandler+0x64>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <DMA1_Stream2_IRQHandler+0x4c>
				Is_dynamixel_GetData = 1;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <DMA1_Stream2_IRQHandler+0x68>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
				dynamixel_Ready = 1;
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <DMA1_Stream2_IRQHandler+0x6c>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c16:	e003      	b.n	8001c20 <DMA1_Stream2_IRQHandler+0x54>
			    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8001c18:	2102      	movs	r1, #2
 8001c1a:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <DMA1_Stream2_IRQHandler+0x58>)
 8001c1c:	f7ff fd14 	bl	8001648 <LL_DMA_EnableStream>
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40026000 	.word	0x40026000
 8001c28:	08004b48 	.word	0x08004b48
 8001c2c:	20000354 	.word	0x20000354
 8001c30:	20000001 	.word	0x20000001
 8001c34:	200003a0 	.word	0x200003a0
 8001c38:	20000000 	.word	0x20000000

08001c3c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1) {
 8001c40:	480c      	ldr	r0, [pc, #48]	@ (8001c74 <DMA1_Stream4_IRQHandler+0x38>)
 8001c42:	f7ff fdd9 	bl	80017f8 <LL_DMA_IsActiveFlag_TC4>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d111      	bne.n	8001c70 <DMA1_Stream4_IRQHandler+0x34>
		    printf("DMA TX Complete\r\n");
 8001c4c:	480a      	ldr	r0, [pc, #40]	@ (8001c78 <DMA1_Stream4_IRQHandler+0x3c>)
 8001c4e:	f002 f8c5 	bl	8003ddc <puts>
			LL_DMA_ClearFlag_TC4(DMA1);
 8001c52:	4808      	ldr	r0, [pc, #32]	@ (8001c74 <DMA1_Stream4_IRQHandler+0x38>)
 8001c54:	f7ff fe51 	bl	80018fa <LL_DMA_ClearFlag_TC4>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8001c58:	2104      	movs	r1, #4
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <DMA1_Stream4_IRQHandler+0x38>)
 8001c5c:	f7ff fd14 	bl	8001688 <LL_DMA_DisableStream>
			LL_USART_DisableDMAReq_TX(UART4);
 8001c60:	4806      	ldr	r0, [pc, #24]	@ (8001c7c <DMA1_Stream4_IRQHandler+0x40>)
 8001c62:	f7ff ff45 	bl	8001af0 <LL_USART_DisableDMAReq_TX>
			uart4_dma_rx_start();
 8001c66:	f000 f8fd 	bl	8001e64 <uart4_dma_rx_start>
			dynamixel_Ready = 1;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <DMA1_Stream4_IRQHandler+0x44>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40026000 	.word	0x40026000
 8001c78:	08004b54 	.word	0x08004b54
 8001c7c:	40004c00 	.word	0x40004c00
 8001c80:	20000000 	.word	0x20000000

08001c84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 8001c88:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <DMA1_Stream5_IRQHandler+0x24>)
 8001c8a:	f7ff fdc8 	bl	800181e <LL_DMA_IsActiveFlag_TC5>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d106      	bne.n	8001ca2 <DMA1_Stream5_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC5(DMA1);
 8001c94:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <DMA1_Stream5_IRQHandler+0x24>)
 8001c96:	f7ff fe3d 	bl	8001914 <LL_DMA_ClearFlag_TC5>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8001c9a:	2105      	movs	r1, #5
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <DMA1_Stream5_IRQHandler+0x24>)
 8001c9e:	f7ff fcf3 	bl	8001688 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40026000 	.word	0x40026000

08001cac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1) {
 8001cb0:	4807      	ldr	r0, [pc, #28]	@ (8001cd0 <DMA1_Stream6_IRQHandler+0x24>)
 8001cb2:	f7ff fdc8 	bl	8001846 <LL_DMA_IsActiveFlag_TC6>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d106      	bne.n	8001cca <DMA1_Stream6_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC6(DMA1);
 8001cbc:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <DMA1_Stream6_IRQHandler+0x24>)
 8001cbe:	f7ff fe37 	bl	8001930 <LL_DMA_ClearFlag_TC6>

			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8001cc2:	2106      	movs	r1, #6
 8001cc4:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <DMA1_Stream6_IRQHandler+0x24>)
 8001cc6:	f7ff fcdf 	bl	8001688 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40026000 	.word	0x40026000

08001cd4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 8001cd8:	4806      	ldr	r0, [pc, #24]	@ (8001cf4 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001cda:	f7ff fe8f 	bl	80019fc <LL_TIM_IsActiveFlag_UPDATE>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <TIM1_UP_TIM10_IRQHandler+0x1c>
			LL_TIM_ClearFlag_UPDATE(TIM1);
 8001ce4:	4803      	ldr	r0, [pc, #12]	@ (8001cf4 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8001ce6:	f7ff fe7b 	bl	80019e0 <LL_TIM_ClearFlag_UPDATE>
			start_trans_mx = 1;
 8001cea:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	200003c4 	.word	0x200003c4

08001cfc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	printf("uart4 it\r\n");
 8001d00:	480f      	ldr	r0, [pc, #60]	@ (8001d40 <UART4_IRQHandler+0x44>)
 8001d02:	f002 f86b 	bl	8003ddc <puts>
	LL_mDelay(100);
 8001d06:	2064      	movs	r0, #100	@ 0x64
 8001d08:	f001 ff08 	bl	8003b1c <LL_mDelay>
	if(LL_USART_IsActiveFlag_TC(UART4) == 1) {
 8001d0c:	480d      	ldr	r0, [pc, #52]	@ (8001d44 <UART4_IRQHandler+0x48>)
 8001d0e:	f7ff fe88 	bl	8001a22 <LL_USART_IsActiveFlag_TC>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d111      	bne.n	8001d3c <UART4_IRQHandler+0x40>
		    printf("TX complete, switching to RX mode\r\n");
 8001d18:	480b      	ldr	r0, [pc, #44]	@ (8001d48 <UART4_IRQHandler+0x4c>)
 8001d1a:	f002 f85f 	bl	8003ddc <puts>
		    LL_USART_ClearFlag_TC(UART4);
 8001d1e:	4809      	ldr	r0, [pc, #36]	@ (8001d44 <UART4_IRQHandler+0x48>)
 8001d20:	f7ff fe92 	bl	8001a48 <LL_USART_ClearFlag_TC>
	#if USE_THREE_STATE_GATE == 1
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001d24:	2110      	movs	r1, #16
 8001d26:	4809      	ldr	r0, [pc, #36]	@ (8001d4c <UART4_IRQHandler+0x50>)
 8001d28:	f7ff ff11 	bl	8001b4e <LL_GPIO_ResetOutputPin>
	#else
			LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_RX); //change UART direction
	#endif
				if(Packet_Return == 0) {
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <UART4_IRQHandler+0x54>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <UART4_IRQHandler+0x40>
					dynamixel_Ready = 1;
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <UART4_IRQHandler+0x58>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
					return;
 8001d3a:	bf00      	nop
			}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	08004b68 	.word	0x08004b68
 8001d44:	40004c00 	.word	0x40004c00
 8001d48:	08004b74 	.word	0x08004b74
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	20000001 	.word	0x20000001
 8001d54:	20000000 	.word	0x20000000

08001d58 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA2)) {
 8001d5c:	4814      	ldr	r0, [pc, #80]	@ (8001db0 <DMA2_Stream1_IRQHandler+0x58>)
 8001d5e:	f7ff fd23 	bl	80017a8 <LL_DMA_IsActiveFlag_TC1>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d021      	beq.n	8001dac <DMA2_Stream1_IRQHandler+0x54>
		LL_DMA_ClearFlag_TC1(DMA2);
 8001d68:	4811      	ldr	r0, [pc, #68]	@ (8001db0 <DMA2_Stream1_IRQHandler+0x58>)
 8001d6a:	f7ff fdaa 	bl	80018c2 <LL_DMA_ClearFlag_TC1>
		printf("stream1 it\r\n");
 8001d6e:	4811      	ldr	r0, [pc, #68]	@ (8001db4 <DMA2_Stream1_IRQHandler+0x5c>)
 8001d70:	f002 f834 	bl	8003ddc <puts>
		readStatusPacket_pos_DMA(dynamixel_position);
 8001d74:	4810      	ldr	r0, [pc, #64]	@ (8001db8 <DMA2_Stream1_IRQHandler+0x60>)
 8001d76:	f7fe fec3 	bl	8000b00 <readStatusPacket_pos_DMA>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <DMA2_Stream1_IRQHandler+0x58>)
 8001d7e:	f7ff fc83 	bl	8001688 <LL_DMA_DisableStream>
		Packet_Return -= 1;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <DMA2_Stream1_IRQHandler+0x64>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <DMA2_Stream1_IRQHandler+0x64>)
 8001d8c:	701a      	strb	r2, [r3, #0]
		if(Packet_Return == 0) {
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <DMA2_Stream1_IRQHandler+0x64>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <DMA2_Stream1_IRQHandler+0x4c>
			Is_dynamixel_GetData = 1;
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <DMA2_Stream1_IRQHandler+0x68>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
			dynamixel_Ready = 1;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <DMA2_Stream1_IRQHandler+0x6c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001da2:	e003      	b.n	8001dac <DMA2_Stream1_IRQHandler+0x54>
			LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8001da4:	2101      	movs	r1, #1
 8001da6:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <DMA2_Stream1_IRQHandler+0x58>)
 8001da8:	f7ff fc4e 	bl	8001648 <LL_DMA_EnableStream>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40026400 	.word	0x40026400
 8001db4:	08004b98 	.word	0x08004b98
 8001db8:	20000354 	.word	0x20000354
 8001dbc:	20000001 	.word	0x20000001
 8001dc0:	200003a0 	.word	0x200003a0
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA2) == 1) {
 8001dcc:	480c      	ldr	r0, [pc, #48]	@ (8001e00 <DMA2_Stream6_IRQHandler+0x38>)
 8001dce:	f7ff fd3a 	bl	8001846 <LL_DMA_IsActiveFlag_TC6>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d111      	bne.n	8001dfc <DMA2_Stream6_IRQHandler+0x34>
		printf("DMA TX Complete\r\n");
 8001dd8:	480a      	ldr	r0, [pc, #40]	@ (8001e04 <DMA2_Stream6_IRQHandler+0x3c>)
 8001dda:	f001 ffff 	bl	8003ddc <puts>
		LL_DMA_ClearFlag_TC6(DMA2);
 8001dde:	4808      	ldr	r0, [pc, #32]	@ (8001e00 <DMA2_Stream6_IRQHandler+0x38>)
 8001de0:	f7ff fda6 	bl	8001930 <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8001de4:	2106      	movs	r1, #6
 8001de6:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <DMA2_Stream6_IRQHandler+0x38>)
 8001de8:	f7ff fc4e 	bl	8001688 <LL_DMA_DisableStream>
		LL_USART_DisableDMAReq_TX(USART6);
 8001dec:	4806      	ldr	r0, [pc, #24]	@ (8001e08 <DMA2_Stream6_IRQHandler+0x40>)
 8001dee:	f7ff fe7f 	bl	8001af0 <LL_USART_DisableDMAReq_TX>
		usart6_dma_rx_start();
 8001df2:	f000 f8bf 	bl	8001f74 <usart6_dma_rx_start>
		dynamixel_Ready = 1;
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <DMA2_Stream6_IRQHandler+0x44>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40026400 	.word	0x40026400
 8001e04:	08004b54 	.word	0x08004b54
 8001e08:	40011400 	.word	0x40011400
 8001e0c:	20000000 	.word	0x20000000

08001e10 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	printf("usart6 it\r\n");
 8001e14:	480d      	ldr	r0, [pc, #52]	@ (8001e4c <USART6_IRQHandler+0x3c>)
 8001e16:	f001 ffe1 	bl	8003ddc <puts>
//		LL_mDelay(100);
		if(LL_USART_IsActiveFlag_TC(USART6) == 1) {
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <USART6_IRQHandler+0x40>)
 8001e1c:	f7ff fe01 	bl	8001a22 <LL_USART_IsActiveFlag_TC>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d111      	bne.n	8001e4a <USART6_IRQHandler+0x3a>
			    printf("TX complete, switching to RX mode\r\n");
 8001e26:	480b      	ldr	r0, [pc, #44]	@ (8001e54 <USART6_IRQHandler+0x44>)
 8001e28:	f001 ffd8 	bl	8003ddc <puts>
			    LL_USART_ClearFlag_TC(USART6);
 8001e2c:	4808      	ldr	r0, [pc, #32]	@ (8001e50 <USART6_IRQHandler+0x40>)
 8001e2e:	f7ff fe0b 	bl	8001a48 <LL_USART_ClearFlag_TC>
		#if USE_THREE_STATE_GATE == 1
				LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001e32:	2101      	movs	r1, #1
 8001e34:	4808      	ldr	r0, [pc, #32]	@ (8001e58 <USART6_IRQHandler+0x48>)
 8001e36:	f7ff fe8a 	bl	8001b4e <LL_GPIO_ResetOutputPin>
		#else
				LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_RX); //change UART direction
		#endif
					if(Packet_Return == 0) {
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <USART6_IRQHandler+0x4c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <USART6_IRQHandler+0x3a>
						dynamixel_Ready = 1;
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <USART6_IRQHandler+0x50>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
						return;
 8001e48:	bf00      	nop
		}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	08004ba4 	.word	0x08004ba4
 8001e50:	40011400 	.word	0x40011400
 8001e54:	08004b74 	.word	0x08004b74
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	20000001 	.word	0x20000001
 8001e60:	20000000 	.word	0x20000000

08001e64 <uart4_dma_rx_start>:
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
    LL_USART_EnableDMAReq_TX(UART4);
}
void uart4_dma_rx_start(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8001e68:	2102      	movs	r1, #2
 8001e6a:	481c      	ldr	r0, [pc, #112]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001e6c:	f7ff fc0c 	bl	8001688 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_2));
 8001e70:	bf00      	nop
 8001e72:	2102      	movs	r1, #2
 8001e74:	4819      	ldr	r0, [pc, #100]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001e76:	f7ff fc27 	bl	80016c8 <LL_DMA_IsEnabledStream>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f8      	bne.n	8001e72 <uart4_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC2(DMA1);
 8001e80:	4816      	ldr	r0, [pc, #88]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001e82:	f7ff fd2c 	bl	80018de <LL_DMA_ClearFlag_TC2>
    LL_DMA_ClearFlag_TE2(DMA1);
 8001e86:	4815      	ldr	r0, [pc, #84]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001e88:	f7ff fd6e 	bl	8001968 <LL_DMA_ClearFlag_TE2>
    LL_DMA_ClearFlag_HT2(DMA2);
 8001e8c:	4814      	ldr	r0, [pc, #80]	@ (8001ee0 <uart4_dma_rx_start+0x7c>)
 8001e8e:	f7ff fcfc 	bl	800188a <LL_DMA_ClearFlag_HT2>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 8001e92:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <uart4_dma_rx_start+0x80>)
 8001e94:	461a      	mov	r2, r3
 8001e96:	2102      	movs	r1, #2
 8001e98:	4810      	ldr	r0, [pc, #64]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001e9a:	f7ff fc55 	bl	8001748 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 8001e9e:	4812      	ldr	r0, [pc, #72]	@ (8001ee8 <uart4_dma_rx_start+0x84>)
 8001ea0:	f7ff fe49 	bl	8001b36 <LL_USART_DMA_GetRegAddr>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	480c      	ldr	r0, [pc, #48]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001eac:	f7ff fc64 	bl	8001778 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <uart4_dma_rx_start+0x88>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4808      	ldr	r0, [pc, #32]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001ebc:	f7ff fc20 	bl	8001700 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	4806      	ldr	r0, [pc, #24]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001ec4:	f7ff fd6c 	bl	80019a0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 8001ec8:	2102      	movs	r1, #2
 8001eca:	4804      	ldr	r0, [pc, #16]	@ (8001edc <uart4_dma_rx_start+0x78>)
 8001ecc:	f7ff fbbc 	bl	8001648 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(UART4);
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <uart4_dma_rx_start+0x84>)
 8001ed2:	f7ff fdc7 	bl	8001a64 <LL_USART_EnableDMAReq_RX>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40026000 	.word	0x40026000
 8001ee0:	40026400 	.word	0x40026400
 8001ee4:	200003a8 	.word	0x200003a8
 8001ee8:	40004c00 	.word	0x40004c00
 8001eec:	200003a4 	.word	0x200003a4

08001ef0 <usart6_dma_tx_start>:
void usart6_dma_tx_start(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
    printf("DMA6 started\r\n");
 8001ef4:	481a      	ldr	r0, [pc, #104]	@ (8001f60 <usart6_dma_tx_start+0x70>)
 8001ef6:	f001 ff71 	bl	8003ddc <puts>
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8001efa:	2106      	movs	r1, #6
 8001efc:	4819      	ldr	r0, [pc, #100]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001efe:	f7ff fbc3 	bl	8001688 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_6));
 8001f02:	bf00      	nop
 8001f04:	2106      	movs	r1, #6
 8001f06:	4817      	ldr	r0, [pc, #92]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f08:	f7ff fbde 	bl	80016c8 <LL_DMA_IsEnabledStream>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f8      	bne.n	8001f04 <usart6_dma_tx_start+0x14>

    LL_DMA_ClearFlag_TC6(DMA2);
 8001f12:	4814      	ldr	r0, [pc, #80]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f14:	f7ff fd0c 	bl	8001930 <LL_DMA_ClearFlag_TC6>
    LL_DMA_ClearFlag_TE6(DMA2);
 8001f18:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f1a:	f7ff fd33 	bl	8001984 <LL_DMA_ClearFlag_TE6>
    LL_DMA_ClearFlag_HT6(DMA2);
 8001f1e:	4811      	ldr	r0, [pc, #68]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f20:	f7ff fcc1 	bl	80018a6 <LL_DMA_ClearFlag_HT6>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)tx_data);
 8001f24:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <usart6_dma_tx_start+0x78>)
 8001f26:	461a      	mov	r2, r3
 8001f28:	2106      	movs	r1, #6
 8001f2a:	480e      	ldr	r0, [pc, #56]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f2c:	f7ff fc0c 	bl	8001748 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)&USART6->DR);
 8001f30:	4a0e      	ldr	r2, [pc, #56]	@ (8001f6c <usart6_dma_tx_start+0x7c>)
 8001f32:	2106      	movs	r1, #6
 8001f34:	480b      	ldr	r0, [pc, #44]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f36:	f7ff fc1f 	bl	8001778 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, sizeof(tx_data));
 8001f3a:	2209      	movs	r2, #9
 8001f3c:	2106      	movs	r1, #6
 8001f3e:	4809      	ldr	r0, [pc, #36]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f40:	f7ff fbde 	bl	8001700 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
 8001f44:	2106      	movs	r1, #6
 8001f46:	4807      	ldr	r0, [pc, #28]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f48:	f7ff fd2a 	bl	80019a0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 8001f4c:	2106      	movs	r1, #6
 8001f4e:	4805      	ldr	r0, [pc, #20]	@ (8001f64 <usart6_dma_tx_start+0x74>)
 8001f50:	f7ff fb7a 	bl	8001648 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_TX(USART6);
 8001f54:	4806      	ldr	r0, [pc, #24]	@ (8001f70 <usart6_dma_tx_start+0x80>)
 8001f56:	f7ff fda8 	bl	8001aaa <LL_USART_EnableDMAReq_TX>
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	08004bc0 	.word	0x08004bc0
 8001f64:	40026400 	.word	0x40026400
 8001f68:	200002cc 	.word	0x200002cc
 8001f6c:	40011404 	.word	0x40011404
 8001f70:	40011400 	.word	0x40011400

08001f74 <usart6_dma_rx_start>:
void usart6_dma_rx_start(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8001f78:	2101      	movs	r1, #1
 8001f7a:	481c      	ldr	r0, [pc, #112]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001f7c:	f7ff fb84 	bl	8001688 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_1));
 8001f80:	bf00      	nop
 8001f82:	2101      	movs	r1, #1
 8001f84:	4819      	ldr	r0, [pc, #100]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001f86:	f7ff fb9f 	bl	80016c8 <LL_DMA_IsEnabledStream>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f8      	bne.n	8001f82 <usart6_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC1(DMA2);
 8001f90:	4816      	ldr	r0, [pc, #88]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001f92:	f7ff fc96 	bl	80018c2 <LL_DMA_ClearFlag_TC1>
    LL_DMA_ClearFlag_TE1(DMA2);
 8001f96:	4815      	ldr	r0, [pc, #84]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001f98:	f7ff fcd8 	bl	800194c <LL_DMA_ClearFlag_TE1>
    LL_DMA_ClearFlag_HT1(DMA2);
 8001f9c:	4813      	ldr	r0, [pc, #76]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001f9e:	f7ff fc66 	bl	800186e <LL_DMA_ClearFlag_HT1>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <usart6_dma_rx_start+0x7c>)
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	4810      	ldr	r0, [pc, #64]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001faa:	f7ff fbcd 	bl	8001748 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 8001fae:	4811      	ldr	r0, [pc, #68]	@ (8001ff4 <usart6_dma_rx_start+0x80>)
 8001fb0:	f7ff fdc1 	bl	8001b36 <LL_USART_DMA_GetRegAddr>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2101      	movs	r1, #1
 8001fba:	480c      	ldr	r0, [pc, #48]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001fbc:	f7ff fbdc 	bl	8001778 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <usart6_dma_rx_start+0x84>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4808      	ldr	r0, [pc, #32]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001fcc:	f7ff fb98 	bl	8001700 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4806      	ldr	r0, [pc, #24]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001fd4:	f7ff fce4 	bl	80019a0 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4804      	ldr	r0, [pc, #16]	@ (8001fec <usart6_dma_rx_start+0x78>)
 8001fdc:	f7ff fb34 	bl	8001648 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(USART6);
 8001fe0:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <usart6_dma_rx_start+0x80>)
 8001fe2:	f7ff fd3f 	bl	8001a64 <LL_USART_EnableDMAReq_RX>
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40026400 	.word	0x40026400
 8001ff0:	200003a8 	.word	0x200003a8
 8001ff4:	40011400 	.word	0x40011400
 8001ff8:	200003a4 	.word	0x200003a4

08001ffc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e00a      	b.n	8002024 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800200e:	f3af 8000 	nop.w
 8002012:	4601      	mov	r1, r0
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	60ba      	str	r2, [r7, #8]
 800201a:	b2ca      	uxtb	r2, r1
 800201c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbf0      	blt.n	800200e <_read+0x12>
  }

  return len;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800205e:	605a      	str	r2, [r3, #4]
  return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_isatty>:

int _isatty(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f001 ffb2 	bl	8004038 <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20020000 	.word	0x20020000
 8002100:	00000400 	.word	0x00000400
 8002104:	200003c8 	.word	0x200003c8
 8002108:	20000518 	.word	0x20000518

0800210c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <SystemInit+0x20>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <SystemInit+0x20>)
 8002118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800211c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_GetPriorityGrouping>:
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <__NVIC_GetPriorityGrouping+0x18>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	f003 0307 	and.w	r3, r3, #7
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_EnableIRQ>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	db0b      	blt.n	8002176 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	4907      	ldr	r1, [pc, #28]	@ (8002184 <__NVIC_EnableIRQ+0x38>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	2001      	movs	r0, #1
 800216e:	fa00 f202 	lsl.w	r2, r0, r2
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000e100 	.word	0xe000e100

08002188 <__NVIC_SetPriority>:
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	@ (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	@ (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	@ 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <LL_APB2_GRP1_EnableClock>:
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800224c:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <LL_APB2_GRP1_EnableClock+0x2c>)
 800224e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002250:	4907      	ldr	r1, [pc, #28]	@ (8002270 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <LL_APB2_GRP1_EnableClock+0x2c>)
 800225a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4013      	ands	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40023800 	.word	0x40023800

08002274 <LL_TIM_DisableARRPreload>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_TIM_SetClockSource>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022a6:	f023 0307 	bic.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	609a      	str	r2, [r3, #8]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_TIM_SetTriggerOutput>:
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	605a      	str	r2, [r3, #4]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_TIM_DisableMasterSlaveMode>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	609a      	str	r2, [r3, #8]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002318:	2001      	movs	r0, #1
 800231a:	f7ff ff93 	bl	8002244 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800231e:	f7ff ff07 	bl	8002130 <__NVIC_GetPriorityGrouping>
 8002322:	4603      	mov	r3, r0
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff57 	bl	80021dc <NVIC_EncodePriority>
 800232e:	4603      	mov	r3, r0
 8002330:	4619      	mov	r1, r3
 8002332:	2019      	movs	r0, #25
 8002334:	f7ff ff28 	bl	8002188 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002338:	2019      	movs	r0, #25
 800233a:	f7ff ff07 	bl	800214c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 29;
 800233e:	231d      	movs	r3, #29
 8002340:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 60000;
 8002346:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800234a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	4619      	mov	r1, r3
 8002358:	480a      	ldr	r0, [pc, #40]	@ (8002384 <MX_TIM1_Init+0x80>)
 800235a:	f001 f835 	bl	80033c8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800235e:	4809      	ldr	r0, [pc, #36]	@ (8002384 <MX_TIM1_Init+0x80>)
 8002360:	f7ff ff88 	bl	8002274 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002364:	2100      	movs	r1, #0
 8002366:	4807      	ldr	r0, [pc, #28]	@ (8002384 <MX_TIM1_Init+0x80>)
 8002368:	f7ff ff94 	bl	8002294 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800236c:	2100      	movs	r1, #0
 800236e:	4805      	ldr	r0, [pc, #20]	@ (8002384 <MX_TIM1_Init+0x80>)
 8002370:	f7ff ffa5 	bl	80022be <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002374:	4803      	ldr	r0, [pc, #12]	@ (8002384 <MX_TIM1_Init+0x80>)
 8002376:	f7ff ffb5 	bl	80022e4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40010000 	.word	0x40010000

08002388 <__NVIC_GetPriorityGrouping>:
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	@ (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	@ (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	@ (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	@ 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <LL_DMA_SetDataTransferDirection>:
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80024a8:	4a0d      	ldr	r2, [pc, #52]	@ (80024e0 <LL_DMA_SetDataTransferDirection+0x44>)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4413      	add	r3, r2
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024bc:	4908      	ldr	r1, [pc, #32]	@ (80024e0 <LL_DMA_SetDataTransferDirection+0x44>)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	440b      	add	r3, r1
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	440b      	add	r3, r1
 80024ca:	4619      	mov	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	08004bf8 	.word	0x08004bf8

080024e4 <LL_DMA_SetMode>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80024f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <LL_DMA_SetMode+0x44>)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4413      	add	r3, r2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8002504:	4908      	ldr	r1, [pc, #32]	@ (8002528 <LL_DMA_SetMode+0x44>)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	440b      	add	r3, r1
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	440b      	add	r3, r1
 8002512:	4619      	mov	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	08004bf8 	.word	0x08004bf8

0800252c <LL_DMA_SetPeriphIncMode>:
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002538:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <LL_DMA_SetPeriphIncMode+0x44>)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4413      	add	r3, r2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800254c:	4908      	ldr	r1, [pc, #32]	@ (8002570 <LL_DMA_SetPeriphIncMode+0x44>)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	440b      	add	r3, r1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	440b      	add	r3, r1
 800255a:	4619      	mov	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	08004bf8 	.word	0x08004bf8

08002574 <LL_DMA_SetMemoryIncMode>:
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002580:	4a0d      	ldr	r2, [pc, #52]	@ (80025b8 <LL_DMA_SetMemoryIncMode+0x44>)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002594:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <LL_DMA_SetMemoryIncMode+0x44>)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	440b      	add	r3, r1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	440b      	add	r3, r1
 80025a2:	4619      	mov	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	08004bf8 	.word	0x08004bf8

080025bc <LL_DMA_SetPeriphSize>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80025c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002600 <LL_DMA_SetPeriphSize+0x44>)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4413      	add	r3, r2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4413      	add	r3, r2
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80025dc:	4908      	ldr	r1, [pc, #32]	@ (8002600 <LL_DMA_SetPeriphSize+0x44>)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	440b      	add	r3, r1
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	440b      	add	r3, r1
 80025ea:	4619      	mov	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	08004bf8 	.word	0x08004bf8

08002604 <LL_DMA_SetMemorySize>:
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002610:	4a0d      	ldr	r2, [pc, #52]	@ (8002648 <LL_DMA_SetMemorySize+0x44>)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4413      	add	r3, r2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8002624:	4908      	ldr	r1, [pc, #32]	@ (8002648 <LL_DMA_SetMemorySize+0x44>)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	440b      	add	r3, r1
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	440b      	add	r3, r1
 8002632:	4619      	mov	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	08004bf8 	.word	0x08004bf8

0800264c <LL_DMA_SetStreamPriorityLevel>:
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002658:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4413      	add	r3, r2
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4413      	add	r3, r2
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800266c:	4908      	ldr	r1, [pc, #32]	@ (8002690 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	440b      	add	r3, r1
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	440b      	add	r3, r1
 800267a:	4619      	mov	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	08004bf8 	.word	0x08004bf8

08002694 <LL_DMA_SetChannelSelection>:
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80026a0:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <LL_DMA_SetChannelSelection+0x44>)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4413      	add	r3, r2
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80026b4:	4908      	ldr	r1, [pc, #32]	@ (80026d8 <LL_DMA_SetChannelSelection+0x44>)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	440b      	add	r3, r1
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	440b      	add	r3, r1
 80026c2:	4619      	mov	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	08004bf8 	.word	0x08004bf8

080026dc <LL_DMA_DisableFifoMode>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80026e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002718 <LL_DMA_DisableFifoMode+0x3c>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	4908      	ldr	r1, [pc, #32]	@ (8002718 <LL_DMA_DisableFifoMode+0x3c>)
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	440a      	add	r2, r1
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	4611      	mov	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	440a      	add	r2, r1
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6153      	str	r3, [r2, #20]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	08004bf8 	.word	0x08004bf8

0800271c <LL_AHB1_GRP1_EnableClock>:
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002728:	4907      	ldr	r1, [pc, #28]	@ (8002748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4313      	orrs	r3, r2
 800272e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002730:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4013      	ands	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	40023800 	.word	0x40023800

0800274c <LL_APB1_GRP1_EnableClock>:
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002754:	4b08      	ldr	r3, [pc, #32]	@ (8002778 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002758:	4907      	ldr	r1, [pc, #28]	@ (8002778 <LL_APB1_GRP1_EnableClock+0x2c>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4313      	orrs	r3, r2
 800275e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4013      	ands	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40023800 	.word	0x40023800

0800277c <LL_APB2_GRP1_EnableClock>:
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002784:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002786:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002788:	4907      	ldr	r1, [pc, #28]	@ (80027a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002792:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40023800 	.word	0x40023800

080027ac <LL_USART_Enable>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	60da      	str	r2, [r3, #12]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_USART_EnableHalfDuplex>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f043 0208 	orr.w	r2, r3, #8
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	615a      	str	r2, [r3, #20]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_USART_ConfigAsyncMode>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	615a      	str	r2, [r3, #20]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	@ 0x38
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]
 800282c:	611a      	str	r2, [r3, #16]
 800282e:	615a      	str	r2, [r3, #20]
 8002830:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
 8002840:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002842:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002846:	f7ff ff81 	bl	800274c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff ff66 	bl	800271c <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002850:	2303      	movs	r3, #3
 8002852:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002854:	2302      	movs	r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002864:	2308      	movs	r3, #8
 8002866:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	4619      	mov	r1, r3
 800286c:	4846      	ldr	r0, [pc, #280]	@ (8002988 <MX_UART4_Init+0x170>)
 800286e:	f000 fb77 	bl	8002f60 <LL_GPIO_Init>

  /* UART4 DMA Init */

  /* UART4_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8002872:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002876:	2102      	movs	r1, #2
 8002878:	4844      	ldr	r0, [pc, #272]	@ (800298c <MX_UART4_Init+0x174>)
 800287a:	f7ff ff0b 	bl	8002694 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800287e:	2200      	movs	r2, #0
 8002880:	2102      	movs	r1, #2
 8002882:	4842      	ldr	r0, [pc, #264]	@ (800298c <MX_UART4_Init+0x174>)
 8002884:	f7ff fe0a 	bl	800249c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 8002888:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800288c:	2102      	movs	r1, #2
 800288e:	483f      	ldr	r0, [pc, #252]	@ (800298c <MX_UART4_Init+0x174>)
 8002890:	f7ff fedc 	bl	800264c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 8002894:	2200      	movs	r2, #0
 8002896:	2102      	movs	r1, #2
 8002898:	483c      	ldr	r0, [pc, #240]	@ (800298c <MX_UART4_Init+0x174>)
 800289a:	f7ff fe23 	bl	80024e4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 800289e:	2200      	movs	r2, #0
 80028a0:	2102      	movs	r1, #2
 80028a2:	483a      	ldr	r0, [pc, #232]	@ (800298c <MX_UART4_Init+0x174>)
 80028a4:	f7ff fe42 	bl	800252c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 80028a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ac:	2102      	movs	r1, #2
 80028ae:	4837      	ldr	r0, [pc, #220]	@ (800298c <MX_UART4_Init+0x174>)
 80028b0:	f7ff fe60 	bl	8002574 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2102      	movs	r1, #2
 80028b8:	4834      	ldr	r0, [pc, #208]	@ (800298c <MX_UART4_Init+0x174>)
 80028ba:	f7ff fe7f 	bl	80025bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80028be:	2200      	movs	r2, #0
 80028c0:	2102      	movs	r1, #2
 80028c2:	4832      	ldr	r0, [pc, #200]	@ (800298c <MX_UART4_Init+0x174>)
 80028c4:	f7ff fe9e 	bl	8002604 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 80028c8:	2102      	movs	r1, #2
 80028ca:	4830      	ldr	r0, [pc, #192]	@ (800298c <MX_UART4_Init+0x174>)
 80028cc:	f7ff ff06 	bl	80026dc <LL_DMA_DisableFifoMode>

  /* UART4_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_4);
 80028d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028d4:	2104      	movs	r1, #4
 80028d6:	482d      	ldr	r0, [pc, #180]	@ (800298c <MX_UART4_Init+0x174>)
 80028d8:	f7ff fedc 	bl	8002694 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80028dc:	2240      	movs	r2, #64	@ 0x40
 80028de:	2104      	movs	r1, #4
 80028e0:	482a      	ldr	r0, [pc, #168]	@ (800298c <MX_UART4_Init+0x174>)
 80028e2:	f7ff fddb 	bl	800249c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2104      	movs	r1, #4
 80028ea:	4828      	ldr	r0, [pc, #160]	@ (800298c <MX_UART4_Init+0x174>)
 80028ec:	f7ff feae 	bl	800264c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2104      	movs	r1, #4
 80028f4:	4825      	ldr	r0, [pc, #148]	@ (800298c <MX_UART4_Init+0x174>)
 80028f6:	f7ff fdf5 	bl	80024e4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2104      	movs	r1, #4
 80028fe:	4823      	ldr	r0, [pc, #140]	@ (800298c <MX_UART4_Init+0x174>)
 8002900:	f7ff fe14 	bl	800252c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8002904:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002908:	2104      	movs	r1, #4
 800290a:	4820      	ldr	r0, [pc, #128]	@ (800298c <MX_UART4_Init+0x174>)
 800290c:	f7ff fe32 	bl	8002574 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8002910:	2200      	movs	r2, #0
 8002912:	2104      	movs	r1, #4
 8002914:	481d      	ldr	r0, [pc, #116]	@ (800298c <MX_UART4_Init+0x174>)
 8002916:	f7ff fe51 	bl	80025bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 800291a:	2200      	movs	r2, #0
 800291c:	2104      	movs	r1, #4
 800291e:	481b      	ldr	r0, [pc, #108]	@ (800298c <MX_UART4_Init+0x174>)
 8002920:	f7ff fe70 	bl	8002604 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 8002924:	2104      	movs	r1, #4
 8002926:	4819      	ldr	r0, [pc, #100]	@ (800298c <MX_UART4_Init+0x174>)
 8002928:	f7ff fed8 	bl	80026dc <LL_DMA_DisableFifoMode>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800292c:	f7ff fd2c 	bl	8002388 <__NVIC_GetPriorityGrouping>
 8002930:	4603      	mov	r3, r0
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fd7c 	bl	8002434 <NVIC_EncodePriority>
 800293c:	4603      	mov	r3, r0
 800293e:	4619      	mov	r1, r3
 8002940:	2034      	movs	r0, #52	@ 0x34
 8002942:	f7ff fd4d 	bl	80023e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8002946:	2034      	movs	r0, #52	@ 0x34
 8002948:	f7ff fd2c 	bl	80023a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 800294c:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <MX_UART4_Init+0x178>)
 800294e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002950:	2300      	movs	r3, #0
 8002952:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800295c:	230c      	movs	r3, #12
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002964:	2300      	movs	r3, #0
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	4619      	mov	r1, r3
 800296e:	4809      	ldr	r0, [pc, #36]	@ (8002994 <MX_UART4_Init+0x17c>)
 8002970:	f001 f82c 	bl	80039cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8002974:	4807      	ldr	r0, [pc, #28]	@ (8002994 <MX_UART4_Init+0x17c>)
 8002976:	f7ff ff39 	bl	80027ec <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800297a:	4806      	ldr	r0, [pc, #24]	@ (8002994 <MX_UART4_Init+0x17c>)
 800297c:	f7ff ff16 	bl	80027ac <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002980:	bf00      	nop
 8002982:	3738      	adds	r7, #56	@ 0x38
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40020000 	.word	0x40020000
 800298c:	40026000 	.word	0x40026000
 8002990:	001e8480 	.word	0x001e8480
 8002994:	40004c00 	.word	0x40004c00

08002998 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	@ 0x38
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800299e:	f107 031c 	add.w	r3, r7, #28
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]
 80029ae:	615a      	str	r2, [r3, #20]
 80029b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
 80029c0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80029c2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80029c6:	f7ff fec1 	bl	800274c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7ff fea6 	bl	800271c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80029d0:	230c      	movs	r3, #12
 80029d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029d4:	2302      	movs	r3, #2
 80029d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80029e4:	2307      	movs	r3, #7
 80029e6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	483e      	ldr	r0, [pc, #248]	@ (8002ae8 <MX_USART2_UART_Init+0x150>)
 80029ee:	f000 fab7 	bl	8002f60 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 80029f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029f6:	2105      	movs	r1, #5
 80029f8:	483c      	ldr	r0, [pc, #240]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 80029fa:	f7ff fe4b 	bl	8002694 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2105      	movs	r1, #5
 8002a02:	483a      	ldr	r0, [pc, #232]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a04:	f7ff fd4a 	bl	800249c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2105      	movs	r1, #5
 8002a0c:	4837      	ldr	r0, [pc, #220]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a0e:	f7ff fe1d 	bl	800264c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2105      	movs	r1, #5
 8002a16:	4835      	ldr	r0, [pc, #212]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a18:	f7ff fd64 	bl	80024e4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2105      	movs	r1, #5
 8002a20:	4832      	ldr	r0, [pc, #200]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a22:	f7ff fd83 	bl	800252c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8002a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a2a:	2105      	movs	r1, #5
 8002a2c:	482f      	ldr	r0, [pc, #188]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a2e:	f7ff fda1 	bl	8002574 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2105      	movs	r1, #5
 8002a36:	482d      	ldr	r0, [pc, #180]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a38:	f7ff fdc0 	bl	80025bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2105      	movs	r1, #5
 8002a40:	482a      	ldr	r0, [pc, #168]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a42:	f7ff fddf 	bl	8002604 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8002a46:	2105      	movs	r1, #5
 8002a48:	4828      	ldr	r0, [pc, #160]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a4a:	f7ff fe47 	bl	80026dc <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8002a4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a52:	2106      	movs	r1, #6
 8002a54:	4825      	ldr	r0, [pc, #148]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a56:	f7ff fe1d 	bl	8002694 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002a5a:	2240      	movs	r2, #64	@ 0x40
 8002a5c:	2106      	movs	r1, #6
 8002a5e:	4823      	ldr	r0, [pc, #140]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a60:	f7ff fd1c 	bl	800249c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2106      	movs	r1, #6
 8002a68:	4820      	ldr	r0, [pc, #128]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a6a:	f7ff fdef 	bl	800264c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2106      	movs	r1, #6
 8002a72:	481e      	ldr	r0, [pc, #120]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a74:	f7ff fd36 	bl	80024e4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2106      	movs	r1, #6
 8002a7c:	481b      	ldr	r0, [pc, #108]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a7e:	f7ff fd55 	bl	800252c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8002a82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a86:	2106      	movs	r1, #6
 8002a88:	4818      	ldr	r0, [pc, #96]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a8a:	f7ff fd73 	bl	8002574 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2106      	movs	r1, #6
 8002a92:	4816      	ldr	r0, [pc, #88]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a94:	f7ff fd92 	bl	80025bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2106      	movs	r1, #6
 8002a9c:	4813      	ldr	r0, [pc, #76]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002a9e:	f7ff fdb1 	bl	8002604 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 8002aa2:	2106      	movs	r1, #6
 8002aa4:	4811      	ldr	r0, [pc, #68]	@ (8002aec <MX_USART2_UART_Init+0x154>)
 8002aa6:	f7ff fe19 	bl	80026dc <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002aaa:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002aae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002abc:	230c      	movs	r3, #12
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4808      	ldr	r0, [pc, #32]	@ (8002af0 <MX_USART2_UART_Init+0x158>)
 8002ad0:	f000 ff7c 	bl	80039cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002ad4:	4806      	ldr	r0, [pc, #24]	@ (8002af0 <MX_USART2_UART_Init+0x158>)
 8002ad6:	f7ff fe89 	bl	80027ec <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002ada:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <MX_USART2_UART_Init+0x158>)
 8002adc:	f7ff fe66 	bl	80027ac <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ae0:	bf00      	nop
 8002ae2:	3738      	adds	r7, #56	@ 0x38
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40026000 	.word	0x40026000
 8002af0:	40004400 	.word	0x40004400

08002af4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	@ 0x38
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002afa:	f107 031c 	add.w	r3, r7, #28
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]
 8002b0a:	615a      	str	r2, [r3, #20]
 8002b0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002b1e:	2020      	movs	r0, #32
 8002b20:	f7ff fe2c 	bl	800277c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002b24:	2004      	movs	r0, #4
 8002b26:	f7ff fdf9 	bl	800271c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002b2a:	23c0      	movs	r3, #192	@ 0xc0
 8002b2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4848      	ldr	r0, [pc, #288]	@ (8002c68 <MX_USART6_UART_Init+0x174>)
 8002b48:	f000 fa0a 	bl	8002f60 <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_5);
 8002b4c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002b50:	2106      	movs	r1, #6
 8002b52:	4846      	ldr	r0, [pc, #280]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002b54:	f7ff fd9e 	bl	8002694 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002b58:	2240      	movs	r2, #64	@ 0x40
 8002b5a:	2106      	movs	r1, #6
 8002b5c:	4843      	ldr	r0, [pc, #268]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002b5e:	f7ff fc9d 	bl	800249c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2106      	movs	r1, #6
 8002b66:	4841      	ldr	r0, [pc, #260]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002b68:	f7ff fd70 	bl	800264c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2106      	movs	r1, #6
 8002b70:	483e      	ldr	r0, [pc, #248]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002b72:	f7ff fcb7 	bl	80024e4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2106      	movs	r1, #6
 8002b7a:	483c      	ldr	r0, [pc, #240]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002b7c:	f7ff fcd6 	bl	800252c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8002b80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b84:	2106      	movs	r1, #6
 8002b86:	4839      	ldr	r0, [pc, #228]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002b88:	f7ff fcf4 	bl	8002574 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2106      	movs	r1, #6
 8002b90:	4836      	ldr	r0, [pc, #216]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002b92:	f7ff fd13 	bl	80025bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2106      	movs	r1, #6
 8002b9a:	4834      	ldr	r0, [pc, #208]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002b9c:	f7ff fd32 	bl	8002604 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8002ba0:	2106      	movs	r1, #6
 8002ba2:	4832      	ldr	r0, [pc, #200]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002ba4:	f7ff fd9a 	bl	80026dc <LL_DMA_DisableFifoMode>

  /* USART6_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 8002ba8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002bac:	2101      	movs	r1, #1
 8002bae:	482f      	ldr	r0, [pc, #188]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002bb0:	f7ff fd70 	bl	8002694 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	482c      	ldr	r0, [pc, #176]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002bba:	f7ff fc6f 	bl	800249c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_HIGH);
 8002bbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	4829      	ldr	r0, [pc, #164]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002bc6:	f7ff fd41 	bl	800264c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4827      	ldr	r0, [pc, #156]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002bd0:	f7ff fc88 	bl	80024e4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4824      	ldr	r0, [pc, #144]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002bda:	f7ff fca7 	bl	800252c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8002bde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002be2:	2101      	movs	r1, #1
 8002be4:	4821      	ldr	r0, [pc, #132]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002be6:	f7ff fcc5 	bl	8002574 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2101      	movs	r1, #1
 8002bee:	481f      	ldr	r0, [pc, #124]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002bf0:	f7ff fce4 	bl	80025bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	481c      	ldr	r0, [pc, #112]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002bfa:	f7ff fd03 	bl	8002604 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 8002bfe:	2101      	movs	r1, #1
 8002c00:	481a      	ldr	r0, [pc, #104]	@ (8002c6c <MX_USART6_UART_Init+0x178>)
 8002c02:	f7ff fd6b 	bl	80026dc <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002c06:	f7ff fbbf 	bl	8002388 <__NVIC_GetPriorityGrouping>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fc0f 	bl	8002434 <NVIC_EncodePriority>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	2047      	movs	r0, #71	@ 0x47
 8002c1c:	f7ff fbe0 	bl	80023e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002c20:	2047      	movs	r0, #71	@ 0x47
 8002c22:	f7ff fbbf 	bl	80023a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <MX_USART6_UART_Init+0x17c>)
 8002c28:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c36:	230c      	movs	r3, #12
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_EnableHalfDuplex(USART6);
 8002c42:	480c      	ldr	r0, [pc, #48]	@ (8002c74 <MX_USART6_UART_Init+0x180>)
 8002c44:	f7ff fdc2 	bl	80027cc <LL_USART_EnableHalfDuplex>
  LL_USART_Init(USART6, &USART_InitStruct);
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4809      	ldr	r0, [pc, #36]	@ (8002c74 <MX_USART6_UART_Init+0x180>)
 8002c50:	f000 febc 	bl	80039cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002c54:	4807      	ldr	r0, [pc, #28]	@ (8002c74 <MX_USART6_UART_Init+0x180>)
 8002c56:	f7ff fdc9 	bl	80027ec <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002c5a:	4806      	ldr	r0, [pc, #24]	@ (8002c74 <MX_USART6_UART_Init+0x180>)
 8002c5c:	f7ff fda6 	bl	80027ac <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c60:	bf00      	nop
 8002c62:	3738      	adds	r7, #56	@ 0x38
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40026400 	.word	0x40026400
 8002c70:	001e8480 	.word	0x001e8480
 8002c74:	40011400 	.word	0x40011400

08002c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c7c:	f7ff fa46 	bl	800210c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c80:	480c      	ldr	r0, [pc, #48]	@ (8002cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c82:	490d      	ldr	r1, [pc, #52]	@ (8002cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c84:	4a0d      	ldr	r2, [pc, #52]	@ (8002cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c88:	e002      	b.n	8002c90 <LoopCopyDataInit>

08002c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8e:	3304      	adds	r3, #4

08002c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c94:	d3f9      	bcc.n	8002c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c96:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c98:	4c0a      	ldr	r4, [pc, #40]	@ (8002cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c9c:	e001      	b.n	8002ca2 <LoopFillZerobss>

08002c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca0:	3204      	adds	r2, #4

08002ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca4:	d3fb      	bcc.n	8002c9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ca6:	f001 f9cd 	bl	8004044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002caa:	f7fe fc01 	bl	80014b0 <main>
  bx  lr    
 8002cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb8:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8002cbc:	08004c44 	.word	0x08004c44
  ldr r2, =_sbss
 8002cc0:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8002cc4:	20000518 	.word	0x20000518

08002cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc8:	e7fe      	b.n	8002cc8 <ADC_IRQHandler>

08002cca <LL_GPIO_SetPinMode>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b08b      	sub	sp, #44	@ 0x2c
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	613b      	str	r3, [r7, #16]
  return result;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	e003      	b.n	8002cfc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2103      	movs	r1, #3
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	401a      	ands	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	61fb      	str	r3, [r7, #28]
  return result;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002d1e:	2320      	movs	r3, #32
 8002d20:	e003      	b.n	8002d2a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	601a      	str	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	372c      	adds	r7, #44	@ 0x2c
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_GPIO_SetPinOutputType>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	401a      	ands	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	431a      	orrs	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	605a      	str	r2, [r3, #4]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_GPIO_SetPinSpeed>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b08b      	sub	sp, #44	@ 0x2c
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	613b      	str	r3, [r7, #16]
  return result;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e003      	b.n	8002da6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2103      	movs	r1, #3
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	401a      	ands	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	609a      	str	r2, [r3, #8]
}
 8002de2:	bf00      	nop
 8002de4:	372c      	adds	r7, #44	@ 0x2c
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_GPIO_SetPinPull>:
{
 8002dee:	b480      	push	{r7}
 8002df0:	b08b      	sub	sp, #44	@ 0x2c
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	613b      	str	r3, [r7, #16]
  return result;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e003      	b.n	8002e20 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2103      	movs	r1, #3
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	61fb      	str	r3, [r7, #28]
  return result;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	431a      	orrs	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	60da      	str	r2, [r3, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	372c      	adds	r7, #44	@ 0x2c
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_GPIO_SetAFPin_0_7>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b08b      	sub	sp, #44	@ 0x2c
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	613b      	str	r3, [r7, #16]
  return result;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e003      	b.n	8002e9a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	fab3 f383 	clz	r3, r3
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	210f      	movs	r1, #15
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	61fb      	str	r3, [r7, #28]
  return result;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e003      	b.n	8002ec8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	372c      	adds	r7, #44	@ 0x2c
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_GPIO_SetAFPin_8_15>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b08b      	sub	sp, #44	@ 0x2c
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	613b      	str	r3, [r7, #16]
  return result;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e003      	b.n	8002f16 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	210f      	movs	r1, #15
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	401a      	ands	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	61fb      	str	r3, [r7, #28]
  return result;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	e003      	b.n	8002f46 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002f54:	bf00      	nop
 8002f56:	372c      	adds	r7, #44	@ 0x2c
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	@ 0x28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  return result;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <LL_GPIO_Init+0x2e>
    return 32U;
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	e003      	b.n	8002f96 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f98:	e057      	b.n	800304a <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d049      	beq.n	8003044 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d003      	beq.n	8002fc0 <LL_GPIO_Init+0x60>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d10d      	bne.n	8002fdc <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6a39      	ldr	r1, [r7, #32]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fed3 	bl	8002d74 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6a39      	ldr	r1, [r7, #32]
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff feb4 	bl	8002d44 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6a39      	ldr	r1, [r7, #32]
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ff02 	bl	8002dee <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d121      	bne.n	8003036 <LL_GPIO_Init+0xd6>
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	60bb      	str	r3, [r7, #8]
  return result;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <LL_GPIO_Init+0xac>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003014:	2b07      	cmp	r3, #7
 8003016:	d807      	bhi.n	8003028 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	461a      	mov	r2, r3
 800301e:	6a39      	ldr	r1, [r7, #32]
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff21 	bl	8002e68 <LL_GPIO_SetAFPin_0_7>
 8003026:	e006      	b.n	8003036 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	461a      	mov	r2, r3
 800302e:	6a39      	ldr	r1, [r7, #32]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff56 	bl	8002ee2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	461a      	mov	r2, r3
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fe43 	bl	8002cca <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	3301      	adds	r3, #1
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1a0      	bne.n	8002f9a <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3728      	adds	r7, #40	@ 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <LL_RCC_GetSysClkSource>:
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <LL_RCC_GetSysClkSource+0x18>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800

08003080 <LL_RCC_GetAHBPrescaler>:
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003084:	4b04      	ldr	r3, [pc, #16]	@ (8003098 <LL_RCC_GetAHBPrescaler+0x18>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800

0800309c <LL_RCC_GetAPB1Prescaler>:
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030a0:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <LL_RCC_GetAPB2Prescaler>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800

080030d4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030d8:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <LL_RCC_PLL_GetMainSource+0x18>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80030f4:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <LL_RCC_PLL_GetN+0x18>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40023800 	.word	0x40023800

0800310c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003110:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <LL_RCC_PLL_GetP+0x18>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800312c:	4b04      	ldr	r3, [pc, #16]	@ (8003140 <LL_RCC_PLL_GetR+0x18>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800

08003144 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <LL_RCC_PLL_GetDivider+0x18>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800

08003160 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003168:	f000 f820 	bl	80031ac <RCC_GetSystemClockFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f85c 	bl	8003234 <RCC_GetHCLKClockFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f86a 	bl	8003260 <RCC_GetPCLK1ClockFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f876 	bl	8003288 <RCC_GetPCLK2ClockFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	60da      	str	r2, [r3, #12]
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80031b6:	f7ff ff55 	bl	8003064 <LL_RCC_GetSysClkSource>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d82d      	bhi.n	800321c <RCC_GetSystemClockFreq+0x70>
 80031c0:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <RCC_GetSystemClockFreq+0x1c>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	0800321d 	.word	0x0800321d
 80031d4:	0800321d 	.word	0x0800321d
 80031d8:	08003203 	.word	0x08003203
 80031dc:	0800321d 	.word	0x0800321d
 80031e0:	0800321d 	.word	0x0800321d
 80031e4:	0800321d 	.word	0x0800321d
 80031e8:	08003209 	.word	0x08003209
 80031ec:	0800321d 	.word	0x0800321d
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003213 	.word	0x08003213
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <RCC_GetSystemClockFreq+0x80>)
 80031fe:	607b      	str	r3, [r7, #4]
      break;
 8003200:	e00f      	b.n	8003222 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003202:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <RCC_GetSystemClockFreq+0x84>)
 8003204:	607b      	str	r3, [r7, #4]
      break;
 8003206:	e00c      	b.n	8003222 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003208:	2008      	movs	r0, #8
 800320a:	f000 f851 	bl	80032b0 <RCC_PLL_GetFreqDomain_SYS>
 800320e:	6078      	str	r0, [r7, #4]
      break;
 8003210:	e007      	b.n	8003222 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8003212:	200c      	movs	r0, #12
 8003214:	f000 f84c 	bl	80032b0 <RCC_PLL_GetFreqDomain_SYS>
 8003218:	6078      	str	r0, [r7, #4]
      break;
 800321a:	e002      	b.n	8003222 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800321c:	4b03      	ldr	r3, [pc, #12]	@ (800322c <RCC_GetSystemClockFreq+0x80>)
 800321e:	607b      	str	r3, [r7, #4]
      break;
 8003220:	bf00      	nop
  }

  return frequency;
 8003222:	687b      	ldr	r3, [r7, #4]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	00f42400 	.word	0x00f42400
 8003230:	007a1200 	.word	0x007a1200

08003234 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800323c:	f7ff ff20 	bl	8003080 <LL_RCC_GetAHBPrescaler>
 8003240:	4603      	mov	r3, r0
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <RCC_GetHCLKClockFreq+0x28>)
 800324a:	5cd3      	ldrb	r3, [r2, r3]
 800324c:	461a      	mov	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	40d3      	lsrs	r3, r2
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	08004be0 	.word	0x08004be0

08003260 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003268:	f7ff ff18 	bl	800309c <LL_RCC_GetAPB1Prescaler>
 800326c:	4603      	mov	r3, r0
 800326e:	0a9b      	lsrs	r3, r3, #10
 8003270:	4a04      	ldr	r2, [pc, #16]	@ (8003284 <RCC_GetPCLK1ClockFreq+0x24>)
 8003272:	5cd3      	ldrb	r3, [r2, r3]
 8003274:	461a      	mov	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	40d3      	lsrs	r3, r2
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	08004bf0 	.word	0x08004bf0

08003288 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003290:	f7ff ff12 	bl	80030b8 <LL_RCC_GetAPB2Prescaler>
 8003294:	4603      	mov	r3, r0
 8003296:	0b5b      	lsrs	r3, r3, #13
 8003298:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <RCC_GetPCLK2ClockFreq+0x24>)
 800329a:	5cd3      	ldrb	r3, [r2, r3]
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	40d3      	lsrs	r3, r2
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	08004bf0 	.word	0x08004bf0

080032b0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80032c4:	f7ff ff06 	bl	80030d4 <LL_RCC_PLL_GetMainSource>
 80032c8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d6:	d003      	beq.n	80032e0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80032d8:	e005      	b.n	80032e6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80032da:	4b1c      	ldr	r3, [pc, #112]	@ (800334c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80032dc:	617b      	str	r3, [r7, #20]
      break;
 80032de:	e005      	b.n	80032ec <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80032e2:	617b      	str	r3, [r7, #20]
      break;
 80032e4:	e002      	b.n	80032ec <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80032e6:	4b19      	ldr	r3, [pc, #100]	@ (800334c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80032e8:	617b      	str	r3, [r7, #20]
      break;
 80032ea:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d114      	bne.n	800331c <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80032f2:	f7ff ff27 	bl	8003144 <LL_RCC_PLL_GetDivider>
 80032f6:	4602      	mov	r2, r0
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fbb3 f4f2 	udiv	r4, r3, r2
 80032fe:	f7ff fef7 	bl	80030f0 <LL_RCC_PLL_GetN>
 8003302:	4603      	mov	r3, r0
 8003304:	fb03 f404 	mul.w	r4, r3, r4
 8003308:	f7ff ff00 	bl	800310c <LL_RCC_PLL_GetP>
 800330c:	4603      	mov	r3, r0
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	3301      	adds	r3, #1
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fbb4 f3f3 	udiv	r3, r4, r3
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e011      	b.n	8003340 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800331c:	f7ff ff12 	bl	8003144 <LL_RCC_PLL_GetDivider>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fbb3 f4f2 	udiv	r4, r3, r2
 8003328:	f7ff fee2 	bl	80030f0 <LL_RCC_PLL_GetN>
 800332c:	4603      	mov	r3, r0
 800332e:	fb03 f404 	mul.w	r4, r3, r4
 8003332:	f7ff fef9 	bl	8003128 <LL_RCC_PLL_GetR>
 8003336:	4603      	mov	r3, r0
 8003338:	0f1b      	lsrs	r3, r3, #28
 800333a:	fbb4 f3f3 	udiv	r3, r4, r3
 800333e:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003340:	693b      	ldr	r3, [r7, #16]
}
 8003342:	4618      	mov	r0, r3
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	bf00      	nop
 800334c:	00f42400 	.word	0x00f42400
 8003350:	007a1200 	.word	0x007a1200

08003354 <LL_TIM_SetPrescaler>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_TIM_SetAutoReload>:
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_TIM_SetRepetitionCounter>:
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	615a      	str	r2, [r3, #20]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3d      	ldr	r2, [pc, #244]	@ (80034d0 <LL_TIM_Init+0x108>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <LL_TIM_Init+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e6:	d00f      	beq.n	8003408 <LL_TIM_Init+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <LL_TIM_Init+0x10c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <LL_TIM_Init+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a39      	ldr	r2, [pc, #228]	@ (80034d8 <LL_TIM_Init+0x110>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <LL_TIM_Init+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a38      	ldr	r2, [pc, #224]	@ (80034dc <LL_TIM_Init+0x114>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <LL_TIM_Init+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a37      	ldr	r2, [pc, #220]	@ (80034e0 <LL_TIM_Init+0x118>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d106      	bne.n	8003416 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a2d      	ldr	r2, [pc, #180]	@ (80034d0 <LL_TIM_Init+0x108>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02b      	beq.n	8003476 <LL_TIM_Init+0xae>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003424:	d027      	beq.n	8003476 <LL_TIM_Init+0xae>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2a      	ldr	r2, [pc, #168]	@ (80034d4 <LL_TIM_Init+0x10c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d023      	beq.n	8003476 <LL_TIM_Init+0xae>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a29      	ldr	r2, [pc, #164]	@ (80034d8 <LL_TIM_Init+0x110>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01f      	beq.n	8003476 <LL_TIM_Init+0xae>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a28      	ldr	r2, [pc, #160]	@ (80034dc <LL_TIM_Init+0x114>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01b      	beq.n	8003476 <LL_TIM_Init+0xae>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a27      	ldr	r2, [pc, #156]	@ (80034e0 <LL_TIM_Init+0x118>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d017      	beq.n	8003476 <LL_TIM_Init+0xae>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a26      	ldr	r2, [pc, #152]	@ (80034e4 <LL_TIM_Init+0x11c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <LL_TIM_Init+0xae>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a25      	ldr	r2, [pc, #148]	@ (80034e8 <LL_TIM_Init+0x120>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00f      	beq.n	8003476 <LL_TIM_Init+0xae>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a24      	ldr	r2, [pc, #144]	@ (80034ec <LL_TIM_Init+0x124>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00b      	beq.n	8003476 <LL_TIM_Init+0xae>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a23      	ldr	r2, [pc, #140]	@ (80034f0 <LL_TIM_Init+0x128>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <LL_TIM_Init+0xae>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a22      	ldr	r2, [pc, #136]	@ (80034f4 <LL_TIM_Init+0x12c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d003      	beq.n	8003476 <LL_TIM_Init+0xae>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a21      	ldr	r2, [pc, #132]	@ (80034f8 <LL_TIM_Init+0x130>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d106      	bne.n	8003484 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff6d 	bl	8003370 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	4619      	mov	r1, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff59 	bl	8003354 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <LL_TIM_Init+0x108>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <LL_TIM_Init+0xea>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a0c      	ldr	r2, [pc, #48]	@ (80034e0 <LL_TIM_Init+0x118>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d105      	bne.n	80034be <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff67 	bl	800338c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ff72 	bl	80033a8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	40001800 	.word	0x40001800
 80034f4:	40001c00 	.word	0x40001c00
 80034f8:	40002000 	.word	0x40002000

080034fc <LL_USART_IsEnabled>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_USART_SetStopBitsLength>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	611a      	str	r2, [r3, #16]
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_USART_SetHWFlowCtrl>:
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	615a      	str	r2, [r3, #20]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_USART_SetBaudRate>:
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b0c0      	sub	sp, #256	@ 0x100
 8003576:	af00      	add	r7, sp, #0
 8003578:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800357c:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8003580:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003584:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003590:	f040 810c 	bne.w	80037ac <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003594:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003598:	2200      	movs	r2, #0
 800359a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800359e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035a6:	4622      	mov	r2, r4
 80035a8:	462b      	mov	r3, r5
 80035aa:	1891      	adds	r1, r2, r2
 80035ac:	6639      	str	r1, [r7, #96]	@ 0x60
 80035ae:	415b      	adcs	r3, r3
 80035b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80035b2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80035b6:	4621      	mov	r1, r4
 80035b8:	eb12 0801 	adds.w	r8, r2, r1
 80035bc:	4629      	mov	r1, r5
 80035be:	eb43 0901 	adc.w	r9, r3, r1
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d6:	4690      	mov	r8, r2
 80035d8:	4699      	mov	r9, r3
 80035da:	4623      	mov	r3, r4
 80035dc:	eb18 0303 	adds.w	r3, r8, r3
 80035e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035e4:	462b      	mov	r3, r5
 80035e6:	eb49 0303 	adc.w	r3, r9, r3
 80035ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80035f2:	2200      	movs	r2, #0
 80035f4:	469a      	mov	sl, r3
 80035f6:	4693      	mov	fp, r2
 80035f8:	eb1a 030a 	adds.w	r3, sl, sl
 80035fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035fe:	eb4b 030b 	adc.w	r3, fp, fp
 8003602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003604:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003608:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800360c:	f7fc fe50 	bl	80002b0 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4b64      	ldr	r3, [pc, #400]	@ (80037a8 <LL_USART_SetBaudRate+0x238>)
 8003616:	fba3 2302 	umull	r2, r3, r3, r2
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	b29b      	uxth	r3, r3
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	b29c      	uxth	r4, r3
 8003622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003626:	2200      	movs	r2, #0
 8003628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800362c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003630:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003634:	4642      	mov	r2, r8
 8003636:	464b      	mov	r3, r9
 8003638:	1891      	adds	r1, r2, r2
 800363a:	6539      	str	r1, [r7, #80]	@ 0x50
 800363c:	415b      	adcs	r3, r3
 800363e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003644:	4641      	mov	r1, r8
 8003646:	1851      	adds	r1, r2, r1
 8003648:	64b9      	str	r1, [r7, #72]	@ 0x48
 800364a:	4649      	mov	r1, r9
 800364c:	414b      	adcs	r3, r1
 800364e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800365c:	4659      	mov	r1, fp
 800365e:	00cb      	lsls	r3, r1, #3
 8003660:	4651      	mov	r1, sl
 8003662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003666:	4651      	mov	r1, sl
 8003668:	00ca      	lsls	r2, r1, #3
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	4603      	mov	r3, r0
 8003670:	4642      	mov	r2, r8
 8003672:	189b      	adds	r3, r3, r2
 8003674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003678:	464b      	mov	r3, r9
 800367a:	460a      	mov	r2, r1
 800367c:	eb42 0303 	adc.w	r3, r2, r3
 8003680:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003684:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800368e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003692:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003696:	460b      	mov	r3, r1
 8003698:	18db      	adds	r3, r3, r3
 800369a:	643b      	str	r3, [r7, #64]	@ 0x40
 800369c:	4613      	mov	r3, r2
 800369e:	eb42 0303 	adc.w	r3, r2, r3
 80036a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036a8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80036ac:	f7fc fe00 	bl	80002b0 <__aeabi_uldivmod>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4611      	mov	r1, r2
 80036b6:	4b3c      	ldr	r3, [pc, #240]	@ (80037a8 <LL_USART_SetBaudRate+0x238>)
 80036b8:	fba3 2301 	umull	r2, r3, r3, r1
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	2264      	movs	r2, #100	@ 0x64
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	1acb      	subs	r3, r1, r3
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036cc:	4b36      	ldr	r3, [pc, #216]	@ (80037a8 <LL_USART_SetBaudRate+0x238>)
 80036ce:	fba3 2302 	umull	r2, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4423      	add	r3, r4
 80036e2:	b29c      	uxth	r4, r3
 80036e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036ee:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036f2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80036f6:	4642      	mov	r2, r8
 80036f8:	464b      	mov	r3, r9
 80036fa:	1891      	adds	r1, r2, r2
 80036fc:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036fe:	415b      	adcs	r3, r3
 8003700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003702:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003706:	4641      	mov	r1, r8
 8003708:	1851      	adds	r1, r2, r1
 800370a:	6339      	str	r1, [r7, #48]	@ 0x30
 800370c:	4649      	mov	r1, r9
 800370e:	414b      	adcs	r3, r1
 8003710:	637b      	str	r3, [r7, #52]	@ 0x34
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800371e:	4659      	mov	r1, fp
 8003720:	00cb      	lsls	r3, r1, #3
 8003722:	4651      	mov	r1, sl
 8003724:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003728:	4651      	mov	r1, sl
 800372a:	00ca      	lsls	r2, r1, #3
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	4603      	mov	r3, r0
 8003732:	4642      	mov	r2, r8
 8003734:	189b      	adds	r3, r3, r2
 8003736:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800373a:	464b      	mov	r3, r9
 800373c:	460a      	mov	r2, r1
 800373e:	eb42 0303 	adc.w	r3, r2, r3
 8003742:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003746:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003750:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003754:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003758:	460b      	mov	r3, r1
 800375a:	18db      	adds	r3, r3, r3
 800375c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800375e:	4613      	mov	r3, r2
 8003760:	eb42 0303 	adc.w	r3, r2, r3
 8003764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800376a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800376e:	f7fc fd9f 	bl	80002b0 <__aeabi_uldivmod>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <LL_USART_SetBaudRate+0x238>)
 8003778:	fba3 1302 	umull	r1, r3, r3, r2
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	2164      	movs	r1, #100	@ 0x64
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	3332      	adds	r3, #50	@ 0x32
 800378a:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <LL_USART_SetBaudRate+0x238>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	b29b      	uxth	r3, r3
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	b29b      	uxth	r3, r3
 800379a:	4423      	add	r3, r4
 800379c:	b29b      	uxth	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a4:	609a      	str	r2, [r3, #8]
}
 80037a6:	e108      	b.n	80039ba <LL_USART_SetBaudRate+0x44a>
 80037a8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80037ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037b6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80037ba:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80037be:	4642      	mov	r2, r8
 80037c0:	464b      	mov	r3, r9
 80037c2:	1891      	adds	r1, r2, r2
 80037c4:	6239      	str	r1, [r7, #32]
 80037c6:	415b      	adcs	r3, r3
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ce:	4641      	mov	r1, r8
 80037d0:	1854      	adds	r4, r2, r1
 80037d2:	4649      	mov	r1, r9
 80037d4:	eb43 0501 	adc.w	r5, r3, r1
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	00eb      	lsls	r3, r5, #3
 80037e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037e6:	00e2      	lsls	r2, r4, #3
 80037e8:	4614      	mov	r4, r2
 80037ea:	461d      	mov	r5, r3
 80037ec:	4643      	mov	r3, r8
 80037ee:	18e3      	adds	r3, r4, r3
 80037f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037f4:	464b      	mov	r3, r9
 80037f6:	eb45 0303 	adc.w	r3, r5, r3
 80037fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80037fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003802:	2200      	movs	r2, #0
 8003804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003808:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003818:	4629      	mov	r1, r5
 800381a:	008b      	lsls	r3, r1, #2
 800381c:	4621      	mov	r1, r4
 800381e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003822:	4621      	mov	r1, r4
 8003824:	008a      	lsls	r2, r1, #2
 8003826:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800382a:	f7fc fd41 	bl	80002b0 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4b65      	ldr	r3, [pc, #404]	@ (80039c8 <LL_USART_SetBaudRate+0x458>)
 8003834:	fba3 2302 	umull	r2, r3, r3, r2
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	b29b      	uxth	r3, r3
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	b29c      	uxth	r4, r3
 8003840:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003844:	2200      	movs	r2, #0
 8003846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800384a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800384e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003852:	4642      	mov	r2, r8
 8003854:	464b      	mov	r3, r9
 8003856:	1891      	adds	r1, r2, r2
 8003858:	61b9      	str	r1, [r7, #24]
 800385a:	415b      	adcs	r3, r3
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003862:	4641      	mov	r1, r8
 8003864:	1851      	adds	r1, r2, r1
 8003866:	6139      	str	r1, [r7, #16]
 8003868:	4649      	mov	r1, r9
 800386a:	414b      	adcs	r3, r1
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800387a:	4659      	mov	r1, fp
 800387c:	00cb      	lsls	r3, r1, #3
 800387e:	4651      	mov	r1, sl
 8003880:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003884:	4651      	mov	r1, sl
 8003886:	00ca      	lsls	r2, r1, #3
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	4603      	mov	r3, r0
 800388e:	4642      	mov	r2, r8
 8003890:	189b      	adds	r3, r3, r2
 8003892:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003896:	464b      	mov	r3, r9
 8003898:	460a      	mov	r2, r1
 800389a:	eb42 0303 	adc.w	r3, r2, r3
 800389e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80038a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80038bc:	4649      	mov	r1, r9
 80038be:	008b      	lsls	r3, r1, #2
 80038c0:	4641      	mov	r1, r8
 80038c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c6:	4641      	mov	r1, r8
 80038c8:	008a      	lsls	r2, r1, #2
 80038ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80038ce:	f7fc fcef 	bl	80002b0 <__aeabi_uldivmod>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	4b3b      	ldr	r3, [pc, #236]	@ (80039c8 <LL_USART_SetBaudRate+0x458>)
 80038da:	fba3 2301 	umull	r2, r3, r3, r1
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2264      	movs	r2, #100	@ 0x64
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	1acb      	subs	r3, r1, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	3332      	adds	r3, #50	@ 0x32
 80038ec:	4a36      	ldr	r2, [pc, #216]	@ (80039c8 <LL_USART_SetBaudRate+0x458>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4423      	add	r3, r4
 80038fe:	b29c      	uxth	r4, r3
 8003900:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003904:	2200      	movs	r2, #0
 8003906:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003908:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800390a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800390e:	4642      	mov	r2, r8
 8003910:	464b      	mov	r3, r9
 8003912:	1891      	adds	r1, r2, r2
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	415b      	adcs	r3, r3
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800391e:	4641      	mov	r1, r8
 8003920:	1851      	adds	r1, r2, r1
 8003922:	6039      	str	r1, [r7, #0]
 8003924:	4649      	mov	r1, r9
 8003926:	414b      	adcs	r3, r1
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003936:	4659      	mov	r1, fp
 8003938:	00cb      	lsls	r3, r1, #3
 800393a:	4651      	mov	r1, sl
 800393c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003940:	4651      	mov	r1, sl
 8003942:	00ca      	lsls	r2, r1, #3
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	4603      	mov	r3, r0
 800394a:	4642      	mov	r2, r8
 800394c:	189b      	adds	r3, r3, r2
 800394e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003950:	464b      	mov	r3, r9
 8003952:	460a      	mov	r2, r1
 8003954:	eb42 0303 	adc.w	r3, r2, r3
 8003958:	677b      	str	r3, [r7, #116]	@ 0x74
 800395a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800395e:	2200      	movs	r2, #0
 8003960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003962:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003970:	4649      	mov	r1, r9
 8003972:	008b      	lsls	r3, r1, #2
 8003974:	4641      	mov	r1, r8
 8003976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800397a:	4641      	mov	r1, r8
 800397c:	008a      	lsls	r2, r1, #2
 800397e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003982:	f7fc fc95 	bl	80002b0 <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4b0f      	ldr	r3, [pc, #60]	@ (80039c8 <LL_USART_SetBaudRate+0x458>)
 800398c:	fba3 1302 	umull	r1, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	2164      	movs	r1, #100	@ 0x64
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	3332      	adds	r3, #50	@ 0x32
 800399e:	4a0a      	ldr	r2, [pc, #40]	@ (80039c8 <LL_USART_SetBaudRate+0x458>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	4423      	add	r3, r4
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039b8:	609a      	str	r2, [r3, #8]
}
 80039ba:	bf00      	nop
 80039bc:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	51eb851f 	.word	0x51eb851f

080039cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fd8c 	bl	80034fc <LL_USART_IsEnabled>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d15e      	bne.n	8003aa8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80039f2:	f023 030c 	bic.w	r3, r3, #12
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	6851      	ldr	r1, [r2, #4]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	4311      	orrs	r1, r2
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	6912      	ldr	r2, [r2, #16]
 8003a04:	4311      	orrs	r1, r2
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	6992      	ldr	r2, [r2, #24]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fd83 	bl	8003524 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fd90 	bl	800354a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003a2a:	f107 0308 	add.w	r3, r7, #8
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fb96 	bl	8003160 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab4 <LL_USART_Init+0xe8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d102      	bne.n	8003a42 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e021      	b.n	8003a86 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab8 <LL_USART_Init+0xec>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d102      	bne.n	8003a50 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	e01a      	b.n	8003a86 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a1a      	ldr	r2, [pc, #104]	@ (8003abc <LL_USART_Init+0xf0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d102      	bne.n	8003a5e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	e013      	b.n	8003a86 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a17      	ldr	r2, [pc, #92]	@ (8003ac0 <LL_USART_Init+0xf4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d102      	bne.n	8003a6c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e00c      	b.n	8003a86 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a15      	ldr	r2, [pc, #84]	@ (8003ac4 <LL_USART_Init+0xf8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d102      	bne.n	8003a7a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e005      	b.n	8003a86 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a12      	ldr	r2, [pc, #72]	@ (8003ac8 <LL_USART_Init+0xfc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003aa0:	69b9      	ldr	r1, [r7, #24]
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fd64 	bl	8003570 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003aa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40004400 	.word	0x40004400
 8003abc:	40004800 	.word	0x40004800
 8003ac0:	40011400 	.word	0x40011400
 8003ac4:	40004c00 	.word	0x40004c00
 8003ac8:	40005000 	.word	0x40005000

08003acc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	4a07      	ldr	r2, [pc, #28]	@ (8003afc <LL_InitTick+0x30>)
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003ae4:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <LL_InitTick+0x30>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aea:	4b04      	ldr	r3, [pc, #16]	@ (8003afc <LL_InitTick+0x30>)
 8003aec:	2205      	movs	r2, #5
 8003aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000e010 	.word	0xe000e010

08003b00 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003b08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ffdd 	bl	8003acc <LL_InitTick>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <LL_mDelay+0x48>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003b2a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d00c      	beq.n	8003b4e <LL_mDelay+0x32>
  {
    Delay++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3301      	adds	r3, #1
 8003b38:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003b3a:	e008      	b.n	8003b4e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003b3c:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <LL_mDelay+0x48>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <LL_mDelay+0x32>
    {
      Delay--;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f3      	bne.n	8003b3c <LL_mDelay+0x20>
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000e010 	.word	0xe000e010

08003b68 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003b70:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <LL_SetSystemCoreClock+0x1c>)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6013      	str	r3, [r2, #0]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	200002d8 	.word	0x200002d8

08003b88 <std>:
 8003b88:	2300      	movs	r3, #0
 8003b8a:	b510      	push	{r4, lr}
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b96:	6083      	str	r3, [r0, #8]
 8003b98:	8181      	strh	r1, [r0, #12]
 8003b9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b9c:	81c2      	strh	r2, [r0, #14]
 8003b9e:	6183      	str	r3, [r0, #24]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	305c      	adds	r0, #92	@ 0x5c
 8003ba6:	f000 f9f9 	bl	8003f9c <memset>
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <std+0x58>)
 8003bac:	6263      	str	r3, [r4, #36]	@ 0x24
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <std+0x5c>)
 8003bb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <std+0x60>)
 8003bb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bec <std+0x64>)
 8003bb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <std+0x68>)
 8003bbc:	6224      	str	r4, [r4, #32]
 8003bbe:	429c      	cmp	r4, r3
 8003bc0:	d006      	beq.n	8003bd0 <std+0x48>
 8003bc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003bc6:	4294      	cmp	r4, r2
 8003bc8:	d002      	beq.n	8003bd0 <std+0x48>
 8003bca:	33d0      	adds	r3, #208	@ 0xd0
 8003bcc:	429c      	cmp	r4, r3
 8003bce:	d105      	bne.n	8003bdc <std+0x54>
 8003bd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd8:	f000 ba58 	b.w	800408c <__retarget_lock_init_recursive>
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	bf00      	nop
 8003be0:	08003ded 	.word	0x08003ded
 8003be4:	08003e0f 	.word	0x08003e0f
 8003be8:	08003e47 	.word	0x08003e47
 8003bec:	08003e6b 	.word	0x08003e6b
 8003bf0:	200003cc 	.word	0x200003cc

08003bf4 <stdio_exit_handler>:
 8003bf4:	4a02      	ldr	r2, [pc, #8]	@ (8003c00 <stdio_exit_handler+0xc>)
 8003bf6:	4903      	ldr	r1, [pc, #12]	@ (8003c04 <stdio_exit_handler+0x10>)
 8003bf8:	4803      	ldr	r0, [pc, #12]	@ (8003c08 <stdio_exit_handler+0x14>)
 8003bfa:	f000 b869 	b.w	8003cd0 <_fwalk_sglue>
 8003bfe:	bf00      	nop
 8003c00:	200002dc 	.word	0x200002dc
 8003c04:	08004929 	.word	0x08004929
 8003c08:	200002ec 	.word	0x200002ec

08003c0c <cleanup_stdio>:
 8003c0c:	6841      	ldr	r1, [r0, #4]
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <cleanup_stdio+0x34>)
 8003c10:	4299      	cmp	r1, r3
 8003c12:	b510      	push	{r4, lr}
 8003c14:	4604      	mov	r4, r0
 8003c16:	d001      	beq.n	8003c1c <cleanup_stdio+0x10>
 8003c18:	f000 fe86 	bl	8004928 <_fflush_r>
 8003c1c:	68a1      	ldr	r1, [r4, #8]
 8003c1e:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <cleanup_stdio+0x38>)
 8003c20:	4299      	cmp	r1, r3
 8003c22:	d002      	beq.n	8003c2a <cleanup_stdio+0x1e>
 8003c24:	4620      	mov	r0, r4
 8003c26:	f000 fe7f 	bl	8004928 <_fflush_r>
 8003c2a:	68e1      	ldr	r1, [r4, #12]
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <cleanup_stdio+0x3c>)
 8003c2e:	4299      	cmp	r1, r3
 8003c30:	d004      	beq.n	8003c3c <cleanup_stdio+0x30>
 8003c32:	4620      	mov	r0, r4
 8003c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c38:	f000 be76 	b.w	8004928 <_fflush_r>
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	bf00      	nop
 8003c40:	200003cc 	.word	0x200003cc
 8003c44:	20000434 	.word	0x20000434
 8003c48:	2000049c 	.word	0x2000049c

08003c4c <global_stdio_init.part.0>:
 8003c4c:	b510      	push	{r4, lr}
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <global_stdio_init.part.0+0x30>)
 8003c50:	4c0b      	ldr	r4, [pc, #44]	@ (8003c80 <global_stdio_init.part.0+0x34>)
 8003c52:	4a0c      	ldr	r2, [pc, #48]	@ (8003c84 <global_stdio_init.part.0+0x38>)
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	4620      	mov	r0, r4
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2104      	movs	r1, #4
 8003c5c:	f7ff ff94 	bl	8003b88 <std>
 8003c60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c64:	2201      	movs	r2, #1
 8003c66:	2109      	movs	r1, #9
 8003c68:	f7ff ff8e 	bl	8003b88 <std>
 8003c6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c70:	2202      	movs	r2, #2
 8003c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c76:	2112      	movs	r1, #18
 8003c78:	f7ff bf86 	b.w	8003b88 <std>
 8003c7c:	20000504 	.word	0x20000504
 8003c80:	200003cc 	.word	0x200003cc
 8003c84:	08003bf5 	.word	0x08003bf5

08003c88 <__sfp_lock_acquire>:
 8003c88:	4801      	ldr	r0, [pc, #4]	@ (8003c90 <__sfp_lock_acquire+0x8>)
 8003c8a:	f000 ba00 	b.w	800408e <__retarget_lock_acquire_recursive>
 8003c8e:	bf00      	nop
 8003c90:	2000050d 	.word	0x2000050d

08003c94 <__sfp_lock_release>:
 8003c94:	4801      	ldr	r0, [pc, #4]	@ (8003c9c <__sfp_lock_release+0x8>)
 8003c96:	f000 b9fb 	b.w	8004090 <__retarget_lock_release_recursive>
 8003c9a:	bf00      	nop
 8003c9c:	2000050d 	.word	0x2000050d

08003ca0 <__sinit>:
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	f7ff fff0 	bl	8003c88 <__sfp_lock_acquire>
 8003ca8:	6a23      	ldr	r3, [r4, #32]
 8003caa:	b11b      	cbz	r3, 8003cb4 <__sinit+0x14>
 8003cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cb0:	f7ff bff0 	b.w	8003c94 <__sfp_lock_release>
 8003cb4:	4b04      	ldr	r3, [pc, #16]	@ (8003cc8 <__sinit+0x28>)
 8003cb6:	6223      	str	r3, [r4, #32]
 8003cb8:	4b04      	ldr	r3, [pc, #16]	@ (8003ccc <__sinit+0x2c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f5      	bne.n	8003cac <__sinit+0xc>
 8003cc0:	f7ff ffc4 	bl	8003c4c <global_stdio_init.part.0>
 8003cc4:	e7f2      	b.n	8003cac <__sinit+0xc>
 8003cc6:	bf00      	nop
 8003cc8:	08003c0d 	.word	0x08003c0d
 8003ccc:	20000504 	.word	0x20000504

08003cd0 <_fwalk_sglue>:
 8003cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	4607      	mov	r7, r0
 8003cd6:	4688      	mov	r8, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	2600      	movs	r6, #0
 8003cdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ce0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ce4:	d505      	bpl.n	8003cf2 <_fwalk_sglue+0x22>
 8003ce6:	6824      	ldr	r4, [r4, #0]
 8003ce8:	2c00      	cmp	r4, #0
 8003cea:	d1f7      	bne.n	8003cdc <_fwalk_sglue+0xc>
 8003cec:	4630      	mov	r0, r6
 8003cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cf2:	89ab      	ldrh	r3, [r5, #12]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d907      	bls.n	8003d08 <_fwalk_sglue+0x38>
 8003cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	d003      	beq.n	8003d08 <_fwalk_sglue+0x38>
 8003d00:	4629      	mov	r1, r5
 8003d02:	4638      	mov	r0, r7
 8003d04:	47c0      	blx	r8
 8003d06:	4306      	orrs	r6, r0
 8003d08:	3568      	adds	r5, #104	@ 0x68
 8003d0a:	e7e9      	b.n	8003ce0 <_fwalk_sglue+0x10>

08003d0c <iprintf>:
 8003d0c:	b40f      	push	{r0, r1, r2, r3}
 8003d0e:	b507      	push	{r0, r1, r2, lr}
 8003d10:	4906      	ldr	r1, [pc, #24]	@ (8003d2c <iprintf+0x20>)
 8003d12:	ab04      	add	r3, sp, #16
 8003d14:	6808      	ldr	r0, [r1, #0]
 8003d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d1a:	6881      	ldr	r1, [r0, #8]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	f000 fadb 	bl	80042d8 <_vfiprintf_r>
 8003d22:	b003      	add	sp, #12
 8003d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d28:	b004      	add	sp, #16
 8003d2a:	4770      	bx	lr
 8003d2c:	200002e8 	.word	0x200002e8

08003d30 <_puts_r>:
 8003d30:	6a03      	ldr	r3, [r0, #32]
 8003d32:	b570      	push	{r4, r5, r6, lr}
 8003d34:	6884      	ldr	r4, [r0, #8]
 8003d36:	4605      	mov	r5, r0
 8003d38:	460e      	mov	r6, r1
 8003d3a:	b90b      	cbnz	r3, 8003d40 <_puts_r+0x10>
 8003d3c:	f7ff ffb0 	bl	8003ca0 <__sinit>
 8003d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d42:	07db      	lsls	r3, r3, #31
 8003d44:	d405      	bmi.n	8003d52 <_puts_r+0x22>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	0598      	lsls	r0, r3, #22
 8003d4a:	d402      	bmi.n	8003d52 <_puts_r+0x22>
 8003d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d4e:	f000 f99e 	bl	800408e <__retarget_lock_acquire_recursive>
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	0719      	lsls	r1, r3, #28
 8003d56:	d502      	bpl.n	8003d5e <_puts_r+0x2e>
 8003d58:	6923      	ldr	r3, [r4, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d135      	bne.n	8003dca <_puts_r+0x9a>
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 f8c5 	bl	8003ef0 <__swsetup_r>
 8003d66:	b380      	cbz	r0, 8003dca <_puts_r+0x9a>
 8003d68:	f04f 35ff 	mov.w	r5, #4294967295
 8003d6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d6e:	07da      	lsls	r2, r3, #31
 8003d70:	d405      	bmi.n	8003d7e <_puts_r+0x4e>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	059b      	lsls	r3, r3, #22
 8003d76:	d402      	bmi.n	8003d7e <_puts_r+0x4e>
 8003d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d7a:	f000 f989 	bl	8004090 <__retarget_lock_release_recursive>
 8003d7e:	4628      	mov	r0, r5
 8003d80:	bd70      	pop	{r4, r5, r6, pc}
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da04      	bge.n	8003d90 <_puts_r+0x60>
 8003d86:	69a2      	ldr	r2, [r4, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	dc17      	bgt.n	8003dbc <_puts_r+0x8c>
 8003d8c:	290a      	cmp	r1, #10
 8003d8e:	d015      	beq.n	8003dbc <_puts_r+0x8c>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	6022      	str	r2, [r4, #0]
 8003d96:	7019      	strb	r1, [r3, #0]
 8003d98:	68a3      	ldr	r3, [r4, #8]
 8003d9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	60a3      	str	r3, [r4, #8]
 8003da2:	2900      	cmp	r1, #0
 8003da4:	d1ed      	bne.n	8003d82 <_puts_r+0x52>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	da11      	bge.n	8003dce <_puts_r+0x9e>
 8003daa:	4622      	mov	r2, r4
 8003dac:	210a      	movs	r1, #10
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f85f 	bl	8003e72 <__swbuf_r>
 8003db4:	3001      	adds	r0, #1
 8003db6:	d0d7      	beq.n	8003d68 <_puts_r+0x38>
 8003db8:	250a      	movs	r5, #10
 8003dba:	e7d7      	b.n	8003d6c <_puts_r+0x3c>
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f000 f857 	bl	8003e72 <__swbuf_r>
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d1e7      	bne.n	8003d98 <_puts_r+0x68>
 8003dc8:	e7ce      	b.n	8003d68 <_puts_r+0x38>
 8003dca:	3e01      	subs	r6, #1
 8003dcc:	e7e4      	b.n	8003d98 <_puts_r+0x68>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	6022      	str	r2, [r4, #0]
 8003dd4:	220a      	movs	r2, #10
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	e7ee      	b.n	8003db8 <_puts_r+0x88>
	...

08003ddc <puts>:
 8003ddc:	4b02      	ldr	r3, [pc, #8]	@ (8003de8 <puts+0xc>)
 8003dde:	4601      	mov	r1, r0
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f7ff bfa5 	b.w	8003d30 <_puts_r>
 8003de6:	bf00      	nop
 8003de8:	200002e8 	.word	0x200002e8

08003dec <__sread>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	460c      	mov	r4, r1
 8003df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df4:	f000 f8fc 	bl	8003ff0 <_read_r>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	bfab      	itete	ge
 8003dfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8003e00:	181b      	addge	r3, r3, r0
 8003e02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e06:	bfac      	ite	ge
 8003e08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e0a:	81a3      	strhlt	r3, [r4, #12]
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <__swrite>:
 8003e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e12:	461f      	mov	r7, r3
 8003e14:	898b      	ldrh	r3, [r1, #12]
 8003e16:	05db      	lsls	r3, r3, #23
 8003e18:	4605      	mov	r5, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	d505      	bpl.n	8003e2c <__swrite+0x1e>
 8003e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e24:	2302      	movs	r3, #2
 8003e26:	2200      	movs	r2, #0
 8003e28:	f000 f8d0 	bl	8003fcc <_lseek_r>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	4632      	mov	r2, r6
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	f000 b8e7 	b.w	8004014 <_write_r>

08003e46 <__sseek>:
 8003e46:	b510      	push	{r4, lr}
 8003e48:	460c      	mov	r4, r1
 8003e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4e:	f000 f8bd 	bl	8003fcc <_lseek_r>
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	bf15      	itete	ne
 8003e58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e62:	81a3      	strheq	r3, [r4, #12]
 8003e64:	bf18      	it	ne
 8003e66:	81a3      	strhne	r3, [r4, #12]
 8003e68:	bd10      	pop	{r4, pc}

08003e6a <__sclose>:
 8003e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6e:	f000 b89d 	b.w	8003fac <_close_r>

08003e72 <__swbuf_r>:
 8003e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e74:	460e      	mov	r6, r1
 8003e76:	4614      	mov	r4, r2
 8003e78:	4605      	mov	r5, r0
 8003e7a:	b118      	cbz	r0, 8003e84 <__swbuf_r+0x12>
 8003e7c:	6a03      	ldr	r3, [r0, #32]
 8003e7e:	b90b      	cbnz	r3, 8003e84 <__swbuf_r+0x12>
 8003e80:	f7ff ff0e 	bl	8003ca0 <__sinit>
 8003e84:	69a3      	ldr	r3, [r4, #24]
 8003e86:	60a3      	str	r3, [r4, #8]
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	071a      	lsls	r2, r3, #28
 8003e8c:	d501      	bpl.n	8003e92 <__swbuf_r+0x20>
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	b943      	cbnz	r3, 8003ea4 <__swbuf_r+0x32>
 8003e92:	4621      	mov	r1, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	f000 f82b 	bl	8003ef0 <__swsetup_r>
 8003e9a:	b118      	cbz	r0, 8003ea4 <__swbuf_r+0x32>
 8003e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	6922      	ldr	r2, [r4, #16]
 8003ea8:	1a98      	subs	r0, r3, r2
 8003eaa:	6963      	ldr	r3, [r4, #20]
 8003eac:	b2f6      	uxtb	r6, r6
 8003eae:	4283      	cmp	r3, r0
 8003eb0:	4637      	mov	r7, r6
 8003eb2:	dc05      	bgt.n	8003ec0 <__swbuf_r+0x4e>
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f000 fd36 	bl	8004928 <_fflush_r>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d1ed      	bne.n	8003e9c <__swbuf_r+0x2a>
 8003ec0:	68a3      	ldr	r3, [r4, #8]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	60a3      	str	r3, [r4, #8]
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	6022      	str	r2, [r4, #0]
 8003ecc:	701e      	strb	r6, [r3, #0]
 8003ece:	6962      	ldr	r2, [r4, #20]
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d004      	beq.n	8003ee0 <__swbuf_r+0x6e>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	07db      	lsls	r3, r3, #31
 8003eda:	d5e1      	bpl.n	8003ea0 <__swbuf_r+0x2e>
 8003edc:	2e0a      	cmp	r6, #10
 8003ede:	d1df      	bne.n	8003ea0 <__swbuf_r+0x2e>
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 fd20 	bl	8004928 <_fflush_r>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d0d9      	beq.n	8003ea0 <__swbuf_r+0x2e>
 8003eec:	e7d6      	b.n	8003e9c <__swbuf_r+0x2a>
	...

08003ef0 <__swsetup_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4b29      	ldr	r3, [pc, #164]	@ (8003f98 <__swsetup_r+0xa8>)
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	460c      	mov	r4, r1
 8003efa:	b118      	cbz	r0, 8003f04 <__swsetup_r+0x14>
 8003efc:	6a03      	ldr	r3, [r0, #32]
 8003efe:	b90b      	cbnz	r3, 8003f04 <__swsetup_r+0x14>
 8003f00:	f7ff fece 	bl	8003ca0 <__sinit>
 8003f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f08:	0719      	lsls	r1, r3, #28
 8003f0a:	d422      	bmi.n	8003f52 <__swsetup_r+0x62>
 8003f0c:	06da      	lsls	r2, r3, #27
 8003f0e:	d407      	bmi.n	8003f20 <__swsetup_r+0x30>
 8003f10:	2209      	movs	r2, #9
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1e:	e033      	b.n	8003f88 <__swsetup_r+0x98>
 8003f20:	0758      	lsls	r0, r3, #29
 8003f22:	d512      	bpl.n	8003f4a <__swsetup_r+0x5a>
 8003f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f26:	b141      	cbz	r1, 8003f3a <__swsetup_r+0x4a>
 8003f28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	d002      	beq.n	8003f36 <__swsetup_r+0x46>
 8003f30:	4628      	mov	r0, r5
 8003f32:	f000 f8af 	bl	8004094 <_free_r>
 8003f36:	2300      	movs	r3, #0
 8003f38:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	2300      	movs	r3, #0
 8003f44:	6063      	str	r3, [r4, #4]
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	6923      	ldr	r3, [r4, #16]
 8003f54:	b94b      	cbnz	r3, 8003f6a <__swsetup_r+0x7a>
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f60:	d003      	beq.n	8003f6a <__swsetup_r+0x7a>
 8003f62:	4621      	mov	r1, r4
 8003f64:	4628      	mov	r0, r5
 8003f66:	f000 fd2d 	bl	80049c4 <__smakebuf_r>
 8003f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f6e:	f013 0201 	ands.w	r2, r3, #1
 8003f72:	d00a      	beq.n	8003f8a <__swsetup_r+0x9a>
 8003f74:	2200      	movs	r2, #0
 8003f76:	60a2      	str	r2, [r4, #8]
 8003f78:	6962      	ldr	r2, [r4, #20]
 8003f7a:	4252      	negs	r2, r2
 8003f7c:	61a2      	str	r2, [r4, #24]
 8003f7e:	6922      	ldr	r2, [r4, #16]
 8003f80:	b942      	cbnz	r2, 8003f94 <__swsetup_r+0xa4>
 8003f82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f86:	d1c5      	bne.n	8003f14 <__swsetup_r+0x24>
 8003f88:	bd38      	pop	{r3, r4, r5, pc}
 8003f8a:	0799      	lsls	r1, r3, #30
 8003f8c:	bf58      	it	pl
 8003f8e:	6962      	ldrpl	r2, [r4, #20]
 8003f90:	60a2      	str	r2, [r4, #8]
 8003f92:	e7f4      	b.n	8003f7e <__swsetup_r+0x8e>
 8003f94:	2000      	movs	r0, #0
 8003f96:	e7f7      	b.n	8003f88 <__swsetup_r+0x98>
 8003f98:	200002e8 	.word	0x200002e8

08003f9c <memset>:
 8003f9c:	4402      	add	r2, r0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <memset+0xa>
 8003fa4:	4770      	bx	lr
 8003fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8003faa:	e7f9      	b.n	8003fa0 <memset+0x4>

08003fac <_close_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d06      	ldr	r5, [pc, #24]	@ (8003fc8 <_close_r+0x1c>)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	f7fe f83d 	bl	8002036 <_close>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_close_r+0x1a>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_close_r+0x1a>
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	20000508 	.word	0x20000508

08003fcc <_lseek_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d07      	ldr	r5, [pc, #28]	@ (8003fec <_lseek_r+0x20>)
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	602a      	str	r2, [r5, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7fe f852 	bl	8002084 <_lseek>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_lseek_r+0x1e>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_lseek_r+0x1e>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20000508 	.word	0x20000508

08003ff0 <_read_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4d07      	ldr	r5, [pc, #28]	@ (8004010 <_read_r+0x20>)
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	4608      	mov	r0, r1
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	602a      	str	r2, [r5, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f7fd fffc 	bl	8001ffc <_read>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_read_r+0x1e>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_read_r+0x1e>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	20000508 	.word	0x20000508

08004014 <_write_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d07      	ldr	r5, [pc, #28]	@ (8004034 <_write_r+0x20>)
 8004018:	4604      	mov	r4, r0
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	2200      	movs	r2, #0
 8004020:	602a      	str	r2, [r5, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7fd faea 	bl	80015fc <_write>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_write_r+0x1e>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_write_r+0x1e>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	20000508 	.word	0x20000508

08004038 <__errno>:
 8004038:	4b01      	ldr	r3, [pc, #4]	@ (8004040 <__errno+0x8>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	200002e8 	.word	0x200002e8

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4d0d      	ldr	r5, [pc, #52]	@ (800407c <__libc_init_array+0x38>)
 8004048:	4c0d      	ldr	r4, [pc, #52]	@ (8004080 <__libc_init_array+0x3c>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	2600      	movs	r6, #0
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	4d0b      	ldr	r5, [pc, #44]	@ (8004084 <__libc_init_array+0x40>)
 8004056:	4c0c      	ldr	r4, [pc, #48]	@ (8004088 <__libc_init_array+0x44>)
 8004058:	f000 fd22 	bl	8004aa0 <_init>
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	2600      	movs	r6, #0
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	f855 3b04 	ldr.w	r3, [r5], #4
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	f855 3b04 	ldr.w	r3, [r5], #4
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08004c3c 	.word	0x08004c3c
 8004080:	08004c3c 	.word	0x08004c3c
 8004084:	08004c3c 	.word	0x08004c3c
 8004088:	08004c40 	.word	0x08004c40

0800408c <__retarget_lock_init_recursive>:
 800408c:	4770      	bx	lr

0800408e <__retarget_lock_acquire_recursive>:
 800408e:	4770      	bx	lr

08004090 <__retarget_lock_release_recursive>:
 8004090:	4770      	bx	lr
	...

08004094 <_free_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4605      	mov	r5, r0
 8004098:	2900      	cmp	r1, #0
 800409a:	d041      	beq.n	8004120 <_free_r+0x8c>
 800409c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a0:	1f0c      	subs	r4, r1, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bfb8      	it	lt
 80040a6:	18e4      	addlt	r4, r4, r3
 80040a8:	f000 f8e0 	bl	800426c <__malloc_lock>
 80040ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <_free_r+0x90>)
 80040ae:	6813      	ldr	r3, [r2, #0]
 80040b0:	b933      	cbnz	r3, 80040c0 <_free_r+0x2c>
 80040b2:	6063      	str	r3, [r4, #4]
 80040b4:	6014      	str	r4, [r2, #0]
 80040b6:	4628      	mov	r0, r5
 80040b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040bc:	f000 b8dc 	b.w	8004278 <__malloc_unlock>
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	d908      	bls.n	80040d6 <_free_r+0x42>
 80040c4:	6820      	ldr	r0, [r4, #0]
 80040c6:	1821      	adds	r1, r4, r0
 80040c8:	428b      	cmp	r3, r1
 80040ca:	bf01      	itttt	eq
 80040cc:	6819      	ldreq	r1, [r3, #0]
 80040ce:	685b      	ldreq	r3, [r3, #4]
 80040d0:	1809      	addeq	r1, r1, r0
 80040d2:	6021      	streq	r1, [r4, #0]
 80040d4:	e7ed      	b.n	80040b2 <_free_r+0x1e>
 80040d6:	461a      	mov	r2, r3
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	b10b      	cbz	r3, 80040e0 <_free_r+0x4c>
 80040dc:	42a3      	cmp	r3, r4
 80040de:	d9fa      	bls.n	80040d6 <_free_r+0x42>
 80040e0:	6811      	ldr	r1, [r2, #0]
 80040e2:	1850      	adds	r0, r2, r1
 80040e4:	42a0      	cmp	r0, r4
 80040e6:	d10b      	bne.n	8004100 <_free_r+0x6c>
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	4401      	add	r1, r0
 80040ec:	1850      	adds	r0, r2, r1
 80040ee:	4283      	cmp	r3, r0
 80040f0:	6011      	str	r1, [r2, #0]
 80040f2:	d1e0      	bne.n	80040b6 <_free_r+0x22>
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	6053      	str	r3, [r2, #4]
 80040fa:	4408      	add	r0, r1
 80040fc:	6010      	str	r0, [r2, #0]
 80040fe:	e7da      	b.n	80040b6 <_free_r+0x22>
 8004100:	d902      	bls.n	8004108 <_free_r+0x74>
 8004102:	230c      	movs	r3, #12
 8004104:	602b      	str	r3, [r5, #0]
 8004106:	e7d6      	b.n	80040b6 <_free_r+0x22>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	1821      	adds	r1, r4, r0
 800410c:	428b      	cmp	r3, r1
 800410e:	bf04      	itt	eq
 8004110:	6819      	ldreq	r1, [r3, #0]
 8004112:	685b      	ldreq	r3, [r3, #4]
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	bf04      	itt	eq
 8004118:	1809      	addeq	r1, r1, r0
 800411a:	6021      	streq	r1, [r4, #0]
 800411c:	6054      	str	r4, [r2, #4]
 800411e:	e7ca      	b.n	80040b6 <_free_r+0x22>
 8004120:	bd38      	pop	{r3, r4, r5, pc}
 8004122:	bf00      	nop
 8004124:	20000514 	.word	0x20000514

08004128 <sbrk_aligned>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	4e0f      	ldr	r6, [pc, #60]	@ (8004168 <sbrk_aligned+0x40>)
 800412c:	460c      	mov	r4, r1
 800412e:	6831      	ldr	r1, [r6, #0]
 8004130:	4605      	mov	r5, r0
 8004132:	b911      	cbnz	r1, 800413a <sbrk_aligned+0x12>
 8004134:	f000 fca4 	bl	8004a80 <_sbrk_r>
 8004138:	6030      	str	r0, [r6, #0]
 800413a:	4621      	mov	r1, r4
 800413c:	4628      	mov	r0, r5
 800413e:	f000 fc9f 	bl	8004a80 <_sbrk_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d103      	bne.n	800414e <sbrk_aligned+0x26>
 8004146:	f04f 34ff 	mov.w	r4, #4294967295
 800414a:	4620      	mov	r0, r4
 800414c:	bd70      	pop	{r4, r5, r6, pc}
 800414e:	1cc4      	adds	r4, r0, #3
 8004150:	f024 0403 	bic.w	r4, r4, #3
 8004154:	42a0      	cmp	r0, r4
 8004156:	d0f8      	beq.n	800414a <sbrk_aligned+0x22>
 8004158:	1a21      	subs	r1, r4, r0
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fc90 	bl	8004a80 <_sbrk_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d1f2      	bne.n	800414a <sbrk_aligned+0x22>
 8004164:	e7ef      	b.n	8004146 <sbrk_aligned+0x1e>
 8004166:	bf00      	nop
 8004168:	20000510 	.word	0x20000510

0800416c <_malloc_r>:
 800416c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004170:	1ccd      	adds	r5, r1, #3
 8004172:	f025 0503 	bic.w	r5, r5, #3
 8004176:	3508      	adds	r5, #8
 8004178:	2d0c      	cmp	r5, #12
 800417a:	bf38      	it	cc
 800417c:	250c      	movcc	r5, #12
 800417e:	2d00      	cmp	r5, #0
 8004180:	4606      	mov	r6, r0
 8004182:	db01      	blt.n	8004188 <_malloc_r+0x1c>
 8004184:	42a9      	cmp	r1, r5
 8004186:	d904      	bls.n	8004192 <_malloc_r+0x26>
 8004188:	230c      	movs	r3, #12
 800418a:	6033      	str	r3, [r6, #0]
 800418c:	2000      	movs	r0, #0
 800418e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004268 <_malloc_r+0xfc>
 8004196:	f000 f869 	bl	800426c <__malloc_lock>
 800419a:	f8d8 3000 	ldr.w	r3, [r8]
 800419e:	461c      	mov	r4, r3
 80041a0:	bb44      	cbnz	r4, 80041f4 <_malloc_r+0x88>
 80041a2:	4629      	mov	r1, r5
 80041a4:	4630      	mov	r0, r6
 80041a6:	f7ff ffbf 	bl	8004128 <sbrk_aligned>
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	4604      	mov	r4, r0
 80041ae:	d158      	bne.n	8004262 <_malloc_r+0xf6>
 80041b0:	f8d8 4000 	ldr.w	r4, [r8]
 80041b4:	4627      	mov	r7, r4
 80041b6:	2f00      	cmp	r7, #0
 80041b8:	d143      	bne.n	8004242 <_malloc_r+0xd6>
 80041ba:	2c00      	cmp	r4, #0
 80041bc:	d04b      	beq.n	8004256 <_malloc_r+0xea>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	4639      	mov	r1, r7
 80041c2:	4630      	mov	r0, r6
 80041c4:	eb04 0903 	add.w	r9, r4, r3
 80041c8:	f000 fc5a 	bl	8004a80 <_sbrk_r>
 80041cc:	4581      	cmp	r9, r0
 80041ce:	d142      	bne.n	8004256 <_malloc_r+0xea>
 80041d0:	6821      	ldr	r1, [r4, #0]
 80041d2:	1a6d      	subs	r5, r5, r1
 80041d4:	4629      	mov	r1, r5
 80041d6:	4630      	mov	r0, r6
 80041d8:	f7ff ffa6 	bl	8004128 <sbrk_aligned>
 80041dc:	3001      	adds	r0, #1
 80041de:	d03a      	beq.n	8004256 <_malloc_r+0xea>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	442b      	add	r3, r5
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	bb62      	cbnz	r2, 8004248 <_malloc_r+0xdc>
 80041ee:	f8c8 7000 	str.w	r7, [r8]
 80041f2:	e00f      	b.n	8004214 <_malloc_r+0xa8>
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	1b52      	subs	r2, r2, r5
 80041f8:	d420      	bmi.n	800423c <_malloc_r+0xd0>
 80041fa:	2a0b      	cmp	r2, #11
 80041fc:	d917      	bls.n	800422e <_malloc_r+0xc2>
 80041fe:	1961      	adds	r1, r4, r5
 8004200:	42a3      	cmp	r3, r4
 8004202:	6025      	str	r5, [r4, #0]
 8004204:	bf18      	it	ne
 8004206:	6059      	strne	r1, [r3, #4]
 8004208:	6863      	ldr	r3, [r4, #4]
 800420a:	bf08      	it	eq
 800420c:	f8c8 1000 	streq.w	r1, [r8]
 8004210:	5162      	str	r2, [r4, r5]
 8004212:	604b      	str	r3, [r1, #4]
 8004214:	4630      	mov	r0, r6
 8004216:	f000 f82f 	bl	8004278 <__malloc_unlock>
 800421a:	f104 000b 	add.w	r0, r4, #11
 800421e:	1d23      	adds	r3, r4, #4
 8004220:	f020 0007 	bic.w	r0, r0, #7
 8004224:	1ac2      	subs	r2, r0, r3
 8004226:	bf1c      	itt	ne
 8004228:	1a1b      	subne	r3, r3, r0
 800422a:	50a3      	strne	r3, [r4, r2]
 800422c:	e7af      	b.n	800418e <_malloc_r+0x22>
 800422e:	6862      	ldr	r2, [r4, #4]
 8004230:	42a3      	cmp	r3, r4
 8004232:	bf0c      	ite	eq
 8004234:	f8c8 2000 	streq.w	r2, [r8]
 8004238:	605a      	strne	r2, [r3, #4]
 800423a:	e7eb      	b.n	8004214 <_malloc_r+0xa8>
 800423c:	4623      	mov	r3, r4
 800423e:	6864      	ldr	r4, [r4, #4]
 8004240:	e7ae      	b.n	80041a0 <_malloc_r+0x34>
 8004242:	463c      	mov	r4, r7
 8004244:	687f      	ldr	r7, [r7, #4]
 8004246:	e7b6      	b.n	80041b6 <_malloc_r+0x4a>
 8004248:	461a      	mov	r2, r3
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	42a3      	cmp	r3, r4
 800424e:	d1fb      	bne.n	8004248 <_malloc_r+0xdc>
 8004250:	2300      	movs	r3, #0
 8004252:	6053      	str	r3, [r2, #4]
 8004254:	e7de      	b.n	8004214 <_malloc_r+0xa8>
 8004256:	230c      	movs	r3, #12
 8004258:	6033      	str	r3, [r6, #0]
 800425a:	4630      	mov	r0, r6
 800425c:	f000 f80c 	bl	8004278 <__malloc_unlock>
 8004260:	e794      	b.n	800418c <_malloc_r+0x20>
 8004262:	6005      	str	r5, [r0, #0]
 8004264:	e7d6      	b.n	8004214 <_malloc_r+0xa8>
 8004266:	bf00      	nop
 8004268:	20000514 	.word	0x20000514

0800426c <__malloc_lock>:
 800426c:	4801      	ldr	r0, [pc, #4]	@ (8004274 <__malloc_lock+0x8>)
 800426e:	f7ff bf0e 	b.w	800408e <__retarget_lock_acquire_recursive>
 8004272:	bf00      	nop
 8004274:	2000050c 	.word	0x2000050c

08004278 <__malloc_unlock>:
 8004278:	4801      	ldr	r0, [pc, #4]	@ (8004280 <__malloc_unlock+0x8>)
 800427a:	f7ff bf09 	b.w	8004090 <__retarget_lock_release_recursive>
 800427e:	bf00      	nop
 8004280:	2000050c 	.word	0x2000050c

08004284 <__sfputc_r>:
 8004284:	6893      	ldr	r3, [r2, #8]
 8004286:	3b01      	subs	r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	b410      	push	{r4}
 800428c:	6093      	str	r3, [r2, #8]
 800428e:	da08      	bge.n	80042a2 <__sfputc_r+0x1e>
 8004290:	6994      	ldr	r4, [r2, #24]
 8004292:	42a3      	cmp	r3, r4
 8004294:	db01      	blt.n	800429a <__sfputc_r+0x16>
 8004296:	290a      	cmp	r1, #10
 8004298:	d103      	bne.n	80042a2 <__sfputc_r+0x1e>
 800429a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800429e:	f7ff bde8 	b.w	8003e72 <__swbuf_r>
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	1c58      	adds	r0, r3, #1
 80042a6:	6010      	str	r0, [r2, #0]
 80042a8:	7019      	strb	r1, [r3, #0]
 80042aa:	4608      	mov	r0, r1
 80042ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <__sfputs_r>:
 80042b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b4:	4606      	mov	r6, r0
 80042b6:	460f      	mov	r7, r1
 80042b8:	4614      	mov	r4, r2
 80042ba:	18d5      	adds	r5, r2, r3
 80042bc:	42ac      	cmp	r4, r5
 80042be:	d101      	bne.n	80042c4 <__sfputs_r+0x12>
 80042c0:	2000      	movs	r0, #0
 80042c2:	e007      	b.n	80042d4 <__sfputs_r+0x22>
 80042c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c8:	463a      	mov	r2, r7
 80042ca:	4630      	mov	r0, r6
 80042cc:	f7ff ffda 	bl	8004284 <__sfputc_r>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d1f3      	bne.n	80042bc <__sfputs_r+0xa>
 80042d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042d8 <_vfiprintf_r>:
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	460d      	mov	r5, r1
 80042de:	b09d      	sub	sp, #116	@ 0x74
 80042e0:	4614      	mov	r4, r2
 80042e2:	4698      	mov	r8, r3
 80042e4:	4606      	mov	r6, r0
 80042e6:	b118      	cbz	r0, 80042f0 <_vfiprintf_r+0x18>
 80042e8:	6a03      	ldr	r3, [r0, #32]
 80042ea:	b90b      	cbnz	r3, 80042f0 <_vfiprintf_r+0x18>
 80042ec:	f7ff fcd8 	bl	8003ca0 <__sinit>
 80042f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042f2:	07d9      	lsls	r1, r3, #31
 80042f4:	d405      	bmi.n	8004302 <_vfiprintf_r+0x2a>
 80042f6:	89ab      	ldrh	r3, [r5, #12]
 80042f8:	059a      	lsls	r2, r3, #22
 80042fa:	d402      	bmi.n	8004302 <_vfiprintf_r+0x2a>
 80042fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042fe:	f7ff fec6 	bl	800408e <__retarget_lock_acquire_recursive>
 8004302:	89ab      	ldrh	r3, [r5, #12]
 8004304:	071b      	lsls	r3, r3, #28
 8004306:	d501      	bpl.n	800430c <_vfiprintf_r+0x34>
 8004308:	692b      	ldr	r3, [r5, #16]
 800430a:	b99b      	cbnz	r3, 8004334 <_vfiprintf_r+0x5c>
 800430c:	4629      	mov	r1, r5
 800430e:	4630      	mov	r0, r6
 8004310:	f7ff fdee 	bl	8003ef0 <__swsetup_r>
 8004314:	b170      	cbz	r0, 8004334 <_vfiprintf_r+0x5c>
 8004316:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004318:	07dc      	lsls	r4, r3, #31
 800431a:	d504      	bpl.n	8004326 <_vfiprintf_r+0x4e>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	b01d      	add	sp, #116	@ 0x74
 8004322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004326:	89ab      	ldrh	r3, [r5, #12]
 8004328:	0598      	lsls	r0, r3, #22
 800432a:	d4f7      	bmi.n	800431c <_vfiprintf_r+0x44>
 800432c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800432e:	f7ff feaf 	bl	8004090 <__retarget_lock_release_recursive>
 8004332:	e7f3      	b.n	800431c <_vfiprintf_r+0x44>
 8004334:	2300      	movs	r3, #0
 8004336:	9309      	str	r3, [sp, #36]	@ 0x24
 8004338:	2320      	movs	r3, #32
 800433a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800433e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004342:	2330      	movs	r3, #48	@ 0x30
 8004344:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044f4 <_vfiprintf_r+0x21c>
 8004348:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800434c:	f04f 0901 	mov.w	r9, #1
 8004350:	4623      	mov	r3, r4
 8004352:	469a      	mov	sl, r3
 8004354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004358:	b10a      	cbz	r2, 800435e <_vfiprintf_r+0x86>
 800435a:	2a25      	cmp	r2, #37	@ 0x25
 800435c:	d1f9      	bne.n	8004352 <_vfiprintf_r+0x7a>
 800435e:	ebba 0b04 	subs.w	fp, sl, r4
 8004362:	d00b      	beq.n	800437c <_vfiprintf_r+0xa4>
 8004364:	465b      	mov	r3, fp
 8004366:	4622      	mov	r2, r4
 8004368:	4629      	mov	r1, r5
 800436a:	4630      	mov	r0, r6
 800436c:	f7ff ffa1 	bl	80042b2 <__sfputs_r>
 8004370:	3001      	adds	r0, #1
 8004372:	f000 80a7 	beq.w	80044c4 <_vfiprintf_r+0x1ec>
 8004376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004378:	445a      	add	r2, fp
 800437a:	9209      	str	r2, [sp, #36]	@ 0x24
 800437c:	f89a 3000 	ldrb.w	r3, [sl]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 809f 	beq.w	80044c4 <_vfiprintf_r+0x1ec>
 8004386:	2300      	movs	r3, #0
 8004388:	f04f 32ff 	mov.w	r2, #4294967295
 800438c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004390:	f10a 0a01 	add.w	sl, sl, #1
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	9307      	str	r3, [sp, #28]
 8004398:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800439c:	931a      	str	r3, [sp, #104]	@ 0x68
 800439e:	4654      	mov	r4, sl
 80043a0:	2205      	movs	r2, #5
 80043a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a6:	4853      	ldr	r0, [pc, #332]	@ (80044f4 <_vfiprintf_r+0x21c>)
 80043a8:	f7fb ff32 	bl	8000210 <memchr>
 80043ac:	9a04      	ldr	r2, [sp, #16]
 80043ae:	b9d8      	cbnz	r0, 80043e8 <_vfiprintf_r+0x110>
 80043b0:	06d1      	lsls	r1, r2, #27
 80043b2:	bf44      	itt	mi
 80043b4:	2320      	movmi	r3, #32
 80043b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043ba:	0713      	lsls	r3, r2, #28
 80043bc:	bf44      	itt	mi
 80043be:	232b      	movmi	r3, #43	@ 0x2b
 80043c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043c4:	f89a 3000 	ldrb.w	r3, [sl]
 80043c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80043ca:	d015      	beq.n	80043f8 <_vfiprintf_r+0x120>
 80043cc:	9a07      	ldr	r2, [sp, #28]
 80043ce:	4654      	mov	r4, sl
 80043d0:	2000      	movs	r0, #0
 80043d2:	f04f 0c0a 	mov.w	ip, #10
 80043d6:	4621      	mov	r1, r4
 80043d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043dc:	3b30      	subs	r3, #48	@ 0x30
 80043de:	2b09      	cmp	r3, #9
 80043e0:	d94b      	bls.n	800447a <_vfiprintf_r+0x1a2>
 80043e2:	b1b0      	cbz	r0, 8004412 <_vfiprintf_r+0x13a>
 80043e4:	9207      	str	r2, [sp, #28]
 80043e6:	e014      	b.n	8004412 <_vfiprintf_r+0x13a>
 80043e8:	eba0 0308 	sub.w	r3, r0, r8
 80043ec:	fa09 f303 	lsl.w	r3, r9, r3
 80043f0:	4313      	orrs	r3, r2
 80043f2:	9304      	str	r3, [sp, #16]
 80043f4:	46a2      	mov	sl, r4
 80043f6:	e7d2      	b.n	800439e <_vfiprintf_r+0xc6>
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	1d19      	adds	r1, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	9103      	str	r1, [sp, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	bfbb      	ittet	lt
 8004404:	425b      	neglt	r3, r3
 8004406:	f042 0202 	orrlt.w	r2, r2, #2
 800440a:	9307      	strge	r3, [sp, #28]
 800440c:	9307      	strlt	r3, [sp, #28]
 800440e:	bfb8      	it	lt
 8004410:	9204      	strlt	r2, [sp, #16]
 8004412:	7823      	ldrb	r3, [r4, #0]
 8004414:	2b2e      	cmp	r3, #46	@ 0x2e
 8004416:	d10a      	bne.n	800442e <_vfiprintf_r+0x156>
 8004418:	7863      	ldrb	r3, [r4, #1]
 800441a:	2b2a      	cmp	r3, #42	@ 0x2a
 800441c:	d132      	bne.n	8004484 <_vfiprintf_r+0x1ac>
 800441e:	9b03      	ldr	r3, [sp, #12]
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	9203      	str	r2, [sp, #12]
 8004426:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800442a:	3402      	adds	r4, #2
 800442c:	9305      	str	r3, [sp, #20]
 800442e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004504 <_vfiprintf_r+0x22c>
 8004432:	7821      	ldrb	r1, [r4, #0]
 8004434:	2203      	movs	r2, #3
 8004436:	4650      	mov	r0, sl
 8004438:	f7fb feea 	bl	8000210 <memchr>
 800443c:	b138      	cbz	r0, 800444e <_vfiprintf_r+0x176>
 800443e:	9b04      	ldr	r3, [sp, #16]
 8004440:	eba0 000a 	sub.w	r0, r0, sl
 8004444:	2240      	movs	r2, #64	@ 0x40
 8004446:	4082      	lsls	r2, r0
 8004448:	4313      	orrs	r3, r2
 800444a:	3401      	adds	r4, #1
 800444c:	9304      	str	r3, [sp, #16]
 800444e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004452:	4829      	ldr	r0, [pc, #164]	@ (80044f8 <_vfiprintf_r+0x220>)
 8004454:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004458:	2206      	movs	r2, #6
 800445a:	f7fb fed9 	bl	8000210 <memchr>
 800445e:	2800      	cmp	r0, #0
 8004460:	d03f      	beq.n	80044e2 <_vfiprintf_r+0x20a>
 8004462:	4b26      	ldr	r3, [pc, #152]	@ (80044fc <_vfiprintf_r+0x224>)
 8004464:	bb1b      	cbnz	r3, 80044ae <_vfiprintf_r+0x1d6>
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	3307      	adds	r3, #7
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	3308      	adds	r3, #8
 8004470:	9303      	str	r3, [sp, #12]
 8004472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004474:	443b      	add	r3, r7
 8004476:	9309      	str	r3, [sp, #36]	@ 0x24
 8004478:	e76a      	b.n	8004350 <_vfiprintf_r+0x78>
 800447a:	fb0c 3202 	mla	r2, ip, r2, r3
 800447e:	460c      	mov	r4, r1
 8004480:	2001      	movs	r0, #1
 8004482:	e7a8      	b.n	80043d6 <_vfiprintf_r+0xfe>
 8004484:	2300      	movs	r3, #0
 8004486:	3401      	adds	r4, #1
 8004488:	9305      	str	r3, [sp, #20]
 800448a:	4619      	mov	r1, r3
 800448c:	f04f 0c0a 	mov.w	ip, #10
 8004490:	4620      	mov	r0, r4
 8004492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004496:	3a30      	subs	r2, #48	@ 0x30
 8004498:	2a09      	cmp	r2, #9
 800449a:	d903      	bls.n	80044a4 <_vfiprintf_r+0x1cc>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0c6      	beq.n	800442e <_vfiprintf_r+0x156>
 80044a0:	9105      	str	r1, [sp, #20]
 80044a2:	e7c4      	b.n	800442e <_vfiprintf_r+0x156>
 80044a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044a8:	4604      	mov	r4, r0
 80044aa:	2301      	movs	r3, #1
 80044ac:	e7f0      	b.n	8004490 <_vfiprintf_r+0x1b8>
 80044ae:	ab03      	add	r3, sp, #12
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	462a      	mov	r2, r5
 80044b4:	4b12      	ldr	r3, [pc, #72]	@ (8004500 <_vfiprintf_r+0x228>)
 80044b6:	a904      	add	r1, sp, #16
 80044b8:	4630      	mov	r0, r6
 80044ba:	f3af 8000 	nop.w
 80044be:	4607      	mov	r7, r0
 80044c0:	1c78      	adds	r0, r7, #1
 80044c2:	d1d6      	bne.n	8004472 <_vfiprintf_r+0x19a>
 80044c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044c6:	07d9      	lsls	r1, r3, #31
 80044c8:	d405      	bmi.n	80044d6 <_vfiprintf_r+0x1fe>
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	059a      	lsls	r2, r3, #22
 80044ce:	d402      	bmi.n	80044d6 <_vfiprintf_r+0x1fe>
 80044d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044d2:	f7ff fddd 	bl	8004090 <__retarget_lock_release_recursive>
 80044d6:	89ab      	ldrh	r3, [r5, #12]
 80044d8:	065b      	lsls	r3, r3, #25
 80044da:	f53f af1f 	bmi.w	800431c <_vfiprintf_r+0x44>
 80044de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044e0:	e71e      	b.n	8004320 <_vfiprintf_r+0x48>
 80044e2:	ab03      	add	r3, sp, #12
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	462a      	mov	r2, r5
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <_vfiprintf_r+0x228>)
 80044ea:	a904      	add	r1, sp, #16
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 f879 	bl	80045e4 <_printf_i>
 80044f2:	e7e4      	b.n	80044be <_vfiprintf_r+0x1e6>
 80044f4:	08004c00 	.word	0x08004c00
 80044f8:	08004c0a 	.word	0x08004c0a
 80044fc:	00000000 	.word	0x00000000
 8004500:	080042b3 	.word	0x080042b3
 8004504:	08004c06 	.word	0x08004c06

08004508 <_printf_common>:
 8004508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	4616      	mov	r6, r2
 800450e:	4698      	mov	r8, r3
 8004510:	688a      	ldr	r2, [r1, #8]
 8004512:	690b      	ldr	r3, [r1, #16]
 8004514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004518:	4293      	cmp	r3, r2
 800451a:	bfb8      	it	lt
 800451c:	4613      	movlt	r3, r2
 800451e:	6033      	str	r3, [r6, #0]
 8004520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004524:	4607      	mov	r7, r0
 8004526:	460c      	mov	r4, r1
 8004528:	b10a      	cbz	r2, 800452e <_printf_common+0x26>
 800452a:	3301      	adds	r3, #1
 800452c:	6033      	str	r3, [r6, #0]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	0699      	lsls	r1, r3, #26
 8004532:	bf42      	ittt	mi
 8004534:	6833      	ldrmi	r3, [r6, #0]
 8004536:	3302      	addmi	r3, #2
 8004538:	6033      	strmi	r3, [r6, #0]
 800453a:	6825      	ldr	r5, [r4, #0]
 800453c:	f015 0506 	ands.w	r5, r5, #6
 8004540:	d106      	bne.n	8004550 <_printf_common+0x48>
 8004542:	f104 0a19 	add.w	sl, r4, #25
 8004546:	68e3      	ldr	r3, [r4, #12]
 8004548:	6832      	ldr	r2, [r6, #0]
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	42ab      	cmp	r3, r5
 800454e:	dc26      	bgt.n	800459e <_printf_common+0x96>
 8004550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004554:	6822      	ldr	r2, [r4, #0]
 8004556:	3b00      	subs	r3, #0
 8004558:	bf18      	it	ne
 800455a:	2301      	movne	r3, #1
 800455c:	0692      	lsls	r2, r2, #26
 800455e:	d42b      	bmi.n	80045b8 <_printf_common+0xb0>
 8004560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004564:	4641      	mov	r1, r8
 8004566:	4638      	mov	r0, r7
 8004568:	47c8      	blx	r9
 800456a:	3001      	adds	r0, #1
 800456c:	d01e      	beq.n	80045ac <_printf_common+0xa4>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	6922      	ldr	r2, [r4, #16]
 8004572:	f003 0306 	and.w	r3, r3, #6
 8004576:	2b04      	cmp	r3, #4
 8004578:	bf02      	ittt	eq
 800457a:	68e5      	ldreq	r5, [r4, #12]
 800457c:	6833      	ldreq	r3, [r6, #0]
 800457e:	1aed      	subeq	r5, r5, r3
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	bf0c      	ite	eq
 8004584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004588:	2500      	movne	r5, #0
 800458a:	4293      	cmp	r3, r2
 800458c:	bfc4      	itt	gt
 800458e:	1a9b      	subgt	r3, r3, r2
 8004590:	18ed      	addgt	r5, r5, r3
 8004592:	2600      	movs	r6, #0
 8004594:	341a      	adds	r4, #26
 8004596:	42b5      	cmp	r5, r6
 8004598:	d11a      	bne.n	80045d0 <_printf_common+0xc8>
 800459a:	2000      	movs	r0, #0
 800459c:	e008      	b.n	80045b0 <_printf_common+0xa8>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4641      	mov	r1, r8
 80045a4:	4638      	mov	r0, r7
 80045a6:	47c8      	blx	r9
 80045a8:	3001      	adds	r0, #1
 80045aa:	d103      	bne.n	80045b4 <_printf_common+0xac>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	3501      	adds	r5, #1
 80045b6:	e7c6      	b.n	8004546 <_printf_common+0x3e>
 80045b8:	18e1      	adds	r1, r4, r3
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	2030      	movs	r0, #48	@ 0x30
 80045be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045c2:	4422      	add	r2, r4
 80045c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045cc:	3302      	adds	r3, #2
 80045ce:	e7c7      	b.n	8004560 <_printf_common+0x58>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4622      	mov	r2, r4
 80045d4:	4641      	mov	r1, r8
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c8      	blx	r9
 80045da:	3001      	adds	r0, #1
 80045dc:	d0e6      	beq.n	80045ac <_printf_common+0xa4>
 80045de:	3601      	adds	r6, #1
 80045e0:	e7d9      	b.n	8004596 <_printf_common+0x8e>
	...

080045e4 <_printf_i>:
 80045e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e8:	7e0f      	ldrb	r7, [r1, #24]
 80045ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045ec:	2f78      	cmp	r7, #120	@ 0x78
 80045ee:	4691      	mov	r9, r2
 80045f0:	4680      	mov	r8, r0
 80045f2:	460c      	mov	r4, r1
 80045f4:	469a      	mov	sl, r3
 80045f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045fa:	d807      	bhi.n	800460c <_printf_i+0x28>
 80045fc:	2f62      	cmp	r7, #98	@ 0x62
 80045fe:	d80a      	bhi.n	8004616 <_printf_i+0x32>
 8004600:	2f00      	cmp	r7, #0
 8004602:	f000 80d1 	beq.w	80047a8 <_printf_i+0x1c4>
 8004606:	2f58      	cmp	r7, #88	@ 0x58
 8004608:	f000 80b8 	beq.w	800477c <_printf_i+0x198>
 800460c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004614:	e03a      	b.n	800468c <_printf_i+0xa8>
 8004616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800461a:	2b15      	cmp	r3, #21
 800461c:	d8f6      	bhi.n	800460c <_printf_i+0x28>
 800461e:	a101      	add	r1, pc, #4	@ (adr r1, 8004624 <_printf_i+0x40>)
 8004620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004624:	0800467d 	.word	0x0800467d
 8004628:	08004691 	.word	0x08004691
 800462c:	0800460d 	.word	0x0800460d
 8004630:	0800460d 	.word	0x0800460d
 8004634:	0800460d 	.word	0x0800460d
 8004638:	0800460d 	.word	0x0800460d
 800463c:	08004691 	.word	0x08004691
 8004640:	0800460d 	.word	0x0800460d
 8004644:	0800460d 	.word	0x0800460d
 8004648:	0800460d 	.word	0x0800460d
 800464c:	0800460d 	.word	0x0800460d
 8004650:	0800478f 	.word	0x0800478f
 8004654:	080046bb 	.word	0x080046bb
 8004658:	08004749 	.word	0x08004749
 800465c:	0800460d 	.word	0x0800460d
 8004660:	0800460d 	.word	0x0800460d
 8004664:	080047b1 	.word	0x080047b1
 8004668:	0800460d 	.word	0x0800460d
 800466c:	080046bb 	.word	0x080046bb
 8004670:	0800460d 	.word	0x0800460d
 8004674:	0800460d 	.word	0x0800460d
 8004678:	08004751 	.word	0x08004751
 800467c:	6833      	ldr	r3, [r6, #0]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6032      	str	r2, [r6, #0]
 8004684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800468c:	2301      	movs	r3, #1
 800468e:	e09c      	b.n	80047ca <_printf_i+0x1e6>
 8004690:	6833      	ldr	r3, [r6, #0]
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	1d19      	adds	r1, r3, #4
 8004696:	6031      	str	r1, [r6, #0]
 8004698:	0606      	lsls	r6, r0, #24
 800469a:	d501      	bpl.n	80046a0 <_printf_i+0xbc>
 800469c:	681d      	ldr	r5, [r3, #0]
 800469e:	e003      	b.n	80046a8 <_printf_i+0xc4>
 80046a0:	0645      	lsls	r5, r0, #25
 80046a2:	d5fb      	bpl.n	800469c <_printf_i+0xb8>
 80046a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	da03      	bge.n	80046b4 <_printf_i+0xd0>
 80046ac:	232d      	movs	r3, #45	@ 0x2d
 80046ae:	426d      	negs	r5, r5
 80046b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046b4:	4858      	ldr	r0, [pc, #352]	@ (8004818 <_printf_i+0x234>)
 80046b6:	230a      	movs	r3, #10
 80046b8:	e011      	b.n	80046de <_printf_i+0xfa>
 80046ba:	6821      	ldr	r1, [r4, #0]
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	0608      	lsls	r0, r1, #24
 80046c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80046c4:	d402      	bmi.n	80046cc <_printf_i+0xe8>
 80046c6:	0649      	lsls	r1, r1, #25
 80046c8:	bf48      	it	mi
 80046ca:	b2ad      	uxthmi	r5, r5
 80046cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80046ce:	4852      	ldr	r0, [pc, #328]	@ (8004818 <_printf_i+0x234>)
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	bf14      	ite	ne
 80046d4:	230a      	movne	r3, #10
 80046d6:	2308      	moveq	r3, #8
 80046d8:	2100      	movs	r1, #0
 80046da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046de:	6866      	ldr	r6, [r4, #4]
 80046e0:	60a6      	str	r6, [r4, #8]
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	db05      	blt.n	80046f2 <_printf_i+0x10e>
 80046e6:	6821      	ldr	r1, [r4, #0]
 80046e8:	432e      	orrs	r6, r5
 80046ea:	f021 0104 	bic.w	r1, r1, #4
 80046ee:	6021      	str	r1, [r4, #0]
 80046f0:	d04b      	beq.n	800478a <_printf_i+0x1a6>
 80046f2:	4616      	mov	r6, r2
 80046f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80046f8:	fb03 5711 	mls	r7, r3, r1, r5
 80046fc:	5dc7      	ldrb	r7, [r0, r7]
 80046fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004702:	462f      	mov	r7, r5
 8004704:	42bb      	cmp	r3, r7
 8004706:	460d      	mov	r5, r1
 8004708:	d9f4      	bls.n	80046f4 <_printf_i+0x110>
 800470a:	2b08      	cmp	r3, #8
 800470c:	d10b      	bne.n	8004726 <_printf_i+0x142>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	07df      	lsls	r7, r3, #31
 8004712:	d508      	bpl.n	8004726 <_printf_i+0x142>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	6861      	ldr	r1, [r4, #4]
 8004718:	4299      	cmp	r1, r3
 800471a:	bfde      	ittt	le
 800471c:	2330      	movle	r3, #48	@ 0x30
 800471e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004722:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004726:	1b92      	subs	r2, r2, r6
 8004728:	6122      	str	r2, [r4, #16]
 800472a:	f8cd a000 	str.w	sl, [sp]
 800472e:	464b      	mov	r3, r9
 8004730:	aa03      	add	r2, sp, #12
 8004732:	4621      	mov	r1, r4
 8004734:	4640      	mov	r0, r8
 8004736:	f7ff fee7 	bl	8004508 <_printf_common>
 800473a:	3001      	adds	r0, #1
 800473c:	d14a      	bne.n	80047d4 <_printf_i+0x1f0>
 800473e:	f04f 30ff 	mov.w	r0, #4294967295
 8004742:	b004      	add	sp, #16
 8004744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	f043 0320 	orr.w	r3, r3, #32
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	4832      	ldr	r0, [pc, #200]	@ (800481c <_printf_i+0x238>)
 8004752:	2778      	movs	r7, #120	@ 0x78
 8004754:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	6831      	ldr	r1, [r6, #0]
 800475c:	061f      	lsls	r7, r3, #24
 800475e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004762:	d402      	bmi.n	800476a <_printf_i+0x186>
 8004764:	065f      	lsls	r7, r3, #25
 8004766:	bf48      	it	mi
 8004768:	b2ad      	uxthmi	r5, r5
 800476a:	6031      	str	r1, [r6, #0]
 800476c:	07d9      	lsls	r1, r3, #31
 800476e:	bf44      	itt	mi
 8004770:	f043 0320 	orrmi.w	r3, r3, #32
 8004774:	6023      	strmi	r3, [r4, #0]
 8004776:	b11d      	cbz	r5, 8004780 <_printf_i+0x19c>
 8004778:	2310      	movs	r3, #16
 800477a:	e7ad      	b.n	80046d8 <_printf_i+0xf4>
 800477c:	4826      	ldr	r0, [pc, #152]	@ (8004818 <_printf_i+0x234>)
 800477e:	e7e9      	b.n	8004754 <_printf_i+0x170>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	f023 0320 	bic.w	r3, r3, #32
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	e7f6      	b.n	8004778 <_printf_i+0x194>
 800478a:	4616      	mov	r6, r2
 800478c:	e7bd      	b.n	800470a <_printf_i+0x126>
 800478e:	6833      	ldr	r3, [r6, #0]
 8004790:	6825      	ldr	r5, [r4, #0]
 8004792:	6961      	ldr	r1, [r4, #20]
 8004794:	1d18      	adds	r0, r3, #4
 8004796:	6030      	str	r0, [r6, #0]
 8004798:	062e      	lsls	r6, r5, #24
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	d501      	bpl.n	80047a2 <_printf_i+0x1be>
 800479e:	6019      	str	r1, [r3, #0]
 80047a0:	e002      	b.n	80047a8 <_printf_i+0x1c4>
 80047a2:	0668      	lsls	r0, r5, #25
 80047a4:	d5fb      	bpl.n	800479e <_printf_i+0x1ba>
 80047a6:	8019      	strh	r1, [r3, #0]
 80047a8:	2300      	movs	r3, #0
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	4616      	mov	r6, r2
 80047ae:	e7bc      	b.n	800472a <_printf_i+0x146>
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	6032      	str	r2, [r6, #0]
 80047b6:	681e      	ldr	r6, [r3, #0]
 80047b8:	6862      	ldr	r2, [r4, #4]
 80047ba:	2100      	movs	r1, #0
 80047bc:	4630      	mov	r0, r6
 80047be:	f7fb fd27 	bl	8000210 <memchr>
 80047c2:	b108      	cbz	r0, 80047c8 <_printf_i+0x1e4>
 80047c4:	1b80      	subs	r0, r0, r6
 80047c6:	6060      	str	r0, [r4, #4]
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	6123      	str	r3, [r4, #16]
 80047cc:	2300      	movs	r3, #0
 80047ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047d2:	e7aa      	b.n	800472a <_printf_i+0x146>
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	4632      	mov	r2, r6
 80047d8:	4649      	mov	r1, r9
 80047da:	4640      	mov	r0, r8
 80047dc:	47d0      	blx	sl
 80047de:	3001      	adds	r0, #1
 80047e0:	d0ad      	beq.n	800473e <_printf_i+0x15a>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	079b      	lsls	r3, r3, #30
 80047e6:	d413      	bmi.n	8004810 <_printf_i+0x22c>
 80047e8:	68e0      	ldr	r0, [r4, #12]
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	4298      	cmp	r0, r3
 80047ee:	bfb8      	it	lt
 80047f0:	4618      	movlt	r0, r3
 80047f2:	e7a6      	b.n	8004742 <_printf_i+0x15e>
 80047f4:	2301      	movs	r3, #1
 80047f6:	4632      	mov	r2, r6
 80047f8:	4649      	mov	r1, r9
 80047fa:	4640      	mov	r0, r8
 80047fc:	47d0      	blx	sl
 80047fe:	3001      	adds	r0, #1
 8004800:	d09d      	beq.n	800473e <_printf_i+0x15a>
 8004802:	3501      	adds	r5, #1
 8004804:	68e3      	ldr	r3, [r4, #12]
 8004806:	9903      	ldr	r1, [sp, #12]
 8004808:	1a5b      	subs	r3, r3, r1
 800480a:	42ab      	cmp	r3, r5
 800480c:	dcf2      	bgt.n	80047f4 <_printf_i+0x210>
 800480e:	e7eb      	b.n	80047e8 <_printf_i+0x204>
 8004810:	2500      	movs	r5, #0
 8004812:	f104 0619 	add.w	r6, r4, #25
 8004816:	e7f5      	b.n	8004804 <_printf_i+0x220>
 8004818:	08004c11 	.word	0x08004c11
 800481c:	08004c22 	.word	0x08004c22

08004820 <__sflush_r>:
 8004820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004828:	0716      	lsls	r6, r2, #28
 800482a:	4605      	mov	r5, r0
 800482c:	460c      	mov	r4, r1
 800482e:	d454      	bmi.n	80048da <__sflush_r+0xba>
 8004830:	684b      	ldr	r3, [r1, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	dc02      	bgt.n	800483c <__sflush_r+0x1c>
 8004836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	dd48      	ble.n	80048ce <__sflush_r+0xae>
 800483c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800483e:	2e00      	cmp	r6, #0
 8004840:	d045      	beq.n	80048ce <__sflush_r+0xae>
 8004842:	2300      	movs	r3, #0
 8004844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004848:	682f      	ldr	r7, [r5, #0]
 800484a:	6a21      	ldr	r1, [r4, #32]
 800484c:	602b      	str	r3, [r5, #0]
 800484e:	d030      	beq.n	80048b2 <__sflush_r+0x92>
 8004850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	0759      	lsls	r1, r3, #29
 8004856:	d505      	bpl.n	8004864 <__sflush_r+0x44>
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800485e:	b10b      	cbz	r3, 8004864 <__sflush_r+0x44>
 8004860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004868:	6a21      	ldr	r1, [r4, #32]
 800486a:	4628      	mov	r0, r5
 800486c:	47b0      	blx	r6
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	d106      	bne.n	8004882 <__sflush_r+0x62>
 8004874:	6829      	ldr	r1, [r5, #0]
 8004876:	291d      	cmp	r1, #29
 8004878:	d82b      	bhi.n	80048d2 <__sflush_r+0xb2>
 800487a:	4a2a      	ldr	r2, [pc, #168]	@ (8004924 <__sflush_r+0x104>)
 800487c:	40ca      	lsrs	r2, r1
 800487e:	07d6      	lsls	r6, r2, #31
 8004880:	d527      	bpl.n	80048d2 <__sflush_r+0xb2>
 8004882:	2200      	movs	r2, #0
 8004884:	6062      	str	r2, [r4, #4]
 8004886:	04d9      	lsls	r1, r3, #19
 8004888:	6922      	ldr	r2, [r4, #16]
 800488a:	6022      	str	r2, [r4, #0]
 800488c:	d504      	bpl.n	8004898 <__sflush_r+0x78>
 800488e:	1c42      	adds	r2, r0, #1
 8004890:	d101      	bne.n	8004896 <__sflush_r+0x76>
 8004892:	682b      	ldr	r3, [r5, #0]
 8004894:	b903      	cbnz	r3, 8004898 <__sflush_r+0x78>
 8004896:	6560      	str	r0, [r4, #84]	@ 0x54
 8004898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800489a:	602f      	str	r7, [r5, #0]
 800489c:	b1b9      	cbz	r1, 80048ce <__sflush_r+0xae>
 800489e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048a2:	4299      	cmp	r1, r3
 80048a4:	d002      	beq.n	80048ac <__sflush_r+0x8c>
 80048a6:	4628      	mov	r0, r5
 80048a8:	f7ff fbf4 	bl	8004094 <_free_r>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80048b0:	e00d      	b.n	80048ce <__sflush_r+0xae>
 80048b2:	2301      	movs	r3, #1
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b0      	blx	r6
 80048b8:	4602      	mov	r2, r0
 80048ba:	1c50      	adds	r0, r2, #1
 80048bc:	d1c9      	bne.n	8004852 <__sflush_r+0x32>
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0c6      	beq.n	8004852 <__sflush_r+0x32>
 80048c4:	2b1d      	cmp	r3, #29
 80048c6:	d001      	beq.n	80048cc <__sflush_r+0xac>
 80048c8:	2b16      	cmp	r3, #22
 80048ca:	d11e      	bne.n	800490a <__sflush_r+0xea>
 80048cc:	602f      	str	r7, [r5, #0]
 80048ce:	2000      	movs	r0, #0
 80048d0:	e022      	b.n	8004918 <__sflush_r+0xf8>
 80048d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	e01b      	b.n	8004912 <__sflush_r+0xf2>
 80048da:	690f      	ldr	r7, [r1, #16]
 80048dc:	2f00      	cmp	r7, #0
 80048de:	d0f6      	beq.n	80048ce <__sflush_r+0xae>
 80048e0:	0793      	lsls	r3, r2, #30
 80048e2:	680e      	ldr	r6, [r1, #0]
 80048e4:	bf08      	it	eq
 80048e6:	694b      	ldreq	r3, [r1, #20]
 80048e8:	600f      	str	r7, [r1, #0]
 80048ea:	bf18      	it	ne
 80048ec:	2300      	movne	r3, #0
 80048ee:	eba6 0807 	sub.w	r8, r6, r7
 80048f2:	608b      	str	r3, [r1, #8]
 80048f4:	f1b8 0f00 	cmp.w	r8, #0
 80048f8:	dde9      	ble.n	80048ce <__sflush_r+0xae>
 80048fa:	6a21      	ldr	r1, [r4, #32]
 80048fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048fe:	4643      	mov	r3, r8
 8004900:	463a      	mov	r2, r7
 8004902:	4628      	mov	r0, r5
 8004904:	47b0      	blx	r6
 8004906:	2800      	cmp	r0, #0
 8004908:	dc08      	bgt.n	800491c <__sflush_r+0xfc>
 800490a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	4407      	add	r7, r0
 800491e:	eba8 0800 	sub.w	r8, r8, r0
 8004922:	e7e7      	b.n	80048f4 <__sflush_r+0xd4>
 8004924:	20400001 	.word	0x20400001

08004928 <_fflush_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	690b      	ldr	r3, [r1, #16]
 800492c:	4605      	mov	r5, r0
 800492e:	460c      	mov	r4, r1
 8004930:	b913      	cbnz	r3, 8004938 <_fflush_r+0x10>
 8004932:	2500      	movs	r5, #0
 8004934:	4628      	mov	r0, r5
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	b118      	cbz	r0, 8004942 <_fflush_r+0x1a>
 800493a:	6a03      	ldr	r3, [r0, #32]
 800493c:	b90b      	cbnz	r3, 8004942 <_fflush_r+0x1a>
 800493e:	f7ff f9af 	bl	8003ca0 <__sinit>
 8004942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f3      	beq.n	8004932 <_fflush_r+0xa>
 800494a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800494c:	07d0      	lsls	r0, r2, #31
 800494e:	d404      	bmi.n	800495a <_fflush_r+0x32>
 8004950:	0599      	lsls	r1, r3, #22
 8004952:	d402      	bmi.n	800495a <_fflush_r+0x32>
 8004954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004956:	f7ff fb9a 	bl	800408e <__retarget_lock_acquire_recursive>
 800495a:	4628      	mov	r0, r5
 800495c:	4621      	mov	r1, r4
 800495e:	f7ff ff5f 	bl	8004820 <__sflush_r>
 8004962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004964:	07da      	lsls	r2, r3, #31
 8004966:	4605      	mov	r5, r0
 8004968:	d4e4      	bmi.n	8004934 <_fflush_r+0xc>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	059b      	lsls	r3, r3, #22
 800496e:	d4e1      	bmi.n	8004934 <_fflush_r+0xc>
 8004970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004972:	f7ff fb8d 	bl	8004090 <__retarget_lock_release_recursive>
 8004976:	e7dd      	b.n	8004934 <_fflush_r+0xc>

08004978 <__swhatbuf_r>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	460c      	mov	r4, r1
 800497c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004980:	2900      	cmp	r1, #0
 8004982:	b096      	sub	sp, #88	@ 0x58
 8004984:	4615      	mov	r5, r2
 8004986:	461e      	mov	r6, r3
 8004988:	da0d      	bge.n	80049a6 <__swhatbuf_r+0x2e>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	bf14      	ite	ne
 8004996:	2340      	movne	r3, #64	@ 0x40
 8004998:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800499c:	2000      	movs	r0, #0
 800499e:	6031      	str	r1, [r6, #0]
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	b016      	add	sp, #88	@ 0x58
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	466a      	mov	r2, sp
 80049a8:	f000 f848 	bl	8004a3c <_fstat_r>
 80049ac:	2800      	cmp	r0, #0
 80049ae:	dbec      	blt.n	800498a <__swhatbuf_r+0x12>
 80049b0:	9901      	ldr	r1, [sp, #4]
 80049b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80049b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80049ba:	4259      	negs	r1, r3
 80049bc:	4159      	adcs	r1, r3
 80049be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049c2:	e7eb      	b.n	800499c <__swhatbuf_r+0x24>

080049c4 <__smakebuf_r>:
 80049c4:	898b      	ldrh	r3, [r1, #12]
 80049c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049c8:	079d      	lsls	r5, r3, #30
 80049ca:	4606      	mov	r6, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	d507      	bpl.n	80049e0 <__smakebuf_r+0x1c>
 80049d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	2301      	movs	r3, #1
 80049da:	6163      	str	r3, [r4, #20]
 80049dc:	b003      	add	sp, #12
 80049de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e0:	ab01      	add	r3, sp, #4
 80049e2:	466a      	mov	r2, sp
 80049e4:	f7ff ffc8 	bl	8004978 <__swhatbuf_r>
 80049e8:	9f00      	ldr	r7, [sp, #0]
 80049ea:	4605      	mov	r5, r0
 80049ec:	4639      	mov	r1, r7
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff fbbc 	bl	800416c <_malloc_r>
 80049f4:	b948      	cbnz	r0, 8004a0a <__smakebuf_r+0x46>
 80049f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049fa:	059a      	lsls	r2, r3, #22
 80049fc:	d4ee      	bmi.n	80049dc <__smakebuf_r+0x18>
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	f043 0302 	orr.w	r3, r3, #2
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	e7e2      	b.n	80049d0 <__smakebuf_r+0xc>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	6020      	str	r0, [r4, #0]
 8004a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a12:	81a3      	strh	r3, [r4, #12]
 8004a14:	9b01      	ldr	r3, [sp, #4]
 8004a16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a1a:	b15b      	cbz	r3, 8004a34 <__smakebuf_r+0x70>
 8004a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a20:	4630      	mov	r0, r6
 8004a22:	f000 f81d 	bl	8004a60 <_isatty_r>
 8004a26:	b128      	cbz	r0, 8004a34 <__smakebuf_r+0x70>
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	f023 0303 	bic.w	r3, r3, #3
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	81a3      	strh	r3, [r4, #12]
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	431d      	orrs	r5, r3
 8004a38:	81a5      	strh	r5, [r4, #12]
 8004a3a:	e7cf      	b.n	80049dc <__smakebuf_r+0x18>

08004a3c <_fstat_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d07      	ldr	r5, [pc, #28]	@ (8004a5c <_fstat_r+0x20>)
 8004a40:	2300      	movs	r3, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	602b      	str	r3, [r5, #0]
 8004a4a:	f7fd fb00 	bl	800204e <_fstat>
 8004a4e:	1c43      	adds	r3, r0, #1
 8004a50:	d102      	bne.n	8004a58 <_fstat_r+0x1c>
 8004a52:	682b      	ldr	r3, [r5, #0]
 8004a54:	b103      	cbz	r3, 8004a58 <_fstat_r+0x1c>
 8004a56:	6023      	str	r3, [r4, #0]
 8004a58:	bd38      	pop	{r3, r4, r5, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000508 	.word	0x20000508

08004a60 <_isatty_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d06      	ldr	r5, [pc, #24]	@ (8004a7c <_isatty_r+0x1c>)
 8004a64:	2300      	movs	r3, #0
 8004a66:	4604      	mov	r4, r0
 8004a68:	4608      	mov	r0, r1
 8004a6a:	602b      	str	r3, [r5, #0]
 8004a6c:	f7fd faff 	bl	800206e <_isatty>
 8004a70:	1c43      	adds	r3, r0, #1
 8004a72:	d102      	bne.n	8004a7a <_isatty_r+0x1a>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b103      	cbz	r3, 8004a7a <_isatty_r+0x1a>
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	20000508 	.word	0x20000508

08004a80 <_sbrk_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4d06      	ldr	r5, [pc, #24]	@ (8004a9c <_sbrk_r+0x1c>)
 8004a84:	2300      	movs	r3, #0
 8004a86:	4604      	mov	r4, r0
 8004a88:	4608      	mov	r0, r1
 8004a8a:	602b      	str	r3, [r5, #0]
 8004a8c:	f7fd fb08 	bl	80020a0 <_sbrk>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_sbrk_r+0x1a>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_sbrk_r+0x1a>
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	20000508 	.word	0x20000508

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
