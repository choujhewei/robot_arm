
robot_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e9c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800506c  0800506c  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005268  08005268  00007338  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005268  08005268  00006268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005270  08005270  00007338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005274  08005274  00006274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  08005278  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000338  080055b0  00007338  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  080055b0  00007518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007338  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae55  00000000  00000000  00007368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3a  00000000  00000000  000121bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000140f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cf  00000000  00000000  00014e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f64f  00000000  00000000  000157ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a879  00000000  00000000  00034e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9e07  00000000  00000000  0003f6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e94be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e78  00000000  00000000  000e9504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ed37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000338 	.word	0x20000338
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005054 	.word	0x08005054

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000033c 	.word	0x2000033c
 800020c:	08005054 	.word	0x08005054

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80005e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <LL_DMA_EnableStream+0x3c>)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4413      	add	r3, r2
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4908      	ldr	r1, [pc, #32]	@ (8000618 <LL_DMA_EnableStream+0x3c>)
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	440a      	add	r2, r1
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	4611      	mov	r1, r2
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	440a      	add	r2, r1
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6013      	str	r3, [r2, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	08005204 	.word	0x08005204

0800061c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000626:	4a0c      	ldr	r2, [pc, #48]	@ (8000658 <LL_DMA_DisableStream+0x3c>)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4413      	add	r3, r2
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4908      	ldr	r1, [pc, #32]	@ (8000658 <LL_DMA_DisableStream+0x3c>)
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	440a      	add	r2, r1
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	4611      	mov	r1, r2
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	440a      	add	r2, r1
 8000644:	f023 0301 	bic.w	r3, r3, #1
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	08005204 	.word	0x08005204

0800065c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LL_DMA_SetDataLength+0x44>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4413      	add	r3, r2
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	0c1b      	lsrs	r3, r3, #16
 800067a:	041b      	lsls	r3, r3, #16
 800067c:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <LL_DMA_SetDataLength+0x44>)
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	440a      	add	r2, r1
 8000682:	7812      	ldrb	r2, [r2, #0]
 8000684:	4611      	mov	r1, r2
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	440a      	add	r2, r1
 800068a:	4611      	mov	r1, r2
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	604b      	str	r3, [r1, #4]
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	08005204 	.word	0x08005204

080006a4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80006b0:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <LL_DMA_SetMemoryAddress+0x2c>)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	08005204 	.word	0x08005204

080006d4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80006e0:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <LL_DMA_SetPeriphAddress+0x2c>)
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4413      	add	r3, r2
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6093      	str	r3, [r2, #8]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	08005204 	.word	0x08005204

08000704 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000712:	609a      	str	r2, [r3, #8]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800072e:	609a      	str	r2, [r3, #8]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2220      	movs	r2, #32
 8000748:	60da      	str	r2, [r3, #12]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000764:	60da      	str	r2, [r3, #12]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800077e:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <LL_DMA_EnableIT_TC+0x3c>)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4413      	add	r3, r2
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4908      	ldr	r1, [pc, #32]	@ (80007b0 <LL_DMA_EnableIT_TC+0x3c>)
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	440a      	add	r2, r1
 8000794:	7812      	ldrb	r2, [r2, #0]
 8000796:	4611      	mov	r1, r2
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	440a      	add	r2, r1
 800079c:	f043 0310 	orr.w	r3, r3, #16
 80007a0:	6013      	str	r3, [r2, #0]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	08005204 	.word	0x08005204

080007b4 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 0320 	and.w	r3, r3, #32
 80007c4:	2b20      	cmp	r3, #32
 80007c6:	bf0c      	ite	eq
 80007c8:	2301      	moveq	r3, #1
 80007ca:	2300      	movne	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80007e8:	601a      	str	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b089      	sub	sp, #36	@ 0x24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	330c      	adds	r3, #12
 8000802:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	e853 3f00 	ldrex	r3, [r3]
 800080a:	60bb      	str	r3, [r7, #8]
   return(result);
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000812:	61fb      	str	r3, [r7, #28]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	330c      	adds	r3, #12
 8000818:	69fa      	ldr	r2, [r7, #28]
 800081a:	61ba      	str	r2, [r7, #24]
 800081c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800081e:	6979      	ldr	r1, [r7, #20]
 8000820:	69ba      	ldr	r2, [r7, #24]
 8000822:	e841 2300 	strex	r3, r2, [r1]
 8000826:	613b      	str	r3, [r7, #16]
   return(result);
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1e7      	bne.n	80007fe <LL_USART_EnableIT_TC+0x8>
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3724      	adds	r7, #36	@ 0x24
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800083c:	b480      	push	{r7}
 800083e:	b089      	sub	sp, #36	@ 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3314      	adds	r3, #20
 8000848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	e853 3f00 	ldrex	r3, [r3]
 8000850:	60bb      	str	r3, [r7, #8]
   return(result);
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3314      	adds	r3, #20
 800085e:	69fa      	ldr	r2, [r7, #28]
 8000860:	61ba      	str	r2, [r7, #24]
 8000862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000864:	6979      	ldr	r1, [r7, #20]
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	e841 2300 	strex	r3, r2, [r1]
 800086c:	613b      	str	r3, [r7, #16]
   return(result);
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1e7      	bne.n	8000844 <LL_USART_EnableDMAReq_RX+0x8>
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3724      	adds	r7, #36	@ 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000882:	b480      	push	{r7}
 8000884:	b089      	sub	sp, #36	@ 0x24
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3314      	adds	r3, #20
 800088e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	e853 3f00 	ldrex	r3, [r3]
 8000896:	60bb      	str	r3, [r7, #8]
   return(result);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089e:	61fb      	str	r3, [r7, #28]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3314      	adds	r3, #20
 80008a4:	69fa      	ldr	r2, [r7, #28]
 80008a6:	61ba      	str	r2, [r7, #24]
 80008a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80008aa:	6979      	ldr	r1, [r7, #20]
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	e841 2300 	strex	r3, r2, [r1]
 80008b2:	613b      	str	r3, [r7, #16]
   return(result);
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1e7      	bne.n	800088a <LL_USART_EnableDMAReq_TX+0x8>
}
 80008ba:	bf00      	nop
 80008bc:	bf00      	nop
 80008be:	3724      	adds	r7, #36	@ 0x24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3304      	adds	r3, #4
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	619a      	str	r2, [r3, #24]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <UART4_DMA_Config>:
uint8_t debug_Instruction_Packet_Array[35] = { 0 };  // Array to debug instruction packet data
uint8_t debug_Status_Packet_Array[15] = { 0 };       // Array to debug status packet data

uint16_t crc = 0;

void UART4_DMA_Config() {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_4, LL_USART_DMA_GetRegAddr(UART4));
 800091c:	4824      	ldr	r0, [pc, #144]	@ (80009b0 <UART4_DMA_Config+0x98>)
 800091e:	f7ff ffd3 	bl	80008c8 <LL_USART_DMA_GetRegAddr>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	2104      	movs	r1, #4
 8000928:	4822      	ldr	r0, [pc, #136]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 800092a:	f7ff fed3 	bl	80006d4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)Instruction_Packet_Array);
 800092e:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <UART4_DMA_Config+0xa0>)
 8000930:	461a      	mov	r2, r3
 8000932:	2104      	movs	r1, #4
 8000934:	481f      	ldr	r0, [pc, #124]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 8000936:	f7ff feb5 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5] + 7);
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <UART4_DMA_Config+0xa0>)
 800093c:	795b      	ldrb	r3, [r3, #5]
 800093e:	3307      	adds	r3, #7
 8000940:	461a      	mov	r2, r3
 8000942:	2104      	movs	r1, #4
 8000944:	481b      	ldr	r0, [pc, #108]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 8000946:	f7ff fe89 	bl	800065c <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(UART4);
 800094a:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <UART4_DMA_Config+0x98>)
 800094c:	f7ff ff99 	bl	8000882 <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC4(DMA1);
 8000950:	4818      	ldr	r0, [pc, #96]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 8000952:	f7ff fef3 	bl	800073c <LL_DMA_ClearFlag_TC4>
	LL_USART_ClearFlag_TC(UART4);
 8000956:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <UART4_DMA_Config+0x98>)
 8000958:	f7ff ff3f 	bl	80007da <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
 800095c:	2104      	movs	r1, #4
 800095e:	4815      	ldr	r0, [pc, #84]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 8000960:	f7ff ff08 	bl	8000774 <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(UART4);
 8000964:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <UART4_DMA_Config+0x98>)
 8000966:	f7ff ff46 	bl	80007f6 <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 800096a:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <UART4_DMA_Config+0x98>)
 800096c:	f7ff ffac 	bl	80008c8 <LL_USART_DMA_GetRegAddr>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	2102      	movs	r1, #2
 8000976:	480f      	ldr	r0, [pc, #60]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 8000978:	f7ff feac 	bl	80006d4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <UART4_DMA_Config+0xa4>)
 800097e:	461a      	mov	r2, r3
 8000980:	2102      	movs	r1, #2
 8000982:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 8000984:	f7ff fe8e 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8000988:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <UART4_DMA_Config+0xa8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3304      	adds	r3, #4
 800098e:	461a      	mov	r2, r3
 8000990:	2102      	movs	r1, #2
 8000992:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 8000994:	f7ff fe62 	bl	800065c <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(UART4);
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <UART4_DMA_Config+0x98>)
 800099a:	f7ff ff4f 	bl	800083c <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC2(DMA1);
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 80009a0:	f7ff febe 	bl	8000720 <LL_DMA_ClearFlag_TC2>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 80009a4:	2102      	movs	r1, #2
 80009a6:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <UART4_DMA_Config+0x9c>)
 80009a8:	f7ff fee4 	bl	8000774 <LL_DMA_EnableIT_TC>

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40004c00 	.word	0x40004c00
 80009b4:	40026000 	.word	0x40026000
 80009b8:	20000004 	.word	0x20000004
 80009bc:	200003a8 	.word	0x200003a8
 80009c0:	200003a4 	.word	0x200003a4

080009c4 <USART6_DMA_Config>:

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);  // 傳輸完成中斷
    NVIC_SetPriority(DMA1_Stream2_IRQn, 0);
    NVIC_EnableIRQ(DMA1_Stream2_IRQn);
}
void USART6_DMA_Config() {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_6, LL_USART_DMA_GetRegAddr(USART6));
 80009c8:	4824      	ldr	r0, [pc, #144]	@ (8000a5c <USART6_DMA_Config+0x98>)
 80009ca:	f7ff ff7d 	bl	80008c8 <LL_USART_DMA_GetRegAddr>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	2106      	movs	r1, #6
 80009d4:	4822      	ldr	r0, [pc, #136]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 80009d6:	f7ff fe7d 	bl	80006d4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)Instruction_Packet_Array);
 80009da:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <USART6_DMA_Config+0xa0>)
 80009dc:	461a      	mov	r2, r3
 80009de:	2106      	movs	r1, #6
 80009e0:	481f      	ldr	r0, [pc, #124]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 80009e2:	f7ff fe5f 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5] + 7);
 80009e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <USART6_DMA_Config+0xa0>)
 80009e8:	795b      	ldrb	r3, [r3, #5]
 80009ea:	3307      	adds	r3, #7
 80009ec:	461a      	mov	r2, r3
 80009ee:	2106      	movs	r1, #6
 80009f0:	481b      	ldr	r0, [pc, #108]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 80009f2:	f7ff fe33 	bl	800065c <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(USART6);
 80009f6:	4819      	ldr	r0, [pc, #100]	@ (8000a5c <USART6_DMA_Config+0x98>)
 80009f8:	f7ff ff43 	bl	8000882 <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC6(DMA2);
 80009fc:	4818      	ldr	r0, [pc, #96]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 80009fe:	f7ff feaa 	bl	8000756 <LL_DMA_ClearFlag_TC6>
	LL_USART_ClearFlag_TC(USART6);
 8000a02:	4816      	ldr	r0, [pc, #88]	@ (8000a5c <USART6_DMA_Config+0x98>)
 8000a04:	f7ff fee9 	bl	80007da <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
 8000a08:	2106      	movs	r1, #6
 8000a0a:	4815      	ldr	r0, [pc, #84]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 8000a0c:	f7ff feb2 	bl	8000774 <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(USART6);
 8000a10:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <USART6_DMA_Config+0x98>)
 8000a12:	f7ff fef0 	bl	80007f6 <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 8000a16:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <USART6_DMA_Config+0x98>)
 8000a18:	f7ff ff56 	bl	80008c8 <LL_USART_DMA_GetRegAddr>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2101      	movs	r1, #1
 8000a22:	480f      	ldr	r0, [pc, #60]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 8000a24:	f7ff fe56 	bl	80006d4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <USART6_DMA_Config+0xa4>)
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 8000a30:	f7ff fe38 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <USART6_DMA_Config+0xa8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 8000a40:	f7ff fe0c 	bl	800065c <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(USART6);
 8000a44:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <USART6_DMA_Config+0x98>)
 8000a46:	f7ff fef9 	bl	800083c <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC1(DMA2);
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 8000a4c:	f7ff fe5a 	bl	8000704 <LL_DMA_ClearFlag_TC1>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 8000a50:	2101      	movs	r1, #1
 8000a52:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <USART6_DMA_Config+0x9c>)
 8000a54:	f7ff fe8e 	bl	8000774 <LL_DMA_EnableIT_TC>

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40011400 	.word	0x40011400
 8000a60:	40026400 	.word	0x40026400
 8000a64:	20000004 	.word	0x20000004
 8000a68:	200003a8 	.word	0x200003a8
 8000a6c:	200003a4 	.word	0x200003a4

08000a70 <transmitInstructionPacket6>:
		printf("3\r\n");
		LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
}

void transmitInstructionPacket6(void) {  // Transmit instruction packet to Dynamixel
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	dynamixel_Ready = 0;
 8000a76:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <transmitInstructionPacket6+0xa8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
	 LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8000a7c:	2106      	movs	r1, #6
 8000a7e:	4827      	ldr	r0, [pc, #156]	@ (8000b1c <transmitInstructionPacket6+0xac>)
 8000a80:	f7ff fdcc 	bl	800061c <LL_DMA_DisableStream>
	 LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)Instruction_Packet_Array);
 8000a84:	4b26      	ldr	r3, [pc, #152]	@ (8000b20 <transmitInstructionPacket6+0xb0>)
 8000a86:	461a      	mov	r2, r3
 8000a88:	2106      	movs	r1, #6
 8000a8a:	4824      	ldr	r0, [pc, #144]	@ (8000b1c <transmitInstructionPacket6+0xac>)
 8000a8c:	f7ff fe0a 	bl	80006a4 <LL_DMA_SetMemoryAddress>
	 LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5] + 7);
 8000a90:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <transmitInstructionPacket6+0xb0>)
 8000a92:	795b      	ldrb	r3, [r3, #5]
 8000a94:	3307      	adds	r3, #7
 8000a96:	461a      	mov	r2, r3
 8000a98:	2106      	movs	r1, #6
 8000a9a:	4820      	ldr	r0, [pc, #128]	@ (8000b1c <transmitInstructionPacket6+0xac>)
 8000a9c:	f7ff fdde 	bl	800065c <LL_DMA_SetDataLength>
	 LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 8000aa0:	2106      	movs	r1, #6
 8000aa2:	481e      	ldr	r0, [pc, #120]	@ (8000b1c <transmitInstructionPacket6+0xac>)
 8000aa4:	f7ff fd9a 	bl	80005dc <LL_DMA_EnableStream>
	 LL_USART_EnableDMAReq_TX(USART6);
 8000aa8:	481e      	ldr	r0, [pc, #120]	@ (8000b24 <transmitInstructionPacket6+0xb4>)
 8000aaa:	f7ff feea 	bl	8000882 <LL_USART_EnableDMAReq_TX>
	#if USE_THREE_STATE_GATE == 1
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	481d      	ldr	r0, [pc, #116]	@ (8000b28 <transmitInstructionPacket6+0xb8>)
 8000ab2:	f7ff ff22 	bl	80008fa <LL_GPIO_SetOutputPin>
		printf("1\r\n");
 8000ab6:	481d      	ldr	r0, [pc, #116]	@ (8000b2c <transmitInstructionPacket6+0xbc>)
 8000ab8:	f003 fc6a 	bl	8004390 <puts>
		printf("TX Packet: ");
 8000abc:	481c      	ldr	r0, [pc, #112]	@ (8000b30 <transmitInstructionPacket6+0xc0>)
 8000abe:	f003 fbff 	bl	80042c0 <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	e00a      	b.n	8000ade <transmitInstructionPacket6+0x6e>
			printf("%02X ", Instruction_Packet_Array[i]);
 8000ac8:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <transmitInstructionPacket6+0xb0>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4818      	ldr	r0, [pc, #96]	@ (8000b34 <transmitInstructionPacket6+0xc4>)
 8000ad4:	f003 fbf4 	bl	80042c0 <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3301      	adds	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <transmitInstructionPacket6+0xb0>)
 8000ae0:	795b      	ldrb	r3, [r3, #5]
 8000ae2:	3306      	adds	r3, #6
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	ddee      	ble.n	8000ac8 <transmitInstructionPacket6+0x58>
		}
		printf("\r\n");
 8000aea:	4813      	ldr	r0, [pc, #76]	@ (8000b38 <transmitInstructionPacket6+0xc8>)
 8000aec:	f003 fc50 	bl	8004390 <puts>
	#else
		LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_TX);
		printf("2\r\n");
	#endif
		printf("3\r\n");
 8000af0:	4812      	ldr	r0, [pc, #72]	@ (8000b3c <transmitInstructionPacket6+0xcc>)
 8000af2:	f003 fc4d 	bl	8004390 <puts>
		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <transmitInstructionPacket6+0xb0>)
 8000af8:	795b      	ldrb	r3, [r3, #5]
 8000afa:	3307      	adds	r3, #7
 8000afc:	461a      	mov	r2, r3
 8000afe:	2106      	movs	r1, #6
 8000b00:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <transmitInstructionPacket6+0xac>)
 8000b02:	f7ff fdab 	bl	800065c <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 8000b06:	2106      	movs	r1, #6
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <transmitInstructionPacket6+0xac>)
 8000b0a:	f7ff fd67 	bl	80005dc <LL_DMA_EnableStream>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	40026400 	.word	0x40026400
 8000b20:	20000004 	.word	0x20000004
 8000b24:	40011400 	.word	0x40011400
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	0800509c 	.word	0x0800509c
 8000b30:	080050a0 	.word	0x080050a0
 8000b34:	080050ac 	.word	0x080050ac
 8000b38:	080050b4 	.word	0x080050b4
 8000b3c:	080050b8 	.word	0x080050b8

08000b40 <readStatusPacket6>:
		Status_Packet_Array[i] = LL_USART_ReceiveData8(UART4);
	}
	dynamixel_Ready = 1;
}

void readStatusPacket6(void) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < Status_packet_length + 4; i++) {
 8000b46:	2300      	movs	r3, #0
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	e014      	b.n	8000b76 <readStatusPacket6+0x36>
		while(LL_USART_IsActiveFlag_RXNE(USART6) == RESET) {
 8000b4c:	bf00      	nop
 8000b4e:	4810      	ldr	r0, [pc, #64]	@ (8000b90 <readStatusPacket6+0x50>)
 8000b50:	f7ff fe30 	bl	80007b4 <LL_USART_IsActiveFlag_RXNE>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f9      	beq.n	8000b4e <readStatusPacket6+0xe>
		}
		printf("read\r\n");
 8000b5a:	480e      	ldr	r0, [pc, #56]	@ (8000b94 <readStatusPacket6+0x54>)
 8000b5c:	f003 fc18 	bl	8004390 <puts>
		Status_Packet_Array[i] = LL_USART_ReceiveData8(USART6);
 8000b60:	79fc      	ldrb	r4, [r7, #7]
 8000b62:	480b      	ldr	r0, [pc, #44]	@ (8000b90 <readStatusPacket6+0x50>)
 8000b64:	f7ff febc 	bl	80008e0 <LL_USART_ReceiveData8>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <readStatusPacket6+0x58>)
 8000b6e:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i < Status_packet_length + 4; i++) {
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	3301      	adds	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <readStatusPacket6+0x5c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d3e4      	bcc.n	8000b4c <readStatusPacket6+0xc>
	}
	dynamixel_Ready = 1;
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <readStatusPacket6+0x60>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	40011400 	.word	0x40011400
 8000b94:	080050bc 	.word	0x080050bc
 8000b98:	200003a8 	.word	0x200003a8
 8000b9c:	200003a4 	.word	0x200003a4
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <readStatusPacket_pos_DMA>:

void readStatusPacket_pos_DMA(int32_t* position) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if(Status_Packet_Array[8] == 0) {   //確認錯誤碼
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <readStatusPacket_pos_DMA+0x48>)
 8000bae:	7a1b      	ldrb	r3, [r3, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d114      	bne.n	8000bde <readStatusPacket_pos_DMA+0x3a>
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <readStatusPacket_pos_DMA+0x48>)
 8000bb6:	7b1b      	ldrb	r3, [r3, #12]
 8000bb8:	061a      	lsls	r2, r3, #24
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <readStatusPacket_pos_DMA+0x48>)
 8000bbc:	7adb      	ldrb	r3, [r3, #11]
 8000bbe:	041b      	lsls	r3, r3, #16
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <readStatusPacket_pos_DMA+0x48>)
 8000bc4:	7a9b      	ldrb	r3, [r3, #10]
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	431a      	orrs	r2, r3
			| Status_Packet_Array[9];
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <readStatusPacket_pos_DMA+0x48>)
 8000bcc:	7a5b      	ldrb	r3, [r3, #9]
 8000bce:	4618      	mov	r0, r3
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <readStatusPacket_pos_DMA+0x48>)
 8000bd2:	791b      	ldrb	r3, [r3, #4]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	440b      	add	r3, r1
			| Status_Packet_Array[9];
 8000bda:	4302      	orrs	r2, r0
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 8000bdc:	601a      	str	r2, [r3, #0]
	}
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200003a8 	.word	0x200003a8

08000bf0 <Reboot>:
	position[Status_Packet_Array[4]]=Status_Packet_Array[9];
}
//-------------------------------------------------------------------------------------------------------------------------------
// EEPROM AREA

uint8_t Reboot(uint8_t ID) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
    // 等待前一次通訊完成
    while (dynamixel_Ready != 1) { }
 8000bfa:	bf00      	nop
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <Reboot+0x74>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d1fb      	bne.n	8000bfc <Reboot+0xc>
    dynamixel_Ready = 0;  // 清 flag
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <Reboot+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]

    // 組封包：Header、ID、Length=3、Instruction=0x08、(no params)
    Instruction_Packet_Array[4] = ID;
 8000c0a:	4a17      	ldr	r2, [pc, #92]	@ (8000c68 <Reboot+0x78>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	7113      	strb	r3, [r2, #4]
    Instruction_Packet_Array[5] = 0x03;    // LEN_L = 3
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <Reboot+0x78>)
 8000c12:	2203      	movs	r2, #3
 8000c14:	715a      	strb	r2, [r3, #5]
    Instruction_Packet_Array[6] = 0x00;    // LEN_H = 0
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <Reboot+0x78>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	719a      	strb	r2, [r3, #6]
    Instruction_Packet_Array[7] = INST_REBOOT;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <Reboot+0x78>)
 8000c1e:	2208      	movs	r2, #8
 8000c20:	71da      	strb	r2, [r3, #7]

    // 計算 CRC，長度 = LEN + 5 = 3 + 5 = 8 bytes
    uint16_t crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <Reboot+0x78>)
 8000c24:	795b      	ldrb	r3, [r3, #5]
 8000c26:	3305      	adds	r3, #5
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <Reboot+0x78>)
 8000c2e:	f000 fb3d 	bl	80012ac <update_crc>
 8000c32:	4603      	mov	r3, r0
 8000c34:	81fb      	strh	r3, [r7, #14]
    Instruction_Packet_Array[8] = crc & 0xFF;
 8000c36:	89fb      	ldrh	r3, [r7, #14]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <Reboot+0x78>)
 8000c3c:	721a      	strb	r2, [r3, #8]
    Instruction_Packet_Array[9] = (crc >> 8) & 0xFF;
 8000c3e:	89fb      	ldrh	r3, [r7, #14]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <Reboot+0x78>)
 8000c48:	725a      	strb	r2, [r3, #9]

    // 發送封包
    Packet_Return = 1;              // 要等回 ACK
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <Reboot+0x7c>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
    transmitInstructionPacket6();
 8000c50:	f7ff ff0e 	bl	8000a70 <transmitInstructionPacket6>
    readStatusPacket6();             // 阻塞讀取回應
 8000c54:	f7ff ff74 	bl	8000b40 <readStatusPacket6>

    // 回傳錯誤碼：Status_Packet_Array[8] = ERR
    return Status_Packet_Array[8];
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <Reboot+0x80>)
 8000c5a:	7a1b      	ldrb	r3, [r3, #8]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20000001 	.word	0x20000001
 8000c70:	200003a8 	.word	0x200003a8

08000c74 <OperatingMode>:
uint8_t OperatingMode(uint8_t ID, uint8_t OPERATION_MODE) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
// Set Operation Mode: Current Mode 0x00, Velocity Mode 0x01, Position Mode 0x03
	while(dynamixel_Ready != 1) {
 8000c84:	bf00      	nop
 8000c86:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <OperatingMode+0xd4>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d1fb      	bne.n	8000c86 <OperatingMode+0x12>
	}
	Instruction_Packet_Array[4] = ID;
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d4c <OperatingMode+0xd8>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x06;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <OperatingMode+0xd8>)
 8000c96:	2206      	movs	r2, #6
 8000c98:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <OperatingMode+0xd8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_WRITE_DATA;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <OperatingMode+0xd8>)
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = EEPROM_OPERATION_MODE;
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <OperatingMode+0xd8>)
 8000ca8:	220b      	movs	r2, #11
 8000caa:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <OperatingMode+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = OPERATION_MODE;
 8000cb2:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <OperatingMode+0xd8>)
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	7293      	strb	r3, [r2, #10]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000cb8:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <OperatingMode+0xd8>)
 8000cba:	795b      	ldrb	r3, [r3, #5]
 8000cbc:	3305      	adds	r3, #5
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4822      	ldr	r0, [pc, #136]	@ (8000d4c <OperatingMode+0xd8>)
 8000cc4:	f000 faf2 	bl	80012ac <update_crc>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <OperatingMode+0xdc>)
 8000cce:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[11] = crc & 0x00FF;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <OperatingMode+0xdc>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <OperatingMode+0xd8>)
 8000cd8:	72da      	strb	r2, [r3, #11]
	Instruction_Packet_Array[12] = (crc >> 8) & 0x00FF;
 8000cda:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <OperatingMode+0xdc>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <OperatingMode+0xd8>)
 8000ce6:	731a      	strb	r2, [r3, #12]

	Status_packet_length = 7; // ID(1) + LEN(2) + INS(1) + ERR(1) + CRC(2)
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <OperatingMode+0xe0>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	601a      	str	r2, [r3, #0]

	if(ID == 0XFE || Status_Return_Level != ALL) {
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cf2:	d003      	beq.n	8000cfc <OperatingMode+0x88>
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <OperatingMode+0xe4>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d006      	beq.n	8000d0a <OperatingMode+0x96>
		Packet_Return = 0;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <OperatingMode+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket6();
 8000d02:	f7ff feb5 	bl	8000a70 <transmitInstructionPacket6>
		return (0x00);
 8000d06:	2300      	movs	r3, #0
 8000d08:	e019      	b.n	8000d3e <OperatingMode+0xca>
	}
	else {
		Packet_Return = 1;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <OperatingMode+0xe8>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
		  transmitInstructionPacket6();
 8000d10:	f7ff feae 	bl	8000a70 <transmitInstructionPacket6>
		  readStatusPacket6();
 8000d14:	f7ff ff14 	bl	8000b40 <readStatusPacket6>
		   if (Status_Packet_Array[8] != 0) {
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <OperatingMode+0xec>)
 8000d1a:	7a1b      	ldrb	r3, [r3, #8]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <OperatingMode+0xb2>
		      // EEPROM 寫入失敗，直接回傳錯誤
		      return (Status_Packet_Array[8] | 0xF000);
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <OperatingMode+0xec>)
 8000d22:	7a1b      	ldrb	r3, [r3, #8]
 8000d24:	e00b      	b.n	8000d3e <OperatingMode+0xca>
		   }
		   // EEPROM 寫入成功，立即發出 Reboot 讓馬達重載新模式
		   uint8_t err = Reboot(ID);
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff61 	bl	8000bf0 <Reboot>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
		   if (err != 0) {
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <OperatingMode+0xc8>
	        // Reboot 失敗
		       return (err | 0xE000);
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	e000      	b.n	8000d3e <OperatingMode+0xca>
		   }
		   // 成功切換模式並重啟
		   return 0x00;
 8000d3c:	2300      	movs	r3, #0
	}
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	200003c2 	.word	0x200003c2
 8000d54:	200003a4 	.word	0x200003a4
 8000d58:	20000002 	.word	0x20000002
 8000d5c:	20000001 	.word	0x20000001
 8000d60:	200003a8 	.word	0x200003a8

08000d64 <TorqueEnable>:
}

//-------------------------------------------------------------------------------------------------------------------------------
// RAM AREA

uint8_t TorqueEnable(uint8_t ID, _Bool Status) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	4613      	mov	r3, r2
 8000d72:	71bb      	strb	r3, [r7, #6]
	/*
	 Must Enable it before any motion(Velocity or Position)
	 When it is enabled, EEROM will be locked.
	 */
	while(dynamixel_Ready != 1) {
 8000d74:	bf00      	nop
 8000d76:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <TorqueEnable+0xbc>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d1fb      	bne.n	8000d76 <TorqueEnable+0x12>
	}
	Instruction_Packet_Array[4] = ID;
 8000d7e:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <TorqueEnable+0xc0>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x06;
 8000d84:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <TorqueEnable+0xc0>)
 8000d86:	2206      	movs	r2, #6
 8000d88:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <TorqueEnable+0xc0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_WRITE_DATA;
 8000d90:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <TorqueEnable+0xc0>)
 8000d92:	2203      	movs	r2, #3
 8000d94:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 8000d96:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <TorqueEnable+0xc0>)
 8000d98:	2240      	movs	r2, #64	@ 0x40
 8000d9a:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <TorqueEnable+0xc0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = Status;
 8000da2:	79ba      	ldrb	r2, [r7, #6]
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <TorqueEnable+0xc0>)
 8000da6:	729a      	strb	r2, [r3, #10]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000da8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <TorqueEnable+0xc0>)
 8000daa:	795b      	ldrb	r3, [r3, #5]
 8000dac:	3305      	adds	r3, #5
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	481c      	ldr	r0, [pc, #112]	@ (8000e24 <TorqueEnable+0xc0>)
 8000db4:	f000 fa7a 	bl	80012ac <update_crc>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <TorqueEnable+0xc4>)
 8000dbe:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[11] = crc & 0x00FF;
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <TorqueEnable+0xc4>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <TorqueEnable+0xc0>)
 8000dc8:	72da      	strb	r2, [r3, #11]
	Instruction_Packet_Array[12] = (crc >> 8) & 0x00FF;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <TorqueEnable+0xc4>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <TorqueEnable+0xc0>)
 8000dd6:	731a      	strb	r2, [r3, #12]

	Status_packet_length = 7; // ID(1) + LEN(2) + INS(1) + ERR(1) + CRC(2)
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <TorqueEnable+0xc8>)
 8000dda:	2207      	movs	r2, #7
 8000ddc:	601a      	str	r2, [r3, #0]

	if(ID == 0XFE || Status_Return_Level != ALL) {
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000de2:	d003      	beq.n	8000dec <TorqueEnable+0x88>
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <TorqueEnable+0xcc>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d006      	beq.n	8000dfa <TorqueEnable+0x96>
		Packet_Return = 0;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <TorqueEnable+0xd0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket6();
 8000df2:	f7ff fe3d 	bl	8000a70 <transmitInstructionPacket6>
		return (0x00);
 8000df6:	2300      	movs	r3, #0
 8000df8:	e00e      	b.n	8000e18 <TorqueEnable+0xb4>
	}
	else {
		Packet_Return = 1;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <TorqueEnable+0xd0>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket6();
 8000e00:	f7ff fe36 	bl	8000a70 <transmitInstructionPacket6>
		readStatusPacket6();
 8000e04:	f7ff fe9c 	bl	8000b40 <readStatusPacket6>
		if(Status_Packet_Array[8] == 0)
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <TorqueEnable+0xd4>)
 8000e0a:	7a1b      	ldrb	r3, [r3, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <TorqueEnable+0xb0>
			return (0x00);
 8000e10:	2300      	movs	r3, #0
 8000e12:	e001      	b.n	8000e18 <TorqueEnable+0xb4>
		else
			return (Status_Packet_Array[8] | 0xF000);
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <TorqueEnable+0xd4>)
 8000e16:	7a1b      	ldrb	r3, [r3, #8]
	}
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000004 	.word	0x20000004
 8000e28:	200003c2 	.word	0x200003c2
 8000e2c:	200003a4 	.word	0x200003a4
 8000e30:	20000002 	.word	0x20000002
 8000e34:	20000001 	.word	0x20000001
 8000e38:	200003a8 	.word	0x200003a8

08000e3c <SyncWrite_DisableDynamixels>:
	Is_dynamixel_GetData = 0;

	transmitInstructionPacket6();
}

void SyncWrite_DisableDynamixels(uint8_t n, uint8_t *ID_list) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8000e48:	bf00      	nop
 8000e4a:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <SyncWrite_DisableDynamixels+0xd0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d1fb      	bne.n	8000e4a <SyncWrite_DisableDynamixels+0xe>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8000e52:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000e54:	22fe      	movs	r2, #254	@ 0xfe
 8000e56:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	3307      	adds	r3, #7
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000e64:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000e66:	4b2a      	ldr	r3, [pc, #168]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8000e6c:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000e6e:	2283      	movs	r2, #131	@ 0x83
 8000e70:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 8000e72:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000e74:	2240      	movs	r2, #64	@ 0x40
 8000e76:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000e78:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8000e7e:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8000e84:	4b22      	ldr	r3, [pc, #136]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e012      	b.n	8000eb6 <SyncWrite_DisableDynamixels+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	441a      	add	r2, r3
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	3305      	adds	r3, #5
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	7811      	ldrb	r1, [r2, #0]
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000ea2:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x00;
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	330b      	adds	r3, #11
 8000eaa:	4a19      	ldr	r2, [pc, #100]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d9e8      	bls.n	8000e90 <SyncWrite_DisableDynamixels+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000ebe:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000ec0:	795b      	ldrb	r3, [r3, #5]
 8000ec2:	3305      	adds	r3, #5
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4811      	ldr	r0, [pc, #68]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000eca:	f000 f9ef 	bl	80012ac <update_crc>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <SyncWrite_DisableDynamixels+0xd8>)
 8000ed4:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <SyncWrite_DisableDynamixels+0xd8>)
 8000ed8:	881a      	ldrh	r2, [r3, #0]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	3306      	adds	r3, #6
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	b2d1      	uxtb	r1, r2
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000ee4:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <SyncWrite_DisableDynamixels+0xd8>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	330d      	adds	r3, #13
 8000ef4:	b2d1      	uxtb	r1, r2
 8000ef6:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <SyncWrite_DisableDynamixels+0xd4>)
 8000ef8:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <SyncWrite_DisableDynamixels+0xdc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket6();
 8000f00:	f7ff fdb6 	bl	8000a70 <transmitInstructionPacket6>
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000004 	.word	0x20000004
 8000f14:	200003c2 	.word	0x200003c2
 8000f18:	20000001 	.word	0x20000001

08000f1c <SyncWrite_EnableDynamixels>:

void SyncWrite_EnableDynamixels(uint8_t n, uint8_t *ID_list) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 8000f28:	bf00      	nop
 8000f2a:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <SyncWrite_EnableDynamixels+0xd0>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d1fb      	bne.n	8000f2a <SyncWrite_EnableDynamixels+0xe>
	}
	Instruction_Packet_Array[4] = 0xFE;
 8000f32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f34:	22fe      	movs	r2, #254	@ 0xfe
 8000f36:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3307      	adds	r3, #7
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f44:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8000f46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8000f4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f4e:	2283      	movs	r2, #131	@ 0x83
 8000f50:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 8000f52:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f54:	2240      	movs	r2, #64	@ 0x40
 8000f56:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8000f58:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e012      	b.n	8000f96 <SyncWrite_EnableDynamixels+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	441a      	add	r2, r3
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	3305      	adds	r3, #5
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	7811      	ldrb	r1, [r2, #0]
 8000f80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f82:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x01;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	330b      	adds	r3, #11
 8000f8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d9e8      	bls.n	8000f70 <SyncWrite_EnableDynamixels+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000fa0:	795b      	ldrb	r3, [r3, #5]
 8000fa2:	3305      	adds	r3, #5
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000faa:	f000 f97f 	bl	80012ac <update_crc>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <SyncWrite_EnableDynamixels+0xd8>)
 8000fb4:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <SyncWrite_EnableDynamixels+0xd8>)
 8000fb8:	881a      	ldrh	r2, [r3, #0]
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3306      	adds	r3, #6
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	b2d1      	uxtb	r1, r2
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000fc4:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <SyncWrite_EnableDynamixels+0xd8>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	330d      	adds	r3, #13
 8000fd4:	b2d1      	uxtb	r1, r2
 8000fd6:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <SyncWrite_EnableDynamixels+0xd4>)
 8000fd8:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <SyncWrite_EnableDynamixels+0xdc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket6();
 8000fe0:	f7ff fd46 	bl	8000a70 <transmitInstructionPacket6>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	200003c2 	.word	0x200003c2
 8000ff8:	20000001 	.word	0x20000001

08000ffc <SyncWrite_StatusReturnLevel>:

void SyncWrite_StatusReturnLevel(uint8_t n, uint8_t *ID_list, uint8_t level) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
	while(dynamixel_Ready != 1) {
 800100c:	bf00      	nop
 800100e:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <SyncWrite_StatusReturnLevel+0xdc>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d1fb      	bne.n	800100e <SyncWrite_StatusReturnLevel+0x12>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8001016:	4b31      	ldr	r3, [pc, #196]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 8001018:	22fe      	movs	r2, #254	@ 0xfe
 800101a:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	3307      	adds	r3, #7
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 8001028:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 800102c:	2200      	movs	r2, #0
 800102e:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8001030:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 8001032:	2283      	movs	r2, #131	@ 0x83
 8001034:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_STATUS_RETURN_LEVEL;
 8001036:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 8001038:	2244      	movs	r2, #68	@ 0x44
 800103a:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 800103c:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8001042:	4b26      	ldr	r3, [pc, #152]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 8001044:	2201      	movs	r2, #1
 8001046:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 800104a:	2200      	movs	r2, #0
 800104c:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e012      	b.n	800107a <SyncWrite_StatusReturnLevel+0x7e>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	3b01      	subs	r3, #1
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	441a      	add	r2, r3
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	3305      	adds	r3, #5
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	7811      	ldrb	r1, [r2, #0]
 8001064:	4a1d      	ldr	r2, [pc, #116]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 8001066:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = level;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	330b      	adds	r3, #11
 800106e:	491b      	ldr	r1, [pc, #108]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 8001070:	79ba      	ldrb	r2, [r7, #6]
 8001072:	54ca      	strb	r2, [r1, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	429a      	cmp	r2, r3
 8001080:	d9e8      	bls.n	8001054 <SyncWrite_StatusReturnLevel+0x58>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 8001084:	795b      	ldrb	r3, [r3, #5]
 8001086:	3305      	adds	r3, #5
 8001088:	b29b      	uxth	r3, r3
 800108a:	4619      	mov	r1, r3
 800108c:	4813      	ldr	r0, [pc, #76]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 800108e:	f000 f90d 	bl	80012ac <update_crc>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <SyncWrite_StatusReturnLevel+0xe4>)
 8001098:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <SyncWrite_StatusReturnLevel+0xe4>)
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	3306      	adds	r3, #6
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b2d1      	uxtb	r1, r2
 80010a6:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 80010a8:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <SyncWrite_StatusReturnLevel+0xe4>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	330d      	adds	r3, #13
 80010b8:	b2d1      	uxtb	r1, r2
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <SyncWrite_StatusReturnLevel+0xe0>)
 80010bc:	54d1      	strb	r1, [r2, r3]

	Status_Return_Level = level;
 80010be:	4a09      	ldr	r2, [pc, #36]	@ (80010e4 <SyncWrite_StatusReturnLevel+0xe8>)
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	7013      	strb	r3, [r2, #0]
	Packet_Return = 0;
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <SyncWrite_StatusReturnLevel+0xec>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket6();
 80010ca:	f7ff fcd1 	bl	8000a70 <transmitInstructionPacket6>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004
 80010e0:	200003c2 	.word	0x200003c2
 80010e4:	20000002 	.word	0x20000002
 80010e8:	20000001 	.word	0x20000001

080010ec <SyncLED_Disable>:

	Packet_Return = 0;
	transmitInstructionPacket6();
}

void SyncLED_Disable(uint8_t n, uint8_t *ID_list) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 80010f8:	bf00      	nop
 80010fa:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <SyncLED_Disable+0xd0>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d1fb      	bne.n	80010fa <SyncLED_Disable+0xe>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8001102:	4b2f      	ldr	r3, [pc, #188]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001104:	22fe      	movs	r2, #254	@ 0xfe
 8001106:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	3307      	adds	r3, #7
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b2b      	ldr	r3, [pc, #172]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001114:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001116:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001118:	2200      	movs	r2, #0
 800111a:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 800111c:	4b28      	ldr	r3, [pc, #160]	@ (80011c0 <SyncLED_Disable+0xd4>)
 800111e:	2283      	movs	r2, #131	@ 0x83
 8001120:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_LED;
 8001122:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001124:	2241      	movs	r2, #65	@ 0x41
 8001126:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001128:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <SyncLED_Disable+0xd4>)
 800112a:	2200      	movs	r2, #0
 800112c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 800112e:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001130:	2201      	movs	r2, #1
 8001132:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001134:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001136:	2200      	movs	r2, #0
 8001138:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e012      	b.n	8001166 <SyncLED_Disable+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	3b01      	subs	r3, #1
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	441a      	add	r2, r3
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	3305      	adds	r3, #5
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	7811      	ldrb	r1, [r2, #0]
 8001150:	4a1b      	ldr	r2, [pc, #108]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001152:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x00;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	330b      	adds	r3, #11
 800115a:	4a19      	ldr	r2, [pc, #100]	@ (80011c0 <SyncLED_Disable+0xd4>)
 800115c:	2100      	movs	r1, #0
 800115e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	429a      	cmp	r2, r3
 800116c:	d9e8      	bls.n	8001140 <SyncLED_Disable+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001170:	795b      	ldrb	r3, [r3, #5]
 8001172:	3305      	adds	r3, #5
 8001174:	b29b      	uxth	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <SyncLED_Disable+0xd4>)
 800117a:	f000 f897 	bl	80012ac <update_crc>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <SyncLED_Disable+0xd8>)
 8001184:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <SyncLED_Disable+0xd8>)
 8001188:	881a      	ldrh	r2, [r3, #0]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	3306      	adds	r3, #6
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	b2d1      	uxtb	r1, r2
 8001192:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <SyncLED_Disable+0xd4>)
 8001194:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <SyncLED_Disable+0xd8>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29a      	uxth	r2, r3
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	330d      	adds	r3, #13
 80011a4:	b2d1      	uxtb	r1, r2
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <SyncLED_Disable+0xd4>)
 80011a8:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 80011aa:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <SyncLED_Disable+0xdc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket6();
 80011b0:	f7ff fc5e 	bl	8000a70 <transmitInstructionPacket6>
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000004 	.word	0x20000004
 80011c4:	200003c2 	.word	0x200003c2
 80011c8:	20000001 	.word	0x20000001

080011cc <SyncLED_Enable>:

void SyncLED_Enable(uint8_t n, uint8_t *ID_list) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 80011d8:	bf00      	nop
 80011da:	4b30      	ldr	r3, [pc, #192]	@ (800129c <SyncLED_Enable+0xd0>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d1fb      	bne.n	80011da <SyncLED_Enable+0xe>
	}
	Instruction_Packet_Array[4] = 0xFE;
 80011e2:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <SyncLED_Enable+0xd4>)
 80011e4:	22fe      	movs	r2, #254	@ 0xfe
 80011e6:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	3307      	adds	r3, #7
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <SyncLED_Enable+0xd4>)
 80011f4:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 80011f6:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <SyncLED_Enable+0xd4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 80011fc:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <SyncLED_Enable+0xd4>)
 80011fe:	2283      	movs	r2, #131	@ 0x83
 8001200:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_LED;
 8001202:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <SyncLED_Enable+0xd4>)
 8001204:	2241      	movs	r2, #65	@ 0x41
 8001206:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <SyncLED_Enable+0xd4>)
 800120a:	2200      	movs	r2, #0
 800120c:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <SyncLED_Enable+0xd4>)
 8001210:	2201      	movs	r2, #1
 8001212:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <SyncLED_Enable+0xd4>)
 8001216:	2200      	movs	r2, #0
 8001218:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e012      	b.n	8001246 <SyncLED_Enable+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	3b01      	subs	r3, #1
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	441a      	add	r2, r3
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	3305      	adds	r3, #5
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	7811      	ldrb	r1, [r2, #0]
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <SyncLED_Enable+0xd4>)
 8001232:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x01;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	330b      	adds	r3, #11
 800123a:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <SyncLED_Enable+0xd4>)
 800123c:	2101      	movs	r1, #1
 800123e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	3301      	adds	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	429a      	cmp	r2, r3
 800124c:	d9e8      	bls.n	8001220 <SyncLED_Enable+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <SyncLED_Enable+0xd4>)
 8001250:	795b      	ldrb	r3, [r3, #5]
 8001252:	3305      	adds	r3, #5
 8001254:	b29b      	uxth	r3, r3
 8001256:	4619      	mov	r1, r3
 8001258:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <SyncLED_Enable+0xd4>)
 800125a:	f000 f827 	bl	80012ac <update_crc>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <SyncLED_Enable+0xd8>)
 8001264:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <SyncLED_Enable+0xd8>)
 8001268:	881a      	ldrh	r2, [r3, #0]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	3306      	adds	r3, #6
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	b2d1      	uxtb	r1, r2
 8001272:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <SyncLED_Enable+0xd4>)
 8001274:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <SyncLED_Enable+0xd8>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	b29a      	uxth	r2, r3
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	330d      	adds	r3, #13
 8001284:	b2d1      	uxtb	r1, r2
 8001286:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <SyncLED_Enable+0xd4>)
 8001288:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <SyncLED_Enable+0xdc>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket6();
 8001290:	f7ff fbee 	bl	8000a70 <transmitInstructionPacket6>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004
 80012a4:	200003c2 	.word	0x200003c2
 80012a8:	20000001 	.word	0x20000001

080012ac <update_crc>:
	0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
	0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
	0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
	0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

uint16_t update_crc(uint8_t* data_blk_ptr, uint16_t data_blk_size) {
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
	uint16_t crc_accum = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	81fb      	strh	r3, [r7, #14]
	uint16_t i, j;

	for(j = 0; j < data_blk_size; j++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	81bb      	strh	r3, [r7, #12]
 80012c0:	e019      	b.n	80012f6 <update_crc+0x4a>
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	89ba      	ldrh	r2, [r7, #12]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	440a      	add	r2, r1
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	4053      	eors	r3, r2
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 80012d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	b21a      	sxth	r2, r3
 80012e0:	897b      	ldrh	r3, [r7, #10]
 80012e2:	490a      	ldr	r1, [pc, #40]	@ (800130c <update_crc+0x60>)
 80012e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4053      	eors	r3, r2
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	81fb      	strh	r3, [r7, #14]
	for(j = 0; j < data_blk_size; j++) {
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	81bb      	strh	r3, [r7, #12]
 80012f6:	89ba      	ldrh	r2, [r7, #12]
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3e1      	bcc.n	80012c2 <update_crc+0x16>
	}

	return crc_accum;
 80012fe:	89fb      	ldrh	r3, [r7, #14]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	200000cc 	.word	0x200000cc

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	@ (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	@ (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800142c:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800142e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001430:	4907      	ldr	r1, [pc, #28]	@ (8001450 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4313      	orrs	r3, r2
 8001436:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800143a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001458:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800145c:	f7ff ffe2 	bl	8001424 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001460:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001464:	f7ff ffde 	bl	8001424 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001468:	f7ff ff52 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800146c:	4603      	mov	r3, r0
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ffa2 	bl	80013bc <NVIC_EncodePriority>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	200d      	movs	r0, #13
 800147e:	f7ff ff73 	bl	8001368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001482:	200d      	movs	r0, #13
 8001484:	f7ff ff52 	bl	800132c <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001488:	f7ff ff42 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800148c:	4603      	mov	r3, r0
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff92 	bl	80013bc <NVIC_EncodePriority>
 8001498:	4603      	mov	r3, r0
 800149a:	4619      	mov	r1, r3
 800149c:	200f      	movs	r0, #15
 800149e:	f7ff ff63 	bl	8001368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014a2:	200f      	movs	r0, #15
 80014a4:	f7ff ff42 	bl	800132c <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014a8:	f7ff ff32 	bl	8001310 <__NVIC_GetPriorityGrouping>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff82 	bl	80013bc <NVIC_EncodePriority>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4619      	mov	r1, r3
 80014bc:	2010      	movs	r0, #16
 80014be:	f7ff ff53 	bl	8001368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014c2:	2010      	movs	r0, #16
 80014c4:	f7ff ff32 	bl	800132c <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014c8:	f7ff ff22 	bl	8001310 <__NVIC_GetPriorityGrouping>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff72 	bl	80013bc <NVIC_EncodePriority>
 80014d8:	4603      	mov	r3, r0
 80014da:	4619      	mov	r1, r3
 80014dc:	2011      	movs	r0, #17
 80014de:	f7ff ff43 	bl	8001368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014e2:	2011      	movs	r0, #17
 80014e4:	f7ff ff22 	bl	800132c <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014e8:	f7ff ff12 	bl	8001310 <__NVIC_GetPriorityGrouping>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff62 	bl	80013bc <NVIC_EncodePriority>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4619      	mov	r1, r3
 80014fc:	2039      	movs	r0, #57	@ 0x39
 80014fe:	f7ff ff33 	bl	8001368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001502:	2039      	movs	r0, #57	@ 0x39
 8001504:	f7ff ff12 	bl	800132c <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001508:	f7ff ff02 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800150c:	4603      	mov	r3, r0
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff52 	bl	80013bc <NVIC_EncodePriority>
 8001518:	4603      	mov	r3, r0
 800151a:	4619      	mov	r1, r3
 800151c:	2045      	movs	r0, #69	@ 0x45
 800151e:	f7ff ff23 	bl	8001368 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001522:	2045      	movs	r0, #69	@ 0x45
 8001524:	f7ff ff02 	bl	800132c <__NVIC_EnableIRQ>

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <LL_AHB1_GRP1_EnableClock>:
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001538:	4907      	ldr	r1, [pc, #28]	@ (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4013      	ands	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40023800 	.word	0x40023800

0800155c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001592:	2080      	movs	r0, #128	@ 0x80
 8001594:	f7ff ffca 	bl	800152c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff ffc7 	bl	800152c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800159e:	2002      	movs	r0, #2
 80015a0:	f7ff ffc4 	bl	800152c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80015a4:	2004      	movs	r0, #4
 80015a6:	f7ff ffc1 	bl	800152c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel4_CS_GPIO_Port, Dynamixel4_CS_Pin);
 80015aa:	2110      	movs	r1, #16
 80015ac:	4814      	ldr	r0, [pc, #80]	@ (8001600 <MX_GPIO_Init+0x84>)
 80015ae:	f7ff ffd5 	bl	800155c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel6_CS_GPIO_Port, Dynamixel6_CS_Pin);
 80015b2:	2101      	movs	r1, #1
 80015b4:	4813      	ldr	r0, [pc, #76]	@ (8001604 <MX_GPIO_Init+0x88>)
 80015b6:	f7ff ffd1 	bl	800155c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Dynamixel4_CS_Pin;
 80015ba:	2310      	movs	r3, #16
 80015bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015be:	2301      	movs	r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015c2:	2302      	movs	r3, #2
 80015c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015ca:	2302      	movs	r3, #2
 80015cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel4_CS_GPIO_Port, &GPIO_InitStruct);
 80015ce:	463b      	mov	r3, r7
 80015d0:	4619      	mov	r1, r3
 80015d2:	480b      	ldr	r0, [pc, #44]	@ (8001600 <MX_GPIO_Init+0x84>)
 80015d4:	f001 ff9e 	bl	8003514 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Dynamixel6_CS_Pin;
 80015d8:	2301      	movs	r3, #1
 80015da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015dc:	2301      	movs	r3, #1
 80015de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015e0:	2302      	movs	r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel6_CS_GPIO_Port, &GPIO_InitStruct);
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4804      	ldr	r0, [pc, #16]	@ (8001604 <MX_GPIO_Init+0x88>)
 80015f2:	f001 ff8f 	bl	8003514 <LL_GPIO_Init>

}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400

08001608 <__NVIC_SetPriorityGrouping>:
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <LL_RCC_HSE_EnableBypass+0x1c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <LL_RCC_HSE_EnableBypass+0x1c>)
 800165a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <LL_RCC_HSE_Enable+0x1c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a04      	ldr	r2, [pc, #16]	@ (800168c <LL_RCC_HSE_Enable+0x1c>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800

08001690 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <LL_RCC_HSE_IsReady+0x24>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016a0:	bf0c      	ite	eq
 80016a2:	2301      	moveq	r3, #1
 80016a4:	2300      	movne	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <LL_RCC_SetSysClkSource+0x24>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 0203 	bic.w	r2, r3, #3
 80016c8:	4904      	ldr	r1, [pc, #16]	@ (80016dc <LL_RCC_SetSysClkSource+0x24>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40023800 	.word	0x40023800

080016e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016e4:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <LL_RCC_GetSysClkSource+0x18>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <LL_RCC_SetAHBPrescaler+0x24>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800170c:	4904      	ldr	r1, [pc, #16]	@ (8001720 <LL_RCC_SetAHBPrescaler+0x24>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40023800 	.word	0x40023800

08001724 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <LL_RCC_SetAPB1Prescaler+0x24>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001734:	4904      	ldr	r1, [pc, #16]	@ (8001748 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	608b      	str	r3, [r1, #8]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40023800 	.word	0x40023800

0800174c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800175c:	4904      	ldr	r1, [pc, #16]	@ (8001770 <LL_RCC_SetAPB2Prescaler+0x24>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40023800 	.word	0x40023800

08001774 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <LL_RCC_SetTIMPrescaler+0x28>)
 800177e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001782:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001786:	4905      	ldr	r1, [pc, #20]	@ (800179c <LL_RCC_SetTIMPrescaler+0x28>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4313      	orrs	r3, r2
 800178c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40023800 	.word	0x40023800

080017a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <LL_RCC_PLL_Enable+0x1c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <LL_RCC_PLL_Enable+0x1c>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <LL_RCC_PLL_IsReady+0x24>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80017d0:	bf0c      	ite	eq
 80017d2:	2301      	moveq	r3, #1
 80017d4:	2300      	movne	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	68f9      	ldr	r1, [r7, #12]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	0192      	lsls	r2, r2, #6
 8001808:	430a      	orrs	r2, r1
 800180a:	490c      	ldr	r1, [pc, #48]	@ (800183c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001818:	4908      	ldr	r1, [pc, #32]	@ (800183c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001828:	4904      	ldr	r1, [pc, #16]	@ (800183c <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40023800 	.word	0x40023800
 8001840:	ffbf8000 	.word	0xffbf8000

08001844 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <LL_APB1_GRP1_EnableClock+0x2c>)
 800184e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001850:	4907      	ldr	r1, [pc, #28]	@ (8001870 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <LL_APB1_GRP1_EnableClock+0x2c>)
 800185a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4013      	ands	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40023800 	.word	0x40023800

08001874 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800187e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001880:	4907      	ldr	r1, [pc, #28]	@ (80018a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800188a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	40023800 	.word	0x40023800

080018a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <LL_FLASH_SetLatency+0x24>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 020f 	bic.w	r2, r3, #15
 80018b4:	4904      	ldr	r1, [pc, #16]	@ (80018c8 <LL_FLASH_SetLatency+0x24>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40023c00 	.word	0x40023c00

080018cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <LL_FLASH_GetLatency+0x18>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d106      	bne.n	8001904 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80018f6:	4b09      	ldr	r3, [pc, #36]	@ (800191c <LL_SYSTICK_SetClkSource+0x34>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a08      	ldr	r2, [pc, #32]	@ (800191c <LL_SYSTICK_SetClkSource+0x34>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001902:	e005      	b.n	8001910 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <LL_SYSTICK_SetClkSource+0x34>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <LL_SYSTICK_SetClkSource+0x34>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e010 	.word	0xe000e010

08001920 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <LL_SYSTICK_EnableIT+0x1c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a04      	ldr	r2, [pc, #16]	@ (800193c <LL_SYSTICK_EnableIT+0x1c>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <LL_PWR_EnableOverDriveMode+0x1c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <LL_PWR_EnableOverDriveMode+0x1c>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40007000 	.word	0x40007000

08001960 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001970:	4904      	ldr	r1, [pc, #16]	@ (8001984 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40007000 	.word	0x40007000

08001988 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800198c:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <LL_PWR_IsActiveFlag_VOS+0x24>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40007000 	.word	0x40007000

080019b0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	601a      	str	r2, [r3, #0]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f06f 0201 	mvn.w	r2, #1
 80019de:	611a      	str	r2, [r3, #16]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_USART_IsActiveFlag_TXE>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1c:	2b80      	cmp	r3, #128	@ 0x80
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	605a      	str	r2, [r3, #4]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001a56:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a5a:	f7ff ff0b 	bl	8001874 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001a5e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001a62:	f7ff feef 	bl	8001844 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a66:	2007      	movs	r0, #7
 8001a68:	f7ff fdce 	bl	8001608 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6c:	f000 f860 	bl	8001b30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_Init1msTick(180000000);			//Add here to fix MX generated code
 8001a70:	482c      	ldr	r0, [pc, #176]	@ (8001b24 <main+0xd4>)
 8001a72:	f002 fb1f 	bl	80040b4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001a76:	2004      	movs	r0, #4
 8001a78:	f7ff ff36 	bl	80018e8 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8001a7c:	f7ff ff50 	bl	8001920 <LL_SYSTICK_EnableIT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a80:	f7ff fd7c 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a84:	f7ff fce6 	bl	8001454 <MX_DMA_Init>
  MX_UART4_Init();
 8001a88:	f001 f9a2 	bl	8002dd0 <MX_UART4_Init>
  MX_USART6_UART_Init();
 8001a8c:	f001 fb0e 	bl	80030ac <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001a90:	f000 ff24 	bl	80028dc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001a94:	f001 fa5c 	bl	8002f50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 8001a98:	4823      	ldr	r0, [pc, #140]	@ (8001b28 <main+0xd8>)
 8001a9a:	f7ff ff99 	bl	80019d0 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM1);
 8001a9e:	4822      	ldr	r0, [pc, #136]	@ (8001b28 <main+0xd8>)
 8001aa0:	f7ff ffa4 	bl	80019ec <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 8001aa4:	4820      	ldr	r0, [pc, #128]	@ (8001b28 <main+0xd8>)
 8001aa6:	f7ff ff83 	bl	80019b0 <LL_TIM_EnableCounter>
//  uart4_dma_tx_start();
  usart6_dma_tx_start();
 8001aaa:	f000 fd0d 	bl	80024c8 <usart6_dma_tx_start>
  printf("start\r\n");
 8001aae:	481f      	ldr	r0, [pc, #124]	@ (8001b2c <main+0xdc>)
 8001ab0:	f002 fc6e 	bl	8004390 <puts>
  LL_mDelay(100);
 8001ab4:	2064      	movs	r0, #100	@ 0x64
 8001ab6:	f002 fb0b 	bl	80040d0 <LL_mDelay>
  UART4_DMA_Config();
 8001aba:	f7fe ff2d 	bl	8000918 <UART4_DMA_Config>
  USART6_DMA_Config();
 8001abe:	f7fe ff81 	bl	80009c4 <USART6_DMA_Config>
  uint8_t ID_list[1] = { 1 };
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	713b      	strb	r3, [r7, #4]
  SyncWrite_StatusReturnLevel(1, ID_list, 1);
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4619      	mov	r1, r3
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff fa95 	bl	8000ffc <SyncWrite_StatusReturnLevel>
//  LL_mDelay(10);
//  PING();
  SyncWrite_DisableDynamixels(1, ID_list);
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff f9b0 	bl	8000e3c <SyncWrite_DisableDynamixels>
//
//  for(int id = 3; id < 9; id++) {
	  TorqueEnable(1, 0);
 8001adc:	2100      	movs	r1, #0
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff f940 	bl	8000d64 <TorqueEnable>
//      LL_mDelay(1);
//      }
//
//  for(int id = 3; id < 9; id++) {
      OperatingMode(1, POSITION);
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff f8c4 	bl	8000c74 <OperatingMode>
//      LL_mDelay(1);
//      }
//
//  for(int id = 3; id < 9; id++) {
      TorqueEnable(1, 1);
 8001aec:	2101      	movs	r1, #1
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff f938 	bl	8000d64 <TorqueEnable>
//      LL_mDelay(1);
//      }
//
  SyncWrite_EnableDynamixels(1, ID_list);
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4619      	mov	r1, r3
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7ff fa0f 	bl	8000f1c <SyncWrite_EnableDynamixels>

	while(1){
		SyncLED_Enable(1, ID_list);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	2001      	movs	r0, #1
 8001b04:	f7ff fb62 	bl	80011cc <SyncLED_Enable>
		LL_mDelay(100);
 8001b08:	2064      	movs	r0, #100	@ 0x64
 8001b0a:	f002 fae1 	bl	80040d0 <LL_mDelay>
		SyncLED_Disable(1, ID_list);
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7ff faea 	bl	80010ec <SyncLED_Disable>
		LL_mDelay(100);
 8001b18:	2064      	movs	r0, #100	@ 0x64
 8001b1a:	f002 fad9 	bl	80040d0 <LL_mDelay>
		SyncLED_Enable(1, ID_list);
 8001b1e:	bf00      	nop
 8001b20:	e7ed      	b.n	8001afe <main+0xae>
 8001b22:	bf00      	nop
 8001b24:	0aba9500 	.word	0x0aba9500
 8001b28:	40010000 	.word	0x40010000
 8001b2c:	08005174 	.word	0x08005174

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001b34:	2005      	movs	r0, #5
 8001b36:	f7ff feb5 	bl	80018a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff fec6 	bl	80018cc <LL_FLASH_GetLatency>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d1fa      	bne.n	8001b3c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b46:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8001b4a:	f7ff ff09 	bl	8001960 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8001b4e:	f7ff fef7 	bl	8001940 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 8001b52:	f7ff fd7d 	bl	8001650 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8001b56:	f7ff fd8b 	bl	8001670 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff fd98 	bl	8001690 <LL_RCC_HSE_IsReady>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d1fa      	bne.n	8001b5c <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 8001b66:	2300      	movs	r3, #0
 8001b68:	22b4      	movs	r2, #180	@ 0xb4
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001b70:	f7ff fe3a 	bl	80017e8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b74:	f7ff fe14 	bl	80017a0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b78:	bf00      	nop
 8001b7a:	f7ff fe21 	bl	80017c0 <LL_RCC_PLL_IsReady>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d1fa      	bne.n	8001b7a <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001b84:	bf00      	nop
 8001b86:	f7ff feff 	bl	8001988 <LL_PWR_IsActiveFlag_VOS>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0fa      	beq.n	8001b86 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff fdb3 	bl	80016fc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001b96:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001b9a:	f7ff fdc3 	bl	8001724 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001b9e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ba2:	f7ff fdd3 	bl	800174c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f7ff fd86 	bl	80016b8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bac:	bf00      	nop
 8001bae:	f7ff fd97 	bl	80016e0 <LL_RCC_GetSysClkSource>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d1fa      	bne.n	8001bae <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 8001bb8:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <SystemClock_Config+0xa0>)
 8001bba:	f002 fa7b 	bl	80040b4 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 8001bbe:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <SystemClock_Config+0xa0>)
 8001bc0:	f002 faac 	bl	800411c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff fdd5 	bl	8001774 <LL_RCC_SetTIMPrescaler>
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0aba9500 	.word	0x0aba9500

08001bd4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e011      	b.n	8001c0a <_write+0x36>
		LL_USART_TransmitData8(USART2, (uint8_t)*ptr++);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	60ba      	str	r2, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480a      	ldr	r0, [pc, #40]	@ (8001c1c <_write+0x48>)
 8001bf2:	f7ff ff1e 	bl	8001a32 <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2) == RESET)
 8001bf6:	bf00      	nop
 8001bf8:	4808      	ldr	r0, [pc, #32]	@ (8001c1c <_write+0x48>)
 8001bfa:	f7ff ff07 	bl	8001a0c <LL_USART_IsActiveFlag_TXE>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f9      	beq.n	8001bf8 <_write+0x24>
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dbe9      	blt.n	8001be6 <_write+0x12>
			;
	}
	return len;
 8001c12:	687b      	ldr	r3, [r7, #4]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40004400 	.word	0x40004400

08001c20 <LL_DMA_EnableStream>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <LL_DMA_EnableStream+0x3c>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <LL_DMA_EnableStream+0x3c>)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	440a      	add	r2, r1
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	4611      	mov	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	440a      	add	r2, r1
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	0800520c 	.word	0x0800520c

08001c60 <LL_DMA_DisableStream>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c9c <LL_DMA_DisableStream+0x3c>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4908      	ldr	r1, [pc, #32]	@ (8001c9c <LL_DMA_DisableStream+0x3c>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	440a      	add	r2, r1
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	4611      	mov	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	440a      	add	r2, r1
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	0800520c 	.word	0x0800520c

08001ca0 <LL_DMA_IsEnabledStream>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <LL_DMA_IsEnabledStream+0x34>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	0800520c 	.word	0x0800520c

08001cd8 <LL_DMA_SetDataLength>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d1c <LL_DMA_SetDataLength+0x44>)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	041b      	lsls	r3, r3, #16
 8001cf8:	4908      	ldr	r1, [pc, #32]	@ (8001d1c <LL_DMA_SetDataLength+0x44>)
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	440a      	add	r2, r1
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	4611      	mov	r1, r2
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	440a      	add	r2, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	0800520c 	.word	0x0800520c

08001d20 <LL_DMA_SetMemoryAddress>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <LL_DMA_SetMemoryAddress+0x2c>)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	0800520c 	.word	0x0800520c

08001d50 <LL_DMA_SetPeriphAddress>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8001d5c:	4a07      	ldr	r2, [pc, #28]	@ (8001d7c <LL_DMA_SetPeriphAddress+0x2c>)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6093      	str	r3, [r2, #8]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	0800520c 	.word	0x0800520c

08001d80 <LL_DMA_IsActiveFlag_TC1>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d94:	bf0c      	ite	eq
 8001d96:	2301      	moveq	r3, #1
 8001d98:	2300      	movne	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_DMA_IsActiveFlag_TC2>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dbc:	bf0c      	ite	eq
 8001dbe:	2301      	moveq	r3, #1
 8001dc0:	2300      	movne	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_DMA_IsActiveFlag_TC4>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_DMA_IsActiveFlag_TC5>:
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_DMA_IsActiveFlag_TC6>:
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_DMA_ClearFlag_HT1>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e54:	609a      	str	r2, [r3, #8]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_DMA_ClearFlag_HT2>:
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e70:	609a      	str	r2, [r3, #8]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_DMA_ClearFlag_HT6>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e8c:	60da      	str	r2, [r3, #12]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <LL_DMA_ClearFlag_TC1>:
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ea8:	609a      	str	r2, [r3, #8]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_DMA_ClearFlag_TC2>:
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ec4:	609a      	str	r2, [r3, #8]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_DMA_ClearFlag_TC4>:
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	60da      	str	r2, [r3, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_DMA_ClearFlag_TC5>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001efa:	60da      	str	r2, [r3, #12]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_DMA_ClearFlag_TC6>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001f16:	60da      	str	r2, [r3, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_DMA_ClearFlag_TE1>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f32:	609a      	str	r2, [r3, #8]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_DMA_ClearFlag_TE2>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_DMA_ClearFlag_TE6>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f6a:	60da      	str	r2, [r3, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_DMA_EnableIT_TC>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8001f82:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <LL_DMA_EnableIT_TC+0x3c>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <LL_DMA_EnableIT_TC+0x3c>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	440a      	add	r2, r1
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	440a      	add	r2, r1
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6013      	str	r3, [r2, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	0800520c 	.word	0x0800520c

08001fb8 <LL_TIM_ClearFlag_UPDATE>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f06f 0201 	mvn.w	r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_USART_IsActiveFlag_TC>:
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200a:	2b40      	cmp	r3, #64	@ 0x40
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_USART_ClearFlag_TC>:
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_USART_EnableDMAReq_RX>:
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	@ 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3314      	adds	r3, #20
 8002048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	e853 3f00 	ldrex	r3, [r3]
 8002050:	60bb      	str	r3, [r7, #8]
   return(result);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3314      	adds	r3, #20
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	61ba      	str	r2, [r7, #24]
 8002062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002064:	6979      	ldr	r1, [r7, #20]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	e841 2300 	strex	r3, r2, [r1]
 800206c:	613b      	str	r3, [r7, #16]
   return(result);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e7      	bne.n	8002044 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3724      	adds	r7, #36	@ 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_USART_EnableDMAReq_TX>:
{
 8002082:	b480      	push	{r7}
 8002084:	b089      	sub	sp, #36	@ 0x24
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3314      	adds	r3, #20
 800208e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	e853 3f00 	ldrex	r3, [r3]
 8002096:	60bb      	str	r3, [r7, #8]
   return(result);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3314      	adds	r3, #20
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	61ba      	str	r2, [r7, #24]
 80020a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020aa:	6979      	ldr	r1, [r7, #20]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	e841 2300 	strex	r3, r2, [r1]
 80020b2:	613b      	str	r3, [r7, #16]
   return(result);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1e7      	bne.n	800208a <LL_USART_EnableDMAReq_TX+0x8>
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	3724      	adds	r7, #36	@ 0x24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_USART_DisableDMAReq_TX>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3314      	adds	r3, #20
 80020d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	e853 3f00 	ldrex	r3, [r3]
 80020dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3314      	adds	r3, #20
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	61ba      	str	r2, [r7, #24]
 80020ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f0:	6979      	ldr	r1, [r7, #20]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	e841 2300 	strex	r3, r2, [r1]
 80020f8:	613b      	str	r3, [r7, #16]
   return(result);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e7      	bne.n	80020d0 <LL_USART_DisableDMAReq_TX+0x8>
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3724      	adds	r7, #36	@ 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_USART_DMA_GetRegAddr>:
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <LL_GPIO_ResetOutputPin>:
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	041a      	lsls	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	619a      	str	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <NMI_Handler+0x4>

0800214c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <HardFault_Handler+0x4>

08002154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <MemManage_Handler+0x4>

0800215c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <BusFault_Handler+0x4>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <UsageFault_Handler+0x4>

0800216c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1)) {
 80021a8:	4814      	ldr	r0, [pc, #80]	@ (80021fc <DMA1_Stream2_IRQHandler+0x58>)
 80021aa:	f7ff fdfd 	bl	8001da8 <LL_DMA_IsActiveFlag_TC2>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d021      	beq.n	80021f8 <DMA1_Stream2_IRQHandler+0x54>
			LL_DMA_ClearFlag_TC2(DMA1);
 80021b4:	4811      	ldr	r0, [pc, #68]	@ (80021fc <DMA1_Stream2_IRQHandler+0x58>)
 80021b6:	f7ff fe7e 	bl	8001eb6 <LL_DMA_ClearFlag_TC2>
			printf("stream2 it\r\n");
 80021ba:	4811      	ldr	r0, [pc, #68]	@ (8002200 <DMA1_Stream2_IRQHandler+0x5c>)
 80021bc:	f002 f8e8 	bl	8004390 <puts>
			readStatusPacket_pos_DMA(dynamixel_position);
 80021c0:	4810      	ldr	r0, [pc, #64]	@ (8002204 <DMA1_Stream2_IRQHandler+0x60>)
 80021c2:	f7fe fcef 	bl	8000ba4 <readStatusPacket_pos_DMA>
//			readStatusPacket_PING(dynamixel_position);
//	        readStatusPacket_pos_vel_DMA(dynamixel_position, dynamixel_velocity);
//	        readStatusPacket_pos_vel_cur_DMA(dynamixel_position, dynamixel_velocity, dynamixel_current);
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 80021c6:	2102      	movs	r1, #2
 80021c8:	480c      	ldr	r0, [pc, #48]	@ (80021fc <DMA1_Stream2_IRQHandler+0x58>)
 80021ca:	f7ff fd49 	bl	8001c60 <LL_DMA_DisableStream>
			Packet_Return -= 1;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <DMA1_Stream2_IRQHandler+0x64>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <DMA1_Stream2_IRQHandler+0x64>)
 80021d8:	701a      	strb	r2, [r3, #0]
			if(Packet_Return == 0) {
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <DMA1_Stream2_IRQHandler+0x64>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <DMA1_Stream2_IRQHandler+0x4c>
				Is_dynamixel_GetData = 1;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <DMA1_Stream2_IRQHandler+0x68>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
				dynamixel_Ready = 1;
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <DMA1_Stream2_IRQHandler+0x6c>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021ee:	e003      	b.n	80021f8 <DMA1_Stream2_IRQHandler+0x54>
			    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 80021f0:	2102      	movs	r1, #2
 80021f2:	4802      	ldr	r0, [pc, #8]	@ (80021fc <DMA1_Stream2_IRQHandler+0x58>)
 80021f4:	f7ff fd14 	bl	8001c20 <LL_DMA_EnableStream>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40026000 	.word	0x40026000
 8002200:	0800517c 	.word	0x0800517c
 8002204:	20000354 	.word	0x20000354
 8002208:	20000001 	.word	0x20000001
 800220c:	200003a0 	.word	0x200003a0
 8002210:	20000000 	.word	0x20000000

08002214 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1) {
 8002218:	480c      	ldr	r0, [pc, #48]	@ (800224c <DMA1_Stream4_IRQHandler+0x38>)
 800221a:	f7ff fdd9 	bl	8001dd0 <LL_DMA_IsActiveFlag_TC4>
 800221e:	4603      	mov	r3, r0
 8002220:	2b01      	cmp	r3, #1
 8002222:	d111      	bne.n	8002248 <DMA1_Stream4_IRQHandler+0x34>
		    printf("DMA TX Complete\r\n");
 8002224:	480a      	ldr	r0, [pc, #40]	@ (8002250 <DMA1_Stream4_IRQHandler+0x3c>)
 8002226:	f002 f8b3 	bl	8004390 <puts>
			LL_DMA_ClearFlag_TC4(DMA1);
 800222a:	4808      	ldr	r0, [pc, #32]	@ (800224c <DMA1_Stream4_IRQHandler+0x38>)
 800222c:	f7ff fe51 	bl	8001ed2 <LL_DMA_ClearFlag_TC4>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8002230:	2104      	movs	r1, #4
 8002232:	4806      	ldr	r0, [pc, #24]	@ (800224c <DMA1_Stream4_IRQHandler+0x38>)
 8002234:	f7ff fd14 	bl	8001c60 <LL_DMA_DisableStream>
			LL_USART_DisableDMAReq_TX(UART4);
 8002238:	4806      	ldr	r0, [pc, #24]	@ (8002254 <DMA1_Stream4_IRQHandler+0x40>)
 800223a:	f7ff ff45 	bl	80020c8 <LL_USART_DisableDMAReq_TX>
			uart4_dma_rx_start();
 800223e:	f000 f8fd 	bl	800243c <uart4_dma_rx_start>
			dynamixel_Ready = 1;
 8002242:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <DMA1_Stream4_IRQHandler+0x44>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40026000 	.word	0x40026000
 8002250:	08005188 	.word	0x08005188
 8002254:	40004c00 	.word	0x40004c00
 8002258:	20000000 	.word	0x20000000

0800225c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 8002260:	4807      	ldr	r0, [pc, #28]	@ (8002280 <DMA1_Stream5_IRQHandler+0x24>)
 8002262:	f7ff fdc8 	bl	8001df6 <LL_DMA_IsActiveFlag_TC5>
 8002266:	4603      	mov	r3, r0
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <DMA1_Stream5_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC5(DMA1);
 800226c:	4804      	ldr	r0, [pc, #16]	@ (8002280 <DMA1_Stream5_IRQHandler+0x24>)
 800226e:	f7ff fe3d 	bl	8001eec <LL_DMA_ClearFlag_TC5>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 8002272:	2105      	movs	r1, #5
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <DMA1_Stream5_IRQHandler+0x24>)
 8002276:	f7ff fcf3 	bl	8001c60 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40026000 	.word	0x40026000

08002284 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1) {
 8002288:	4807      	ldr	r0, [pc, #28]	@ (80022a8 <DMA1_Stream6_IRQHandler+0x24>)
 800228a:	f7ff fdc8 	bl	8001e1e <LL_DMA_IsActiveFlag_TC6>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <DMA1_Stream6_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC6(DMA1);
 8002294:	4804      	ldr	r0, [pc, #16]	@ (80022a8 <DMA1_Stream6_IRQHandler+0x24>)
 8002296:	f7ff fe37 	bl	8001f08 <LL_DMA_ClearFlag_TC6>

			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 800229a:	2106      	movs	r1, #6
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <DMA1_Stream6_IRQHandler+0x24>)
 800229e:	f7ff fcdf 	bl	8001c60 <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40026000 	.word	0x40026000

080022ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 80022b0:	4806      	ldr	r0, [pc, #24]	@ (80022cc <TIM1_UP_TIM10_IRQHandler+0x20>)
 80022b2:	f7ff fe8f 	bl	8001fd4 <LL_TIM_IsActiveFlag_UPDATE>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <TIM1_UP_TIM10_IRQHandler+0x1c>
			LL_TIM_ClearFlag_UPDATE(TIM1);
 80022bc:	4803      	ldr	r0, [pc, #12]	@ (80022cc <TIM1_UP_TIM10_IRQHandler+0x20>)
 80022be:	f7ff fe7b 	bl	8001fb8 <LL_TIM_ClearFlag_UPDATE>
			start_trans_mx = 1;
 80022c2:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40010000 	.word	0x40010000
 80022d0:	200003c4 	.word	0x200003c4

080022d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	printf("uart4 it\r\n");
 80022d8:	480f      	ldr	r0, [pc, #60]	@ (8002318 <UART4_IRQHandler+0x44>)
 80022da:	f002 f859 	bl	8004390 <puts>
	LL_mDelay(100);
 80022de:	2064      	movs	r0, #100	@ 0x64
 80022e0:	f001 fef6 	bl	80040d0 <LL_mDelay>
	if(LL_USART_IsActiveFlag_TC(UART4) == 1) {
 80022e4:	480d      	ldr	r0, [pc, #52]	@ (800231c <UART4_IRQHandler+0x48>)
 80022e6:	f7ff fe88 	bl	8001ffa <LL_USART_IsActiveFlag_TC>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d111      	bne.n	8002314 <UART4_IRQHandler+0x40>
		    printf("TX complete, switching to RX mode\r\n");
 80022f0:	480b      	ldr	r0, [pc, #44]	@ (8002320 <UART4_IRQHandler+0x4c>)
 80022f2:	f002 f84d 	bl	8004390 <puts>
		    LL_USART_ClearFlag_TC(UART4);
 80022f6:	4809      	ldr	r0, [pc, #36]	@ (800231c <UART4_IRQHandler+0x48>)
 80022f8:	f7ff fe92 	bl	8002020 <LL_USART_ClearFlag_TC>
	#if USE_THREE_STATE_GATE == 1
			LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80022fc:	2110      	movs	r1, #16
 80022fe:	4809      	ldr	r0, [pc, #36]	@ (8002324 <UART4_IRQHandler+0x50>)
 8002300:	f7ff ff11 	bl	8002126 <LL_GPIO_ResetOutputPin>
	#else
			LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_RX); //change UART direction
	#endif
				if(Packet_Return == 0) {
 8002304:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <UART4_IRQHandler+0x54>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d103      	bne.n	8002314 <UART4_IRQHandler+0x40>
					dynamixel_Ready = 1;
 800230c:	4b07      	ldr	r3, [pc, #28]	@ (800232c <UART4_IRQHandler+0x58>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
					return;
 8002312:	bf00      	nop
			}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	0800519c 	.word	0x0800519c
 800231c:	40004c00 	.word	0x40004c00
 8002320:	080051a8 	.word	0x080051a8
 8002324:	40020000 	.word	0x40020000
 8002328:	20000001 	.word	0x20000001
 800232c:	20000000 	.word	0x20000000

08002330 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA2)) {
 8002334:	4814      	ldr	r0, [pc, #80]	@ (8002388 <DMA2_Stream1_IRQHandler+0x58>)
 8002336:	f7ff fd23 	bl	8001d80 <LL_DMA_IsActiveFlag_TC1>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d021      	beq.n	8002384 <DMA2_Stream1_IRQHandler+0x54>
		LL_DMA_ClearFlag_TC1(DMA2);
 8002340:	4811      	ldr	r0, [pc, #68]	@ (8002388 <DMA2_Stream1_IRQHandler+0x58>)
 8002342:	f7ff fdaa 	bl	8001e9a <LL_DMA_ClearFlag_TC1>
		printf("stream1 it\r\n");
 8002346:	4811      	ldr	r0, [pc, #68]	@ (800238c <DMA2_Stream1_IRQHandler+0x5c>)
 8002348:	f002 f822 	bl	8004390 <puts>
		readStatusPacket_pos_DMA(dynamixel_position);
 800234c:	4810      	ldr	r0, [pc, #64]	@ (8002390 <DMA2_Stream1_IRQHandler+0x60>)
 800234e:	f7fe fc29 	bl	8000ba4 <readStatusPacket_pos_DMA>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8002352:	2101      	movs	r1, #1
 8002354:	480c      	ldr	r0, [pc, #48]	@ (8002388 <DMA2_Stream1_IRQHandler+0x58>)
 8002356:	f7ff fc83 	bl	8001c60 <LL_DMA_DisableStream>
		Packet_Return -= 1;
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <DMA2_Stream1_IRQHandler+0x64>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	3b01      	subs	r3, #1
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <DMA2_Stream1_IRQHandler+0x64>)
 8002364:	701a      	strb	r2, [r3, #0]
		if(Packet_Return == 0) {
 8002366:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <DMA2_Stream1_IRQHandler+0x64>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <DMA2_Stream1_IRQHandler+0x4c>
			Is_dynamixel_GetData = 1;
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <DMA2_Stream1_IRQHandler+0x68>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
			dynamixel_Ready = 1;
 8002374:	4b09      	ldr	r3, [pc, #36]	@ (800239c <DMA2_Stream1_IRQHandler+0x6c>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800237a:	e003      	b.n	8002384 <DMA2_Stream1_IRQHandler+0x54>
			LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 800237c:	2101      	movs	r1, #1
 800237e:	4802      	ldr	r0, [pc, #8]	@ (8002388 <DMA2_Stream1_IRQHandler+0x58>)
 8002380:	f7ff fc4e 	bl	8001c20 <LL_DMA_EnableStream>
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40026400 	.word	0x40026400
 800238c:	080051cc 	.word	0x080051cc
 8002390:	20000354 	.word	0x20000354
 8002394:	20000001 	.word	0x20000001
 8002398:	200003a0 	.word	0x200003a0
 800239c:	20000000 	.word	0x20000000

080023a0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA2) == 1) {
 80023a4:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <DMA2_Stream6_IRQHandler+0x38>)
 80023a6:	f7ff fd3a 	bl	8001e1e <LL_DMA_IsActiveFlag_TC6>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d111      	bne.n	80023d4 <DMA2_Stream6_IRQHandler+0x34>
		printf("DMA TX Complete\r\n");
 80023b0:	480a      	ldr	r0, [pc, #40]	@ (80023dc <DMA2_Stream6_IRQHandler+0x3c>)
 80023b2:	f001 ffed 	bl	8004390 <puts>
		LL_DMA_ClearFlag_TC6(DMA2);
 80023b6:	4808      	ldr	r0, [pc, #32]	@ (80023d8 <DMA2_Stream6_IRQHandler+0x38>)
 80023b8:	f7ff fda6 	bl	8001f08 <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 80023bc:	2106      	movs	r1, #6
 80023be:	4806      	ldr	r0, [pc, #24]	@ (80023d8 <DMA2_Stream6_IRQHandler+0x38>)
 80023c0:	f7ff fc4e 	bl	8001c60 <LL_DMA_DisableStream>
		LL_USART_DisableDMAReq_TX(USART6);
 80023c4:	4806      	ldr	r0, [pc, #24]	@ (80023e0 <DMA2_Stream6_IRQHandler+0x40>)
 80023c6:	f7ff fe7f 	bl	80020c8 <LL_USART_DisableDMAReq_TX>
		usart6_dma_rx_start();
 80023ca:	f000 f8bf 	bl	800254c <usart6_dma_rx_start>
		dynamixel_Ready = 1;
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <DMA2_Stream6_IRQHandler+0x44>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40026400 	.word	0x40026400
 80023dc:	08005188 	.word	0x08005188
 80023e0:	40011400 	.word	0x40011400
 80023e4:	20000000 	.word	0x20000000

080023e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	printf("usart6 it\r\n");
 80023ec:	480d      	ldr	r0, [pc, #52]	@ (8002424 <USART6_IRQHandler+0x3c>)
 80023ee:	f001 ffcf 	bl	8004390 <puts>
//		LL_mDelay(100);
		if(LL_USART_IsActiveFlag_TC(USART6) == 1) {
 80023f2:	480d      	ldr	r0, [pc, #52]	@ (8002428 <USART6_IRQHandler+0x40>)
 80023f4:	f7ff fe01 	bl	8001ffa <LL_USART_IsActiveFlag_TC>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d111      	bne.n	8002422 <USART6_IRQHandler+0x3a>
			    printf("TX complete, switching to RX mode\r\n");
 80023fe:	480b      	ldr	r0, [pc, #44]	@ (800242c <USART6_IRQHandler+0x44>)
 8002400:	f001 ffc6 	bl	8004390 <puts>
			    LL_USART_ClearFlag_TC(USART6);
 8002404:	4808      	ldr	r0, [pc, #32]	@ (8002428 <USART6_IRQHandler+0x40>)
 8002406:	f7ff fe0b 	bl	8002020 <LL_USART_ClearFlag_TC>
		#if USE_THREE_STATE_GATE == 1
				LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 800240a:	2101      	movs	r1, #1
 800240c:	4808      	ldr	r0, [pc, #32]	@ (8002430 <USART6_IRQHandler+0x48>)
 800240e:	f7ff fe8a 	bl	8002126 <LL_GPIO_ResetOutputPin>
		#else
				LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_RX); //change UART direction
		#endif
					if(Packet_Return == 0) {
 8002412:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <USART6_IRQHandler+0x4c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <USART6_IRQHandler+0x3a>
						dynamixel_Ready = 1;
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <USART6_IRQHandler+0x50>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
						return;
 8002420:	bf00      	nop
		}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002422:	bd80      	pop	{r7, pc}
 8002424:	080051d8 	.word	0x080051d8
 8002428:	40011400 	.word	0x40011400
 800242c:	080051a8 	.word	0x080051a8
 8002430:	40020400 	.word	0x40020400
 8002434:	20000001 	.word	0x20000001
 8002438:	20000000 	.word	0x20000000

0800243c <uart4_dma_rx_start>:
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
    LL_USART_EnableDMAReq_TX(UART4);
}
void uart4_dma_rx_start(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8002440:	2102      	movs	r1, #2
 8002442:	481c      	ldr	r0, [pc, #112]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 8002444:	f7ff fc0c 	bl	8001c60 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_2));
 8002448:	bf00      	nop
 800244a:	2102      	movs	r1, #2
 800244c:	4819      	ldr	r0, [pc, #100]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 800244e:	f7ff fc27 	bl	8001ca0 <LL_DMA_IsEnabledStream>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f8      	bne.n	800244a <uart4_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC2(DMA1);
 8002458:	4816      	ldr	r0, [pc, #88]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 800245a:	f7ff fd2c 	bl	8001eb6 <LL_DMA_ClearFlag_TC2>
    LL_DMA_ClearFlag_TE2(DMA1);
 800245e:	4815      	ldr	r0, [pc, #84]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 8002460:	f7ff fd6e 	bl	8001f40 <LL_DMA_ClearFlag_TE2>
    LL_DMA_ClearFlag_HT2(DMA2);
 8002464:	4814      	ldr	r0, [pc, #80]	@ (80024b8 <uart4_dma_rx_start+0x7c>)
 8002466:	f7ff fcfc 	bl	8001e62 <LL_DMA_ClearFlag_HT2>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 800246a:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <uart4_dma_rx_start+0x80>)
 800246c:	461a      	mov	r2, r3
 800246e:	2102      	movs	r1, #2
 8002470:	4810      	ldr	r0, [pc, #64]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 8002472:	f7ff fc55 	bl	8001d20 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 8002476:	4812      	ldr	r0, [pc, #72]	@ (80024c0 <uart4_dma_rx_start+0x84>)
 8002478:	f7ff fe49 	bl	800210e <LL_USART_DMA_GetRegAddr>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	2102      	movs	r1, #2
 8002482:	480c      	ldr	r0, [pc, #48]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 8002484:	f7ff fc64 	bl	8001d50 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8002488:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <uart4_dma_rx_start+0x88>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3304      	adds	r3, #4
 800248e:	461a      	mov	r2, r3
 8002490:	2102      	movs	r1, #2
 8002492:	4808      	ldr	r0, [pc, #32]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 8002494:	f7ff fc20 	bl	8001cd8 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 8002498:	2102      	movs	r1, #2
 800249a:	4806      	ldr	r0, [pc, #24]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 800249c:	f7ff fd6c 	bl	8001f78 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 80024a0:	2102      	movs	r1, #2
 80024a2:	4804      	ldr	r0, [pc, #16]	@ (80024b4 <uart4_dma_rx_start+0x78>)
 80024a4:	f7ff fbbc 	bl	8001c20 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(UART4);
 80024a8:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <uart4_dma_rx_start+0x84>)
 80024aa:	f7ff fdc7 	bl	800203c <LL_USART_EnableDMAReq_RX>
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40026000 	.word	0x40026000
 80024b8:	40026400 	.word	0x40026400
 80024bc:	200003a8 	.word	0x200003a8
 80024c0:	40004c00 	.word	0x40004c00
 80024c4:	200003a4 	.word	0x200003a4

080024c8 <usart6_dma_tx_start>:
void usart6_dma_tx_start(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
    printf("DMA6 started\r\n");
 80024cc:	481a      	ldr	r0, [pc, #104]	@ (8002538 <usart6_dma_tx_start+0x70>)
 80024ce:	f001 ff5f 	bl	8004390 <puts>
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 80024d2:	2106      	movs	r1, #6
 80024d4:	4819      	ldr	r0, [pc, #100]	@ (800253c <usart6_dma_tx_start+0x74>)
 80024d6:	f7ff fbc3 	bl	8001c60 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_6));
 80024da:	bf00      	nop
 80024dc:	2106      	movs	r1, #6
 80024de:	4817      	ldr	r0, [pc, #92]	@ (800253c <usart6_dma_tx_start+0x74>)
 80024e0:	f7ff fbde 	bl	8001ca0 <LL_DMA_IsEnabledStream>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f8      	bne.n	80024dc <usart6_dma_tx_start+0x14>

    LL_DMA_ClearFlag_TC6(DMA2);
 80024ea:	4814      	ldr	r0, [pc, #80]	@ (800253c <usart6_dma_tx_start+0x74>)
 80024ec:	f7ff fd0c 	bl	8001f08 <LL_DMA_ClearFlag_TC6>
    LL_DMA_ClearFlag_TE6(DMA2);
 80024f0:	4812      	ldr	r0, [pc, #72]	@ (800253c <usart6_dma_tx_start+0x74>)
 80024f2:	f7ff fd33 	bl	8001f5c <LL_DMA_ClearFlag_TE6>
    LL_DMA_ClearFlag_HT6(DMA2);
 80024f6:	4811      	ldr	r0, [pc, #68]	@ (800253c <usart6_dma_tx_start+0x74>)
 80024f8:	f7ff fcc1 	bl	8001e7e <LL_DMA_ClearFlag_HT6>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)tx_data);
 80024fc:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <usart6_dma_tx_start+0x78>)
 80024fe:	461a      	mov	r2, r3
 8002500:	2106      	movs	r1, #6
 8002502:	480e      	ldr	r0, [pc, #56]	@ (800253c <usart6_dma_tx_start+0x74>)
 8002504:	f7ff fc0c 	bl	8001d20 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)&USART6->DR);
 8002508:	4a0e      	ldr	r2, [pc, #56]	@ (8002544 <usart6_dma_tx_start+0x7c>)
 800250a:	2106      	movs	r1, #6
 800250c:	480b      	ldr	r0, [pc, #44]	@ (800253c <usart6_dma_tx_start+0x74>)
 800250e:	f7ff fc1f 	bl	8001d50 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, sizeof(tx_data));
 8002512:	2209      	movs	r2, #9
 8002514:	2106      	movs	r1, #6
 8002516:	4809      	ldr	r0, [pc, #36]	@ (800253c <usart6_dma_tx_start+0x74>)
 8002518:	f7ff fbde 	bl	8001cd8 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
 800251c:	2106      	movs	r1, #6
 800251e:	4807      	ldr	r0, [pc, #28]	@ (800253c <usart6_dma_tx_start+0x74>)
 8002520:	f7ff fd2a 	bl	8001f78 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 8002524:	2106      	movs	r1, #6
 8002526:	4805      	ldr	r0, [pc, #20]	@ (800253c <usart6_dma_tx_start+0x74>)
 8002528:	f7ff fb7a 	bl	8001c20 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_TX(USART6);
 800252c:	4806      	ldr	r0, [pc, #24]	@ (8002548 <usart6_dma_tx_start+0x80>)
 800252e:	f7ff fda8 	bl	8002082 <LL_USART_EnableDMAReq_TX>
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	080051f4 	.word	0x080051f4
 800253c:	40026400 	.word	0x40026400
 8002540:	200002cc 	.word	0x200002cc
 8002544:	40011404 	.word	0x40011404
 8002548:	40011400 	.word	0x40011400

0800254c <usart6_dma_rx_start>:
void usart6_dma_rx_start(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8002550:	2101      	movs	r1, #1
 8002552:	481c      	ldr	r0, [pc, #112]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 8002554:	f7ff fb84 	bl	8001c60 <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_1));
 8002558:	bf00      	nop
 800255a:	2101      	movs	r1, #1
 800255c:	4819      	ldr	r0, [pc, #100]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 800255e:	f7ff fb9f 	bl	8001ca0 <LL_DMA_IsEnabledStream>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f8      	bne.n	800255a <usart6_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC1(DMA2);
 8002568:	4816      	ldr	r0, [pc, #88]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 800256a:	f7ff fc96 	bl	8001e9a <LL_DMA_ClearFlag_TC1>
    LL_DMA_ClearFlag_TE1(DMA2);
 800256e:	4815      	ldr	r0, [pc, #84]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 8002570:	f7ff fcd8 	bl	8001f24 <LL_DMA_ClearFlag_TE1>
    LL_DMA_ClearFlag_HT1(DMA2);
 8002574:	4813      	ldr	r0, [pc, #76]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 8002576:	f7ff fc66 	bl	8001e46 <LL_DMA_ClearFlag_HT1>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 800257a:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <usart6_dma_rx_start+0x7c>)
 800257c:	461a      	mov	r2, r3
 800257e:	2101      	movs	r1, #1
 8002580:	4810      	ldr	r0, [pc, #64]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 8002582:	f7ff fbcd 	bl	8001d20 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 8002586:	4811      	ldr	r0, [pc, #68]	@ (80025cc <usart6_dma_rx_start+0x80>)
 8002588:	f7ff fdc1 	bl	800210e <LL_USART_DMA_GetRegAddr>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	2101      	movs	r1, #1
 8002592:	480c      	ldr	r0, [pc, #48]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 8002594:	f7ff fbdc 	bl	8001d50 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 8002598:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <usart6_dma_rx_start+0x84>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3304      	adds	r3, #4
 800259e:	461a      	mov	r2, r3
 80025a0:	2101      	movs	r1, #1
 80025a2:	4808      	ldr	r0, [pc, #32]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 80025a4:	f7ff fb98 	bl	8001cd8 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 80025a8:	2101      	movs	r1, #1
 80025aa:	4806      	ldr	r0, [pc, #24]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 80025ac:	f7ff fce4 	bl	8001f78 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 80025b0:	2101      	movs	r1, #1
 80025b2:	4804      	ldr	r0, [pc, #16]	@ (80025c4 <usart6_dma_rx_start+0x78>)
 80025b4:	f7ff fb34 	bl	8001c20 <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(USART6);
 80025b8:	4804      	ldr	r0, [pc, #16]	@ (80025cc <usart6_dma_rx_start+0x80>)
 80025ba:	f7ff fd3f 	bl	800203c <LL_USART_EnableDMAReq_RX>
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40026400 	.word	0x40026400
 80025c8:	200003a8 	.word	0x200003a8
 80025cc:	40011400 	.word	0x40011400
 80025d0:	200003a4 	.word	0x200003a4

080025d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e00a      	b.n	80025fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025e6:	f3af 8000 	nop.w
 80025ea:	4601      	mov	r1, r0
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	60ba      	str	r2, [r7, #8]
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf0      	blt.n	80025e6 <_read+0x12>
  }

  return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_close>:
  }
  return len;
}

int _close(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002636:	605a      	str	r2, [r3, #4]
  return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_isatty>:

int _isatty(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002680:	4a14      	ldr	r2, [pc, #80]	@ (80026d4 <_sbrk+0x5c>)
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <_sbrk+0x60>)
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800268c:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <_sbrk+0x64>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <_sbrk+0x64>)
 8002696:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <_sbrk+0x68>)
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d207      	bcs.n	80026b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a8:	f001 ffa0 	bl	80045ec <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
 80026b6:	e009      	b.n	80026cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b8:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026be:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a05      	ldr	r2, [pc, #20]	@ (80026dc <_sbrk+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20020000 	.word	0x20020000
 80026d8:	00000400 	.word	0x00000400
 80026dc:	200003c8 	.word	0x200003c8
 80026e0:	20000518 	.word	0x20000518

080026e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <SystemInit+0x20>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	4a05      	ldr	r2, [pc, #20]	@ (8002704 <SystemInit+0x20>)
 80026f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_GetPriorityGrouping>:
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_EnableIRQ>:
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db0b      	blt.n	800274e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4907      	ldr	r1, [pc, #28]	@ (800275c <__NVIC_EnableIRQ+0x38>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2001      	movs	r0, #1
 8002746:	fa00 f202 	lsl.w	r2, r0, r2
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	@ (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	@ 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <LL_APB2_GRP1_EnableClock>:
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002824:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002826:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002828:	4907      	ldr	r1, [pc, #28]	@ (8002848 <LL_APB2_GRP1_EnableClock+0x2c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4313      	orrs	r3, r2
 800282e:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4013      	ands	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800283a:	68fb      	ldr	r3, [r7, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40023800 	.word	0x40023800

0800284c <LL_TIM_DisableARRPreload>:
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	601a      	str	r2, [r3, #0]
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_TIM_SetClockSource>:
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800287e:	f023 0307 	bic.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	609a      	str	r2, [r3, #8]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_TIM_SetTriggerOutput>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_TIM_DisableMasterSlaveMode>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	609a      	str	r2, [r3, #8]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80028f0:	2001      	movs	r0, #1
 80028f2:	f7ff ff93 	bl	800281c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80028f6:	f7ff ff07 	bl	8002708 <__NVIC_GetPriorityGrouping>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff57 	bl	80027b4 <NVIC_EncodePriority>
 8002906:	4603      	mov	r3, r0
 8002908:	4619      	mov	r1, r3
 800290a:	2019      	movs	r0, #25
 800290c:	f7ff ff28 	bl	8002760 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002910:	2019      	movs	r0, #25
 8002912:	f7ff ff07 	bl	8002724 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 29;
 8002916:	231d      	movs	r3, #29
 8002918:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 60000;
 800291e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002922:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	4619      	mov	r1, r3
 8002930:	480a      	ldr	r0, [pc, #40]	@ (800295c <MX_TIM1_Init+0x80>)
 8002932:	f001 f823 	bl	800397c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002936:	4809      	ldr	r0, [pc, #36]	@ (800295c <MX_TIM1_Init+0x80>)
 8002938:	f7ff ff88 	bl	800284c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800293c:	2100      	movs	r1, #0
 800293e:	4807      	ldr	r0, [pc, #28]	@ (800295c <MX_TIM1_Init+0x80>)
 8002940:	f7ff ff94 	bl	800286c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002944:	2100      	movs	r1, #0
 8002946:	4805      	ldr	r0, [pc, #20]	@ (800295c <MX_TIM1_Init+0x80>)
 8002948:	f7ff ffa5 	bl	8002896 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800294c:	4803      	ldr	r0, [pc, #12]	@ (800295c <MX_TIM1_Init+0x80>)
 800294e:	f7ff ffb5 	bl	80028bc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000

08002960 <__NVIC_GetPriorityGrouping>:
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <__NVIC_GetPriorityGrouping+0x18>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0307 	and.w	r3, r3, #7
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_EnableIRQ>:
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4907      	ldr	r1, [pc, #28]	@ (80029b4 <__NVIC_EnableIRQ+0x38>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	@ (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	@ (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	@ 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	@ 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <LL_DMA_SetDataTransferDirection>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002a80:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <LL_DMA_SetDataTransferDirection+0x44>)
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4413      	add	r3, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a94:	4908      	ldr	r1, [pc, #32]	@ (8002ab8 <LL_DMA_SetDataTransferDirection+0x44>)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	440b      	add	r3, r1
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	440b      	add	r3, r1
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	0800522c 	.word	0x0800522c

08002abc <LL_DMA_SetMode>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <LL_DMA_SetMode+0x44>)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8002adc:	4908      	ldr	r1, [pc, #32]	@ (8002b00 <LL_DMA_SetMode+0x44>)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	440b      	add	r3, r1
 8002aea:	4619      	mov	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	0800522c 	.word	0x0800522c

08002b04 <LL_DMA_SetPeriphIncMode>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002b10:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <LL_DMA_SetPeriphIncMode+0x44>)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4413      	add	r3, r2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002b24:	4908      	ldr	r1, [pc, #32]	@ (8002b48 <LL_DMA_SetPeriphIncMode+0x44>)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	440b      	add	r3, r1
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	440b      	add	r3, r1
 8002b32:	4619      	mov	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	0800522c 	.word	0x0800522c

08002b4c <LL_DMA_SetMemoryIncMode>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002b58:	4a0d      	ldr	r2, [pc, #52]	@ (8002b90 <LL_DMA_SetMemoryIncMode+0x44>)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b6c:	4908      	ldr	r1, [pc, #32]	@ (8002b90 <LL_DMA_SetMemoryIncMode+0x44>)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	440b      	add	r3, r1
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	440b      	add	r3, r1
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	0800522c 	.word	0x0800522c

08002b94 <LL_DMA_SetPeriphSize>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd8 <LL_DMA_SetPeriphSize+0x44>)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8002bb4:	4908      	ldr	r1, [pc, #32]	@ (8002bd8 <LL_DMA_SetPeriphSize+0x44>)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	440b      	add	r3, r1
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	440b      	add	r3, r1
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	0800522c 	.word	0x0800522c

08002bdc <LL_DMA_SetMemorySize>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002be8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <LL_DMA_SetMemorySize+0x44>)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4413      	add	r3, r2
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8002bfc:	4908      	ldr	r1, [pc, #32]	@ (8002c20 <LL_DMA_SetMemorySize+0x44>)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	440b      	add	r3, r1
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	440b      	add	r3, r1
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	0800522c 	.word	0x0800522c

08002c24 <LL_DMA_SetStreamPriorityLevel>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002c30:	4a0d      	ldr	r2, [pc, #52]	@ (8002c68 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c44:	4908      	ldr	r1, [pc, #32]	@ (8002c68 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	440b      	add	r3, r1
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	440b      	add	r3, r1
 8002c52:	4619      	mov	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	0800522c 	.word	0x0800522c

08002c6c <LL_DMA_SetChannelSelection>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002c78:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb0 <LL_DMA_SetChannelSelection+0x44>)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002c8c:	4908      	ldr	r1, [pc, #32]	@ (8002cb0 <LL_DMA_SetChannelSelection+0x44>)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	440b      	add	r3, r1
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	440b      	add	r3, r1
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	0800522c 	.word	0x0800522c

08002cb4 <LL_DMA_DisableFifoMode>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf0 <LL_DMA_DisableFifoMode+0x3c>)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4908      	ldr	r1, [pc, #32]	@ (8002cf0 <LL_DMA_DisableFifoMode+0x3c>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	7812      	ldrb	r2, [r2, #0]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	440a      	add	r2, r1
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6153      	str	r3, [r2, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	0800522c 	.word	0x0800522c

08002cf4 <LL_AHB1_GRP1_EnableClock>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002cfc:	4b08      	ldr	r3, [pc, #32]	@ (8002d20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d00:	4907      	ldr	r1, [pc, #28]	@ (8002d20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40023800 	.word	0x40023800

08002d24 <LL_APB1_GRP1_EnableClock>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002d2c:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d30:	4907      	ldr	r1, [pc, #28]	@ (8002d50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40023800 	.word	0x40023800

08002d54 <LL_APB2_GRP1_EnableClock>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d5c:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d60:	4907      	ldr	r1, [pc, #28]	@ (8002d80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002d6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40023800 	.word	0x40023800

08002d84 <LL_USART_Enable>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	60da      	str	r2, [r3, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_USART_ConfigAsyncMode>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	615a      	str	r2, [r3, #20]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08e      	sub	sp, #56	@ 0x38
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002dd6:	f107 031c 	add.w	r3, r7, #28
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	615a      	str	r2, [r3, #20]
 8002de8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
 8002df8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002dfa:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002dfe:	f7ff ff91 	bl	8002d24 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7ff ff76 	bl	8002cf4 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4846      	ldr	r0, [pc, #280]	@ (8002f40 <MX_UART4_Init+0x170>)
 8002e26:	f000 fb75 	bl	8003514 <LL_GPIO_Init>

  /* UART4 DMA Init */

  /* UART4_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8002e2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4844      	ldr	r0, [pc, #272]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e32:	f7ff ff1b 	bl	8002c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4842      	ldr	r0, [pc, #264]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e3c:	f7ff fe1a 	bl	8002a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_HIGH);
 8002e40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e44:	2102      	movs	r1, #2
 8002e46:	483f      	ldr	r0, [pc, #252]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e48:	f7ff feec 	bl	8002c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2102      	movs	r1, #2
 8002e50:	483c      	ldr	r0, [pc, #240]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e52:	f7ff fe33 	bl	8002abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2102      	movs	r1, #2
 8002e5a:	483a      	ldr	r0, [pc, #232]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e5c:	f7ff fe52 	bl	8002b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8002e60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e64:	2102      	movs	r1, #2
 8002e66:	4837      	ldr	r0, [pc, #220]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e68:	f7ff fe70 	bl	8002b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2102      	movs	r1, #2
 8002e70:	4834      	ldr	r0, [pc, #208]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e72:	f7ff fe8f 	bl	8002b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4832      	ldr	r0, [pc, #200]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e7c:	f7ff feae 	bl	8002bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 8002e80:	2102      	movs	r1, #2
 8002e82:	4830      	ldr	r0, [pc, #192]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e84:	f7ff ff16 	bl	8002cb4 <LL_DMA_DisableFifoMode>

  /* UART4_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_4);
 8002e88:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	482d      	ldr	r0, [pc, #180]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e90:	f7ff feec 	bl	8002c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002e94:	2240      	movs	r2, #64	@ 0x40
 8002e96:	2104      	movs	r1, #4
 8002e98:	482a      	ldr	r0, [pc, #168]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002e9a:	f7ff fdeb 	bl	8002a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	4828      	ldr	r0, [pc, #160]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002ea4:	f7ff febe 	bl	8002c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2104      	movs	r1, #4
 8002eac:	4825      	ldr	r0, [pc, #148]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002eae:	f7ff fe05 	bl	8002abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2104      	movs	r1, #4
 8002eb6:	4823      	ldr	r0, [pc, #140]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002eb8:	f7ff fe24 	bl	8002b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8002ebc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ec0:	2104      	movs	r1, #4
 8002ec2:	4820      	ldr	r0, [pc, #128]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002ec4:	f7ff fe42 	bl	8002b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2104      	movs	r1, #4
 8002ecc:	481d      	ldr	r0, [pc, #116]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002ece:	f7ff fe61 	bl	8002b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	481b      	ldr	r0, [pc, #108]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002ed8:	f7ff fe80 	bl	8002bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 8002edc:	2104      	movs	r1, #4
 8002ede:	4819      	ldr	r0, [pc, #100]	@ (8002f44 <MX_UART4_Init+0x174>)
 8002ee0:	f7ff fee8 	bl	8002cb4 <LL_DMA_DisableFifoMode>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ee4:	f7ff fd3c 	bl	8002960 <__NVIC_GetPriorityGrouping>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fd8c 	bl	8002a0c <NVIC_EncodePriority>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	2034      	movs	r0, #52	@ 0x34
 8002efa:	f7ff fd5d 	bl	80029b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8002efe:	2034      	movs	r0, #52	@ 0x34
 8002f00:	f7ff fd3c 	bl	800297c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 8002f04:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <MX_UART4_Init+0x178>)
 8002f06:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f14:	230c      	movs	r3, #12
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	4619      	mov	r1, r3
 8002f26:	4809      	ldr	r0, [pc, #36]	@ (8002f4c <MX_UART4_Init+0x17c>)
 8002f28:	f001 f82a 	bl	8003f80 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8002f2c:	4807      	ldr	r0, [pc, #28]	@ (8002f4c <MX_UART4_Init+0x17c>)
 8002f2e:	f7ff ff39 	bl	8002da4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8002f32:	4806      	ldr	r0, [pc, #24]	@ (8002f4c <MX_UART4_Init+0x17c>)
 8002f34:	f7ff ff26 	bl	8002d84 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f38:	bf00      	nop
 8002f3a:	3738      	adds	r7, #56	@ 0x38
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40020000 	.word	0x40020000
 8002f44:	40026000 	.word	0x40026000
 8002f48:	001e8480 	.word	0x001e8480
 8002f4c:	40004c00 	.word	0x40004c00

08002f50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08e      	sub	sp, #56	@ 0x38
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	611a      	str	r2, [r3, #16]
 8002f66:	615a      	str	r2, [r3, #20]
 8002f68:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
 8002f76:	611a      	str	r2, [r3, #16]
 8002f78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002f7a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002f7e:	f7ff fed1 	bl	8002d24 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002f82:	2001      	movs	r0, #1
 8002f84:	f7ff feb6 	bl	8002cf4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002f88:	230c      	movs	r3, #12
 8002f8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2303      	movs	r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002f9c:	2307      	movs	r3, #7
 8002f9e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	483e      	ldr	r0, [pc, #248]	@ (80030a0 <MX_USART2_UART_Init+0x150>)
 8002fa6:	f000 fab5 	bl	8003514 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8002faa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fae:	2105      	movs	r1, #5
 8002fb0:	483c      	ldr	r0, [pc, #240]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8002fb2:	f7ff fe5b 	bl	8002c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2105      	movs	r1, #5
 8002fba:	483a      	ldr	r0, [pc, #232]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8002fbc:	f7ff fd5a 	bl	8002a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2105      	movs	r1, #5
 8002fc4:	4837      	ldr	r0, [pc, #220]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8002fc6:	f7ff fe2d 	bl	8002c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2105      	movs	r1, #5
 8002fce:	4835      	ldr	r0, [pc, #212]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8002fd0:	f7ff fd74 	bl	8002abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2105      	movs	r1, #5
 8002fd8:	4832      	ldr	r0, [pc, #200]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8002fda:	f7ff fd93 	bl	8002b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8002fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fe2:	2105      	movs	r1, #5
 8002fe4:	482f      	ldr	r0, [pc, #188]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8002fe6:	f7ff fdb1 	bl	8002b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2105      	movs	r1, #5
 8002fee:	482d      	ldr	r0, [pc, #180]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8002ff0:	f7ff fdd0 	bl	8002b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2105      	movs	r1, #5
 8002ff8:	482a      	ldr	r0, [pc, #168]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8002ffa:	f7ff fdef 	bl	8002bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8002ffe:	2105      	movs	r1, #5
 8003000:	4828      	ldr	r0, [pc, #160]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8003002:	f7ff fe57 	bl	8002cb4 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8003006:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800300a:	2106      	movs	r1, #6
 800300c:	4825      	ldr	r0, [pc, #148]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 800300e:	f7ff fe2d 	bl	8002c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003012:	2240      	movs	r2, #64	@ 0x40
 8003014:	2106      	movs	r1, #6
 8003016:	4823      	ldr	r0, [pc, #140]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8003018:	f7ff fd2c 	bl	8002a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 800301c:	2200      	movs	r2, #0
 800301e:	2106      	movs	r1, #6
 8003020:	4820      	ldr	r0, [pc, #128]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8003022:	f7ff fdff 	bl	8002c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8003026:	2200      	movs	r2, #0
 8003028:	2106      	movs	r1, #6
 800302a:	481e      	ldr	r0, [pc, #120]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 800302c:	f7ff fd46 	bl	8002abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 8003030:	2200      	movs	r2, #0
 8003032:	2106      	movs	r1, #6
 8003034:	481b      	ldr	r0, [pc, #108]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8003036:	f7ff fd65 	bl	8002b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 800303a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800303e:	2106      	movs	r1, #6
 8003040:	4818      	ldr	r0, [pc, #96]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8003042:	f7ff fd83 	bl	8002b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8003046:	2200      	movs	r2, #0
 8003048:	2106      	movs	r1, #6
 800304a:	4816      	ldr	r0, [pc, #88]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 800304c:	f7ff fda2 	bl	8002b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 8003050:	2200      	movs	r2, #0
 8003052:	2106      	movs	r1, #6
 8003054:	4813      	ldr	r0, [pc, #76]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 8003056:	f7ff fdc1 	bl	8002bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 800305a:	2106      	movs	r1, #6
 800305c:	4811      	ldr	r0, [pc, #68]	@ (80030a4 <MX_USART2_UART_Init+0x154>)
 800305e:	f7ff fe29 	bl	8002cb4 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003062:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003066:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003070:	2300      	movs	r3, #0
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003074:	230c      	movs	r3, #12
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003078:	2300      	movs	r3, #0
 800307a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800307c:	2300      	movs	r3, #0
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	4619      	mov	r1, r3
 8003086:	4808      	ldr	r0, [pc, #32]	@ (80030a8 <MX_USART2_UART_Init+0x158>)
 8003088:	f000 ff7a 	bl	8003f80 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800308c:	4806      	ldr	r0, [pc, #24]	@ (80030a8 <MX_USART2_UART_Init+0x158>)
 800308e:	f7ff fe89 	bl	8002da4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003092:	4805      	ldr	r0, [pc, #20]	@ (80030a8 <MX_USART2_UART_Init+0x158>)
 8003094:	f7ff fe76 	bl	8002d84 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003098:	bf00      	nop
 800309a:	3738      	adds	r7, #56	@ 0x38
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40026000 	.word	0x40026000
 80030a8:	40004400 	.word	0x40004400

080030ac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	@ 0x38
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	611a      	str	r2, [r3, #16]
 80030c2:	615a      	str	r2, [r3, #20]
 80030c4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
 80030d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80030d6:	2020      	movs	r0, #32
 80030d8:	f7ff fe3c 	bl	8002d54 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80030dc:	2004      	movs	r0, #4
 80030de:	f7ff fe09 	bl	8002cf4 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80030e2:	23c0      	movs	r3, #192	@ 0xc0
 80030e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80030e6:	2302      	movs	r3, #2
 80030e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	2303      	movs	r3, #3
 80030ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80030f6:	2308      	movs	r3, #8
 80030f8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4847      	ldr	r0, [pc, #284]	@ (800321c <MX_USART6_UART_Init+0x170>)
 8003100:	f000 fa08 	bl	8003514 <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_5);
 8003104:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003108:	2106      	movs	r1, #6
 800310a:	4845      	ldr	r0, [pc, #276]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 800310c:	f7ff fdae 	bl	8002c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003110:	2240      	movs	r2, #64	@ 0x40
 8003112:	2106      	movs	r1, #6
 8003114:	4842      	ldr	r0, [pc, #264]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003116:	f7ff fcad 	bl	8002a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 800311a:	2200      	movs	r2, #0
 800311c:	2106      	movs	r1, #6
 800311e:	4840      	ldr	r0, [pc, #256]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003120:	f7ff fd80 	bl	8002c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8003124:	2200      	movs	r2, #0
 8003126:	2106      	movs	r1, #6
 8003128:	483d      	ldr	r0, [pc, #244]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 800312a:	f7ff fcc7 	bl	8002abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800312e:	2200      	movs	r2, #0
 8003130:	2106      	movs	r1, #6
 8003132:	483b      	ldr	r0, [pc, #236]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003134:	f7ff fce6 	bl	8002b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8003138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800313c:	2106      	movs	r1, #6
 800313e:	4838      	ldr	r0, [pc, #224]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003140:	f7ff fd04 	bl	8002b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8003144:	2200      	movs	r2, #0
 8003146:	2106      	movs	r1, #6
 8003148:	4835      	ldr	r0, [pc, #212]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 800314a:	f7ff fd23 	bl	8002b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 800314e:	2200      	movs	r2, #0
 8003150:	2106      	movs	r1, #6
 8003152:	4833      	ldr	r0, [pc, #204]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003154:	f7ff fd42 	bl	8002bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8003158:	2106      	movs	r1, #6
 800315a:	4831      	ldr	r0, [pc, #196]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 800315c:	f7ff fdaa 	bl	8002cb4 <LL_DMA_DisableFifoMode>

  /* USART6_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 8003160:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003164:	2101      	movs	r1, #1
 8003166:	482e      	ldr	r0, [pc, #184]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003168:	f7ff fd80 	bl	8002c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800316c:	2200      	movs	r2, #0
 800316e:	2101      	movs	r1, #1
 8003170:	482b      	ldr	r0, [pc, #172]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003172:	f7ff fc7f 	bl	8002a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_HIGH);
 8003176:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800317a:	2101      	movs	r1, #1
 800317c:	4828      	ldr	r0, [pc, #160]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 800317e:	f7ff fd51 	bl	8002c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 8003182:	2200      	movs	r2, #0
 8003184:	2101      	movs	r1, #1
 8003186:	4826      	ldr	r0, [pc, #152]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003188:	f7ff fc98 	bl	8002abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 800318c:	2200      	movs	r2, #0
 800318e:	2101      	movs	r1, #1
 8003190:	4823      	ldr	r0, [pc, #140]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 8003192:	f7ff fcb7 	bl	8002b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8003196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800319a:	2101      	movs	r1, #1
 800319c:	4820      	ldr	r0, [pc, #128]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 800319e:	f7ff fcd5 	bl	8002b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2101      	movs	r1, #1
 80031a6:	481e      	ldr	r0, [pc, #120]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 80031a8:	f7ff fcf4 	bl	8002b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2101      	movs	r1, #1
 80031b0:	481b      	ldr	r0, [pc, #108]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 80031b2:	f7ff fd13 	bl	8002bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 80031b6:	2101      	movs	r1, #1
 80031b8:	4819      	ldr	r0, [pc, #100]	@ (8003220 <MX_USART6_UART_Init+0x174>)
 80031ba:	f7ff fd7b 	bl	8002cb4 <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80031be:	f7ff fbcf 	bl	8002960 <__NVIC_GetPriorityGrouping>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2200      	movs	r2, #0
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fc1f 	bl	8002a0c <NVIC_EncodePriority>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4619      	mov	r1, r3
 80031d2:	2047      	movs	r0, #71	@ 0x47
 80031d4:	f7ff fbf0 	bl	80029b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80031d8:	2047      	movs	r0, #71	@ 0x47
 80031da:	f7ff fbcf 	bl	800297c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <MX_USART6_UART_Init+0x178>)
 80031e0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80031ee:	230c      	movs	r3, #12
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80031f6:	2300      	movs	r3, #0
 80031f8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	4619      	mov	r1, r3
 8003200:	4809      	ldr	r0, [pc, #36]	@ (8003228 <MX_USART6_UART_Init+0x17c>)
 8003202:	f000 febd 	bl	8003f80 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8003206:	4808      	ldr	r0, [pc, #32]	@ (8003228 <MX_USART6_UART_Init+0x17c>)
 8003208:	f7ff fdcc 	bl	8002da4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800320c:	4806      	ldr	r0, [pc, #24]	@ (8003228 <MX_USART6_UART_Init+0x17c>)
 800320e:	f7ff fdb9 	bl	8002d84 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003212:	bf00      	nop
 8003214:	3738      	adds	r7, #56	@ 0x38
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40020800 	.word	0x40020800
 8003220:	40026400 	.word	0x40026400
 8003224:	001e8480 	.word	0x001e8480
 8003228:	40011400 	.word	0x40011400

0800322c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800322c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003264 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003230:	f7ff fa58 	bl	80026e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003234:	480c      	ldr	r0, [pc, #48]	@ (8003268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003236:	490d      	ldr	r1, [pc, #52]	@ (800326c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003238:	4a0d      	ldr	r2, [pc, #52]	@ (8003270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800323c:	e002      	b.n	8003244 <LoopCopyDataInit>

0800323e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003242:	3304      	adds	r3, #4

08003244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003248:	d3f9      	bcc.n	800323e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324a:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800324c:	4c0a      	ldr	r4, [pc, #40]	@ (8003278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003250:	e001      	b.n	8003256 <LoopFillZerobss>

08003252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003254:	3204      	adds	r2, #4

08003256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003258:	d3fb      	bcc.n	8003252 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800325a:	f001 f9cd 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800325e:	f7fe fbf7 	bl	8001a50 <main>
  bx  lr    
 8003262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800326c:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 8003270:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 8003274:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8003278:	20000518 	.word	0x20000518

0800327c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC_IRQHandler>

0800327e <LL_GPIO_SetPinMode>:
{
 800327e:	b480      	push	{r7}
 8003280:	b08b      	sub	sp, #44	@ 0x2c
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	613b      	str	r3, [r7, #16]
  return result;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80032a4:	2320      	movs	r3, #32
 80032a6:	e003      	b.n	80032b0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2103      	movs	r1, #3
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	61fb      	str	r3, [r7, #28]
  return result;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80032d2:	2320      	movs	r3, #32
 80032d4:	e003      	b.n	80032de <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	601a      	str	r2, [r3, #0]
}
 80032ec:	bf00      	nop
 80032ee:	372c      	adds	r7, #44	@ 0x2c
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <LL_GPIO_SetPinOutputType>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	43db      	mvns	r3, r3
 800330c:	401a      	ands	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	431a      	orrs	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_GPIO_SetPinSpeed>:
{
 8003328:	b480      	push	{r7}
 800332a:	b08b      	sub	sp, #44	@ 0x2c
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	613b      	str	r3, [r7, #16]
  return result;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800334e:	2320      	movs	r3, #32
 8003350:	e003      	b.n	800335a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	2103      	movs	r1, #3
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	401a      	ands	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	61fb      	str	r3, [r7, #28]
  return result;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	e003      	b.n	8003388 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	609a      	str	r2, [r3, #8]
}
 8003396:	bf00      	nop
 8003398:	372c      	adds	r7, #44	@ 0x2c
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_GPIO_SetPinPull>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	b08b      	sub	sp, #44	@ 0x2c
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	613b      	str	r3, [r7, #16]
  return result;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e003      	b.n	80033d4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2103      	movs	r1, #3
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	61fb      	str	r3, [r7, #28]
  return result;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80033f6:	2320      	movs	r3, #32
 80033f8:	e003      	b.n	8003402 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	431a      	orrs	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	60da      	str	r2, [r3, #12]
}
 8003410:	bf00      	nop
 8003412:	372c      	adds	r7, #44	@ 0x2c
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_GPIO_SetAFPin_0_7>:
{
 800341c:	b480      	push	{r7}
 800341e:	b08b      	sub	sp, #44	@ 0x2c
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	613b      	str	r3, [r7, #16]
  return result;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e003      	b.n	800344e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	210f      	movs	r1, #15
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	401a      	ands	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	61fb      	str	r3, [r7, #28]
  return result;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	e003      	b.n	800347c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	372c      	adds	r7, #44	@ 0x2c
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_GPIO_SetAFPin_8_15>:
{
 8003496:	b480      	push	{r7}
 8003498:	b08b      	sub	sp, #44	@ 0x2c
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	613b      	str	r3, [r7, #16]
  return result;
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e003      	b.n	80034ca <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	210f      	movs	r1, #15
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	401a      	ands	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	61fb      	str	r3, [r7, #28]
  return result;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e003      	b.n	80034fa <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	431a      	orrs	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003508:	bf00      	nop
 800350a:	372c      	adds	r7, #44	@ 0x2c
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	617b      	str	r3, [r7, #20]
  return result;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <LL_GPIO_Init+0x2e>
    return 32U;
 800353e:	2320      	movs	r3, #32
 8003540:	e003      	b.n	800354a <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800354c:	e057      	b.n	80035fe <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	2101      	movs	r1, #1
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	4013      	ands	r3, r2
 800355c:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d049      	beq.n	80035f8 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d003      	beq.n	8003574 <LL_GPIO_Init+0x60>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d10d      	bne.n	8003590 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	461a      	mov	r2, r3
 800357a:	6a39      	ldr	r1, [r7, #32]
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff fed3 	bl	8003328 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	6a39      	ldr	r1, [r7, #32]
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff feb4 	bl	80032f8 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	461a      	mov	r2, r3
 8003596:	6a39      	ldr	r1, [r7, #32]
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff02 	bl	80033a2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d121      	bne.n	80035ea <LL_GPIO_Init+0xd6>
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	60bb      	str	r3, [r7, #8]
  return result;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <LL_GPIO_Init+0xac>
    return 32U;
 80035bc:	2320      	movs	r3, #32
 80035be:	e003      	b.n	80035c8 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	d807      	bhi.n	80035dc <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6a39      	ldr	r1, [r7, #32]
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff21 	bl	800341c <LL_GPIO_SetAFPin_0_7>
 80035da:	e006      	b.n	80035ea <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	461a      	mov	r2, r3
 80035e2:	6a39      	ldr	r1, [r7, #32]
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ff56 	bl	8003496 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	461a      	mov	r2, r3
 80035f0:	6a39      	ldr	r1, [r7, #32]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fe43 	bl	800327e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	3301      	adds	r3, #1
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1a0      	bne.n	800354e <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	@ 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <LL_RCC_GetSysClkSource>:
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <LL_RCC_GetSysClkSource+0x18>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <LL_RCC_GetAHBPrescaler>:
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <LL_RCC_GetAHBPrescaler+0x18>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800

08003650 <LL_RCC_GetAPB1Prescaler>:
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800

0800366c <LL_RCC_GetAPB2Prescaler>:
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003670:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <LL_RCC_PLL_GetMainSource+0x18>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80036a8:	4b04      	ldr	r3, [pc, #16]	@ (80036bc <LL_RCC_PLL_GetN+0x18>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40023800 	.word	0x40023800

080036c0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80036c4:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <LL_RCC_PLL_GetP+0x18>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800

080036dc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <LL_RCC_PLL_GetR+0x18>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80036fc:	4b04      	ldr	r3, [pc, #16]	@ (8003710 <LL_RCC_PLL_GetDivider+0x18>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800371c:	f000 f820 	bl	8003760 <RCC_GetSystemClockFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f85c 	bl	80037e8 <RCC_GetHCLKClockFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f86a 	bl	8003814 <RCC_GetPCLK1ClockFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f876 	bl	800383c <RCC_GetPCLK2ClockFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800376a:	f7ff ff55 	bl	8003618 <LL_RCC_GetSysClkSource>
 800376e:	4603      	mov	r3, r0
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d82d      	bhi.n	80037d0 <RCC_GetSystemClockFreq+0x70>
 8003774:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <RCC_GetSystemClockFreq+0x1c>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080037d1 	.word	0x080037d1
 8003784:	080037d1 	.word	0x080037d1
 8003788:	080037d1 	.word	0x080037d1
 800378c:	080037b7 	.word	0x080037b7
 8003790:	080037d1 	.word	0x080037d1
 8003794:	080037d1 	.word	0x080037d1
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037bd 	.word	0x080037bd
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037d1 	.word	0x080037d1
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037c7 	.word	0x080037c7
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80037b0:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <RCC_GetSystemClockFreq+0x80>)
 80037b2:	607b      	str	r3, [r7, #4]
      break;
 80037b4:	e00f      	b.n	80037d6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80037b6:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <RCC_GetSystemClockFreq+0x84>)
 80037b8:	607b      	str	r3, [r7, #4]
      break;
 80037ba:	e00c      	b.n	80037d6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80037bc:	2008      	movs	r0, #8
 80037be:	f000 f851 	bl	8003864 <RCC_PLL_GetFreqDomain_SYS>
 80037c2:	6078      	str	r0, [r7, #4]
      break;
 80037c4:	e007      	b.n	80037d6 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80037c6:	200c      	movs	r0, #12
 80037c8:	f000 f84c 	bl	8003864 <RCC_PLL_GetFreqDomain_SYS>
 80037cc:	6078      	str	r0, [r7, #4]
      break;
 80037ce:	e002      	b.n	80037d6 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80037d0:	4b03      	ldr	r3, [pc, #12]	@ (80037e0 <RCC_GetSystemClockFreq+0x80>)
 80037d2:	607b      	str	r3, [r7, #4]
      break;
 80037d4:	bf00      	nop
  }

  return frequency;
 80037d6:	687b      	ldr	r3, [r7, #4]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	00f42400 	.word	0x00f42400
 80037e4:	007a1200 	.word	0x007a1200

080037e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80037f0:	f7ff ff20 	bl	8003634 <LL_RCC_GetAHBPrescaler>
 80037f4:	4603      	mov	r3, r0
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	4a04      	ldr	r2, [pc, #16]	@ (8003810 <RCC_GetHCLKClockFreq+0x28>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	40d3      	lsrs	r3, r2
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	08005214 	.word	0x08005214

08003814 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800381c:	f7ff ff18 	bl	8003650 <LL_RCC_GetAPB1Prescaler>
 8003820:	4603      	mov	r3, r0
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <RCC_GetPCLK1ClockFreq+0x24>)
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	461a      	mov	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	40d3      	lsrs	r3, r2
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	08005224 	.word	0x08005224

0800383c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003844:	f7ff ff12 	bl	800366c <LL_RCC_GetAPB2Prescaler>
 8003848:	4603      	mov	r3, r0
 800384a:	0b5b      	lsrs	r3, r3, #13
 800384c:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <RCC_GetPCLK2ClockFreq+0x24>)
 800384e:	5cd3      	ldrb	r3, [r2, r3]
 8003850:	461a      	mov	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	40d3      	lsrs	r3, r2
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	08005224 	.word	0x08005224

08003864 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003878:	f7ff ff06 	bl	8003688 <LL_RCC_PLL_GetMainSource>
 800387c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800388a:	d003      	beq.n	8003894 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800388c:	e005      	b.n	800389a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800388e:	4b1c      	ldr	r3, [pc, #112]	@ (8003900 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8003890:	617b      	str	r3, [r7, #20]
      break;
 8003892:	e005      	b.n	80038a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8003896:	617b      	str	r3, [r7, #20]
      break;
 8003898:	e002      	b.n	80038a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800389a:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800389c:	617b      	str	r3, [r7, #20]
      break;
 800389e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d114      	bne.n	80038d0 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038a6:	f7ff ff27 	bl	80036f8 <LL_RCC_PLL_GetDivider>
 80038aa:	4602      	mov	r2, r0
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fbb3 f4f2 	udiv	r4, r3, r2
 80038b2:	f7ff fef7 	bl	80036a4 <LL_RCC_PLL_GetN>
 80038b6:	4603      	mov	r3, r0
 80038b8:	fb03 f404 	mul.w	r4, r3, r4
 80038bc:	f7ff ff00 	bl	80036c0 <LL_RCC_PLL_GetP>
 80038c0:	4603      	mov	r3, r0
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	3301      	adds	r3, #1
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fbb4 f3f3 	udiv	r3, r4, r3
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e011      	b.n	80038f4 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038d0:	f7ff ff12 	bl	80036f8 <LL_RCC_PLL_GetDivider>
 80038d4:	4602      	mov	r2, r0
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fbb3 f4f2 	udiv	r4, r3, r2
 80038dc:	f7ff fee2 	bl	80036a4 <LL_RCC_PLL_GetN>
 80038e0:	4603      	mov	r3, r0
 80038e2:	fb03 f404 	mul.w	r4, r3, r4
 80038e6:	f7ff fef9 	bl	80036dc <LL_RCC_PLL_GetR>
 80038ea:	4603      	mov	r3, r0
 80038ec:	0f1b      	lsrs	r3, r3, #28
 80038ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80038f2:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80038f4:	693b      	ldr	r3, [r7, #16]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	00f42400 	.word	0x00f42400
 8003904:	007a1200 	.word	0x007a1200

08003908 <LL_TIM_SetPrescaler>:
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_TIM_SetAutoReload>:
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_TIM_SetRepetitionCounter>:
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	615a      	str	r2, [r3, #20]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a84 <LL_TIM_Init+0x108>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <LL_TIM_Init+0x40>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800399a:	d00f      	beq.n	80039bc <LL_TIM_Init+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a3a      	ldr	r2, [pc, #232]	@ (8003a88 <LL_TIM_Init+0x10c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <LL_TIM_Init+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a39      	ldr	r2, [pc, #228]	@ (8003a8c <LL_TIM_Init+0x110>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <LL_TIM_Init+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a38      	ldr	r2, [pc, #224]	@ (8003a90 <LL_TIM_Init+0x114>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <LL_TIM_Init+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a37      	ldr	r2, [pc, #220]	@ (8003a94 <LL_TIM_Init+0x118>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d106      	bne.n	80039ca <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003a84 <LL_TIM_Init+0x108>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02b      	beq.n	8003a2a <LL_TIM_Init+0xae>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d8:	d027      	beq.n	8003a2a <LL_TIM_Init+0xae>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003a88 <LL_TIM_Init+0x10c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d023      	beq.n	8003a2a <LL_TIM_Init+0xae>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a29      	ldr	r2, [pc, #164]	@ (8003a8c <LL_TIM_Init+0x110>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01f      	beq.n	8003a2a <LL_TIM_Init+0xae>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a28      	ldr	r2, [pc, #160]	@ (8003a90 <LL_TIM_Init+0x114>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01b      	beq.n	8003a2a <LL_TIM_Init+0xae>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a27      	ldr	r2, [pc, #156]	@ (8003a94 <LL_TIM_Init+0x118>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d017      	beq.n	8003a2a <LL_TIM_Init+0xae>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a26      	ldr	r2, [pc, #152]	@ (8003a98 <LL_TIM_Init+0x11c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <LL_TIM_Init+0xae>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a25      	ldr	r2, [pc, #148]	@ (8003a9c <LL_TIM_Init+0x120>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00f      	beq.n	8003a2a <LL_TIM_Init+0xae>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a24      	ldr	r2, [pc, #144]	@ (8003aa0 <LL_TIM_Init+0x124>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <LL_TIM_Init+0xae>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a23      	ldr	r2, [pc, #140]	@ (8003aa4 <LL_TIM_Init+0x128>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <LL_TIM_Init+0xae>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a22      	ldr	r2, [pc, #136]	@ (8003aa8 <LL_TIM_Init+0x12c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <LL_TIM_Init+0xae>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a21      	ldr	r2, [pc, #132]	@ (8003aac <LL_TIM_Init+0x130>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d106      	bne.n	8003a38 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff6d 	bl	8003924 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff59 	bl	8003908 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <LL_TIM_Init+0x108>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <LL_TIM_Init+0xea>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <LL_TIM_Init+0x118>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d105      	bne.n	8003a72 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff67 	bl	8003940 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ff72 	bl	800395c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40010400 	.word	0x40010400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	40001800 	.word	0x40001800
 8003aa8:	40001c00 	.word	0x40001c00
 8003aac:	40002000 	.word	0x40002000

08003ab0 <LL_USART_IsEnabled>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac4:	bf0c      	ite	eq
 8003ac6:	2301      	moveq	r3, #1
 8003ac8:	2300      	movne	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_USART_SetStopBitsLength>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	611a      	str	r2, [r3, #16]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_USART_SetHWFlowCtrl>:
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	615a      	str	r2, [r3, #20]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_USART_SetBaudRate>:
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b0c0      	sub	sp, #256	@ 0x100
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b30:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8003b34:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003b38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b44:	f040 810c 	bne.w	8003d60 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003b48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	6639      	str	r1, [r7, #96]	@ 0x60
 8003b62:	415b      	adcs	r3, r3
 8003b64:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	eb12 0801 	adds.w	r8, r2, r1
 8003b70:	4629      	mov	r1, r5
 8003b72:	eb43 0901 	adc.w	r9, r3, r1
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b8a:	4690      	mov	r8, r2
 8003b8c:	4699      	mov	r9, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	eb18 0303 	adds.w	r3, r8, r3
 8003b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b98:	462b      	mov	r3, r5
 8003b9a:	eb49 0303 	adc.w	r3, r9, r3
 8003b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ba2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	469a      	mov	sl, r3
 8003baa:	4693      	mov	fp, r2
 8003bac:	eb1a 030a 	adds.w	r3, sl, sl
 8003bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bb2:	eb4b 030b 	adc.w	r3, fp, fp
 8003bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bc0:	f7fc fb76 	bl	80002b0 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4b64      	ldr	r3, [pc, #400]	@ (8003d5c <LL_USART_SetBaudRate+0x238>)
 8003bca:	fba3 2302 	umull	r2, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	b29c      	uxth	r4, r3
 8003bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003be0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003be4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	1891      	adds	r1, r2, r2
 8003bee:	6539      	str	r1, [r7, #80]	@ 0x50
 8003bf0:	415b      	adcs	r3, r3
 8003bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	1851      	adds	r1, r2, r1
 8003bfc:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bfe:	4649      	mov	r1, r9
 8003c00:	414b      	adcs	r3, r1
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003c10:	4659      	mov	r1, fp
 8003c12:	00cb      	lsls	r3, r1, #3
 8003c14:	4651      	mov	r1, sl
 8003c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	00ca      	lsls	r2, r1, #3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	4642      	mov	r2, r8
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	460a      	mov	r2, r1
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c42:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003c46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	18db      	adds	r3, r3, r3
 8003c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c50:	4613      	mov	r3, r2
 8003c52:	eb42 0303 	adc.w	r3, r2, r3
 8003c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c5c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003c60:	f7fc fb26 	bl	80002b0 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d5c <LL_USART_SetBaudRate+0x238>)
 8003c6c:	fba3 2301 	umull	r2, r3, r3, r1
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2264      	movs	r2, #100	@ 0x64
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	1acb      	subs	r3, r1, r3
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c80:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <LL_USART_SetBaudRate+0x238>)
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4423      	add	r3, r4
 8003c96:	b29c      	uxth	r4, r3
 8003c98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ca2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ca6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003caa:	4642      	mov	r2, r8
 8003cac:	464b      	mov	r3, r9
 8003cae:	1891      	adds	r1, r2, r2
 8003cb0:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cb2:	415b      	adcs	r3, r3
 8003cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cba:	4641      	mov	r1, r8
 8003cbc:	1851      	adds	r1, r2, r1
 8003cbe:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	414b      	adcs	r3, r1
 8003cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cd2:	4659      	mov	r1, fp
 8003cd4:	00cb      	lsls	r3, r1, #3
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cdc:	4651      	mov	r1, sl
 8003cde:	00ca      	lsls	r2, r1, #3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4642      	mov	r2, r8
 8003ce8:	189b      	adds	r3, r3, r2
 8003cea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	460a      	mov	r2, r1
 8003cf2:	eb42 0303 	adc.w	r3, r2, r3
 8003cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d04:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003d08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	18db      	adds	r3, r3, r3
 8003d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d12:	4613      	mov	r3, r2
 8003d14:	eb42 0303 	adc.w	r3, r2, r3
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d1e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003d22:	f7fc fac5 	bl	80002b0 <__aeabi_uldivmod>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <LL_USART_SetBaudRate+0x238>)
 8003d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	2164      	movs	r1, #100	@ 0x64
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	3332      	adds	r3, #50	@ 0x32
 8003d3e:	4a07      	ldr	r2, [pc, #28]	@ (8003d5c <LL_USART_SetBaudRate+0x238>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	4423      	add	r3, r4
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d58:	609a      	str	r2, [r3, #8]
}
 8003d5a:	e108      	b.n	8003f6e <LL_USART_SetBaudRate+0x44a>
 8003d5c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003d60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d6a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d6e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003d72:	4642      	mov	r2, r8
 8003d74:	464b      	mov	r3, r9
 8003d76:	1891      	adds	r1, r2, r2
 8003d78:	6239      	str	r1, [r7, #32]
 8003d7a:	415b      	adcs	r3, r3
 8003d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d82:	4641      	mov	r1, r8
 8003d84:	1854      	adds	r4, r2, r1
 8003d86:	4649      	mov	r1, r9
 8003d88:	eb43 0501 	adc.w	r5, r3, r1
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003da8:	464b      	mov	r3, r9
 8003daa:	eb45 0303 	adc.w	r3, r5, r3
 8003dae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003db2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dbc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003dcc:	4629      	mov	r1, r5
 8003dce:	008b      	lsls	r3, r1, #2
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	008a      	lsls	r2, r1, #2
 8003dda:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003dde:	f7fc fa67 	bl	80002b0 <__aeabi_uldivmod>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4b65      	ldr	r3, [pc, #404]	@ (8003f7c <LL_USART_SetBaudRate+0x458>)
 8003de8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	b29c      	uxth	r4, r3
 8003df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e02:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003e06:	4642      	mov	r2, r8
 8003e08:	464b      	mov	r3, r9
 8003e0a:	1891      	adds	r1, r2, r2
 8003e0c:	61b9      	str	r1, [r7, #24]
 8003e0e:	415b      	adcs	r3, r3
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e16:	4641      	mov	r1, r8
 8003e18:	1851      	adds	r1, r2, r1
 8003e1a:	6139      	str	r1, [r7, #16]
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	414b      	adcs	r3, r1
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e2e:	4659      	mov	r1, fp
 8003e30:	00cb      	lsls	r3, r1, #3
 8003e32:	4651      	mov	r1, sl
 8003e34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e38:	4651      	mov	r1, sl
 8003e3a:	00ca      	lsls	r2, r1, #3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4603      	mov	r3, r0
 8003e42:	4642      	mov	r2, r8
 8003e44:	189b      	adds	r3, r3, r2
 8003e46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	eb42 0303 	adc.w	r3, r2, r3
 8003e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e60:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003e70:	4649      	mov	r1, r9
 8003e72:	008b      	lsls	r3, r1, #2
 8003e74:	4641      	mov	r1, r8
 8003e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	008a      	lsls	r2, r1, #2
 8003e7e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003e82:	f7fc fa15 	bl	80002b0 <__aeabi_uldivmod>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <LL_USART_SetBaudRate+0x458>)
 8003e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2264      	movs	r2, #100	@ 0x64
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	1acb      	subs	r3, r1, r3
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	3332      	adds	r3, #50	@ 0x32
 8003ea0:	4a36      	ldr	r2, [pc, #216]	@ (8003f7c <LL_USART_SetBaudRate+0x458>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4423      	add	r3, r4
 8003eb2:	b29c      	uxth	r4, r3
 8003eb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003eb8:	2200      	movs	r2, #0
 8003eba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ebc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ebe:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ec2:	4642      	mov	r2, r8
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	1891      	adds	r1, r2, r2
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	1851      	adds	r1, r2, r1
 8003ed6:	6039      	str	r1, [r7, #0]
 8003ed8:	4649      	mov	r1, r9
 8003eda:	414b      	adcs	r3, r1
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eea:	4659      	mov	r1, fp
 8003eec:	00cb      	lsls	r3, r1, #3
 8003eee:	4651      	mov	r1, sl
 8003ef0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	00ca      	lsls	r2, r1, #3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	4603      	mov	r3, r0
 8003efe:	4642      	mov	r2, r8
 8003f00:	189b      	adds	r3, r3, r2
 8003f02:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f04:	464b      	mov	r3, r9
 8003f06:	460a      	mov	r2, r1
 8003f08:	eb42 0303 	adc.w	r3, r2, r3
 8003f0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003f12:	2200      	movs	r2, #0
 8003f14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003f24:	4649      	mov	r1, r9
 8003f26:	008b      	lsls	r3, r1, #2
 8003f28:	4641      	mov	r1, r8
 8003f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f2e:	4641      	mov	r1, r8
 8003f30:	008a      	lsls	r2, r1, #2
 8003f32:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003f36:	f7fc f9bb 	bl	80002b0 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f7c <LL_USART_SetBaudRate+0x458>)
 8003f40:	fba3 1302 	umull	r1, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2164      	movs	r1, #100	@ 0x64
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	3332      	adds	r3, #50	@ 0x32
 8003f52:	4a0a      	ldr	r2, [pc, #40]	@ (8003f7c <LL_USART_SetBaudRate+0x458>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	4423      	add	r3, r4
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f6c:	609a      	str	r2, [r3, #8]
}
 8003f6e:	bf00      	nop
 8003f70:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f74:	46bd      	mov	sp, r7
 8003f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7a:	bf00      	nop
 8003f7c:	51eb851f 	.word	0x51eb851f

08003f80 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fd8c 	bl	8003ab0 <LL_USART_IsEnabled>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d15e      	bne.n	800405c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003fa6:	f023 030c 	bic.w	r3, r3, #12
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	6851      	ldr	r1, [r2, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	68d2      	ldr	r2, [r2, #12]
 8003fb2:	4311      	orrs	r1, r2
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	6912      	ldr	r2, [r2, #16]
 8003fb8:	4311      	orrs	r1, r2
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	6992      	ldr	r2, [r2, #24]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fd83 	bl	8003ad8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fd90 	bl	8003afe <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fb96 	bl	8003714 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a1f      	ldr	r2, [pc, #124]	@ (8004068 <LL_USART_Init+0xe8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d102      	bne.n	8003ff6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e021      	b.n	800403a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <LL_USART_Init+0xec>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d102      	bne.n	8004004 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e01a      	b.n	800403a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1a      	ldr	r2, [pc, #104]	@ (8004070 <LL_USART_Init+0xf0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d102      	bne.n	8004012 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e013      	b.n	800403a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a17      	ldr	r2, [pc, #92]	@ (8004074 <LL_USART_Init+0xf4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d102      	bne.n	8004020 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e00c      	b.n	800403a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a15      	ldr	r2, [pc, #84]	@ (8004078 <LL_USART_Init+0xf8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d102      	bne.n	800402e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e005      	b.n	800403a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a12      	ldr	r2, [pc, #72]	@ (800407c <LL_USART_Init+0xfc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d101      	bne.n	800403a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00d      	beq.n	800405c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004048:	2300      	movs	r3, #0
 800404a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fd64 	bl	8003b24 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800405c:	7ffb      	ldrb	r3, [r7, #31]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40011000 	.word	0x40011000
 800406c:	40004400 	.word	0x40004400
 8004070:	40004800 	.word	0x40004800
 8004074:	40011400 	.word	0x40011400
 8004078:	40004c00 	.word	0x40004c00
 800407c:	40005000 	.word	0x40005000

08004080 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	4a07      	ldr	r2, [pc, #28]	@ (80040b0 <LL_InitTick+0x30>)
 8004094:	3b01      	subs	r3, #1
 8004096:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <LL_InitTick+0x30>)
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800409e:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <LL_InitTick+0x30>)
 80040a0:	2205      	movs	r2, #5
 80040a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000e010 	.word	0xe000e010

080040b4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80040bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ffdd 	bl	8004080 <LL_InitTick>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80040d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004118 <LL_mDelay+0x48>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80040de:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d00c      	beq.n	8004102 <LL_mDelay+0x32>
  {
    Delay++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3301      	adds	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80040ee:	e008      	b.n	8004102 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80040f0:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <LL_mDelay+0x48>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <LL_mDelay+0x32>
    {
      Delay--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f3      	bne.n	80040f0 <LL_mDelay+0x20>
    }
  }
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	e000e010 	.word	0xe000e010

0800411c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004124:	4a04      	ldr	r2, [pc, #16]	@ (8004138 <LL_SetSystemCoreClock+0x1c>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6013      	str	r3, [r2, #0]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	200002d8 	.word	0x200002d8

0800413c <std>:
 800413c:	2300      	movs	r3, #0
 800413e:	b510      	push	{r4, lr}
 8004140:	4604      	mov	r4, r0
 8004142:	e9c0 3300 	strd	r3, r3, [r0]
 8004146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800414a:	6083      	str	r3, [r0, #8]
 800414c:	8181      	strh	r1, [r0, #12]
 800414e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004150:	81c2      	strh	r2, [r0, #14]
 8004152:	6183      	str	r3, [r0, #24]
 8004154:	4619      	mov	r1, r3
 8004156:	2208      	movs	r2, #8
 8004158:	305c      	adds	r0, #92	@ 0x5c
 800415a:	f000 f9f9 	bl	8004550 <memset>
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <std+0x58>)
 8004160:	6263      	str	r3, [r4, #36]	@ 0x24
 8004162:	4b0d      	ldr	r3, [pc, #52]	@ (8004198 <std+0x5c>)
 8004164:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <std+0x60>)
 8004168:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800416a:	4b0d      	ldr	r3, [pc, #52]	@ (80041a0 <std+0x64>)
 800416c:	6323      	str	r3, [r4, #48]	@ 0x30
 800416e:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <std+0x68>)
 8004170:	6224      	str	r4, [r4, #32]
 8004172:	429c      	cmp	r4, r3
 8004174:	d006      	beq.n	8004184 <std+0x48>
 8004176:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800417a:	4294      	cmp	r4, r2
 800417c:	d002      	beq.n	8004184 <std+0x48>
 800417e:	33d0      	adds	r3, #208	@ 0xd0
 8004180:	429c      	cmp	r4, r3
 8004182:	d105      	bne.n	8004190 <std+0x54>
 8004184:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800418c:	f000 ba58 	b.w	8004640 <__retarget_lock_init_recursive>
 8004190:	bd10      	pop	{r4, pc}
 8004192:	bf00      	nop
 8004194:	080043a1 	.word	0x080043a1
 8004198:	080043c3 	.word	0x080043c3
 800419c:	080043fb 	.word	0x080043fb
 80041a0:	0800441f 	.word	0x0800441f
 80041a4:	200003cc 	.word	0x200003cc

080041a8 <stdio_exit_handler>:
 80041a8:	4a02      	ldr	r2, [pc, #8]	@ (80041b4 <stdio_exit_handler+0xc>)
 80041aa:	4903      	ldr	r1, [pc, #12]	@ (80041b8 <stdio_exit_handler+0x10>)
 80041ac:	4803      	ldr	r0, [pc, #12]	@ (80041bc <stdio_exit_handler+0x14>)
 80041ae:	f000 b869 	b.w	8004284 <_fwalk_sglue>
 80041b2:	bf00      	nop
 80041b4:	200002dc 	.word	0x200002dc
 80041b8:	08004edd 	.word	0x08004edd
 80041bc:	200002ec 	.word	0x200002ec

080041c0 <cleanup_stdio>:
 80041c0:	6841      	ldr	r1, [r0, #4]
 80041c2:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <cleanup_stdio+0x34>)
 80041c4:	4299      	cmp	r1, r3
 80041c6:	b510      	push	{r4, lr}
 80041c8:	4604      	mov	r4, r0
 80041ca:	d001      	beq.n	80041d0 <cleanup_stdio+0x10>
 80041cc:	f000 fe86 	bl	8004edc <_fflush_r>
 80041d0:	68a1      	ldr	r1, [r4, #8]
 80041d2:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <cleanup_stdio+0x38>)
 80041d4:	4299      	cmp	r1, r3
 80041d6:	d002      	beq.n	80041de <cleanup_stdio+0x1e>
 80041d8:	4620      	mov	r0, r4
 80041da:	f000 fe7f 	bl	8004edc <_fflush_r>
 80041de:	68e1      	ldr	r1, [r4, #12]
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <cleanup_stdio+0x3c>)
 80041e2:	4299      	cmp	r1, r3
 80041e4:	d004      	beq.n	80041f0 <cleanup_stdio+0x30>
 80041e6:	4620      	mov	r0, r4
 80041e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ec:	f000 be76 	b.w	8004edc <_fflush_r>
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	bf00      	nop
 80041f4:	200003cc 	.word	0x200003cc
 80041f8:	20000434 	.word	0x20000434
 80041fc:	2000049c 	.word	0x2000049c

08004200 <global_stdio_init.part.0>:
 8004200:	b510      	push	{r4, lr}
 8004202:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <global_stdio_init.part.0+0x30>)
 8004204:	4c0b      	ldr	r4, [pc, #44]	@ (8004234 <global_stdio_init.part.0+0x34>)
 8004206:	4a0c      	ldr	r2, [pc, #48]	@ (8004238 <global_stdio_init.part.0+0x38>)
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	4620      	mov	r0, r4
 800420c:	2200      	movs	r2, #0
 800420e:	2104      	movs	r1, #4
 8004210:	f7ff ff94 	bl	800413c <std>
 8004214:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004218:	2201      	movs	r2, #1
 800421a:	2109      	movs	r1, #9
 800421c:	f7ff ff8e 	bl	800413c <std>
 8004220:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004224:	2202      	movs	r2, #2
 8004226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422a:	2112      	movs	r1, #18
 800422c:	f7ff bf86 	b.w	800413c <std>
 8004230:	20000504 	.word	0x20000504
 8004234:	200003cc 	.word	0x200003cc
 8004238:	080041a9 	.word	0x080041a9

0800423c <__sfp_lock_acquire>:
 800423c:	4801      	ldr	r0, [pc, #4]	@ (8004244 <__sfp_lock_acquire+0x8>)
 800423e:	f000 ba00 	b.w	8004642 <__retarget_lock_acquire_recursive>
 8004242:	bf00      	nop
 8004244:	2000050d 	.word	0x2000050d

08004248 <__sfp_lock_release>:
 8004248:	4801      	ldr	r0, [pc, #4]	@ (8004250 <__sfp_lock_release+0x8>)
 800424a:	f000 b9fb 	b.w	8004644 <__retarget_lock_release_recursive>
 800424e:	bf00      	nop
 8004250:	2000050d 	.word	0x2000050d

08004254 <__sinit>:
 8004254:	b510      	push	{r4, lr}
 8004256:	4604      	mov	r4, r0
 8004258:	f7ff fff0 	bl	800423c <__sfp_lock_acquire>
 800425c:	6a23      	ldr	r3, [r4, #32]
 800425e:	b11b      	cbz	r3, 8004268 <__sinit+0x14>
 8004260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004264:	f7ff bff0 	b.w	8004248 <__sfp_lock_release>
 8004268:	4b04      	ldr	r3, [pc, #16]	@ (800427c <__sinit+0x28>)
 800426a:	6223      	str	r3, [r4, #32]
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <__sinit+0x2c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f5      	bne.n	8004260 <__sinit+0xc>
 8004274:	f7ff ffc4 	bl	8004200 <global_stdio_init.part.0>
 8004278:	e7f2      	b.n	8004260 <__sinit+0xc>
 800427a:	bf00      	nop
 800427c:	080041c1 	.word	0x080041c1
 8004280:	20000504 	.word	0x20000504

08004284 <_fwalk_sglue>:
 8004284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004288:	4607      	mov	r7, r0
 800428a:	4688      	mov	r8, r1
 800428c:	4614      	mov	r4, r2
 800428e:	2600      	movs	r6, #0
 8004290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004294:	f1b9 0901 	subs.w	r9, r9, #1
 8004298:	d505      	bpl.n	80042a6 <_fwalk_sglue+0x22>
 800429a:	6824      	ldr	r4, [r4, #0]
 800429c:	2c00      	cmp	r4, #0
 800429e:	d1f7      	bne.n	8004290 <_fwalk_sglue+0xc>
 80042a0:	4630      	mov	r0, r6
 80042a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a6:	89ab      	ldrh	r3, [r5, #12]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d907      	bls.n	80042bc <_fwalk_sglue+0x38>
 80042ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042b0:	3301      	adds	r3, #1
 80042b2:	d003      	beq.n	80042bc <_fwalk_sglue+0x38>
 80042b4:	4629      	mov	r1, r5
 80042b6:	4638      	mov	r0, r7
 80042b8:	47c0      	blx	r8
 80042ba:	4306      	orrs	r6, r0
 80042bc:	3568      	adds	r5, #104	@ 0x68
 80042be:	e7e9      	b.n	8004294 <_fwalk_sglue+0x10>

080042c0 <iprintf>:
 80042c0:	b40f      	push	{r0, r1, r2, r3}
 80042c2:	b507      	push	{r0, r1, r2, lr}
 80042c4:	4906      	ldr	r1, [pc, #24]	@ (80042e0 <iprintf+0x20>)
 80042c6:	ab04      	add	r3, sp, #16
 80042c8:	6808      	ldr	r0, [r1, #0]
 80042ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80042ce:	6881      	ldr	r1, [r0, #8]
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	f000 fadb 	bl	800488c <_vfiprintf_r>
 80042d6:	b003      	add	sp, #12
 80042d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042dc:	b004      	add	sp, #16
 80042de:	4770      	bx	lr
 80042e0:	200002e8 	.word	0x200002e8

080042e4 <_puts_r>:
 80042e4:	6a03      	ldr	r3, [r0, #32]
 80042e6:	b570      	push	{r4, r5, r6, lr}
 80042e8:	6884      	ldr	r4, [r0, #8]
 80042ea:	4605      	mov	r5, r0
 80042ec:	460e      	mov	r6, r1
 80042ee:	b90b      	cbnz	r3, 80042f4 <_puts_r+0x10>
 80042f0:	f7ff ffb0 	bl	8004254 <__sinit>
 80042f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042f6:	07db      	lsls	r3, r3, #31
 80042f8:	d405      	bmi.n	8004306 <_puts_r+0x22>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	0598      	lsls	r0, r3, #22
 80042fe:	d402      	bmi.n	8004306 <_puts_r+0x22>
 8004300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004302:	f000 f99e 	bl	8004642 <__retarget_lock_acquire_recursive>
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	0719      	lsls	r1, r3, #28
 800430a:	d502      	bpl.n	8004312 <_puts_r+0x2e>
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d135      	bne.n	800437e <_puts_r+0x9a>
 8004312:	4621      	mov	r1, r4
 8004314:	4628      	mov	r0, r5
 8004316:	f000 f8c5 	bl	80044a4 <__swsetup_r>
 800431a:	b380      	cbz	r0, 800437e <_puts_r+0x9a>
 800431c:	f04f 35ff 	mov.w	r5, #4294967295
 8004320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004322:	07da      	lsls	r2, r3, #31
 8004324:	d405      	bmi.n	8004332 <_puts_r+0x4e>
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	059b      	lsls	r3, r3, #22
 800432a:	d402      	bmi.n	8004332 <_puts_r+0x4e>
 800432c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800432e:	f000 f989 	bl	8004644 <__retarget_lock_release_recursive>
 8004332:	4628      	mov	r0, r5
 8004334:	bd70      	pop	{r4, r5, r6, pc}
 8004336:	2b00      	cmp	r3, #0
 8004338:	da04      	bge.n	8004344 <_puts_r+0x60>
 800433a:	69a2      	ldr	r2, [r4, #24]
 800433c:	429a      	cmp	r2, r3
 800433e:	dc17      	bgt.n	8004370 <_puts_r+0x8c>
 8004340:	290a      	cmp	r1, #10
 8004342:	d015      	beq.n	8004370 <_puts_r+0x8c>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	6022      	str	r2, [r4, #0]
 800434a:	7019      	strb	r1, [r3, #0]
 800434c:	68a3      	ldr	r3, [r4, #8]
 800434e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004352:	3b01      	subs	r3, #1
 8004354:	60a3      	str	r3, [r4, #8]
 8004356:	2900      	cmp	r1, #0
 8004358:	d1ed      	bne.n	8004336 <_puts_r+0x52>
 800435a:	2b00      	cmp	r3, #0
 800435c:	da11      	bge.n	8004382 <_puts_r+0x9e>
 800435e:	4622      	mov	r2, r4
 8004360:	210a      	movs	r1, #10
 8004362:	4628      	mov	r0, r5
 8004364:	f000 f85f 	bl	8004426 <__swbuf_r>
 8004368:	3001      	adds	r0, #1
 800436a:	d0d7      	beq.n	800431c <_puts_r+0x38>
 800436c:	250a      	movs	r5, #10
 800436e:	e7d7      	b.n	8004320 <_puts_r+0x3c>
 8004370:	4622      	mov	r2, r4
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f857 	bl	8004426 <__swbuf_r>
 8004378:	3001      	adds	r0, #1
 800437a:	d1e7      	bne.n	800434c <_puts_r+0x68>
 800437c:	e7ce      	b.n	800431c <_puts_r+0x38>
 800437e:	3e01      	subs	r6, #1
 8004380:	e7e4      	b.n	800434c <_puts_r+0x68>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	6022      	str	r2, [r4, #0]
 8004388:	220a      	movs	r2, #10
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e7ee      	b.n	800436c <_puts_r+0x88>
	...

08004390 <puts>:
 8004390:	4b02      	ldr	r3, [pc, #8]	@ (800439c <puts+0xc>)
 8004392:	4601      	mov	r1, r0
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	f7ff bfa5 	b.w	80042e4 <_puts_r>
 800439a:	bf00      	nop
 800439c:	200002e8 	.word	0x200002e8

080043a0 <__sread>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	460c      	mov	r4, r1
 80043a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a8:	f000 f8fc 	bl	80045a4 <_read_r>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	bfab      	itete	ge
 80043b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043b2:	89a3      	ldrhlt	r3, [r4, #12]
 80043b4:	181b      	addge	r3, r3, r0
 80043b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043ba:	bfac      	ite	ge
 80043bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043be:	81a3      	strhlt	r3, [r4, #12]
 80043c0:	bd10      	pop	{r4, pc}

080043c2 <__swrite>:
 80043c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c6:	461f      	mov	r7, r3
 80043c8:	898b      	ldrh	r3, [r1, #12]
 80043ca:	05db      	lsls	r3, r3, #23
 80043cc:	4605      	mov	r5, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	4616      	mov	r6, r2
 80043d2:	d505      	bpl.n	80043e0 <__swrite+0x1e>
 80043d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d8:	2302      	movs	r3, #2
 80043da:	2200      	movs	r2, #0
 80043dc:	f000 f8d0 	bl	8004580 <_lseek_r>
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043ea:	81a3      	strh	r3, [r4, #12]
 80043ec:	4632      	mov	r2, r6
 80043ee:	463b      	mov	r3, r7
 80043f0:	4628      	mov	r0, r5
 80043f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f6:	f000 b8e7 	b.w	80045c8 <_write_r>

080043fa <__sseek>:
 80043fa:	b510      	push	{r4, lr}
 80043fc:	460c      	mov	r4, r1
 80043fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004402:	f000 f8bd 	bl	8004580 <_lseek_r>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	bf15      	itete	ne
 800440c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800440e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004416:	81a3      	strheq	r3, [r4, #12]
 8004418:	bf18      	it	ne
 800441a:	81a3      	strhne	r3, [r4, #12]
 800441c:	bd10      	pop	{r4, pc}

0800441e <__sclose>:
 800441e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004422:	f000 b89d 	b.w	8004560 <_close_r>

08004426 <__swbuf_r>:
 8004426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004428:	460e      	mov	r6, r1
 800442a:	4614      	mov	r4, r2
 800442c:	4605      	mov	r5, r0
 800442e:	b118      	cbz	r0, 8004438 <__swbuf_r+0x12>
 8004430:	6a03      	ldr	r3, [r0, #32]
 8004432:	b90b      	cbnz	r3, 8004438 <__swbuf_r+0x12>
 8004434:	f7ff ff0e 	bl	8004254 <__sinit>
 8004438:	69a3      	ldr	r3, [r4, #24]
 800443a:	60a3      	str	r3, [r4, #8]
 800443c:	89a3      	ldrh	r3, [r4, #12]
 800443e:	071a      	lsls	r2, r3, #28
 8004440:	d501      	bpl.n	8004446 <__swbuf_r+0x20>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	b943      	cbnz	r3, 8004458 <__swbuf_r+0x32>
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f82b 	bl	80044a4 <__swsetup_r>
 800444e:	b118      	cbz	r0, 8004458 <__swbuf_r+0x32>
 8004450:	f04f 37ff 	mov.w	r7, #4294967295
 8004454:	4638      	mov	r0, r7
 8004456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	6922      	ldr	r2, [r4, #16]
 800445c:	1a98      	subs	r0, r3, r2
 800445e:	6963      	ldr	r3, [r4, #20]
 8004460:	b2f6      	uxtb	r6, r6
 8004462:	4283      	cmp	r3, r0
 8004464:	4637      	mov	r7, r6
 8004466:	dc05      	bgt.n	8004474 <__swbuf_r+0x4e>
 8004468:	4621      	mov	r1, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f000 fd36 	bl	8004edc <_fflush_r>
 8004470:	2800      	cmp	r0, #0
 8004472:	d1ed      	bne.n	8004450 <__swbuf_r+0x2a>
 8004474:	68a3      	ldr	r3, [r4, #8]
 8004476:	3b01      	subs	r3, #1
 8004478:	60a3      	str	r3, [r4, #8]
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	6022      	str	r2, [r4, #0]
 8004480:	701e      	strb	r6, [r3, #0]
 8004482:	6962      	ldr	r2, [r4, #20]
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	429a      	cmp	r2, r3
 8004488:	d004      	beq.n	8004494 <__swbuf_r+0x6e>
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	07db      	lsls	r3, r3, #31
 800448e:	d5e1      	bpl.n	8004454 <__swbuf_r+0x2e>
 8004490:	2e0a      	cmp	r6, #10
 8004492:	d1df      	bne.n	8004454 <__swbuf_r+0x2e>
 8004494:	4621      	mov	r1, r4
 8004496:	4628      	mov	r0, r5
 8004498:	f000 fd20 	bl	8004edc <_fflush_r>
 800449c:	2800      	cmp	r0, #0
 800449e:	d0d9      	beq.n	8004454 <__swbuf_r+0x2e>
 80044a0:	e7d6      	b.n	8004450 <__swbuf_r+0x2a>
	...

080044a4 <__swsetup_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4b29      	ldr	r3, [pc, #164]	@ (800454c <__swsetup_r+0xa8>)
 80044a8:	4605      	mov	r5, r0
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	460c      	mov	r4, r1
 80044ae:	b118      	cbz	r0, 80044b8 <__swsetup_r+0x14>
 80044b0:	6a03      	ldr	r3, [r0, #32]
 80044b2:	b90b      	cbnz	r3, 80044b8 <__swsetup_r+0x14>
 80044b4:	f7ff fece 	bl	8004254 <__sinit>
 80044b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044bc:	0719      	lsls	r1, r3, #28
 80044be:	d422      	bmi.n	8004506 <__swsetup_r+0x62>
 80044c0:	06da      	lsls	r2, r3, #27
 80044c2:	d407      	bmi.n	80044d4 <__swsetup_r+0x30>
 80044c4:	2209      	movs	r2, #9
 80044c6:	602a      	str	r2, [r5, #0]
 80044c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	f04f 30ff 	mov.w	r0, #4294967295
 80044d2:	e033      	b.n	800453c <__swsetup_r+0x98>
 80044d4:	0758      	lsls	r0, r3, #29
 80044d6:	d512      	bpl.n	80044fe <__swsetup_r+0x5a>
 80044d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044da:	b141      	cbz	r1, 80044ee <__swsetup_r+0x4a>
 80044dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044e0:	4299      	cmp	r1, r3
 80044e2:	d002      	beq.n	80044ea <__swsetup_r+0x46>
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f8af 	bl	8004648 <_free_r>
 80044ea:	2300      	movs	r3, #0
 80044ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044f4:	81a3      	strh	r3, [r4, #12]
 80044f6:	2300      	movs	r3, #0
 80044f8:	6063      	str	r3, [r4, #4]
 80044fa:	6923      	ldr	r3, [r4, #16]
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f043 0308 	orr.w	r3, r3, #8
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	6923      	ldr	r3, [r4, #16]
 8004508:	b94b      	cbnz	r3, 800451e <__swsetup_r+0x7a>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004514:	d003      	beq.n	800451e <__swsetup_r+0x7a>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fd2d 	bl	8004f78 <__smakebuf_r>
 800451e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004522:	f013 0201 	ands.w	r2, r3, #1
 8004526:	d00a      	beq.n	800453e <__swsetup_r+0x9a>
 8004528:	2200      	movs	r2, #0
 800452a:	60a2      	str	r2, [r4, #8]
 800452c:	6962      	ldr	r2, [r4, #20]
 800452e:	4252      	negs	r2, r2
 8004530:	61a2      	str	r2, [r4, #24]
 8004532:	6922      	ldr	r2, [r4, #16]
 8004534:	b942      	cbnz	r2, 8004548 <__swsetup_r+0xa4>
 8004536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800453a:	d1c5      	bne.n	80044c8 <__swsetup_r+0x24>
 800453c:	bd38      	pop	{r3, r4, r5, pc}
 800453e:	0799      	lsls	r1, r3, #30
 8004540:	bf58      	it	pl
 8004542:	6962      	ldrpl	r2, [r4, #20]
 8004544:	60a2      	str	r2, [r4, #8]
 8004546:	e7f4      	b.n	8004532 <__swsetup_r+0x8e>
 8004548:	2000      	movs	r0, #0
 800454a:	e7f7      	b.n	800453c <__swsetup_r+0x98>
 800454c:	200002e8 	.word	0x200002e8

08004550 <memset>:
 8004550:	4402      	add	r2, r0
 8004552:	4603      	mov	r3, r0
 8004554:	4293      	cmp	r3, r2
 8004556:	d100      	bne.n	800455a <memset+0xa>
 8004558:	4770      	bx	lr
 800455a:	f803 1b01 	strb.w	r1, [r3], #1
 800455e:	e7f9      	b.n	8004554 <memset+0x4>

08004560 <_close_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	4d06      	ldr	r5, [pc, #24]	@ (800457c <_close_r+0x1c>)
 8004564:	2300      	movs	r3, #0
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	602b      	str	r3, [r5, #0]
 800456c:	f7fe f84f 	bl	800260e <_close>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_close_r+0x1a>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_close_r+0x1a>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	20000508 	.word	0x20000508

08004580 <_lseek_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	@ (80045a0 <_lseek_r+0x20>)
 8004584:	4604      	mov	r4, r0
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	2200      	movs	r2, #0
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fe f864 	bl	800265c <_lseek>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_lseek_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_lseek_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000508 	.word	0x20000508

080045a4 <_read_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d07      	ldr	r5, [pc, #28]	@ (80045c4 <_read_r+0x20>)
 80045a8:	4604      	mov	r4, r0
 80045aa:	4608      	mov	r0, r1
 80045ac:	4611      	mov	r1, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f7fe f80e 	bl	80025d4 <_read>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_read_r+0x1e>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_read_r+0x1e>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	20000508 	.word	0x20000508

080045c8 <_write_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d07      	ldr	r5, [pc, #28]	@ (80045e8 <_write_r+0x20>)
 80045cc:	4604      	mov	r4, r0
 80045ce:	4608      	mov	r0, r1
 80045d0:	4611      	mov	r1, r2
 80045d2:	2200      	movs	r2, #0
 80045d4:	602a      	str	r2, [r5, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	f7fd fafc 	bl	8001bd4 <_write>
 80045dc:	1c43      	adds	r3, r0, #1
 80045de:	d102      	bne.n	80045e6 <_write_r+0x1e>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	b103      	cbz	r3, 80045e6 <_write_r+0x1e>
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	bd38      	pop	{r3, r4, r5, pc}
 80045e8:	20000508 	.word	0x20000508

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	@ (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	200002e8 	.word	0x200002e8

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004630 <__libc_init_array+0x38>)
 80045fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004634 <__libc_init_array+0x3c>)
 80045fe:	1b64      	subs	r4, r4, r5
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	2600      	movs	r6, #0
 8004604:	42a6      	cmp	r6, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	4d0b      	ldr	r5, [pc, #44]	@ (8004638 <__libc_init_array+0x40>)
 800460a:	4c0c      	ldr	r4, [pc, #48]	@ (800463c <__libc_init_array+0x44>)
 800460c:	f000 fd22 	bl	8005054 <_init>
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	2600      	movs	r6, #0
 8004616:	42a6      	cmp	r6, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004620:	4798      	blx	r3
 8004622:	3601      	adds	r6, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f855 3b04 	ldr.w	r3, [r5], #4
 800462a:	4798      	blx	r3
 800462c:	3601      	adds	r6, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08005270 	.word	0x08005270
 8004634:	08005270 	.word	0x08005270
 8004638:	08005270 	.word	0x08005270
 800463c:	08005274 	.word	0x08005274

08004640 <__retarget_lock_init_recursive>:
 8004640:	4770      	bx	lr

08004642 <__retarget_lock_acquire_recursive>:
 8004642:	4770      	bx	lr

08004644 <__retarget_lock_release_recursive>:
 8004644:	4770      	bx	lr
	...

08004648 <_free_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4605      	mov	r5, r0
 800464c:	2900      	cmp	r1, #0
 800464e:	d041      	beq.n	80046d4 <_free_r+0x8c>
 8004650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004654:	1f0c      	subs	r4, r1, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfb8      	it	lt
 800465a:	18e4      	addlt	r4, r4, r3
 800465c:	f000 f8e0 	bl	8004820 <__malloc_lock>
 8004660:	4a1d      	ldr	r2, [pc, #116]	@ (80046d8 <_free_r+0x90>)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	b933      	cbnz	r3, 8004674 <_free_r+0x2c>
 8004666:	6063      	str	r3, [r4, #4]
 8004668:	6014      	str	r4, [r2, #0]
 800466a:	4628      	mov	r0, r5
 800466c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004670:	f000 b8dc 	b.w	800482c <__malloc_unlock>
 8004674:	42a3      	cmp	r3, r4
 8004676:	d908      	bls.n	800468a <_free_r+0x42>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	1821      	adds	r1, r4, r0
 800467c:	428b      	cmp	r3, r1
 800467e:	bf01      	itttt	eq
 8004680:	6819      	ldreq	r1, [r3, #0]
 8004682:	685b      	ldreq	r3, [r3, #4]
 8004684:	1809      	addeq	r1, r1, r0
 8004686:	6021      	streq	r1, [r4, #0]
 8004688:	e7ed      	b.n	8004666 <_free_r+0x1e>
 800468a:	461a      	mov	r2, r3
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b10b      	cbz	r3, 8004694 <_free_r+0x4c>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d9fa      	bls.n	800468a <_free_r+0x42>
 8004694:	6811      	ldr	r1, [r2, #0]
 8004696:	1850      	adds	r0, r2, r1
 8004698:	42a0      	cmp	r0, r4
 800469a:	d10b      	bne.n	80046b4 <_free_r+0x6c>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	4401      	add	r1, r0
 80046a0:	1850      	adds	r0, r2, r1
 80046a2:	4283      	cmp	r3, r0
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	d1e0      	bne.n	800466a <_free_r+0x22>
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	6053      	str	r3, [r2, #4]
 80046ae:	4408      	add	r0, r1
 80046b0:	6010      	str	r0, [r2, #0]
 80046b2:	e7da      	b.n	800466a <_free_r+0x22>
 80046b4:	d902      	bls.n	80046bc <_free_r+0x74>
 80046b6:	230c      	movs	r3, #12
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	e7d6      	b.n	800466a <_free_r+0x22>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	1821      	adds	r1, r4, r0
 80046c0:	428b      	cmp	r3, r1
 80046c2:	bf04      	itt	eq
 80046c4:	6819      	ldreq	r1, [r3, #0]
 80046c6:	685b      	ldreq	r3, [r3, #4]
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	bf04      	itt	eq
 80046cc:	1809      	addeq	r1, r1, r0
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	6054      	str	r4, [r2, #4]
 80046d2:	e7ca      	b.n	800466a <_free_r+0x22>
 80046d4:	bd38      	pop	{r3, r4, r5, pc}
 80046d6:	bf00      	nop
 80046d8:	20000514 	.word	0x20000514

080046dc <sbrk_aligned>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4e0f      	ldr	r6, [pc, #60]	@ (800471c <sbrk_aligned+0x40>)
 80046e0:	460c      	mov	r4, r1
 80046e2:	6831      	ldr	r1, [r6, #0]
 80046e4:	4605      	mov	r5, r0
 80046e6:	b911      	cbnz	r1, 80046ee <sbrk_aligned+0x12>
 80046e8:	f000 fca4 	bl	8005034 <_sbrk_r>
 80046ec:	6030      	str	r0, [r6, #0]
 80046ee:	4621      	mov	r1, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 fc9f 	bl	8005034 <_sbrk_r>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d103      	bne.n	8004702 <sbrk_aligned+0x26>
 80046fa:	f04f 34ff 	mov.w	r4, #4294967295
 80046fe:	4620      	mov	r0, r4
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	1cc4      	adds	r4, r0, #3
 8004704:	f024 0403 	bic.w	r4, r4, #3
 8004708:	42a0      	cmp	r0, r4
 800470a:	d0f8      	beq.n	80046fe <sbrk_aligned+0x22>
 800470c:	1a21      	subs	r1, r4, r0
 800470e:	4628      	mov	r0, r5
 8004710:	f000 fc90 	bl	8005034 <_sbrk_r>
 8004714:	3001      	adds	r0, #1
 8004716:	d1f2      	bne.n	80046fe <sbrk_aligned+0x22>
 8004718:	e7ef      	b.n	80046fa <sbrk_aligned+0x1e>
 800471a:	bf00      	nop
 800471c:	20000510 	.word	0x20000510

08004720 <_malloc_r>:
 8004720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004724:	1ccd      	adds	r5, r1, #3
 8004726:	f025 0503 	bic.w	r5, r5, #3
 800472a:	3508      	adds	r5, #8
 800472c:	2d0c      	cmp	r5, #12
 800472e:	bf38      	it	cc
 8004730:	250c      	movcc	r5, #12
 8004732:	2d00      	cmp	r5, #0
 8004734:	4606      	mov	r6, r0
 8004736:	db01      	blt.n	800473c <_malloc_r+0x1c>
 8004738:	42a9      	cmp	r1, r5
 800473a:	d904      	bls.n	8004746 <_malloc_r+0x26>
 800473c:	230c      	movs	r3, #12
 800473e:	6033      	str	r3, [r6, #0]
 8004740:	2000      	movs	r0, #0
 8004742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800481c <_malloc_r+0xfc>
 800474a:	f000 f869 	bl	8004820 <__malloc_lock>
 800474e:	f8d8 3000 	ldr.w	r3, [r8]
 8004752:	461c      	mov	r4, r3
 8004754:	bb44      	cbnz	r4, 80047a8 <_malloc_r+0x88>
 8004756:	4629      	mov	r1, r5
 8004758:	4630      	mov	r0, r6
 800475a:	f7ff ffbf 	bl	80046dc <sbrk_aligned>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	4604      	mov	r4, r0
 8004762:	d158      	bne.n	8004816 <_malloc_r+0xf6>
 8004764:	f8d8 4000 	ldr.w	r4, [r8]
 8004768:	4627      	mov	r7, r4
 800476a:	2f00      	cmp	r7, #0
 800476c:	d143      	bne.n	80047f6 <_malloc_r+0xd6>
 800476e:	2c00      	cmp	r4, #0
 8004770:	d04b      	beq.n	800480a <_malloc_r+0xea>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	4639      	mov	r1, r7
 8004776:	4630      	mov	r0, r6
 8004778:	eb04 0903 	add.w	r9, r4, r3
 800477c:	f000 fc5a 	bl	8005034 <_sbrk_r>
 8004780:	4581      	cmp	r9, r0
 8004782:	d142      	bne.n	800480a <_malloc_r+0xea>
 8004784:	6821      	ldr	r1, [r4, #0]
 8004786:	1a6d      	subs	r5, r5, r1
 8004788:	4629      	mov	r1, r5
 800478a:	4630      	mov	r0, r6
 800478c:	f7ff ffa6 	bl	80046dc <sbrk_aligned>
 8004790:	3001      	adds	r0, #1
 8004792:	d03a      	beq.n	800480a <_malloc_r+0xea>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	442b      	add	r3, r5
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	f8d8 3000 	ldr.w	r3, [r8]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	bb62      	cbnz	r2, 80047fc <_malloc_r+0xdc>
 80047a2:	f8c8 7000 	str.w	r7, [r8]
 80047a6:	e00f      	b.n	80047c8 <_malloc_r+0xa8>
 80047a8:	6822      	ldr	r2, [r4, #0]
 80047aa:	1b52      	subs	r2, r2, r5
 80047ac:	d420      	bmi.n	80047f0 <_malloc_r+0xd0>
 80047ae:	2a0b      	cmp	r2, #11
 80047b0:	d917      	bls.n	80047e2 <_malloc_r+0xc2>
 80047b2:	1961      	adds	r1, r4, r5
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	6025      	str	r5, [r4, #0]
 80047b8:	bf18      	it	ne
 80047ba:	6059      	strne	r1, [r3, #4]
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	bf08      	it	eq
 80047c0:	f8c8 1000 	streq.w	r1, [r8]
 80047c4:	5162      	str	r2, [r4, r5]
 80047c6:	604b      	str	r3, [r1, #4]
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 f82f 	bl	800482c <__malloc_unlock>
 80047ce:	f104 000b 	add.w	r0, r4, #11
 80047d2:	1d23      	adds	r3, r4, #4
 80047d4:	f020 0007 	bic.w	r0, r0, #7
 80047d8:	1ac2      	subs	r2, r0, r3
 80047da:	bf1c      	itt	ne
 80047dc:	1a1b      	subne	r3, r3, r0
 80047de:	50a3      	strne	r3, [r4, r2]
 80047e0:	e7af      	b.n	8004742 <_malloc_r+0x22>
 80047e2:	6862      	ldr	r2, [r4, #4]
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	bf0c      	ite	eq
 80047e8:	f8c8 2000 	streq.w	r2, [r8]
 80047ec:	605a      	strne	r2, [r3, #4]
 80047ee:	e7eb      	b.n	80047c8 <_malloc_r+0xa8>
 80047f0:	4623      	mov	r3, r4
 80047f2:	6864      	ldr	r4, [r4, #4]
 80047f4:	e7ae      	b.n	8004754 <_malloc_r+0x34>
 80047f6:	463c      	mov	r4, r7
 80047f8:	687f      	ldr	r7, [r7, #4]
 80047fa:	e7b6      	b.n	800476a <_malloc_r+0x4a>
 80047fc:	461a      	mov	r2, r3
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	42a3      	cmp	r3, r4
 8004802:	d1fb      	bne.n	80047fc <_malloc_r+0xdc>
 8004804:	2300      	movs	r3, #0
 8004806:	6053      	str	r3, [r2, #4]
 8004808:	e7de      	b.n	80047c8 <_malloc_r+0xa8>
 800480a:	230c      	movs	r3, #12
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	4630      	mov	r0, r6
 8004810:	f000 f80c 	bl	800482c <__malloc_unlock>
 8004814:	e794      	b.n	8004740 <_malloc_r+0x20>
 8004816:	6005      	str	r5, [r0, #0]
 8004818:	e7d6      	b.n	80047c8 <_malloc_r+0xa8>
 800481a:	bf00      	nop
 800481c:	20000514 	.word	0x20000514

08004820 <__malloc_lock>:
 8004820:	4801      	ldr	r0, [pc, #4]	@ (8004828 <__malloc_lock+0x8>)
 8004822:	f7ff bf0e 	b.w	8004642 <__retarget_lock_acquire_recursive>
 8004826:	bf00      	nop
 8004828:	2000050c 	.word	0x2000050c

0800482c <__malloc_unlock>:
 800482c:	4801      	ldr	r0, [pc, #4]	@ (8004834 <__malloc_unlock+0x8>)
 800482e:	f7ff bf09 	b.w	8004644 <__retarget_lock_release_recursive>
 8004832:	bf00      	nop
 8004834:	2000050c 	.word	0x2000050c

08004838 <__sfputc_r>:
 8004838:	6893      	ldr	r3, [r2, #8]
 800483a:	3b01      	subs	r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	b410      	push	{r4}
 8004840:	6093      	str	r3, [r2, #8]
 8004842:	da08      	bge.n	8004856 <__sfputc_r+0x1e>
 8004844:	6994      	ldr	r4, [r2, #24]
 8004846:	42a3      	cmp	r3, r4
 8004848:	db01      	blt.n	800484e <__sfputc_r+0x16>
 800484a:	290a      	cmp	r1, #10
 800484c:	d103      	bne.n	8004856 <__sfputc_r+0x1e>
 800484e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004852:	f7ff bde8 	b.w	8004426 <__swbuf_r>
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	1c58      	adds	r0, r3, #1
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	7019      	strb	r1, [r3, #0]
 800485e:	4608      	mov	r0, r1
 8004860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004864:	4770      	bx	lr

08004866 <__sfputs_r>:
 8004866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004868:	4606      	mov	r6, r0
 800486a:	460f      	mov	r7, r1
 800486c:	4614      	mov	r4, r2
 800486e:	18d5      	adds	r5, r2, r3
 8004870:	42ac      	cmp	r4, r5
 8004872:	d101      	bne.n	8004878 <__sfputs_r+0x12>
 8004874:	2000      	movs	r0, #0
 8004876:	e007      	b.n	8004888 <__sfputs_r+0x22>
 8004878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800487c:	463a      	mov	r2, r7
 800487e:	4630      	mov	r0, r6
 8004880:	f7ff ffda 	bl	8004838 <__sfputc_r>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d1f3      	bne.n	8004870 <__sfputs_r+0xa>
 8004888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800488c <_vfiprintf_r>:
 800488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004890:	460d      	mov	r5, r1
 8004892:	b09d      	sub	sp, #116	@ 0x74
 8004894:	4614      	mov	r4, r2
 8004896:	4698      	mov	r8, r3
 8004898:	4606      	mov	r6, r0
 800489a:	b118      	cbz	r0, 80048a4 <_vfiprintf_r+0x18>
 800489c:	6a03      	ldr	r3, [r0, #32]
 800489e:	b90b      	cbnz	r3, 80048a4 <_vfiprintf_r+0x18>
 80048a0:	f7ff fcd8 	bl	8004254 <__sinit>
 80048a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048a6:	07d9      	lsls	r1, r3, #31
 80048a8:	d405      	bmi.n	80048b6 <_vfiprintf_r+0x2a>
 80048aa:	89ab      	ldrh	r3, [r5, #12]
 80048ac:	059a      	lsls	r2, r3, #22
 80048ae:	d402      	bmi.n	80048b6 <_vfiprintf_r+0x2a>
 80048b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048b2:	f7ff fec6 	bl	8004642 <__retarget_lock_acquire_recursive>
 80048b6:	89ab      	ldrh	r3, [r5, #12]
 80048b8:	071b      	lsls	r3, r3, #28
 80048ba:	d501      	bpl.n	80048c0 <_vfiprintf_r+0x34>
 80048bc:	692b      	ldr	r3, [r5, #16]
 80048be:	b99b      	cbnz	r3, 80048e8 <_vfiprintf_r+0x5c>
 80048c0:	4629      	mov	r1, r5
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff fdee 	bl	80044a4 <__swsetup_r>
 80048c8:	b170      	cbz	r0, 80048e8 <_vfiprintf_r+0x5c>
 80048ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048cc:	07dc      	lsls	r4, r3, #31
 80048ce:	d504      	bpl.n	80048da <_vfiprintf_r+0x4e>
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	b01d      	add	sp, #116	@ 0x74
 80048d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	0598      	lsls	r0, r3, #22
 80048de:	d4f7      	bmi.n	80048d0 <_vfiprintf_r+0x44>
 80048e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048e2:	f7ff feaf 	bl	8004644 <__retarget_lock_release_recursive>
 80048e6:	e7f3      	b.n	80048d0 <_vfiprintf_r+0x44>
 80048e8:	2300      	movs	r3, #0
 80048ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ec:	2320      	movs	r3, #32
 80048ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f6:	2330      	movs	r3, #48	@ 0x30
 80048f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004aa8 <_vfiprintf_r+0x21c>
 80048fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004900:	f04f 0901 	mov.w	r9, #1
 8004904:	4623      	mov	r3, r4
 8004906:	469a      	mov	sl, r3
 8004908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490c:	b10a      	cbz	r2, 8004912 <_vfiprintf_r+0x86>
 800490e:	2a25      	cmp	r2, #37	@ 0x25
 8004910:	d1f9      	bne.n	8004906 <_vfiprintf_r+0x7a>
 8004912:	ebba 0b04 	subs.w	fp, sl, r4
 8004916:	d00b      	beq.n	8004930 <_vfiprintf_r+0xa4>
 8004918:	465b      	mov	r3, fp
 800491a:	4622      	mov	r2, r4
 800491c:	4629      	mov	r1, r5
 800491e:	4630      	mov	r0, r6
 8004920:	f7ff ffa1 	bl	8004866 <__sfputs_r>
 8004924:	3001      	adds	r0, #1
 8004926:	f000 80a7 	beq.w	8004a78 <_vfiprintf_r+0x1ec>
 800492a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800492c:	445a      	add	r2, fp
 800492e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004930:	f89a 3000 	ldrb.w	r3, [sl]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 809f 	beq.w	8004a78 <_vfiprintf_r+0x1ec>
 800493a:	2300      	movs	r3, #0
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004944:	f10a 0a01 	add.w	sl, sl, #1
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	9307      	str	r3, [sp, #28]
 800494c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004950:	931a      	str	r3, [sp, #104]	@ 0x68
 8004952:	4654      	mov	r4, sl
 8004954:	2205      	movs	r2, #5
 8004956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495a:	4853      	ldr	r0, [pc, #332]	@ (8004aa8 <_vfiprintf_r+0x21c>)
 800495c:	f7fb fc58 	bl	8000210 <memchr>
 8004960:	9a04      	ldr	r2, [sp, #16]
 8004962:	b9d8      	cbnz	r0, 800499c <_vfiprintf_r+0x110>
 8004964:	06d1      	lsls	r1, r2, #27
 8004966:	bf44      	itt	mi
 8004968:	2320      	movmi	r3, #32
 800496a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800496e:	0713      	lsls	r3, r2, #28
 8004970:	bf44      	itt	mi
 8004972:	232b      	movmi	r3, #43	@ 0x2b
 8004974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004978:	f89a 3000 	ldrb.w	r3, [sl]
 800497c:	2b2a      	cmp	r3, #42	@ 0x2a
 800497e:	d015      	beq.n	80049ac <_vfiprintf_r+0x120>
 8004980:	9a07      	ldr	r2, [sp, #28]
 8004982:	4654      	mov	r4, sl
 8004984:	2000      	movs	r0, #0
 8004986:	f04f 0c0a 	mov.w	ip, #10
 800498a:	4621      	mov	r1, r4
 800498c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004990:	3b30      	subs	r3, #48	@ 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d94b      	bls.n	8004a2e <_vfiprintf_r+0x1a2>
 8004996:	b1b0      	cbz	r0, 80049c6 <_vfiprintf_r+0x13a>
 8004998:	9207      	str	r2, [sp, #28]
 800499a:	e014      	b.n	80049c6 <_vfiprintf_r+0x13a>
 800499c:	eba0 0308 	sub.w	r3, r0, r8
 80049a0:	fa09 f303 	lsl.w	r3, r9, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	46a2      	mov	sl, r4
 80049aa:	e7d2      	b.n	8004952 <_vfiprintf_r+0xc6>
 80049ac:	9b03      	ldr	r3, [sp, #12]
 80049ae:	1d19      	adds	r1, r3, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	9103      	str	r1, [sp, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bfbb      	ittet	lt
 80049b8:	425b      	neglt	r3, r3
 80049ba:	f042 0202 	orrlt.w	r2, r2, #2
 80049be:	9307      	strge	r3, [sp, #28]
 80049c0:	9307      	strlt	r3, [sp, #28]
 80049c2:	bfb8      	it	lt
 80049c4:	9204      	strlt	r2, [sp, #16]
 80049c6:	7823      	ldrb	r3, [r4, #0]
 80049c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80049ca:	d10a      	bne.n	80049e2 <_vfiprintf_r+0x156>
 80049cc:	7863      	ldrb	r3, [r4, #1]
 80049ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d0:	d132      	bne.n	8004a38 <_vfiprintf_r+0x1ac>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	1d1a      	adds	r2, r3, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	9203      	str	r2, [sp, #12]
 80049da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049de:	3402      	adds	r4, #2
 80049e0:	9305      	str	r3, [sp, #20]
 80049e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ab8 <_vfiprintf_r+0x22c>
 80049e6:	7821      	ldrb	r1, [r4, #0]
 80049e8:	2203      	movs	r2, #3
 80049ea:	4650      	mov	r0, sl
 80049ec:	f7fb fc10 	bl	8000210 <memchr>
 80049f0:	b138      	cbz	r0, 8004a02 <_vfiprintf_r+0x176>
 80049f2:	9b04      	ldr	r3, [sp, #16]
 80049f4:	eba0 000a 	sub.w	r0, r0, sl
 80049f8:	2240      	movs	r2, #64	@ 0x40
 80049fa:	4082      	lsls	r2, r0
 80049fc:	4313      	orrs	r3, r2
 80049fe:	3401      	adds	r4, #1
 8004a00:	9304      	str	r3, [sp, #16]
 8004a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a06:	4829      	ldr	r0, [pc, #164]	@ (8004aac <_vfiprintf_r+0x220>)
 8004a08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a0c:	2206      	movs	r2, #6
 8004a0e:	f7fb fbff 	bl	8000210 <memchr>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d03f      	beq.n	8004a96 <_vfiprintf_r+0x20a>
 8004a16:	4b26      	ldr	r3, [pc, #152]	@ (8004ab0 <_vfiprintf_r+0x224>)
 8004a18:	bb1b      	cbnz	r3, 8004a62 <_vfiprintf_r+0x1d6>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	3308      	adds	r3, #8
 8004a24:	9303      	str	r3, [sp, #12]
 8004a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a28:	443b      	add	r3, r7
 8004a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a2c:	e76a      	b.n	8004904 <_vfiprintf_r+0x78>
 8004a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a32:	460c      	mov	r4, r1
 8004a34:	2001      	movs	r0, #1
 8004a36:	e7a8      	b.n	800498a <_vfiprintf_r+0xfe>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	3401      	adds	r4, #1
 8004a3c:	9305      	str	r3, [sp, #20]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	f04f 0c0a 	mov.w	ip, #10
 8004a44:	4620      	mov	r0, r4
 8004a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4a:	3a30      	subs	r2, #48	@ 0x30
 8004a4c:	2a09      	cmp	r2, #9
 8004a4e:	d903      	bls.n	8004a58 <_vfiprintf_r+0x1cc>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0c6      	beq.n	80049e2 <_vfiprintf_r+0x156>
 8004a54:	9105      	str	r1, [sp, #20]
 8004a56:	e7c4      	b.n	80049e2 <_vfiprintf_r+0x156>
 8004a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e7f0      	b.n	8004a44 <_vfiprintf_r+0x1b8>
 8004a62:	ab03      	add	r3, sp, #12
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	462a      	mov	r2, r5
 8004a68:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <_vfiprintf_r+0x228>)
 8004a6a:	a904      	add	r1, sp, #16
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f3af 8000 	nop.w
 8004a72:	4607      	mov	r7, r0
 8004a74:	1c78      	adds	r0, r7, #1
 8004a76:	d1d6      	bne.n	8004a26 <_vfiprintf_r+0x19a>
 8004a78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a7a:	07d9      	lsls	r1, r3, #31
 8004a7c:	d405      	bmi.n	8004a8a <_vfiprintf_r+0x1fe>
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	059a      	lsls	r2, r3, #22
 8004a82:	d402      	bmi.n	8004a8a <_vfiprintf_r+0x1fe>
 8004a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a86:	f7ff fddd 	bl	8004644 <__retarget_lock_release_recursive>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	065b      	lsls	r3, r3, #25
 8004a8e:	f53f af1f 	bmi.w	80048d0 <_vfiprintf_r+0x44>
 8004a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a94:	e71e      	b.n	80048d4 <_vfiprintf_r+0x48>
 8004a96:	ab03      	add	r3, sp, #12
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	462a      	mov	r2, r5
 8004a9c:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <_vfiprintf_r+0x228>)
 8004a9e:	a904      	add	r1, sp, #16
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 f879 	bl	8004b98 <_printf_i>
 8004aa6:	e7e4      	b.n	8004a72 <_vfiprintf_r+0x1e6>
 8004aa8:	08005234 	.word	0x08005234
 8004aac:	0800523e 	.word	0x0800523e
 8004ab0:	00000000 	.word	0x00000000
 8004ab4:	08004867 	.word	0x08004867
 8004ab8:	0800523a 	.word	0x0800523a

08004abc <_printf_common>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	4698      	mov	r8, r3
 8004ac4:	688a      	ldr	r2, [r1, #8]
 8004ac6:	690b      	ldr	r3, [r1, #16]
 8004ac8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bfb8      	it	lt
 8004ad0:	4613      	movlt	r3, r2
 8004ad2:	6033      	str	r3, [r6, #0]
 8004ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ad8:	4607      	mov	r7, r0
 8004ada:	460c      	mov	r4, r1
 8004adc:	b10a      	cbz	r2, 8004ae2 <_printf_common+0x26>
 8004ade:	3301      	adds	r3, #1
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	0699      	lsls	r1, r3, #26
 8004ae6:	bf42      	ittt	mi
 8004ae8:	6833      	ldrmi	r3, [r6, #0]
 8004aea:	3302      	addmi	r3, #2
 8004aec:	6033      	strmi	r3, [r6, #0]
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	f015 0506 	ands.w	r5, r5, #6
 8004af4:	d106      	bne.n	8004b04 <_printf_common+0x48>
 8004af6:	f104 0a19 	add.w	sl, r4, #25
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	6832      	ldr	r2, [r6, #0]
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dc26      	bgt.n	8004b52 <_printf_common+0x96>
 8004b04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	3b00      	subs	r3, #0
 8004b0c:	bf18      	it	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	0692      	lsls	r2, r2, #26
 8004b12:	d42b      	bmi.n	8004b6c <_printf_common+0xb0>
 8004b14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b18:	4641      	mov	r1, r8
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	47c8      	blx	r9
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d01e      	beq.n	8004b60 <_printf_common+0xa4>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	6922      	ldr	r2, [r4, #16]
 8004b26:	f003 0306 	and.w	r3, r3, #6
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf02      	ittt	eq
 8004b2e:	68e5      	ldreq	r5, [r4, #12]
 8004b30:	6833      	ldreq	r3, [r6, #0]
 8004b32:	1aed      	subeq	r5, r5, r3
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	bf0c      	ite	eq
 8004b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b3c:	2500      	movne	r5, #0
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	bfc4      	itt	gt
 8004b42:	1a9b      	subgt	r3, r3, r2
 8004b44:	18ed      	addgt	r5, r5, r3
 8004b46:	2600      	movs	r6, #0
 8004b48:	341a      	adds	r4, #26
 8004b4a:	42b5      	cmp	r5, r6
 8004b4c:	d11a      	bne.n	8004b84 <_printf_common+0xc8>
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e008      	b.n	8004b64 <_printf_common+0xa8>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4652      	mov	r2, sl
 8004b56:	4641      	mov	r1, r8
 8004b58:	4638      	mov	r0, r7
 8004b5a:	47c8      	blx	r9
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d103      	bne.n	8004b68 <_printf_common+0xac>
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b68:	3501      	adds	r5, #1
 8004b6a:	e7c6      	b.n	8004afa <_printf_common+0x3e>
 8004b6c:	18e1      	adds	r1, r4, r3
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	2030      	movs	r0, #48	@ 0x30
 8004b72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b76:	4422      	add	r2, r4
 8004b78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b80:	3302      	adds	r3, #2
 8004b82:	e7c7      	b.n	8004b14 <_printf_common+0x58>
 8004b84:	2301      	movs	r3, #1
 8004b86:	4622      	mov	r2, r4
 8004b88:	4641      	mov	r1, r8
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	47c8      	blx	r9
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d0e6      	beq.n	8004b60 <_printf_common+0xa4>
 8004b92:	3601      	adds	r6, #1
 8004b94:	e7d9      	b.n	8004b4a <_printf_common+0x8e>
	...

08004b98 <_printf_i>:
 8004b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b9c:	7e0f      	ldrb	r7, [r1, #24]
 8004b9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ba0:	2f78      	cmp	r7, #120	@ 0x78
 8004ba2:	4691      	mov	r9, r2
 8004ba4:	4680      	mov	r8, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	469a      	mov	sl, r3
 8004baa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bae:	d807      	bhi.n	8004bc0 <_printf_i+0x28>
 8004bb0:	2f62      	cmp	r7, #98	@ 0x62
 8004bb2:	d80a      	bhi.n	8004bca <_printf_i+0x32>
 8004bb4:	2f00      	cmp	r7, #0
 8004bb6:	f000 80d1 	beq.w	8004d5c <_printf_i+0x1c4>
 8004bba:	2f58      	cmp	r7, #88	@ 0x58
 8004bbc:	f000 80b8 	beq.w	8004d30 <_printf_i+0x198>
 8004bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bc8:	e03a      	b.n	8004c40 <_printf_i+0xa8>
 8004bca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bce:	2b15      	cmp	r3, #21
 8004bd0:	d8f6      	bhi.n	8004bc0 <_printf_i+0x28>
 8004bd2:	a101      	add	r1, pc, #4	@ (adr r1, 8004bd8 <_printf_i+0x40>)
 8004bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bd8:	08004c31 	.word	0x08004c31
 8004bdc:	08004c45 	.word	0x08004c45
 8004be0:	08004bc1 	.word	0x08004bc1
 8004be4:	08004bc1 	.word	0x08004bc1
 8004be8:	08004bc1 	.word	0x08004bc1
 8004bec:	08004bc1 	.word	0x08004bc1
 8004bf0:	08004c45 	.word	0x08004c45
 8004bf4:	08004bc1 	.word	0x08004bc1
 8004bf8:	08004bc1 	.word	0x08004bc1
 8004bfc:	08004bc1 	.word	0x08004bc1
 8004c00:	08004bc1 	.word	0x08004bc1
 8004c04:	08004d43 	.word	0x08004d43
 8004c08:	08004c6f 	.word	0x08004c6f
 8004c0c:	08004cfd 	.word	0x08004cfd
 8004c10:	08004bc1 	.word	0x08004bc1
 8004c14:	08004bc1 	.word	0x08004bc1
 8004c18:	08004d65 	.word	0x08004d65
 8004c1c:	08004bc1 	.word	0x08004bc1
 8004c20:	08004c6f 	.word	0x08004c6f
 8004c24:	08004bc1 	.word	0x08004bc1
 8004c28:	08004bc1 	.word	0x08004bc1
 8004c2c:	08004d05 	.word	0x08004d05
 8004c30:	6833      	ldr	r3, [r6, #0]
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6032      	str	r2, [r6, #0]
 8004c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c40:	2301      	movs	r3, #1
 8004c42:	e09c      	b.n	8004d7e <_printf_i+0x1e6>
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	1d19      	adds	r1, r3, #4
 8004c4a:	6031      	str	r1, [r6, #0]
 8004c4c:	0606      	lsls	r6, r0, #24
 8004c4e:	d501      	bpl.n	8004c54 <_printf_i+0xbc>
 8004c50:	681d      	ldr	r5, [r3, #0]
 8004c52:	e003      	b.n	8004c5c <_printf_i+0xc4>
 8004c54:	0645      	lsls	r5, r0, #25
 8004c56:	d5fb      	bpl.n	8004c50 <_printf_i+0xb8>
 8004c58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c5c:	2d00      	cmp	r5, #0
 8004c5e:	da03      	bge.n	8004c68 <_printf_i+0xd0>
 8004c60:	232d      	movs	r3, #45	@ 0x2d
 8004c62:	426d      	negs	r5, r5
 8004c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c68:	4858      	ldr	r0, [pc, #352]	@ (8004dcc <_printf_i+0x234>)
 8004c6a:	230a      	movs	r3, #10
 8004c6c:	e011      	b.n	8004c92 <_printf_i+0xfa>
 8004c6e:	6821      	ldr	r1, [r4, #0]
 8004c70:	6833      	ldr	r3, [r6, #0]
 8004c72:	0608      	lsls	r0, r1, #24
 8004c74:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c78:	d402      	bmi.n	8004c80 <_printf_i+0xe8>
 8004c7a:	0649      	lsls	r1, r1, #25
 8004c7c:	bf48      	it	mi
 8004c7e:	b2ad      	uxthmi	r5, r5
 8004c80:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c82:	4852      	ldr	r0, [pc, #328]	@ (8004dcc <_printf_i+0x234>)
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	bf14      	ite	ne
 8004c88:	230a      	movne	r3, #10
 8004c8a:	2308      	moveq	r3, #8
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c92:	6866      	ldr	r6, [r4, #4]
 8004c94:	60a6      	str	r6, [r4, #8]
 8004c96:	2e00      	cmp	r6, #0
 8004c98:	db05      	blt.n	8004ca6 <_printf_i+0x10e>
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	432e      	orrs	r6, r5
 8004c9e:	f021 0104 	bic.w	r1, r1, #4
 8004ca2:	6021      	str	r1, [r4, #0]
 8004ca4:	d04b      	beq.n	8004d3e <_printf_i+0x1a6>
 8004ca6:	4616      	mov	r6, r2
 8004ca8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cac:	fb03 5711 	mls	r7, r3, r1, r5
 8004cb0:	5dc7      	ldrb	r7, [r0, r7]
 8004cb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cb6:	462f      	mov	r7, r5
 8004cb8:	42bb      	cmp	r3, r7
 8004cba:	460d      	mov	r5, r1
 8004cbc:	d9f4      	bls.n	8004ca8 <_printf_i+0x110>
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d10b      	bne.n	8004cda <_printf_i+0x142>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	07df      	lsls	r7, r3, #31
 8004cc6:	d508      	bpl.n	8004cda <_printf_i+0x142>
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	6861      	ldr	r1, [r4, #4]
 8004ccc:	4299      	cmp	r1, r3
 8004cce:	bfde      	ittt	le
 8004cd0:	2330      	movle	r3, #48	@ 0x30
 8004cd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cda:	1b92      	subs	r2, r2, r6
 8004cdc:	6122      	str	r2, [r4, #16]
 8004cde:	f8cd a000 	str.w	sl, [sp]
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	aa03      	add	r2, sp, #12
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4640      	mov	r0, r8
 8004cea:	f7ff fee7 	bl	8004abc <_printf_common>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d14a      	bne.n	8004d88 <_printf_i+0x1f0>
 8004cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf6:	b004      	add	sp, #16
 8004cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	f043 0320 	orr.w	r3, r3, #32
 8004d02:	6023      	str	r3, [r4, #0]
 8004d04:	4832      	ldr	r0, [pc, #200]	@ (8004dd0 <_printf_i+0x238>)
 8004d06:	2778      	movs	r7, #120	@ 0x78
 8004d08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	6831      	ldr	r1, [r6, #0]
 8004d10:	061f      	lsls	r7, r3, #24
 8004d12:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d16:	d402      	bmi.n	8004d1e <_printf_i+0x186>
 8004d18:	065f      	lsls	r7, r3, #25
 8004d1a:	bf48      	it	mi
 8004d1c:	b2ad      	uxthmi	r5, r5
 8004d1e:	6031      	str	r1, [r6, #0]
 8004d20:	07d9      	lsls	r1, r3, #31
 8004d22:	bf44      	itt	mi
 8004d24:	f043 0320 	orrmi.w	r3, r3, #32
 8004d28:	6023      	strmi	r3, [r4, #0]
 8004d2a:	b11d      	cbz	r5, 8004d34 <_printf_i+0x19c>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	e7ad      	b.n	8004c8c <_printf_i+0xf4>
 8004d30:	4826      	ldr	r0, [pc, #152]	@ (8004dcc <_printf_i+0x234>)
 8004d32:	e7e9      	b.n	8004d08 <_printf_i+0x170>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	f023 0320 	bic.w	r3, r3, #32
 8004d3a:	6023      	str	r3, [r4, #0]
 8004d3c:	e7f6      	b.n	8004d2c <_printf_i+0x194>
 8004d3e:	4616      	mov	r6, r2
 8004d40:	e7bd      	b.n	8004cbe <_printf_i+0x126>
 8004d42:	6833      	ldr	r3, [r6, #0]
 8004d44:	6825      	ldr	r5, [r4, #0]
 8004d46:	6961      	ldr	r1, [r4, #20]
 8004d48:	1d18      	adds	r0, r3, #4
 8004d4a:	6030      	str	r0, [r6, #0]
 8004d4c:	062e      	lsls	r6, r5, #24
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	d501      	bpl.n	8004d56 <_printf_i+0x1be>
 8004d52:	6019      	str	r1, [r3, #0]
 8004d54:	e002      	b.n	8004d5c <_printf_i+0x1c4>
 8004d56:	0668      	lsls	r0, r5, #25
 8004d58:	d5fb      	bpl.n	8004d52 <_printf_i+0x1ba>
 8004d5a:	8019      	strh	r1, [r3, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6123      	str	r3, [r4, #16]
 8004d60:	4616      	mov	r6, r2
 8004d62:	e7bc      	b.n	8004cde <_printf_i+0x146>
 8004d64:	6833      	ldr	r3, [r6, #0]
 8004d66:	1d1a      	adds	r2, r3, #4
 8004d68:	6032      	str	r2, [r6, #0]
 8004d6a:	681e      	ldr	r6, [r3, #0]
 8004d6c:	6862      	ldr	r2, [r4, #4]
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4630      	mov	r0, r6
 8004d72:	f7fb fa4d 	bl	8000210 <memchr>
 8004d76:	b108      	cbz	r0, 8004d7c <_printf_i+0x1e4>
 8004d78:	1b80      	subs	r0, r0, r6
 8004d7a:	6060      	str	r0, [r4, #4]
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	2300      	movs	r3, #0
 8004d82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d86:	e7aa      	b.n	8004cde <_printf_i+0x146>
 8004d88:	6923      	ldr	r3, [r4, #16]
 8004d8a:	4632      	mov	r2, r6
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	4640      	mov	r0, r8
 8004d90:	47d0      	blx	sl
 8004d92:	3001      	adds	r0, #1
 8004d94:	d0ad      	beq.n	8004cf2 <_printf_i+0x15a>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	079b      	lsls	r3, r3, #30
 8004d9a:	d413      	bmi.n	8004dc4 <_printf_i+0x22c>
 8004d9c:	68e0      	ldr	r0, [r4, #12]
 8004d9e:	9b03      	ldr	r3, [sp, #12]
 8004da0:	4298      	cmp	r0, r3
 8004da2:	bfb8      	it	lt
 8004da4:	4618      	movlt	r0, r3
 8004da6:	e7a6      	b.n	8004cf6 <_printf_i+0x15e>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4632      	mov	r2, r6
 8004dac:	4649      	mov	r1, r9
 8004dae:	4640      	mov	r0, r8
 8004db0:	47d0      	blx	sl
 8004db2:	3001      	adds	r0, #1
 8004db4:	d09d      	beq.n	8004cf2 <_printf_i+0x15a>
 8004db6:	3501      	adds	r5, #1
 8004db8:	68e3      	ldr	r3, [r4, #12]
 8004dba:	9903      	ldr	r1, [sp, #12]
 8004dbc:	1a5b      	subs	r3, r3, r1
 8004dbe:	42ab      	cmp	r3, r5
 8004dc0:	dcf2      	bgt.n	8004da8 <_printf_i+0x210>
 8004dc2:	e7eb      	b.n	8004d9c <_printf_i+0x204>
 8004dc4:	2500      	movs	r5, #0
 8004dc6:	f104 0619 	add.w	r6, r4, #25
 8004dca:	e7f5      	b.n	8004db8 <_printf_i+0x220>
 8004dcc:	08005245 	.word	0x08005245
 8004dd0:	08005256 	.word	0x08005256

08004dd4 <__sflush_r>:
 8004dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	0716      	lsls	r6, r2, #28
 8004dde:	4605      	mov	r5, r0
 8004de0:	460c      	mov	r4, r1
 8004de2:	d454      	bmi.n	8004e8e <__sflush_r+0xba>
 8004de4:	684b      	ldr	r3, [r1, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	dc02      	bgt.n	8004df0 <__sflush_r+0x1c>
 8004dea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	dd48      	ble.n	8004e82 <__sflush_r+0xae>
 8004df0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004df2:	2e00      	cmp	r6, #0
 8004df4:	d045      	beq.n	8004e82 <__sflush_r+0xae>
 8004df6:	2300      	movs	r3, #0
 8004df8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dfc:	682f      	ldr	r7, [r5, #0]
 8004dfe:	6a21      	ldr	r1, [r4, #32]
 8004e00:	602b      	str	r3, [r5, #0]
 8004e02:	d030      	beq.n	8004e66 <__sflush_r+0x92>
 8004e04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	0759      	lsls	r1, r3, #29
 8004e0a:	d505      	bpl.n	8004e18 <__sflush_r+0x44>
 8004e0c:	6863      	ldr	r3, [r4, #4]
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e12:	b10b      	cbz	r3, 8004e18 <__sflush_r+0x44>
 8004e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e1c:	6a21      	ldr	r1, [r4, #32]
 8004e1e:	4628      	mov	r0, r5
 8004e20:	47b0      	blx	r6
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	d106      	bne.n	8004e36 <__sflush_r+0x62>
 8004e28:	6829      	ldr	r1, [r5, #0]
 8004e2a:	291d      	cmp	r1, #29
 8004e2c:	d82b      	bhi.n	8004e86 <__sflush_r+0xb2>
 8004e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed8 <__sflush_r+0x104>)
 8004e30:	40ca      	lsrs	r2, r1
 8004e32:	07d6      	lsls	r6, r2, #31
 8004e34:	d527      	bpl.n	8004e86 <__sflush_r+0xb2>
 8004e36:	2200      	movs	r2, #0
 8004e38:	6062      	str	r2, [r4, #4]
 8004e3a:	04d9      	lsls	r1, r3, #19
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	6022      	str	r2, [r4, #0]
 8004e40:	d504      	bpl.n	8004e4c <__sflush_r+0x78>
 8004e42:	1c42      	adds	r2, r0, #1
 8004e44:	d101      	bne.n	8004e4a <__sflush_r+0x76>
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	b903      	cbnz	r3, 8004e4c <__sflush_r+0x78>
 8004e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e4e:	602f      	str	r7, [r5, #0]
 8004e50:	b1b9      	cbz	r1, 8004e82 <__sflush_r+0xae>
 8004e52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e56:	4299      	cmp	r1, r3
 8004e58:	d002      	beq.n	8004e60 <__sflush_r+0x8c>
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f7ff fbf4 	bl	8004648 <_free_r>
 8004e60:	2300      	movs	r3, #0
 8004e62:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e64:	e00d      	b.n	8004e82 <__sflush_r+0xae>
 8004e66:	2301      	movs	r3, #1
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b0      	blx	r6
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	1c50      	adds	r0, r2, #1
 8004e70:	d1c9      	bne.n	8004e06 <__sflush_r+0x32>
 8004e72:	682b      	ldr	r3, [r5, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0c6      	beq.n	8004e06 <__sflush_r+0x32>
 8004e78:	2b1d      	cmp	r3, #29
 8004e7a:	d001      	beq.n	8004e80 <__sflush_r+0xac>
 8004e7c:	2b16      	cmp	r3, #22
 8004e7e:	d11e      	bne.n	8004ebe <__sflush_r+0xea>
 8004e80:	602f      	str	r7, [r5, #0]
 8004e82:	2000      	movs	r0, #0
 8004e84:	e022      	b.n	8004ecc <__sflush_r+0xf8>
 8004e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e8a:	b21b      	sxth	r3, r3
 8004e8c:	e01b      	b.n	8004ec6 <__sflush_r+0xf2>
 8004e8e:	690f      	ldr	r7, [r1, #16]
 8004e90:	2f00      	cmp	r7, #0
 8004e92:	d0f6      	beq.n	8004e82 <__sflush_r+0xae>
 8004e94:	0793      	lsls	r3, r2, #30
 8004e96:	680e      	ldr	r6, [r1, #0]
 8004e98:	bf08      	it	eq
 8004e9a:	694b      	ldreq	r3, [r1, #20]
 8004e9c:	600f      	str	r7, [r1, #0]
 8004e9e:	bf18      	it	ne
 8004ea0:	2300      	movne	r3, #0
 8004ea2:	eba6 0807 	sub.w	r8, r6, r7
 8004ea6:	608b      	str	r3, [r1, #8]
 8004ea8:	f1b8 0f00 	cmp.w	r8, #0
 8004eac:	dde9      	ble.n	8004e82 <__sflush_r+0xae>
 8004eae:	6a21      	ldr	r1, [r4, #32]
 8004eb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004eb2:	4643      	mov	r3, r8
 8004eb4:	463a      	mov	r2, r7
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	47b0      	blx	r6
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	dc08      	bgt.n	8004ed0 <__sflush_r+0xfc>
 8004ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed0:	4407      	add	r7, r0
 8004ed2:	eba8 0800 	sub.w	r8, r8, r0
 8004ed6:	e7e7      	b.n	8004ea8 <__sflush_r+0xd4>
 8004ed8:	20400001 	.word	0x20400001

08004edc <_fflush_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	690b      	ldr	r3, [r1, #16]
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	b913      	cbnz	r3, 8004eec <_fflush_r+0x10>
 8004ee6:	2500      	movs	r5, #0
 8004ee8:	4628      	mov	r0, r5
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	b118      	cbz	r0, 8004ef6 <_fflush_r+0x1a>
 8004eee:	6a03      	ldr	r3, [r0, #32]
 8004ef0:	b90b      	cbnz	r3, 8004ef6 <_fflush_r+0x1a>
 8004ef2:	f7ff f9af 	bl	8004254 <__sinit>
 8004ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f3      	beq.n	8004ee6 <_fflush_r+0xa>
 8004efe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f00:	07d0      	lsls	r0, r2, #31
 8004f02:	d404      	bmi.n	8004f0e <_fflush_r+0x32>
 8004f04:	0599      	lsls	r1, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_fflush_r+0x32>
 8004f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f0a:	f7ff fb9a 	bl	8004642 <__retarget_lock_acquire_recursive>
 8004f0e:	4628      	mov	r0, r5
 8004f10:	4621      	mov	r1, r4
 8004f12:	f7ff ff5f 	bl	8004dd4 <__sflush_r>
 8004f16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f18:	07da      	lsls	r2, r3, #31
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	d4e4      	bmi.n	8004ee8 <_fflush_r+0xc>
 8004f1e:	89a3      	ldrh	r3, [r4, #12]
 8004f20:	059b      	lsls	r3, r3, #22
 8004f22:	d4e1      	bmi.n	8004ee8 <_fflush_r+0xc>
 8004f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f26:	f7ff fb8d 	bl	8004644 <__retarget_lock_release_recursive>
 8004f2a:	e7dd      	b.n	8004ee8 <_fflush_r+0xc>

08004f2c <__swhatbuf_r>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	460c      	mov	r4, r1
 8004f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f34:	2900      	cmp	r1, #0
 8004f36:	b096      	sub	sp, #88	@ 0x58
 8004f38:	4615      	mov	r5, r2
 8004f3a:	461e      	mov	r6, r3
 8004f3c:	da0d      	bge.n	8004f5a <__swhatbuf_r+0x2e>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	bf14      	ite	ne
 8004f4a:	2340      	movne	r3, #64	@ 0x40
 8004f4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f50:	2000      	movs	r0, #0
 8004f52:	6031      	str	r1, [r6, #0]
 8004f54:	602b      	str	r3, [r5, #0]
 8004f56:	b016      	add	sp, #88	@ 0x58
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
 8004f5a:	466a      	mov	r2, sp
 8004f5c:	f000 f848 	bl	8004ff0 <_fstat_r>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	dbec      	blt.n	8004f3e <__swhatbuf_r+0x12>
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f6e:	4259      	negs	r1, r3
 8004f70:	4159      	adcs	r1, r3
 8004f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f76:	e7eb      	b.n	8004f50 <__swhatbuf_r+0x24>

08004f78 <__smakebuf_r>:
 8004f78:	898b      	ldrh	r3, [r1, #12]
 8004f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f7c:	079d      	lsls	r5, r3, #30
 8004f7e:	4606      	mov	r6, r0
 8004f80:	460c      	mov	r4, r1
 8004f82:	d507      	bpl.n	8004f94 <__smakebuf_r+0x1c>
 8004f84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	6163      	str	r3, [r4, #20]
 8004f90:	b003      	add	sp, #12
 8004f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f94:	ab01      	add	r3, sp, #4
 8004f96:	466a      	mov	r2, sp
 8004f98:	f7ff ffc8 	bl	8004f2c <__swhatbuf_r>
 8004f9c:	9f00      	ldr	r7, [sp, #0]
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7ff fbbc 	bl	8004720 <_malloc_r>
 8004fa8:	b948      	cbnz	r0, 8004fbe <__smakebuf_r+0x46>
 8004faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fae:	059a      	lsls	r2, r3, #22
 8004fb0:	d4ee      	bmi.n	8004f90 <__smakebuf_r+0x18>
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	f043 0302 	orr.w	r3, r3, #2
 8004fba:	81a3      	strh	r3, [r4, #12]
 8004fbc:	e7e2      	b.n	8004f84 <__smakebuf_r+0xc>
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	6020      	str	r0, [r4, #0]
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	9b01      	ldr	r3, [sp, #4]
 8004fca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fce:	b15b      	cbz	r3, 8004fe8 <__smakebuf_r+0x70>
 8004fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f000 f81d 	bl	8005014 <_isatty_r>
 8004fda:	b128      	cbz	r0, 8004fe8 <__smakebuf_r+0x70>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	f043 0301 	orr.w	r3, r3, #1
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	431d      	orrs	r5, r3
 8004fec:	81a5      	strh	r5, [r4, #12]
 8004fee:	e7cf      	b.n	8004f90 <__smakebuf_r+0x18>

08004ff0 <_fstat_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	4d07      	ldr	r5, [pc, #28]	@ (8005010 <_fstat_r+0x20>)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	f7fd fb12 	bl	8002626 <_fstat>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d102      	bne.n	800500c <_fstat_r+0x1c>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	b103      	cbz	r3, 800500c <_fstat_r+0x1c>
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	bd38      	pop	{r3, r4, r5, pc}
 800500e:	bf00      	nop
 8005010:	20000508 	.word	0x20000508

08005014 <_isatty_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4d06      	ldr	r5, [pc, #24]	@ (8005030 <_isatty_r+0x1c>)
 8005018:	2300      	movs	r3, #0
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f7fd fb11 	bl	8002646 <_isatty>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_isatty_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_isatty_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	20000508 	.word	0x20000508

08005034 <_sbrk_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d06      	ldr	r5, [pc, #24]	@ (8005050 <_sbrk_r+0x1c>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fd fb1a 	bl	8002678 <_sbrk>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_sbrk_r+0x1a>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_sbrk_r+0x1a>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20000508 	.word	0x20000508

08005054 <_init>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr

08005060 <_fini>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr
