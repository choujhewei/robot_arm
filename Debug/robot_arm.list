
robot_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008708  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  080088d8  080088d8  000098d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ecc  08008ecc  0000a4a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ecc  08008ecc  00009ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ed4  08008ed4  0000a4a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed4  08008ed4  00009ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ed8  08008ed8  00009ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a4  20000000  08008edc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  200004a4  08009380  0000a4a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a7c  08009380  0000aa7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a4a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c03b  00000000  00000000  0000a4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002438  00000000  00000000  0001650f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00018948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5f  00000000  00000000  00019728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002274f  00000000  00000000  0001a187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c098  00000000  00000000  0003c8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac21f  00000000  00000000  0004896e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4b8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  000f4bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f99a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004a4 	.word	0x200004a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080088c0 	.word	0x080088c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a8 	.word	0x200004a8
 800020c:	080088c0 	.word	0x080088c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_uldivmod>:
 8000c3c:	b953      	cbnz	r3, 8000c54 <__aeabi_uldivmod+0x18>
 8000c3e:	b94a      	cbnz	r2, 8000c54 <__aeabi_uldivmod+0x18>
 8000c40:	2900      	cmp	r1, #0
 8000c42:	bf08      	it	eq
 8000c44:	2800      	cmpeq	r0, #0
 8000c46:	bf1c      	itt	ne
 8000c48:	f04f 31ff 	movne.w	r1, #4294967295
 8000c4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c50:	f000 b9be 	b.w	8000fd0 <__aeabi_idiv0>
 8000c54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c5c:	f000 f83c 	bl	8000cd8 <__udivmoddi4>
 8000c60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c68:	b004      	add	sp, #16
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_d2lz>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2300      	movs	r3, #0
 8000c72:	4604      	mov	r4, r0
 8000c74:	460d      	mov	r5, r1
 8000c76:	f7ff ff49 	bl	8000b0c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x1c>
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4629      	mov	r1, r5
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fcbf 	bl	8000628 <__aeabi_dmul>
 8000caa:	f7ff ff57 	bl	8000b5c <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc40 	bl	8000534 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fcb6 	bl	8000628 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff faf8 	bl	80002b8 <__aeabi_dsub>
 8000cc8:	f7ff ff48 	bl	8000b5c <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	468e      	mov	lr, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d962      	bls.n	8000db4 <__udivmoddi4+0xdc>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	b14e      	cbz	r6, 8000d08 <__udivmoddi4+0x30>
 8000cf4:	f1c6 0320 	rsb	r3, r6, #32
 8000cf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	ea43 0808 	orr.w	r8, r3, r8
 8000d06:	40b4      	lsls	r4, r6
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d14:	0c23      	lsrs	r3, r4, #16
 8000d16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d2c:	f080 80ea 	bcs.w	8000f04 <__udivmoddi4+0x22c>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f240 80e7 	bls.w	8000f04 <__udivmoddi4+0x22c>
 8000d36:	3902      	subs	r1, #2
 8000d38:	443b      	add	r3, r7
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	b2a3      	uxth	r3, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4e:	459c      	cmp	ip, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x8e>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	f080 80d6 	bcs.w	8000f08 <__udivmoddi4+0x230>
 8000d5c:	459c      	cmp	ip, r3
 8000d5e:	f240 80d3 	bls.w	8000f08 <__udivmoddi4+0x230>
 8000d62:	443b      	add	r3, r7
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6a:	eba3 030c 	sub.w	r3, r3, ip
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40f3      	lsrs	r3, r6
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xb6>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb0>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x14c>
 8000d96:	4573      	cmp	r3, lr
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xc8>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 8105 	bhi.w	8000faa <__udivmoddi4+0x2d2>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4690      	mov	r8, r2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e5      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000dae:	e9c5 4800 	strd	r4, r8, [r5]
 8000db2:	e7e2      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f000 8090 	beq.w	8000eda <__udivmoddi4+0x202>
 8000dba:	fab2 f682 	clz	r6, r2
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f040 80a4 	bne.w	8000f0c <__udivmoddi4+0x234>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb04 f20c 	mul.w	r2, r4, ip
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x11e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x11c>
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f200 80e0 	bhi.w	8000fb4 <__udivmoddi4+0x2dc>
 8000df4:	46c4      	mov	ip, r8
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e04:	fb02 f404 	mul.w	r4, r2, r4
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x144>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x142>
 8000e14:	429c      	cmp	r4, r3
 8000e16:	f200 80ca 	bhi.w	8000fae <__udivmoddi4+0x2d6>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa0e f401 	lsl.w	r4, lr, r1
 8000e34:	fa20 f306 	lsr.w	r3, r0, r6
 8000e38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x1a0>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e6a:	f080 809c 	bcs.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f240 8099 	bls.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	eba4 040e 	sub.w	r4, r4, lr
 8000e7c:	fa1f fe83 	uxth.w	lr, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1ce>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e9a:	f080 8082 	bcs.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d97f      	bls.n	8000fa2 <__udivmoddi4+0x2ca>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eaa:	eba4 040c 	sub.w	r4, r4, ip
 8000eae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eb2:	4564      	cmp	r4, ip
 8000eb4:	4673      	mov	r3, lr
 8000eb6:	46e1      	mov	r9, ip
 8000eb8:	d362      	bcc.n	8000f80 <__udivmoddi4+0x2a8>
 8000eba:	d05f      	beq.n	8000f7c <__udivmoddi4+0x2a4>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x1fe>
 8000ebe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ec2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431e      	orrs	r6, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e74f      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000eda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ede:	0c01      	lsrs	r1, r0, #16
 8000ee0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eea:	463b      	mov	r3, r7
 8000eec:	4638      	mov	r0, r7
 8000eee:	463c      	mov	r4, r7
 8000ef0:	46b8      	mov	r8, r7
 8000ef2:	46be      	mov	lr, r7
 8000ef4:	2620      	movs	r6, #32
 8000ef6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efa:	eba2 0208 	sub.w	r2, r2, r8
 8000efe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f02:	e766      	b.n	8000dd2 <__udivmoddi4+0xfa>
 8000f04:	4601      	mov	r1, r0
 8000f06:	e718      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	e72c      	b.n	8000d66 <__udivmoddi4+0x8e>
 8000f0c:	f1c6 0220 	rsb	r2, r6, #32
 8000f10:	fa2e f302 	lsr.w	r3, lr, r2
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	40b1      	lsls	r1, r6
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f26:	b2bc      	uxth	r4, r7
 8000f28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb08 f904 	mul.w	r9, r8, r4
 8000f36:	40b0      	lsls	r0, r6
 8000f38:	4589      	cmp	r9, r1
 8000f3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3e:	b280      	uxth	r0, r0
 8000f40:	d93e      	bls.n	8000fc0 <__udivmoddi4+0x2e8>
 8000f42:	1879      	adds	r1, r7, r1
 8000f44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x276>
 8000f4a:	4589      	cmp	r9, r1
 8000f4c:	d81f      	bhi.n	8000f8e <__udivmoddi4+0x2b6>
 8000f4e:	eba1 0109 	sub.w	r1, r1, r9
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fb09 f804 	mul.w	r8, r9, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	4542      	cmp	r2, r8
 8000f66:	d229      	bcs.n	8000fbc <__udivmoddi4+0x2e4>
 8000f68:	18ba      	adds	r2, r7, r2
 8000f6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f6e:	d2c4      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d2c2      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f74:	f1a9 0102 	sub.w	r1, r9, #2
 8000f78:	443a      	add	r2, r7
 8000f7a:	e7be      	b.n	8000efa <__udivmoddi4+0x222>
 8000f7c:	45f0      	cmp	r8, lr
 8000f7e:	d29d      	bcs.n	8000ebc <__udivmoddi4+0x1e4>
 8000f80:	ebbe 0302 	subs.w	r3, lr, r2
 8000f84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f88:	3801      	subs	r0, #1
 8000f8a:	46e1      	mov	r9, ip
 8000f8c:	e796      	b.n	8000ebc <__udivmoddi4+0x1e4>
 8000f8e:	eba7 0909 	sub.w	r9, r7, r9
 8000f92:	4449      	add	r1, r9
 8000f94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9c:	fb09 f804 	mul.w	r8, r9, r4
 8000fa0:	e7db      	b.n	8000f5a <__udivmoddi4+0x282>
 8000fa2:	4673      	mov	r3, lr
 8000fa4:	e77f      	b.n	8000ea6 <__udivmoddi4+0x1ce>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	e766      	b.n	8000e78 <__udivmoddi4+0x1a0>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e6fd      	b.n	8000daa <__udivmoddi4+0xd2>
 8000fae:	443b      	add	r3, r7
 8000fb0:	3a02      	subs	r2, #2
 8000fb2:	e733      	b.n	8000e1c <__udivmoddi4+0x144>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	443b      	add	r3, r7
 8000fba:	e71c      	b.n	8000df6 <__udivmoddi4+0x11e>
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x222>
 8000fc0:	eba1 0109 	sub.w	r1, r1, r9
 8000fc4:	46c4      	mov	ip, r8
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	e7c4      	b.n	8000f5a <__udivmoddi4+0x282>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000fde:	4a0c      	ldr	r2, [pc, #48]	@ (8001010 <LL_DMA_EnableStream+0x3c>)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4908      	ldr	r1, [pc, #32]	@ (8001010 <LL_DMA_EnableStream+0x3c>)
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	440a      	add	r2, r1
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	440a      	add	r2, r1
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	08008a88 	.word	0x08008a88

08001014 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <LL_DMA_DisableStream+0x3c>)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <LL_DMA_DisableStream+0x3c>)
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	440a      	add	r2, r1
 8001034:	7812      	ldrb	r2, [r2, #0]
 8001036:	4611      	mov	r1, r2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	440a      	add	r2, r1
 800103c:	f023 0301 	bic.w	r3, r3, #1
 8001040:	6013      	str	r3, [r2, #0]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	08008a88 	.word	0x08008a88

08001054 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001060:	4a0d      	ldr	r2, [pc, #52]	@ (8001098 <LL_DMA_SetDataLength+0x44>)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4413      	add	r3, r2
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	4908      	ldr	r1, [pc, #32]	@ (8001098 <LL_DMA_SetDataLength+0x44>)
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	440a      	add	r2, r1
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	4611      	mov	r1, r2
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	440a      	add	r2, r1
 8001082:	4611      	mov	r1, r2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	08008a88 	.word	0x08008a88

0800109c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80010a8:	4a07      	ldr	r2, [pc, #28]	@ (80010c8 <LL_DMA_SetMemoryAddress+0x2c>)
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4413      	add	r3, r2
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	08008a88 	.word	0x08008a88

080010cc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80010d8:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <LL_DMA_SetPeriphAddress+0x2c>)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6093      	str	r3, [r2, #8]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	08008a88 	.word	0x08008a88

080010fc <LL_DMA_ClearFlag_TC1>:
  * @rmtoll LIFCR  CTCIF1    LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800110a:	609a      	str	r2, [r3, #8]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_DMA_ClearFlag_TC2>:
  * @rmtoll LIFCR  CTCIF2    LL_DMA_ClearFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001126:	609a      	str	r2, [r3, #8]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2220      	movs	r2, #32
 8001140:	60da      	str	r2, [r3, #12]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_DMA_ClearFlag_TC6>:
  * @rmtoll HIFCR  CTCIF6    LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800115c:	60da      	str	r2, [r3, #12]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8001176:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <LL_DMA_EnableIT_TC+0x3c>)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <LL_DMA_EnableIT_TC+0x3c>)
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	440a      	add	r2, r1
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	4611      	mov	r1, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	440a      	add	r2, r1
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	6013      	str	r3, [r2, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	08008a88 	.word	0x08008a88

080011ac <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0320 	and.w	r3, r3, #32
 80011bc:	2b20      	cmp	r3, #32
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b089      	sub	sp, #36	@ 0x24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	330c      	adds	r3, #12
 80011fa:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	e853 3f00 	ldrex	r3, [r3]
 8001202:	60bb      	str	r3, [r7, #8]
   return(result);
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	330c      	adds	r3, #12
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	61ba      	str	r2, [r7, #24]
 8001214:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001216:	6979      	ldr	r1, [r7, #20]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	e841 2300 	strex	r3, r2, [r1]
 800121e:	613b      	str	r3, [r7, #16]
   return(result);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e7      	bne.n	80011f6 <LL_USART_EnableIT_TC+0x8>
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3724      	adds	r7, #36	@ 0x24
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3314      	adds	r3, #20
 8001240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	e853 3f00 	ldrex	r3, [r3]
 8001248:	60bb      	str	r3, [r7, #8]
   return(result);
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3314      	adds	r3, #20
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	61ba      	str	r2, [r7, #24]
 800125a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800125c:	6979      	ldr	r1, [r7, #20]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	e841 2300 	strex	r3, r2, [r1]
 8001264:	613b      	str	r3, [r7, #16]
   return(result);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e7      	bne.n	800123c <LL_USART_EnableDMAReq_RX+0x8>
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	@ 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800127a:	b480      	push	{r7}
 800127c:	b089      	sub	sp, #36	@ 0x24
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3314      	adds	r3, #20
 8001286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	e853 3f00 	ldrex	r3, [r3]
 800128e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3314      	adds	r3, #20
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	61ba      	str	r2, [r7, #24]
 80012a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012a2:	6979      	ldr	r1, [r7, #20]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	e841 2300 	strex	r3, r2, [r1]
 80012aa:	613b      	str	r3, [r7, #16]
   return(result);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1e7      	bne.n	8001282 <LL_USART_EnableDMAReq_TX+0x8>
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3724      	adds	r7, #36	@ 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3304      	adds	r3, #4
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	b2db      	uxtb	r3, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <UART4_DMA_Config>:
uint8_t debug_Instruction_Packet_Array[35] = { 0 };  // Array to debug instruction packet data
uint8_t debug_Status_Packet_Array[15] = { 0 };       // Array to debug status packet data

uint16_t crc = 0;

void UART4_DMA_Config() {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_4, LL_USART_DMA_GetRegAddr(UART4));
 8001314:	4824      	ldr	r0, [pc, #144]	@ (80013a8 <UART4_DMA_Config+0x98>)
 8001316:	f7ff ffd3 	bl	80012c0 <LL_USART_DMA_GetRegAddr>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	2104      	movs	r1, #4
 8001320:	4822      	ldr	r0, [pc, #136]	@ (80013ac <UART4_DMA_Config+0x9c>)
 8001322:	f7ff fed3 	bl	80010cc <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)Instruction_Packet_Array);
 8001326:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <UART4_DMA_Config+0xa0>)
 8001328:	461a      	mov	r2, r3
 800132a:	2104      	movs	r1, #4
 800132c:	481f      	ldr	r0, [pc, #124]	@ (80013ac <UART4_DMA_Config+0x9c>)
 800132e:	f7ff feb5 	bl	800109c <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5] + 7);
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <UART4_DMA_Config+0xa0>)
 8001334:	795b      	ldrb	r3, [r3, #5]
 8001336:	3307      	adds	r3, #7
 8001338:	461a      	mov	r2, r3
 800133a:	2104      	movs	r1, #4
 800133c:	481b      	ldr	r0, [pc, #108]	@ (80013ac <UART4_DMA_Config+0x9c>)
 800133e:	f7ff fe89 	bl	8001054 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(UART4);
 8001342:	4819      	ldr	r0, [pc, #100]	@ (80013a8 <UART4_DMA_Config+0x98>)
 8001344:	f7ff ff99 	bl	800127a <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC4(DMA1);
 8001348:	4818      	ldr	r0, [pc, #96]	@ (80013ac <UART4_DMA_Config+0x9c>)
 800134a:	f7ff fef3 	bl	8001134 <LL_DMA_ClearFlag_TC4>
	LL_USART_ClearFlag_TC(UART4);
 800134e:	4816      	ldr	r0, [pc, #88]	@ (80013a8 <UART4_DMA_Config+0x98>)
 8001350:	f7ff ff3f 	bl	80011d2 <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
 8001354:	2104      	movs	r1, #4
 8001356:	4815      	ldr	r0, [pc, #84]	@ (80013ac <UART4_DMA_Config+0x9c>)
 8001358:	f7ff ff08 	bl	800116c <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(UART4);
 800135c:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <UART4_DMA_Config+0x98>)
 800135e:	f7ff ff46 	bl	80011ee <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 8001362:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <UART4_DMA_Config+0x98>)
 8001364:	f7ff ffac 	bl	80012c0 <LL_USART_DMA_GetRegAddr>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	2102      	movs	r1, #2
 800136e:	480f      	ldr	r0, [pc, #60]	@ (80013ac <UART4_DMA_Config+0x9c>)
 8001370:	f7ff feac 	bl	80010cc <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <UART4_DMA_Config+0xa4>)
 8001376:	461a      	mov	r2, r3
 8001378:	2102      	movs	r1, #2
 800137a:	480c      	ldr	r0, [pc, #48]	@ (80013ac <UART4_DMA_Config+0x9c>)
 800137c:	f7ff fe8e 	bl	800109c <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <UART4_DMA_Config+0xa8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3304      	adds	r3, #4
 8001386:	461a      	mov	r2, r3
 8001388:	2102      	movs	r1, #2
 800138a:	4808      	ldr	r0, [pc, #32]	@ (80013ac <UART4_DMA_Config+0x9c>)
 800138c:	f7ff fe62 	bl	8001054 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(UART4);
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <UART4_DMA_Config+0x98>)
 8001392:	f7ff ff4f 	bl	8001234 <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC2(DMA1);
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <UART4_DMA_Config+0x9c>)
 8001398:	f7ff febe 	bl	8001118 <LL_DMA_ClearFlag_TC2>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 800139c:	2102      	movs	r1, #2
 800139e:	4803      	ldr	r0, [pc, #12]	@ (80013ac <UART4_DMA_Config+0x9c>)
 80013a0:	f7ff fee4 	bl	800116c <LL_DMA_EnableIT_TC>

}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40004c00 	.word	0x40004c00
 80013ac:	40026000 	.word	0x40026000
 80013b0:	20000004 	.word	0x20000004
 80013b4:	20000514 	.word	0x20000514
 80013b8:	20000510 	.word	0x20000510

080013bc <USART6_DMA_Config>:

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);  // 傳輸完成中斷
    NVIC_SetPriority(DMA1_Stream2_IRQn, 0);
    NVIC_EnableIRQ(DMA1_Stream2_IRQn);
}
void USART6_DMA_Config() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	// TX
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_6, LL_USART_DMA_GetRegAddr(USART6));
 80013c0:	4824      	ldr	r0, [pc, #144]	@ (8001454 <USART6_DMA_Config+0x98>)
 80013c2:	f7ff ff7d 	bl	80012c0 <LL_USART_DMA_GetRegAddr>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	2106      	movs	r1, #6
 80013cc:	4822      	ldr	r0, [pc, #136]	@ (8001458 <USART6_DMA_Config+0x9c>)
 80013ce:	f7ff fe7d 	bl	80010cc <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)Instruction_Packet_Array);
 80013d2:	4b22      	ldr	r3, [pc, #136]	@ (800145c <USART6_DMA_Config+0xa0>)
 80013d4:	461a      	mov	r2, r3
 80013d6:	2106      	movs	r1, #6
 80013d8:	481f      	ldr	r0, [pc, #124]	@ (8001458 <USART6_DMA_Config+0x9c>)
 80013da:	f7ff fe5f 	bl	800109c <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5] + 7);
 80013de:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <USART6_DMA_Config+0xa0>)
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	3307      	adds	r3, #7
 80013e4:	461a      	mov	r2, r3
 80013e6:	2106      	movs	r1, #6
 80013e8:	481b      	ldr	r0, [pc, #108]	@ (8001458 <USART6_DMA_Config+0x9c>)
 80013ea:	f7ff fe33 	bl	8001054 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_TX(USART6);
 80013ee:	4819      	ldr	r0, [pc, #100]	@ (8001454 <USART6_DMA_Config+0x98>)
 80013f0:	f7ff ff43 	bl	800127a <LL_USART_EnableDMAReq_TX>

	LL_DMA_ClearFlag_TC6(DMA2);
 80013f4:	4818      	ldr	r0, [pc, #96]	@ (8001458 <USART6_DMA_Config+0x9c>)
 80013f6:	f7ff feaa 	bl	800114e <LL_DMA_ClearFlag_TC6>
	LL_USART_ClearFlag_TC(USART6);
 80013fa:	4816      	ldr	r0, [pc, #88]	@ (8001454 <USART6_DMA_Config+0x98>)
 80013fc:	f7ff fee9 	bl	80011d2 <LL_USART_ClearFlag_TC>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
 8001400:	2106      	movs	r1, #6
 8001402:	4815      	ldr	r0, [pc, #84]	@ (8001458 <USART6_DMA_Config+0x9c>)
 8001404:	f7ff feb2 	bl	800116c <LL_DMA_EnableIT_TC>
	LL_USART_EnableIT_TC(USART6);
 8001408:	4812      	ldr	r0, [pc, #72]	@ (8001454 <USART6_DMA_Config+0x98>)
 800140a:	f7ff fef0 	bl	80011ee <LL_USART_EnableIT_TC>

	// RX
	LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 800140e:	4811      	ldr	r0, [pc, #68]	@ (8001454 <USART6_DMA_Config+0x98>)
 8001410:	f7ff ff56 	bl	80012c0 <LL_USART_DMA_GetRegAddr>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	2101      	movs	r1, #1
 800141a:	480f      	ldr	r0, [pc, #60]	@ (8001458 <USART6_DMA_Config+0x9c>)
 800141c:	f7ff fe56 	bl	80010cc <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <USART6_DMA_Config+0xa4>)
 8001422:	461a      	mov	r2, r3
 8001424:	2101      	movs	r1, #1
 8001426:	480c      	ldr	r0, [pc, #48]	@ (8001458 <USART6_DMA_Config+0x9c>)
 8001428:	f7ff fe38 	bl	800109c <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <USART6_DMA_Config+0xa8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3304      	adds	r3, #4
 8001432:	461a      	mov	r2, r3
 8001434:	2101      	movs	r1, #1
 8001436:	4808      	ldr	r0, [pc, #32]	@ (8001458 <USART6_DMA_Config+0x9c>)
 8001438:	f7ff fe0c 	bl	8001054 <LL_DMA_SetDataLength>

	LL_USART_EnableDMAReq_RX(USART6);
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <USART6_DMA_Config+0x98>)
 800143e:	f7ff fef9 	bl	8001234 <LL_USART_EnableDMAReq_RX>

	LL_DMA_ClearFlag_TC1(DMA2);
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <USART6_DMA_Config+0x9c>)
 8001444:	f7ff fe5a 	bl	80010fc <LL_DMA_ClearFlag_TC1>

	LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 8001448:	2101      	movs	r1, #1
 800144a:	4803      	ldr	r0, [pc, #12]	@ (8001458 <USART6_DMA_Config+0x9c>)
 800144c:	f7ff fe8e 	bl	800116c <LL_DMA_EnableIT_TC>

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40011400 	.word	0x40011400
 8001458:	40026400 	.word	0x40026400
 800145c:	20000004 	.word	0x20000004
 8001460:	20000514 	.word	0x20000514
 8001464:	20000510 	.word	0x20000510

08001468 <transmitInstructionPacket4>:
	for(int i = 0; i < 15; i++)
		printf("%x, ", debug_Status_Packet_Array[i]);
	printf("\r\nyou recieved!\r\n");
}

void transmitInstructionPacket4(void) {  // Transmit instruction packet to Dynamixel
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	dynamixel_Ready = 0;
 800146e:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <transmitInstructionPacket4+0xa8>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
//	  1. Disable DMA Stream (先停)
	 LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 8001474:	2104      	movs	r1, #4
 8001476:	4827      	ldr	r0, [pc, #156]	@ (8001514 <transmitInstructionPacket4+0xac>)
 8001478:	f7ff fdcc 	bl	8001014 <LL_DMA_DisableStream>
//	  2. 設置 DMA memory 與 data length
	 LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)Instruction_Packet_Array);
 800147c:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <transmitInstructionPacket4+0xb0>)
 800147e:	461a      	mov	r2, r3
 8001480:	2104      	movs	r1, #4
 8001482:	4824      	ldr	r0, [pc, #144]	@ (8001514 <transmitInstructionPacket4+0xac>)
 8001484:	f7ff fe0a 	bl	800109c <LL_DMA_SetMemoryAddress>
	 LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5] + 7);
 8001488:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <transmitInstructionPacket4+0xb0>)
 800148a:	795b      	ldrb	r3, [r3, #5]
 800148c:	3307      	adds	r3, #7
 800148e:	461a      	mov	r2, r3
 8001490:	2104      	movs	r1, #4
 8001492:	4820      	ldr	r0, [pc, #128]	@ (8001514 <transmitInstructionPacket4+0xac>)
 8001494:	f7ff fdde 	bl	8001054 <LL_DMA_SetDataLength>
//	  3. Enable DMA Stream again
	 LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 8001498:	2104      	movs	r1, #4
 800149a:	481e      	ldr	r0, [pc, #120]	@ (8001514 <transmitInstructionPacket4+0xac>)
 800149c:	f7ff fd9a 	bl	8000fd4 <LL_DMA_EnableStream>
	 LL_USART_EnableDMAReq_TX(UART4);  // 確保 USART TX DMA 也啟用
 80014a0:	481e      	ldr	r0, [pc, #120]	@ (800151c <transmitInstructionPacket4+0xb4>)
 80014a2:	f7ff feea 	bl	800127a <LL_USART_EnableDMAReq_TX>
	#if USE_THREE_STATE_GATE == 1
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80014a6:	2110      	movs	r1, #16
 80014a8:	481d      	ldr	r0, [pc, #116]	@ (8001520 <transmitInstructionPacket4+0xb8>)
 80014aa:	f7ff ff22 	bl	80012f2 <LL_GPIO_SetOutputPin>
		printf("1\r\n");
 80014ae:	481d      	ldr	r0, [pc, #116]	@ (8001524 <transmitInstructionPacket4+0xbc>)
 80014b0:	f005 f8a4 	bl	80065fc <puts>
		printf("TX Packet: ");
 80014b4:	481c      	ldr	r0, [pc, #112]	@ (8001528 <transmitInstructionPacket4+0xc0>)
 80014b6:	f005 f839 	bl	800652c <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e00a      	b.n	80014d6 <transmitInstructionPacket4+0x6e>
			printf("%02X ", Instruction_Packet_Array[i]);
 80014c0:	4a15      	ldr	r2, [pc, #84]	@ (8001518 <transmitInstructionPacket4+0xb0>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4818      	ldr	r0, [pc, #96]	@ (800152c <transmitInstructionPacket4+0xc4>)
 80014cc:	f005 f82e 	bl	800652c <iprintf>
		for (int i = 0; i <Instruction_Packet_Array[5] + 7; i++) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3301      	adds	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <transmitInstructionPacket4+0xb0>)
 80014d8:	795b      	ldrb	r3, [r3, #5]
 80014da:	3306      	adds	r3, #6
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	ddee      	ble.n	80014c0 <transmitInstructionPacket4+0x58>
		}
		printf("\r\n");
 80014e2:	4813      	ldr	r0, [pc, #76]	@ (8001530 <transmitInstructionPacket4+0xc8>)
 80014e4:	f005 f88a 	bl	80065fc <puts>
	#else
		LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_TX);
		printf("2\r\n");
	#endif
		printf("3\r\n");
 80014e8:	4812      	ldr	r0, [pc, #72]	@ (8001534 <transmitInstructionPacket4+0xcc>)
 80014ea:	f005 f887 	bl	80065fc <puts>
		LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <transmitInstructionPacket4+0xb0>)
 80014f0:	795b      	ldrb	r3, [r3, #5]
 80014f2:	3307      	adds	r3, #7
 80014f4:	461a      	mov	r2, r3
 80014f6:	2104      	movs	r1, #4
 80014f8:	4806      	ldr	r0, [pc, #24]	@ (8001514 <transmitInstructionPacket4+0xac>)
 80014fa:	f7ff fdab 	bl	8001054 <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 80014fe:	2104      	movs	r1, #4
 8001500:	4804      	ldr	r0, [pc, #16]	@ (8001514 <transmitInstructionPacket4+0xac>)
 8001502:	f7ff fd67 	bl	8000fd4 <LL_DMA_EnableStream>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000000 	.word	0x20000000
 8001514:	40026000 	.word	0x40026000
 8001518:	20000004 	.word	0x20000004
 800151c:	40004c00 	.word	0x40004c00
 8001520:	40020000 	.word	0x40020000
 8001524:	08008908 	.word	0x08008908
 8001528:	0800890c 	.word	0x0800890c
 800152c:	08008918 	.word	0x08008918
 8001530:	08008920 	.word	0x08008920
 8001534:	08008924 	.word	0x08008924

08001538 <readStatusPacket4>:
		printf("3\r\n");
		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, Instruction_Packet_Array[5]+7); // +7 includes : FF FF FD 00 ID LEN1 LEN2
		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
}

void readStatusPacket4(void) {
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < Status_packet_length + 4; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	e014      	b.n	800156e <readStatusPacket4+0x36>
		while(LL_USART_IsActiveFlag_RXNE(UART4) == RESET) {
 8001544:	bf00      	nop
 8001546:	4810      	ldr	r0, [pc, #64]	@ (8001588 <readStatusPacket4+0x50>)
 8001548:	f7ff fe30 	bl	80011ac <LL_USART_IsActiveFlag_RXNE>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f9      	beq.n	8001546 <readStatusPacket4+0xe>
		}
		printf("read\r\n");
 8001552:	480e      	ldr	r0, [pc, #56]	@ (800158c <readStatusPacket4+0x54>)
 8001554:	f005 f852 	bl	80065fc <puts>
		Status_Packet_Array[i] = LL_USART_ReceiveData8(UART4);
 8001558:	79fc      	ldrb	r4, [r7, #7]
 800155a:	480b      	ldr	r0, [pc, #44]	@ (8001588 <readStatusPacket4+0x50>)
 800155c:	f7ff febc 	bl	80012d8 <LL_USART_ReceiveData8>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <readStatusPacket4+0x58>)
 8001566:	551a      	strb	r2, [r3, r4]
	for(uint8_t i = 0; i < Status_packet_length + 4; i++) {
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	3301      	adds	r3, #1
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <readStatusPacket4+0x5c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3304      	adds	r3, #4
 8001576:	429a      	cmp	r2, r3
 8001578:	d3e4      	bcc.n	8001544 <readStatusPacket4+0xc>
	}
	dynamixel_Ready = 1;
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <readStatusPacket4+0x60>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	40004c00 	.word	0x40004c00
 800158c:	08008928 	.word	0x08008928
 8001590:	20000514 	.word	0x20000514
 8001594:	20000510 	.word	0x20000510
 8001598:	20000000 	.word	0x20000000

0800159c <readStatusPacket_pos_DMA>:
		Status_Packet_Array[i] = LL_USART_ReceiveData8(USART6);
	}
	dynamixel_Ready = 1;
}

void readStatusPacket_pos_DMA(int32_t* position) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	if(Status_Packet_Array[8] == 0) {   //確認錯誤碼
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <readStatusPacket_pos_DMA+0x48>)
 80015a6:	7a1b      	ldrb	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d114      	bne.n	80015d6 <readStatusPacket_pos_DMA+0x3a>
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 80015ac:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <readStatusPacket_pos_DMA+0x48>)
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
 80015b0:	061a      	lsls	r2, r3, #24
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <readStatusPacket_pos_DMA+0x48>)
 80015b4:	7adb      	ldrb	r3, [r3, #11]
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	431a      	orrs	r2, r3
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <readStatusPacket_pos_DMA+0x48>)
 80015bc:	7a9b      	ldrb	r3, [r3, #10]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	431a      	orrs	r2, r3
			| Status_Packet_Array[9];
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <readStatusPacket_pos_DMA+0x48>)
 80015c4:	7a5b      	ldrb	r3, [r3, #9]
 80015c6:	4618      	mov	r0, r3
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <readStatusPacket_pos_DMA+0x48>)
 80015ca:	791b      	ldrb	r3, [r3, #4]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	440b      	add	r3, r1
			| Status_Packet_Array[9];
 80015d2:	4302      	orrs	r2, r0
		position[Status_Packet_Array[4]] = Status_Packet_Array[12] << 24 | Status_Packet_Array[11] << 16 | Status_Packet_Array[10] << 8
 80015d4:	601a      	str	r2, [r3, #0]
	}
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000514 	.word	0x20000514

080015e8 <Reboot>:
	position[Status_Packet_Array[4]]=Status_Packet_Array[9];
}
//-------------------------------------------------------------------------------------------------------------------------------
// EEPROM AREA

uint8_t Reboot(uint8_t ID) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
    // 等待前一次通訊完成
    while (dynamixel_Ready != 1) { }
 80015f2:	bf00      	nop
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <Reboot+0x74>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d1fb      	bne.n	80015f4 <Reboot+0xc>
    dynamixel_Ready = 0;  // 清 flag
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <Reboot+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]

    // 組封包：Header、ID、Length=3、Instruction=0x08、(no params)
    Instruction_Packet_Array[4] = ID;
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <Reboot+0x78>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	7113      	strb	r3, [r2, #4]
    Instruction_Packet_Array[5] = 0x03;    // LEN_L = 3
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <Reboot+0x78>)
 800160a:	2203      	movs	r2, #3
 800160c:	715a      	strb	r2, [r3, #5]
    Instruction_Packet_Array[6] = 0x00;    // LEN_H = 0
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <Reboot+0x78>)
 8001610:	2200      	movs	r2, #0
 8001612:	719a      	strb	r2, [r3, #6]
    Instruction_Packet_Array[7] = INST_REBOOT;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <Reboot+0x78>)
 8001616:	2208      	movs	r2, #8
 8001618:	71da      	strb	r2, [r3, #7]

    // 計算 CRC，長度 = LEN + 5 = 3 + 5 = 8 bytes
    uint16_t crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <Reboot+0x78>)
 800161c:	795b      	ldrb	r3, [r3, #5]
 800161e:	3305      	adds	r3, #5
 8001620:	b29b      	uxth	r3, r3
 8001622:	4619      	mov	r1, r3
 8001624:	480e      	ldr	r0, [pc, #56]	@ (8001660 <Reboot+0x78>)
 8001626:	f000 fb3f 	bl	8001ca8 <update_crc>
 800162a:	4603      	mov	r3, r0
 800162c:	81fb      	strh	r3, [r7, #14]
    Instruction_Packet_Array[8] = crc & 0xFF;
 800162e:	89fb      	ldrh	r3, [r7, #14]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <Reboot+0x78>)
 8001634:	721a      	strb	r2, [r3, #8]
    Instruction_Packet_Array[9] = (crc >> 8) & 0xFF;
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	b29b      	uxth	r3, r3
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <Reboot+0x78>)
 8001640:	725a      	strb	r2, [r3, #9]

    // 發送封包
    Packet_Return = 1;              // 要等回 ACK
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <Reboot+0x7c>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
    transmitInstructionPacket4();
 8001648:	f7ff ff0e 	bl	8001468 <transmitInstructionPacket4>
    readStatusPacket4();             // 阻塞讀取回應
 800164c:	f7ff ff74 	bl	8001538 <readStatusPacket4>

    // 回傳錯誤碼：Status_Packet_Array[8] = ERR
    return Status_Packet_Array[8];
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <Reboot+0x80>)
 8001652:	7a1b      	ldrb	r3, [r3, #8]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004
 8001664:	20000001 	.word	0x20000001
 8001668:	20000514 	.word	0x20000514

0800166c <OperatingMode>:
uint8_t OperatingMode(uint8_t ID, uint8_t OPERATION_MODE) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
// Set Operation Mode: Current Mode 0x00, Velocity Mode 0x01, Position Mode 0x03
	while(dynamixel_Ready != 1) {
 800167c:	bf00      	nop
 800167e:	4b30      	ldr	r3, [pc, #192]	@ (8001740 <OperatingMode+0xd4>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d1fb      	bne.n	800167e <OperatingMode+0x12>
	}
	Instruction_Packet_Array[4] = ID;
 8001686:	4a2f      	ldr	r2, [pc, #188]	@ (8001744 <OperatingMode+0xd8>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x06;
 800168c:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <OperatingMode+0xd8>)
 800168e:	2206      	movs	r2, #6
 8001690:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001692:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <OperatingMode+0xd8>)
 8001694:	2200      	movs	r2, #0
 8001696:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_WRITE_DATA;
 8001698:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <OperatingMode+0xd8>)
 800169a:	2203      	movs	r2, #3
 800169c:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = EEPROM_OPERATION_MODE;
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <OperatingMode+0xd8>)
 80016a0:	220b      	movs	r2, #11
 80016a2:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <OperatingMode+0xd8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = OPERATION_MODE;
 80016aa:	4a26      	ldr	r2, [pc, #152]	@ (8001744 <OperatingMode+0xd8>)
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	7293      	strb	r3, [r2, #10]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <OperatingMode+0xd8>)
 80016b2:	795b      	ldrb	r3, [r3, #5]
 80016b4:	3305      	adds	r3, #5
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4619      	mov	r1, r3
 80016ba:	4822      	ldr	r0, [pc, #136]	@ (8001744 <OperatingMode+0xd8>)
 80016bc:	f000 faf4 	bl	8001ca8 <update_crc>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <OperatingMode+0xdc>)
 80016c6:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[11] = crc & 0x00FF;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <OperatingMode+0xdc>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <OperatingMode+0xd8>)
 80016d0:	72da      	strb	r2, [r3, #11]
	Instruction_Packet_Array[12] = (crc >> 8) & 0x00FF;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <OperatingMode+0xdc>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <OperatingMode+0xd8>)
 80016de:	731a      	strb	r2, [r3, #12]

	Status_packet_length = 7; // ID(1) + LEN(2) + INS(1) + ERR(1) + CRC(2)
 80016e0:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <OperatingMode+0xe0>)
 80016e2:	2207      	movs	r2, #7
 80016e4:	601a      	str	r2, [r3, #0]

	if(ID == 0XFE || Status_Return_Level != ALL) {
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80016ea:	d003      	beq.n	80016f4 <OperatingMode+0x88>
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <OperatingMode+0xe4>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d006      	beq.n	8001702 <OperatingMode+0x96>
		Packet_Return = 0;
 80016f4:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <OperatingMode+0xe8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80016fa:	f7ff feb5 	bl	8001468 <transmitInstructionPacket4>
		return (0x00);
 80016fe:	2300      	movs	r3, #0
 8001700:	e019      	b.n	8001736 <OperatingMode+0xca>
	}
	else {
		Packet_Return = 1;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <OperatingMode+0xe8>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
		  transmitInstructionPacket4();
 8001708:	f7ff feae 	bl	8001468 <transmitInstructionPacket4>
		  readStatusPacket4();
 800170c:	f7ff ff14 	bl	8001538 <readStatusPacket4>
		   if (Status_Packet_Array[8] != 0) {
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <OperatingMode+0xec>)
 8001712:	7a1b      	ldrb	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <OperatingMode+0xb2>
		      // EEPROM 寫入失敗，直接回傳錯誤
		      return (Status_Packet_Array[8] | 0xF000);
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <OperatingMode+0xec>)
 800171a:	7a1b      	ldrb	r3, [r3, #8]
 800171c:	e00b      	b.n	8001736 <OperatingMode+0xca>
		   }
		   // EEPROM 寫入成功，立即發出 Reboot 讓馬達重載新模式
		   uint8_t err = Reboot(ID);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff61 	bl	80015e8 <Reboot>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
		   if (err != 0) {
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <OperatingMode+0xc8>
	        // Reboot 失敗
		       return (err | 0xE000);
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	e000      	b.n	8001736 <OperatingMode+0xca>
		   }
		   // 成功切換模式並重啟
		   return 0x00;
 8001734:	2300      	movs	r3, #0
	}
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004
 8001748:	2000052e 	.word	0x2000052e
 800174c:	20000510 	.word	0x20000510
 8001750:	20000002 	.word	0x20000002
 8001754:	20000001 	.word	0x20000001
 8001758:	20000514 	.word	0x20000514

0800175c <TorqueEnable>:
}

//-------------------------------------------------------------------------------------------------------------------------------
// RAM AREA

uint8_t TorqueEnable(uint8_t ID, _Bool Status) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	460a      	mov	r2, r1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	4613      	mov	r3, r2
 800176a:	71bb      	strb	r3, [r7, #6]
	/*
	 Must Enable it before any motion(Velocity or Position)
	 When it is enabled, EEROM will be locked.
	 */
	while(dynamixel_Ready != 1) {
 800176c:	bf00      	nop
 800176e:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <TorqueEnable+0xb8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d1fb      	bne.n	800176e <TorqueEnable+0x12>
	}
	Instruction_Packet_Array[4] = ID;
 8001776:	4a28      	ldr	r2, [pc, #160]	@ (8001818 <TorqueEnable+0xbc>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	7113      	strb	r3, [r2, #4]
	Instruction_Packet_Array[5] = 0x06;
 800177c:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <TorqueEnable+0xbc>)
 800177e:	2206      	movs	r2, #6
 8001780:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001782:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <TorqueEnable+0xbc>)
 8001784:	2200      	movs	r2, #0
 8001786:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_WRITE_DATA;
 8001788:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <TorqueEnable+0xbc>)
 800178a:	2203      	movs	r2, #3
 800178c:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 800178e:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <TorqueEnable+0xbc>)
 8001790:	2240      	movs	r2, #64	@ 0x40
 8001792:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001794:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <TorqueEnable+0xbc>)
 8001796:	2200      	movs	r2, #0
 8001798:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = Status;
 800179a:	79ba      	ldrb	r2, [r7, #6]
 800179c:	4b1e      	ldr	r3, [pc, #120]	@ (8001818 <TorqueEnable+0xbc>)
 800179e:	729a      	strb	r2, [r3, #10]

	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 80017a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <TorqueEnable+0xbc>)
 80017a2:	795b      	ldrb	r3, [r3, #5]
 80017a4:	3305      	adds	r3, #5
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	481b      	ldr	r0, [pc, #108]	@ (8001818 <TorqueEnable+0xbc>)
 80017ac:	f000 fa7c 	bl	8001ca8 <update_crc>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <TorqueEnable+0xc0>)
 80017b6:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[11] = crc & 0x00FF;
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <TorqueEnable+0xc0>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <TorqueEnable+0xbc>)
 80017c0:	72da      	strb	r2, [r3, #11]
	Instruction_Packet_Array[12] = (crc >> 8) & 0x00FF;
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <TorqueEnable+0xc0>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <TorqueEnable+0xbc>)
 80017ce:	731a      	strb	r2, [r3, #12]

	Status_packet_length = 7; // ID(1) + LEN(2) + INS(1) + ERR(1) + CRC(2)
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <TorqueEnable+0xc4>)
 80017d2:	2207      	movs	r2, #7
 80017d4:	601a      	str	r2, [r3, #0]

	if(ID == 0XFE || Status_Return_Level != ALL) {
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80017da:	d003      	beq.n	80017e4 <TorqueEnable+0x88>
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <TorqueEnable+0xc8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d006      	beq.n	80017f2 <TorqueEnable+0x96>
		Packet_Return = 0;
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <TorqueEnable+0xcc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80017ea:	f7ff fe3d 	bl	8001468 <transmitInstructionPacket4>
		return (0x00);
 80017ee:	2300      	movs	r3, #0
 80017f0:	e00c      	b.n	800180c <TorqueEnable+0xb0>
	}
	else {
		Packet_Return = 1;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <TorqueEnable+0xcc>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
		transmitInstructionPacket4();
 80017f8:	f7ff fe36 	bl	8001468 <transmitInstructionPacket4>
//		readStatusPacket4();
		if(Status_Packet_Array[8] == 0)
 80017fc:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <TorqueEnable+0xd0>)
 80017fe:	7a1b      	ldrb	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <TorqueEnable+0xac>
			return (0x00);
 8001804:	2300      	movs	r3, #0
 8001806:	e001      	b.n	800180c <TorqueEnable+0xb0>
		else
			return (Status_Packet_Array[8] | 0xF000);
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <TorqueEnable+0xd0>)
 800180a:	7a1b      	ldrb	r3, [r3, #8]
	}
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	20000004 	.word	0x20000004
 800181c:	2000052e 	.word	0x2000052e
 8001820:	20000510 	.word	0x20000510
 8001824:	20000002 	.word	0x20000002
 8001828:	20000001 	.word	0x20000001
 800182c:	20000514 	.word	0x20000514

08001830 <SyncWrite_DisableDynamixels>:
	Is_dynamixel_GetData = 0;

	transmitInstructionPacket4();
}

void SyncWrite_DisableDynamixels(uint8_t n, uint8_t *ID_list) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 800183c:	bf00      	nop
 800183e:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <SyncWrite_DisableDynamixels+0xd0>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d1fb      	bne.n	800183e <SyncWrite_DisableDynamixels+0xe>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8001846:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 8001848:	22fe      	movs	r2, #254	@ 0xfe
 800184a:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	3307      	adds	r3, #7
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 8001858:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 800185a:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 800185c:	2200      	movs	r2, #0
 800185e:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8001860:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 8001862:	2283      	movs	r2, #131	@ 0x83
 8001864:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 8001868:	2240      	movs	r2, #64	@ 0x40
 800186a:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 800186e:	2200      	movs	r2, #0
 8001870:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 8001874:	2201      	movs	r2, #1
 8001876:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001878:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 800187a:	2200      	movs	r2, #0
 800187c:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e012      	b.n	80018aa <SyncWrite_DisableDynamixels+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	3b01      	subs	r3, #1
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	441a      	add	r2, r3
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	3305      	adds	r3, #5
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	7811      	ldrb	r1, [r2, #0]
 8001894:	4a1b      	ldr	r2, [pc, #108]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 8001896:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x00;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	330b      	adds	r3, #11
 800189e:	4a19      	ldr	r2, [pc, #100]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 80018a0:	2100      	movs	r1, #0
 80018a2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	3301      	adds	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d9e8      	bls.n	8001884 <SyncWrite_DisableDynamixels+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 80018b4:	795b      	ldrb	r3, [r3, #5]
 80018b6:	3305      	adds	r3, #5
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	4811      	ldr	r0, [pc, #68]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 80018be:	f000 f9f3 	bl	8001ca8 <update_crc>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <SyncWrite_DisableDynamixels+0xd8>)
 80018c8:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <SyncWrite_DisableDynamixels+0xd8>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	3306      	adds	r3, #6
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	b2d1      	uxtb	r1, r2
 80018d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 80018d8:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <SyncWrite_DisableDynamixels+0xd8>)
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	330d      	adds	r3, #13
 80018e8:	b2d1      	uxtb	r1, r2
 80018ea:	4a06      	ldr	r2, [pc, #24]	@ (8001904 <SyncWrite_DisableDynamixels+0xd4>)
 80018ec:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 80018ee:	4b07      	ldr	r3, [pc, #28]	@ (800190c <SyncWrite_DisableDynamixels+0xdc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 80018f4:	f7ff fdb8 	bl	8001468 <transmitInstructionPacket4>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004
 8001908:	2000052e 	.word	0x2000052e
 800190c:	20000001 	.word	0x20000001

08001910 <SyncWrite_EnableDynamixels>:

void SyncWrite_EnableDynamixels(uint8_t n, uint8_t *ID_list) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
	while(dynamixel_Ready != 1) {
 800191c:	bf00      	nop
 800191e:	4b30      	ldr	r3, [pc, #192]	@ (80019e0 <SyncWrite_EnableDynamixels+0xd0>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d1fb      	bne.n	800191e <SyncWrite_EnableDynamixels+0xe>
	}
	Instruction_Packet_Array[4] = 0xFE;
 8001926:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 8001928:	22fe      	movs	r2, #254	@ 0xfe
 800192a:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3307      	adds	r3, #7
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 8001938:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 800193a:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 800193c:	2200      	movs	r2, #0
 800193e:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 8001942:	2283      	movs	r2, #131	@ 0x83
 8001944:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_TORQUE_ENABLE;
 8001946:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 8001948:	2240      	movs	r2, #64	@ 0x40
 800194a:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 800194e:	2200      	movs	r2, #0
 8001950:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 8001954:	2201      	movs	r2, #1
 8001956:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 800195a:	2200      	movs	r2, #0
 800195c:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	e012      	b.n	800198a <SyncWrite_EnableDynamixels+0x7a>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	3b01      	subs	r3, #1
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	441a      	add	r2, r3
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	3305      	adds	r3, #5
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	7811      	ldrb	r1, [r2, #0]
 8001974:	4a1b      	ldr	r2, [pc, #108]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 8001976:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = 0x01;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	330b      	adds	r3, #11
 800197e:	4a19      	ldr	r2, [pc, #100]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 8001980:	2101      	movs	r1, #1
 8001982:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	3301      	adds	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	429a      	cmp	r2, r3
 8001990:	d9e8      	bls.n	8001964 <SyncWrite_EnableDynamixels+0x54>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 8001994:	795b      	ldrb	r3, [r3, #5]
 8001996:	3305      	adds	r3, #5
 8001998:	b29b      	uxth	r3, r3
 800199a:	4619      	mov	r1, r3
 800199c:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 800199e:	f000 f983 	bl	8001ca8 <update_crc>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <SyncWrite_EnableDynamixels+0xd8>)
 80019a8:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <SyncWrite_EnableDynamixels+0xd8>)
 80019ac:	881a      	ldrh	r2, [r3, #0]
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	3306      	adds	r3, #6
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	b2d1      	uxtb	r1, r2
 80019b6:	4a0b      	ldr	r2, [pc, #44]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 80019b8:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <SyncWrite_EnableDynamixels+0xd8>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	330d      	adds	r3, #13
 80019c8:	b2d1      	uxtb	r1, r2
 80019ca:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <SyncWrite_EnableDynamixels+0xd4>)
 80019cc:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <SyncWrite_EnableDynamixels+0xdc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 80019d4:	f7ff fd48 	bl	8001468 <transmitInstructionPacket4>
}
 80019d8:	bf00      	nop
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004
 80019e8:	2000052e 	.word	0x2000052e
 80019ec:	20000001 	.word	0x20000001

080019f0 <SyncWrite_StatusReturnLevel>:

void SyncWrite_StatusReturnLevel(uint8_t n, uint8_t *ID_list, uint8_t level) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	4613      	mov	r3, r2
 80019fe:	71bb      	strb	r3, [r7, #6]
	while(dynamixel_Ready != 1) {
 8001a00:	bf00      	nop
 8001a02:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <SyncWrite_StatusReturnLevel+0xdc>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d1fb      	bne.n	8001a02 <SyncWrite_StatusReturnLevel+0x12>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8001a0a:	4b31      	ldr	r3, [pc, #196]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a0c:	22fe      	movs	r2, #254	@ 0xfe
 8001a0e:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 2 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3307      	adds	r3, #7
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a1c:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8001a24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a26:	2283      	movs	r2, #131	@ 0x83
 8001a28:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_STATUS_RETURN_LEVEL;
 8001a2a:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a2c:	2244      	movs	r2, #68	@ 0x44
 8001a2e:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001a30:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x01; // write data length(L)
 8001a36:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001a3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e012      	b.n	8001a6e <SyncWrite_StatusReturnLevel+0x7e>
		Instruction_Packet_Array[2 * i + 10] = ID_list[i - 1];
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	441a      	add	r2, r3
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	3305      	adds	r3, #5
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	7811      	ldrb	r1, [r2, #0]
 8001a58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a5a:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[2 * i + 11] = level;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	330b      	adds	r3, #11
 8001a62:	491b      	ldr	r1, [pc, #108]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a64:	79ba      	ldrb	r2, [r7, #6]
 8001a66:	54ca      	strb	r2, [r1, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d9e8      	bls.n	8001a48 <SyncWrite_StatusReturnLevel+0x58>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a78:	795b      	ldrb	r3, [r3, #5]
 8001a7a:	3305      	adds	r3, #5
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4813      	ldr	r0, [pc, #76]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a82:	f000 f911 	bl	8001ca8 <update_crc>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <SyncWrite_StatusReturnLevel+0xe4>)
 8001a8c:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[2 * n + 12] = crc & 0x00FF;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <SyncWrite_StatusReturnLevel+0xe4>)
 8001a90:	881a      	ldrh	r2, [r3, #0]
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	3306      	adds	r3, #6
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	b2d1      	uxtb	r1, r2
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001a9c:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[2 * n + 13] = (crc >> 8) & 0x00FF;
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <SyncWrite_StatusReturnLevel+0xe4>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	330d      	adds	r3, #13
 8001aac:	b2d1      	uxtb	r1, r2
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <SyncWrite_StatusReturnLevel+0xe0>)
 8001ab0:	54d1      	strb	r1, [r2, r3]

	Status_Return_Level = level;
 8001ab2:	4a09      	ldr	r2, [pc, #36]	@ (8001ad8 <SyncWrite_StatusReturnLevel+0xe8>)
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	7013      	strb	r3, [r2, #0]
	Packet_Return = 0;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <SyncWrite_StatusReturnLevel+0xec>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 8001abe:	f7ff fcd3 	bl	8001468 <transmitInstructionPacket4>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	2000052e 	.word	0x2000052e
 8001ad8:	20000002 	.word	0x20000002
 8001adc:	20000001 	.word	0x20000001

08001ae0 <SyncWrite_PositionWithVelocityProfile>:

	Packet_Return = 0;
	transmitInstructionPacket4();
}

void SyncWrite_PositionWithVelocityProfile(uint8_t n, uint8_t *ID_list, int32_t *cmd, int32_t vel_profile) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	4603      	mov	r3, r0
 8001aee:	73fb      	strb	r3, [r7, #15]
	while(dynamixel_Ready != 1) {
 8001af0:	bf00      	nop
 8001af2:	4b69      	ldr	r3, [pc, #420]	@ (8001c98 <SyncWrite_PositionWithVelocityProfile+0x1b8>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d1fb      	bne.n	8001af2 <SyncWrite_PositionWithVelocityProfile+0x12>
	}

	Instruction_Packet_Array[4] = 0xFE;
 8001afa:	4b68      	ldr	r3, [pc, #416]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001afc:	22fe      	movs	r2, #254	@ 0xfe
 8001afe:	711a      	strb	r2, [r3, #4]
	Instruction_Packet_Array[5] = 9 * n + 7;  // total data frame length (L+1)*n+7 (L is data length)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	461a      	mov	r2, r3
 8001b04:	00d2      	lsls	r2, r2, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3307      	adds	r3, #7
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b63      	ldr	r3, [pc, #396]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b10:	715a      	strb	r2, [r3, #5]
	Instruction_Packet_Array[6] = 0x00;
 8001b12:	4b62      	ldr	r3, [pc, #392]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	719a      	strb	r2, [r3, #6]
	Instruction_Packet_Array[7] = COMMAND_SYNC_WRITE;
 8001b18:	4b60      	ldr	r3, [pc, #384]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b1a:	2283      	movs	r2, #131	@ 0x83
 8001b1c:	71da      	strb	r2, [r3, #7]
	Instruction_Packet_Array[8] = RAM_MOVING_VELOCITY_1;
 8001b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b20:	2270      	movs	r2, #112	@ 0x70
 8001b22:	721a      	strb	r2, [r3, #8]
	Instruction_Packet_Array[9] = 0x00;
 8001b24:	4b5d      	ldr	r3, [pc, #372]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	725a      	strb	r2, [r3, #9]
	Instruction_Packet_Array[10] = 0x08; // write data length (L)
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	729a      	strb	r2, [r3, #10]
	Instruction_Packet_Array[11] = 0x00;
 8001b30:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	72da      	strb	r2, [r3, #11]
	for(uint8_t i = 1; i <= n; i++) {
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
 8001b3a:	e07c      	b.n	8001c36 <SyncWrite_PositionWithVelocityProfile+0x156>
		Instruction_Packet_Array[9 * i + 3] = ID_list[i - 1];
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	18d1      	adds	r1, r2, r3
 8001b44:	7dfa      	ldrb	r2, [r7, #23]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3303      	adds	r3, #3
 8001b4e:	7809      	ldrb	r1, [r1, #0]
 8001b50:	4a52      	ldr	r2, [pc, #328]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b52:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[9 * i + 4] = (uint8_t)(vel_profile & 0x000000FF);
 8001b54:	7dfa      	ldrb	r2, [r7, #23]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	b2d1      	uxtb	r1, r2
 8001b62:	4a4e      	ldr	r2, [pc, #312]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b64:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[9 * i + 5] = (uint8_t)((vel_profile >> 8) & 0x000000FF);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	1219      	asrs	r1, r3, #8
 8001b6a:	7dfa      	ldrb	r2, [r7, #23]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	3305      	adds	r3, #5
 8001b74:	b2c9      	uxtb	r1, r1
 8001b76:	4a49      	ldr	r2, [pc, #292]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b78:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[9 * i + 6] = (uint8_t)((vel_profile >> 16) & 0x000000FF);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	1419      	asrs	r1, r3, #16
 8001b7e:	7dfa      	ldrb	r2, [r7, #23]
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	3306      	adds	r3, #6
 8001b88:	b2c9      	uxtb	r1, r1
 8001b8a:	4a44      	ldr	r2, [pc, #272]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001b8c:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[9 * i + 7] = (uint8_t)((vel_profile >> 24) & 0x000000FF);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	1619      	asrs	r1, r3, #24
 8001b92:	7dfa      	ldrb	r2, [r7, #23]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3307      	adds	r3, #7
 8001b9c:	b2c9      	uxtb	r1, r1
 8001b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001ba0:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[9 * i + 8] = (uint8_t)(cmd[ID_list[i - 1]] & 0x000000FF);
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	6819      	ldr	r1, [r3, #0]
 8001bb4:	7dfa      	ldrb	r2, [r7, #23]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	b2c9      	uxtb	r1, r1
 8001bc0:	4a36      	ldr	r2, [pc, #216]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001bc2:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[9 * i + 9] = (uint8_t)((cmd[ID_list[i - 1]] >> 8) & 0x000000FF);
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	1219      	asrs	r1, r3, #8
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	b2c9      	uxtb	r1, r1
 8001be4:	4a2d      	ldr	r2, [pc, #180]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001be6:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[9 * i + 10] = (uint8_t)((cmd[ID_list[i - 1]] >> 16) & 0x000000FF);
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1419      	asrs	r1, r3, #16
 8001bfc:	7dfa      	ldrb	r2, [r7, #23]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	330a      	adds	r3, #10
 8001c06:	b2c9      	uxtb	r1, r1
 8001c08:	4a24      	ldr	r2, [pc, #144]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001c0a:	54d1      	strb	r1, [r2, r3]
		Instruction_Packet_Array[9 * i + 11] = (uint8_t)((cmd[ID_list[i - 1]] >> 24) & 0x000000FF);
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	4413      	add	r3, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1619      	asrs	r1, r3, #24
 8001c20:	7dfa      	ldrb	r2, [r7, #23]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	330b      	adds	r3, #11
 8001c2a:	b2c9      	uxtb	r1, r1
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001c2e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 1; i <= n; i++) {
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	3301      	adds	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
 8001c36:	7dfa      	ldrb	r2, [r7, #23]
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	f67f af7e 	bls.w	8001b3c <SyncWrite_PositionWithVelocityProfile+0x5c>
	}
	crc = update_crc(Instruction_Packet_Array, Instruction_Packet_Array[5] + 5);
 8001c40:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001c42:	795b      	ldrb	r3, [r3, #5]
 8001c44:	3305      	adds	r3, #5
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4814      	ldr	r0, [pc, #80]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001c4c:	f000 f82c 	bl	8001ca8 <update_crc>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <SyncWrite_PositionWithVelocityProfile+0x1c0>)
 8001c56:	801a      	strh	r2, [r3, #0]

	Instruction_Packet_Array[9 * n + 12] = crc & 0x00FF;
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <SyncWrite_PositionWithVelocityProfile+0x1c0>)
 8001c5a:	8819      	ldrh	r1, [r3, #0]
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	330c      	adds	r3, #12
 8001c66:	b2c9      	uxtb	r1, r1
 8001c68:	4a0c      	ldr	r2, [pc, #48]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001c6a:	54d1      	strb	r1, [r2, r3]
	Instruction_Packet_Array[9 * n + 13] = (crc >> 8) & 0x00FF;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <SyncWrite_PositionWithVelocityProfile+0x1c0>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	b299      	uxth	r1, r3
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	330d      	adds	r3, #13
 8001c7e:	b2c9      	uxtb	r1, r1
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <SyncWrite_PositionWithVelocityProfile+0x1bc>)
 8001c82:	54d1      	strb	r1, [r2, r3]

	Packet_Return = 0;
 8001c84:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <SyncWrite_PositionWithVelocityProfile+0x1c4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
	transmitInstructionPacket4();
 8001c8a:	f7ff fbed 	bl	8001468 <transmitInstructionPacket4>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	2000052e 	.word	0x2000052e
 8001ca4:	20000001 	.word	0x20000001

08001ca8 <update_crc>:
	0x028A, 0x829B, 0x029E, 0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8,
	0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257,
	0x0252, 0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
	0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

uint16_t update_crc(uint8_t* data_blk_ptr, uint16_t data_blk_size) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
	uint16_t crc_accum = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	81fb      	strh	r3, [r7, #14]
	uint16_t i, j;

	for(j = 0; j < data_blk_size; j++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	81bb      	strh	r3, [r7, #12]
 8001cbc:	e019      	b.n	8001cf2 <update_crc+0x4a>
		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	89ba      	ldrh	r2, [r7, #12]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	440a      	add	r2, r1
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	4053      	eors	r3, r2
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001cd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	490a      	ldr	r1, [pc, #40]	@ (8001d08 <update_crc+0x60>)
 8001ce0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4053      	eors	r3, r2
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	81fb      	strh	r3, [r7, #14]
	for(j = 0; j < data_blk_size; j++) {
 8001cec:	89bb      	ldrh	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	81bb      	strh	r3, [r7, #12]
 8001cf2:	89ba      	ldrh	r2, [r7, #12]
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d3e1      	bcc.n	8001cbe <update_crc+0x16>
	}

	return crc_accum;
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	200000cc 	.word	0x200000cc

08001d0c <parse_and_control>:
#include "Mx106v2.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void parse_and_control(char *input) {
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	f2ad 5d54 	subw	sp, sp, #1364	@ 0x554
 8001d12:	af04      	add	r7, sp, #16
 8001d14:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001d18:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8001d1c:	6018      	str	r0, [r3, #0]
    char temp_buffer[RX_BUFFER_SIZE];
    strcpy(temp_buffer, input);
 8001d1e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001d22:	f2a3 533c 	subw	r3, r3, #1340	@ 0x53c
 8001d26:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f004 fe5e 	bl	80069ee <strcpy>

    char *segments[50];
    int count = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c

    char *start = strchr(temp_buffer, '[');
 8001d38:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001d3c:	215b      	movs	r1, #91	@ 0x5b
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fd66 	bl	8006810 <strchr>
 8001d44:	f8c7 0538 	str.w	r0, [r7, #1336]	@ 0x538
    while (start && count < 50) {
 8001d48:	e025      	b.n	8001d96 <parse_and_control+0x8a>
        char *end = strchr(start, ']');
 8001d4a:	215d      	movs	r1, #93	@ 0x5d
 8001d4c:	f8d7 0538 	ldr.w	r0, [r7, #1336]	@ 0x538
 8001d50:	f004 fd5e 	bl	8006810 <strchr>
 8001d54:	f8c7 0524 	str.w	r0, [r7, #1316]	@ 0x524
        if (!end) break;
 8001d58:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d023      	beq.n	8001da8 <parse_and_control+0x9c>

        *end = '\0';
 8001d60:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
        segments[count++] = start + 1;
 8001d68:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	f8c7 253c 	str.w	r2, [r7, #1340]	@ 0x53c
 8001d72:	f8d7 2538 	ldr.w	r2, [r7, #1336]	@ 0x538
 8001d76:	1c51      	adds	r1, r2, #1
 8001d78:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8001d7c:	f2a2 42dc 	subw	r2, r2, #1244	@ 0x4dc
 8001d80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        start = strchr(end + 1, '[');
 8001d84:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001d88:	3301      	adds	r3, #1
 8001d8a:	215b      	movs	r1, #91	@ 0x5b
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f004 fd3f 	bl	8006810 <strchr>
 8001d92:	f8c7 0538 	str.w	r0, [r7, #1336]	@ 0x538
    while (start && count < 50) {
 8001d96:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <parse_and_control+0x9e>
 8001d9e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 8001da2:	2b31      	cmp	r3, #49	@ 0x31
 8001da4:	ddd1      	ble.n	8001d4a <parse_and_control+0x3e>
 8001da6:	e000      	b.n	8001daa <parse_and_control+0x9e>
        if (!end) break;
 8001da8:	bf00      	nop
    }

//    printf("Parsed %d segments\n", count);

    for (int i = 0; i < count; i++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 8001db0:	e182      	b.n	80020b8 <parse_and_control+0x3ac>
//        printf("Segment[%d]: %s\n", i, segments[i]);

        char *token;
        char *rest = segments[i];
 8001db2:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001db6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8001dba:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 8001dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520

        token = strtok(rest, ",");
 8001dc6:	49c2      	ldr	r1, [pc, #776]	@ (80020d0 <parse_and_control+0x3c4>)
 8001dc8:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 8001dcc:	f004 fd40 	bl	8006850 <strtok>
 8001dd0:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
        if (!token) {
 8001dd4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <parse_and_control+0xd8>
            printf("First token missing\n");
 8001ddc:	48bd      	ldr	r0, [pc, #756]	@ (80020d4 <parse_and_control+0x3c8>)
 8001dde:	f004 fc0d 	bl	80065fc <puts>
 8001de2:	e164      	b.n	80020ae <parse_and_control+0x3a2>
            continue;
        }

        char hand = token[0];
 8001de4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
        float angle[6];

        for (int j = 0; j < 6; j++) {
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 8001df4:	e02c      	b.n	8001e50 <parse_and_control+0x144>
            token = strtok(NULL, ",");
 8001df6:	49b6      	ldr	r1, [pc, #728]	@ (80020d0 <parse_and_control+0x3c4>)
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f004 fd29 	bl	8006850 <strtok>
 8001dfe:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
            if (!token) {
 8001e02:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <parse_and_control+0x112>
                printf("Angle %d missing in segment %d\n", j + 1, i);
 8001e0a:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 8001e14:	4619      	mov	r1, r3
 8001e16:	48b0      	ldr	r0, [pc, #704]	@ (80020d8 <parse_and_control+0x3cc>)
 8001e18:	f004 fb88 	bl	800652c <iprintf>
 8001e1c:	e153      	b.n	80020c6 <parse_and_control+0x3ba>
                return;
            }
            angle[j] = atof(token);
 8001e1e:	f8d7 051c 	ldr.w	r0, [r7, #1308]	@ 0x51c
 8001e22:	f003 fcaf 	bl	8005784 <atof>
 8001e26:	ec53 2b10 	vmov	r2, r3, d0
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe feb5 	bl	8000b9c <__aeabi_d2f>
 8001e32:	4601      	mov	r1, r0
 8001e34:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001e38:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8001e3c:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 6; j++) {
 8001e46:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 8001e50:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	ddce      	ble.n	8001df6 <parse_and_control+0xea>
        }

        int32_t cmd[7]={0,0,0,0,0,0,0};
 8001e58:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001e5c:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8001e60:	461a      	mov	r2, r3
 8001e62:	2300      	movs	r3, #0
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	6053      	str	r3, [r2, #4]
 8001e68:	6093      	str	r3, [r2, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
 8001e6c:	6113      	str	r3, [r2, #16]
 8001e6e:	6153      	str	r3, [r2, #20]
 8001e70:	6193      	str	r3, [r2, #24]
        for (int j = 0; j < 6; j++) {
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8001e78:	e01f      	b.n	8001eba <parse_and_control+0x1ae>
            cmd[j+1] = (int32_t)((angle[j])+180);
 8001e7a:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001e7e:	f2a3 42f4 	subw	r2, r3, #1268	@ 0x4f4
 8001e82:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80020dc <parse_and_control+0x3d0>
 8001e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e96:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea0:	ee17 1a90 	vmov	r1, s15
 8001ea4:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001ea8:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < 6; j++) {
 8001eb0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8001eba:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	dddb      	ble.n	8001e7a <parse_and_control+0x16e>
        }
        int32_t cmd_mod[7] = {0,(int32_t)(cmd[1]/0.088f),(int32_t)((-cmd[2]+360)/0.088f),(int32_t)((-cmd[3]+360)/0.088f),(int32_t)((-cmd[4]+360)/0.088f),(int32_t)((-cmd[5]+360)/0.088f),(int32_t)(cmd[6]/0.088f)};
 8001ec2:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001ec6:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	6053      	str	r3, [r2, #4]
 8001ed2:	6093      	str	r3, [r2, #8]
 8001ed4:	60d3      	str	r3, [r2, #12]
 8001ed6:	6113      	str	r3, [r2, #16]
 8001ed8:	6153      	str	r3, [r2, #20]
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001ee0:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eee:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80020e0 <parse_and_control+0x3d4>
 8001ef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001efa:	ee17 2a90 	vmov	r2, s15
 8001efe:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001f02:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001f0c:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80020e0 <parse_and_control+0x3d4>
 8001f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2a:	ee17 2a90 	vmov	r2, s15
 8001f2e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001f32:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001f3c:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f4e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80020e0 <parse_and_control+0x3d4>
 8001f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5a:	ee17 2a90 	vmov	r2, s15
 8001f5e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001f62:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001f6c:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020e0 <parse_and_control+0x3d4>
 8001f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8a:	ee17 2a90 	vmov	r2, s15
 8001f8e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001f92:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001f9c:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fae:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 80020e0 <parse_and_control+0x3d4>
 8001fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fba:	ee17 2a90 	vmov	r2, s15
 8001fbe:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001fc2:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001fcc:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fda:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80020e0 <parse_and_control+0x3d4>
 8001fde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe6:	ee17 2a90 	vmov	r2, s15
 8001fea:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001fee:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001ff2:	619a      	str	r2, [r3, #24]
        printf("CMD: %ld %ld %ld %ld %ld %ld %ld \r\n",
 8001ff4:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001ff8:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001ffc:	681c      	ldr	r4, [r3, #0]
 8001ffe:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8002002:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8002006:	685d      	ldr	r5, [r3, #4]
 8002008:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800200c:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8002010:	689e      	ldr	r6, [r3, #8]
 8002012:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8002016:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8002020:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 8002024:	6912      	ldr	r2, [r2, #16]
 8002026:	f507 61a8 	add.w	r1, r7, #1344	@ 0x540
 800202a:	f2a1 512c 	subw	r1, r1, #1324	@ 0x52c
 800202e:	6949      	ldr	r1, [r1, #20]
 8002030:	f507 60a8 	add.w	r0, r7, #1344	@ 0x540
 8002034:	f2a0 502c 	subw	r0, r0, #1324	@ 0x52c
 8002038:	6980      	ldr	r0, [r0, #24]
 800203a:	9003      	str	r0, [sp, #12]
 800203c:	9102      	str	r1, [sp, #8]
 800203e:	9201      	str	r2, [sp, #4]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	4633      	mov	r3, r6
 8002044:	462a      	mov	r2, r5
 8002046:	4621      	mov	r1, r4
 8002048:	4826      	ldr	r0, [pc, #152]	@ (80020e4 <parse_and_control+0x3d8>)
 800204a:	f004 fa6f 	bl	800652c <iprintf>
                      cmd_mod[0], cmd_mod[1], cmd_mod[2], cmd_mod[3], cmd_mod[4], cmd_mod[5], cmd_mod[6]);
        uint8_t ID_list[5];
        for (int j = 0; j < 5; j++) {
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8002054:	e01b      	b.n	800208e <parse_and_control+0x382>
            ID_list[j] = (hand == 'R') ? j + 1 : j + 7;
 8002056:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800205a:	2b52      	cmp	r3, #82	@ 0x52
 800205c:	d105      	bne.n	800206a <parse_and_control+0x35e>
 800205e:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	e004      	b.n	8002074 <parse_and_control+0x368>
 800206a:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3307      	adds	r3, #7
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8002078:	f2a2 5134 	subw	r1, r2, #1332	@ 0x534
 800207c:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 8002080:	440a      	add	r2, r1
 8002082:	7013      	strb	r3, [r2, #0]
        for (int j = 0; j < 5; j++) {
 8002084:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8002088:	3301      	adds	r3, #1
 800208a:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 800208e:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8002092:	2b04      	cmp	r3, #4
 8002094:	dddf      	ble.n	8002056 <parse_and_control+0x34a>

//        printf("Hand: %c | IDs: %d %d %d %d %d %d | CMD: %ld %ld %ld %ld %ld \r\n",
//               hand,
//               ID_list[0], ID_list[1], ID_list[2], ID_list[3], ID_list[4], ID_list[5],
//               cmd[0], cmd[1], cmd[2], cmd[3], cmd[4]);
        int32_t vel = 30;
 8002096:	231e      	movs	r3, #30
 8002098:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
        SyncWrite_PositionWithVelocityProfile(6, ID_list, cmd_mod, vel);
 800209c:	f107 0214 	add.w	r2, r7, #20
 80020a0:	f107 010c 	add.w	r1, r7, #12
 80020a4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80020a8:	2006      	movs	r0, #6
 80020aa:	f7ff fd19 	bl	8001ae0 <SyncWrite_PositionWithVelocityProfile>
    for (int i = 0; i < count; i++) {
 80020ae:	f8d7 3534 	ldr.w	r3, [r7, #1332]	@ 0x534
 80020b2:	3301      	adds	r3, #1
 80020b4:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 80020b8:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 80020bc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f6ff ae76 	blt.w	8001db2 <parse_and_control+0xa6>
    }
}
 80020c6:	f207 5744 	addw	r7, r7, #1348	@ 0x544
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ce:	bf00      	nop
 80020d0:	08008960 	.word	0x08008960
 80020d4:	08008964 	.word	0x08008964
 80020d8:	08008978 	.word	0x08008978
 80020dc:	43340000 	.word	0x43340000
 80020e0:	3db43958 	.word	0x3db43958
 80020e4:	08008998 	.word	0x08008998

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4907      	ldr	r1, [pc, #28]	@ (800213c <__NVIC_EnableIRQ+0x38>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	@ (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	@ (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	@ 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	@ 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002204:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002208:	4907      	ldr	r1, [pc, #28]	@ (8002228 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4313      	orrs	r3, r2
 800220e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40023800 	.word	0x40023800

0800222c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002230:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002234:	f7ff ffe2 	bl	80021fc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002238:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800223c:	f7ff ffde 	bl	80021fc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002240:	f7ff ff52 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002244:	4603      	mov	r3, r0
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ffa2 	bl	8002194 <NVIC_EncodePriority>
 8002250:	4603      	mov	r3, r0
 8002252:	4619      	mov	r1, r3
 8002254:	200d      	movs	r0, #13
 8002256:	f7ff ff73 	bl	8002140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800225a:	200d      	movs	r0, #13
 800225c:	f7ff ff52 	bl	8002104 <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002260:	f7ff ff42 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002264:	4603      	mov	r3, r0
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ff92 	bl	8002194 <NVIC_EncodePriority>
 8002270:	4603      	mov	r3, r0
 8002272:	4619      	mov	r1, r3
 8002274:	200f      	movs	r0, #15
 8002276:	f7ff ff63 	bl	8002140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800227a:	200f      	movs	r0, #15
 800227c:	f7ff ff42 	bl	8002104 <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002280:	f7ff ff32 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002284:	4603      	mov	r3, r0
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff82 	bl	8002194 <NVIC_EncodePriority>
 8002290:	4603      	mov	r3, r0
 8002292:	4619      	mov	r1, r3
 8002294:	2010      	movs	r0, #16
 8002296:	f7ff ff53 	bl	8002140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800229a:	2010      	movs	r0, #16
 800229c:	f7ff ff32 	bl	8002104 <__NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022a0:	f7ff ff22 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff72 	bl	8002194 <NVIC_EncodePriority>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	2011      	movs	r0, #17
 80022b6:	f7ff ff43 	bl	8002140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022ba:	2011      	movs	r0, #17
 80022bc:	f7ff ff22 	bl	8002104 <__NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022c0:	f7ff ff12 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff62 	bl	8002194 <NVIC_EncodePriority>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4619      	mov	r1, r3
 80022d4:	2039      	movs	r0, #57	@ 0x39
 80022d6:	f7ff ff33 	bl	8002140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022da:	2039      	movs	r0, #57	@ 0x39
 80022dc:	f7ff ff12 	bl	8002104 <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022e0:	f7ff ff02 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff52 	bl	8002194 <NVIC_EncodePriority>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	2045      	movs	r0, #69	@ 0x45
 80022f6:	f7ff ff23 	bl	8002140 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80022fa:	2045      	movs	r0, #69	@ 0x45
 80022fc:	f7ff ff02 	bl	8002104 <__NVIC_EnableIRQ>

}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}

08002304 <LL_AHB1_GRP1_EnableClock>:
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800230e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002310:	4907      	ldr	r1, [pc, #28]	@ (8002330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800231a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4013      	ands	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40023800 	.word	0x40023800

08002334 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	041a      	lsls	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	463b      	mov	r3, r7
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
 8002368:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800236a:	2004      	movs	r0, #4
 800236c:	f7ff ffca 	bl	8002304 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002370:	2080      	movs	r0, #128	@ 0x80
 8002372:	f7ff ffc7 	bl	8002304 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff ffc4 	bl	8002304 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff ffc1 	bl	8002304 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002382:	2008      	movs	r0, #8
 8002384:	f7ff ffbe 	bl	8002304 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel4_CS_GPIO_Port, Dynamixel4_CS_Pin);
 8002388:	2110      	movs	r1, #16
 800238a:	4814      	ldr	r0, [pc, #80]	@ (80023dc <MX_GPIO_Init+0x88>)
 800238c:	f7ff ffd2 	bl	8002334 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Dynamixel6_CS_GPIO_Port, Dynamixel6_CS_Pin);
 8002390:	2101      	movs	r1, #1
 8002392:	4813      	ldr	r0, [pc, #76]	@ (80023e0 <MX_GPIO_Init+0x8c>)
 8002394:	f7ff ffce 	bl	8002334 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Dynamixel4_CS_Pin;
 8002398:	2310      	movs	r3, #16
 800239a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800239c:	2301      	movs	r3, #1
 800239e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80023a0:	2302      	movs	r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80023a8:	2302      	movs	r3, #2
 80023aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel4_CS_GPIO_Port, &GPIO_InitStruct);
 80023ac:	463b      	mov	r3, r7
 80023ae:	4619      	mov	r1, r3
 80023b0:	480a      	ldr	r0, [pc, #40]	@ (80023dc <MX_GPIO_Init+0x88>)
 80023b2:	f002 fbd3 	bl	8004b5c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Dynamixel6_CS_Pin;
 80023b6:	2301      	movs	r3, #1
 80023b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023ba:	2301      	movs	r3, #1
 80023bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80023be:	2302      	movs	r3, #2
 80023c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80023c6:	2302      	movs	r3, #2
 80023c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Dynamixel6_CS_GPIO_Port, &GPIO_InitStruct);
 80023ca:	463b      	mov	r3, r7
 80023cc:	4619      	mov	r1, r3
 80023ce:	4804      	ldr	r0, [pc, #16]	@ (80023e0 <MX_GPIO_Init+0x8c>)
 80023d0:	f002 fbc4 	bl	8004b5c <LL_GPIO_Init>

}
 80023d4:	bf00      	nop
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400

080023e4 <__NVIC_SetPriorityGrouping>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002400:	4013      	ands	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800240c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002416:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	60d3      	str	r3, [r2, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	@ (8002464 <__NVIC_EnableIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	@ (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <LL_RCC_HSE_EnableBypass+0x1c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a04      	ldr	r2, [pc, #16]	@ (80024d8 <LL_RCC_HSE_EnableBypass+0x1c>)
 80024c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800

080024dc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <LL_RCC_HSE_Enable+0x1c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <LL_RCC_HSE_Enable+0x1c>)
 80024e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800

080024fc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002500:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <LL_RCC_HSE_IsReady+0x24>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800

08002524 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <LL_RCC_SetSysClkSource+0x24>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 0203 	bic.w	r2, r3, #3
 8002534:	4904      	ldr	r1, [pc, #16]	@ (8002548 <LL_RCC_SetSysClkSource+0x24>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40023800 	.word	0x40023800

0800254c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <LL_RCC_GetSysClkSource+0x18>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800

08002568 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002570:	4b06      	ldr	r3, [pc, #24]	@ (800258c <LL_RCC_SetAHBPrescaler+0x24>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002578:	4904      	ldr	r1, [pc, #16]	@ (800258c <LL_RCC_SetAHBPrescaler+0x24>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40023800 	.word	0x40023800

08002590 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002598:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025a0:	4904      	ldr	r1, [pc, #16]	@ (80025b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40023800 	.word	0x40023800

080025b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c8:	4904      	ldr	r1, [pc, #16]	@ (80025dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40023800 	.word	0x40023800

080025e0 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <LL_RCC_SetTIMPrescaler+0x28>)
 80025ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025f2:	4905      	ldr	r1, [pc, #20]	@ (8002608 <LL_RCC_SetTIMPrescaler+0x28>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40023800 	.word	0x40023800

0800260c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002610:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <LL_RCC_PLL_Enable+0x1c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <LL_RCC_PLL_Enable+0x1c>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800261a:	6013      	str	r3, [r2, #0]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <LL_RCC_PLL_IsReady+0x24>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800263c:	bf0c      	ite	eq
 800263e:	2301      	moveq	r3, #1
 8002640:	2300      	movne	r3, #0
 8002642:	b2db      	uxtb	r3, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800

08002654 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002662:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 8002668:	4013      	ands	r3, r2
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	0192      	lsls	r2, r2, #6
 8002674:	430a      	orrs	r2, r1
 8002676:	490c      	ldr	r1, [pc, #48]	@ (80026a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002684:	4908      	ldr	r1, [pc, #32]	@ (80026a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8002694:	4904      	ldr	r1, [pc, #16]	@ (80026a8 <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40023800 	.word	0x40023800
 80026ac:	ffbf8000 	.word	0xffbf8000

080026b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80026b8:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80026ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026bc:	4907      	ldr	r1, [pc, #28]	@ (80026dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80026c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4013      	ands	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	40023800 	.word	0x40023800

080026e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80026e8:	4b08      	ldr	r3, [pc, #32]	@ (800270c <LL_APB2_GRP1_EnableClock+0x2c>)
 80026ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026ec:	4907      	ldr	r1, [pc, #28]	@ (800270c <LL_APB2_GRP1_EnableClock+0x2c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <LL_APB2_GRP1_EnableClock+0x2c>)
 80026f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4013      	ands	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40023800 	.word	0x40023800

08002710 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <LL_FLASH_SetLatency+0x24>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 020f 	bic.w	r2, r3, #15
 8002720:	4904      	ldr	r1, [pc, #16]	@ (8002734 <LL_FLASH_SetLatency+0x24>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40023c00 	.word	0x40023c00

08002738 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <LL_FLASH_GetLatency+0x18>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 030f 	and.w	r3, r3, #15
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023c00 	.word	0x40023c00

08002754 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d106      	bne.n	8002770 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <LL_SYSTICK_SetClkSource+0x34>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a08      	ldr	r2, [pc, #32]	@ (8002788 <LL_SYSTICK_SetClkSource+0x34>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800276e:	e005      	b.n	800277c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <LL_SYSTICK_SetClkSource+0x34>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <LL_SYSTICK_SetClkSource+0x34>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e010 	.word	0xe000e010

0800278c <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <LL_SYSTICK_EnableIT+0x1c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a04      	ldr	r2, [pc, #16]	@ (80027a8 <LL_SYSTICK_EnableIT+0x1c>)
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <LL_PWR_EnableOverDriveMode+0x1c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <LL_PWR_EnableOverDriveMode+0x1c>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40007000 	.word	0x40007000

080027cc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027dc:	4904      	ldr	r1, [pc, #16]	@ (80027f0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40007000 	.word	0x40007000

080027f4 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80027f8:	4b07      	ldr	r3, [pc, #28]	@ (8002818 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002800:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000

0800281c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f06f 0201 	mvn.w	r2, #1
 800284a:	611a      	str	r2, [r3, #16]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_USART_Enable>:
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_USART_IsActiveFlag_TXE>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a8:	2b80      	cmp	r3, #128	@ 0x80
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_USART_EnableIT_RXNE>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b089      	sub	sp, #36	@ 0x24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	330c      	adds	r3, #12
 80028ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	e853 3f00 	ldrex	r3, [r3]
 80028d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	330c      	adds	r3, #12
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	61ba      	str	r2, [r7, #24]
 80028e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	613b      	str	r3, [r7, #16]
   return(result);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e7      	bne.n	80028c6 <LL_USART_EnableIT_RXNE+0x8>
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	3724      	adds	r7, #36	@ 0x24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	605a      	str	r2, [r3, #4]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_GPIO_SetOutputPin>:
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002946:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800294a:	f7ff feb1 	bl	80026b0 <LL_APB1_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800294e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002952:	f7ff fec5 	bl	80026e0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002956:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800295a:	f7ff fea9 	bl	80026b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800295e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002962:	f7ff febd 	bl	80026e0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002966:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800296a:	f7ff fea1 	bl	80026b0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800296e:	2007      	movs	r0, #7
 8002970:	f7ff fd38 	bl	80023e4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002974:	f000 f8f2 	bl	8002b5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_Init1msTick(180000000);			//Add here to fix MX generated code
 8002978:	4869      	ldr	r0, [pc, #420]	@ (8002b20 <main+0x1e0>)
 800297a:	f002 febf 	bl	80056fc <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800297e:	2004      	movs	r0, #4
 8002980:	f7ff fee8 	bl	8002754 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8002984:	f7ff ff02 	bl	800278c <LL_SYSTICK_EnableIT>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002988:	f7ff fce4 	bl	8002354 <MX_GPIO_Init>
  MX_DMA_Init();
 800298c:	f7ff fc4e 	bl	800222c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002990:	f001 fd8c 	bl	80044ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002994:	f001 f9d8 	bl	8003d48 <MX_TIM1_Init>
  MX_UART4_Init();
 8002998:	f001 fc50 	bl	800423c <MX_UART4_Init>
  MX_USART6_UART_Init();
 800299c:	f001 feac 	bl	80046f8 <MX_USART6_UART_Init>
  MX_UART5_Init();
 80029a0:	f001 fd0c 	bl	80043bc <MX_UART5_Init>
  MX_USART3_UART_Init();
 80029a4:	f001 fe30 	bl	8004608 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 80029a8:	485e      	ldr	r0, [pc, #376]	@ (8002b24 <main+0x1e4>)
 80029aa:	f7ff ff47 	bl	800283c <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM1);
 80029ae:	485d      	ldr	r0, [pc, #372]	@ (8002b24 <main+0x1e4>)
 80029b0:	f7ff ff52 	bl	8002858 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM1);
 80029b4:	485b      	ldr	r0, [pc, #364]	@ (8002b24 <main+0x1e4>)
 80029b6:	f7ff ff31 	bl	800281c <LL_TIM_EnableCounter>
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80029ba:	2110      	movs	r1, #16
 80029bc:	485a      	ldr	r0, [pc, #360]	@ (8002b28 <main+0x1e8>)
 80029be:	f7ff ffb0 	bl	8002922 <LL_GPIO_SetOutputPin>
  LL_mDelay(1); // ★ 加入延遲穩定方向切換（必要！）
 80029c2:	2001      	movs	r0, #1
 80029c4:	f002 fea8 	bl	8005718 <LL_mDelay>
  uart4_dma_tx_start();
 80029c8:	f000 ff0a 	bl	80037e0 <uart4_dma_tx_start>
  usart6_dma_tx_start();
 80029cc:	f000 ff90 	bl	80038f0 <usart6_dma_tx_start>
  LL_USART_EnableIT_RXNE(USART3);
 80029d0:	4856      	ldr	r0, [pc, #344]	@ (8002b2c <main+0x1ec>)
 80029d2:	f7ff ff74 	bl	80028be <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(USART3);
 80029d6:	4855      	ldr	r0, [pc, #340]	@ (8002b2c <main+0x1ec>)
 80029d8:	f7ff ff4e 	bl	8002878 <LL_USART_Enable>
  LL_USART_EnableIT_RXNE(UART5);
 80029dc:	4854      	ldr	r0, [pc, #336]	@ (8002b30 <main+0x1f0>)
 80029de:	f7ff ff6e 	bl	80028be <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(UART5);
 80029e2:	4853      	ldr	r0, [pc, #332]	@ (8002b30 <main+0x1f0>)
 80029e4:	f7ff ff48 	bl	8002878 <LL_USART_Enable>
  NVIC_SetPriority(USART3_IRQn, 0);
 80029e8:	2100      	movs	r1, #0
 80029ea:	2027      	movs	r0, #39	@ 0x27
 80029ec:	f7ff fd3c 	bl	8002468 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80029f0:	2027      	movs	r0, #39	@ 0x27
 80029f2:	f7ff fd1b 	bl	800242c <__NVIC_EnableIRQ>
  NVIC_SetPriority(UART5_IRQn, 0);
 80029f6:	2100      	movs	r1, #0
 80029f8:	2035      	movs	r0, #53	@ 0x35
 80029fa:	f7ff fd35 	bl	8002468 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80029fe:	2035      	movs	r0, #53	@ 0x35
 8002a00:	f7ff fd14 	bl	800242c <__NVIC_EnableIRQ>
  printf("start\r\n");
 8002a04:	484b      	ldr	r0, [pc, #300]	@ (8002b34 <main+0x1f4>)
 8002a06:	f003 fdf9 	bl	80065fc <puts>
  LL_mDelay(100);
 8002a0a:	2064      	movs	r0, #100	@ 0x64
 8002a0c:	f002 fe84 	bl	8005718 <LL_mDelay>
  UART4_DMA_Config();
 8002a10:	f7fe fc7e 	bl	8001310 <UART4_DMA_Config>
  USART6_DMA_Config();
 8002a14:	f7fe fcd2 	bl	80013bc <USART6_DMA_Config>
  LL_USART_Enable(UART4);
 8002a18:	4847      	ldr	r0, [pc, #284]	@ (8002b38 <main+0x1f8>)
 8002a1a:	f7ff ff2d 	bl	8002878 <LL_USART_Enable>
  LL_USART_Enable(USART6);
 8002a1e:	4847      	ldr	r0, [pc, #284]	@ (8002b3c <main+0x1fc>)
 8002a20:	f7ff ff2a 	bl	8002878 <LL_USART_Enable>
  uint8_t ID_list[6] = { 1, 2, 3, 4, 5, 6 };
 8002a24:	4a46      	ldr	r2, [pc, #280]	@ (8002b40 <main+0x200>)
 8002a26:	463b      	mov	r3, r7
 8002a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a2c:	6018      	str	r0, [r3, #0]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	8019      	strh	r1, [r3, #0]
  SyncWrite_StatusReturnLevel(6, ID_list, 1);
 8002a32:	463b      	mov	r3, r7
 8002a34:	2201      	movs	r2, #1
 8002a36:	4619      	mov	r1, r3
 8002a38:	2006      	movs	r0, #6
 8002a3a:	f7fe ffd9 	bl	80019f0 <SyncWrite_StatusReturnLevel>
  LL_mDelay(10);
 8002a3e:	200a      	movs	r0, #10
 8002a40:	f002 fe6a 	bl	8005718 <LL_mDelay>
//  PING(1);
  for (int i = 0;i <= 10; i++){
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e007      	b.n	8002a5a <main+0x11a>
  	  SyncWrite_DisableDynamixels(6, ID_list);
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	2006      	movs	r0, #6
 8002a50:	f7fe feee 	bl	8001830 <SyncWrite_DisableDynamixels>
  for (int i = 0;i <= 10; i++){
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	3301      	adds	r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b0a      	cmp	r3, #10
 8002a5e:	ddf4      	ble.n	8002a4a <main+0x10a>
    }

  for(int id = 1; id <= 6; id++) {
 8002a60:	2301      	movs	r3, #1
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e010      	b.n	8002a88 <main+0x148>
  	  TorqueEnable(id,0);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fe75 	bl	800175c <TorqueEnable>
  	  while (dynamixel_Ready != 1);
 8002a72:	bf00      	nop
 8002a74:	4b33      	ldr	r3, [pc, #204]	@ (8002b44 <main+0x204>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d1fb      	bne.n	8002a74 <main+0x134>
        LL_mDelay(1);
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	f002 fe4b 	bl	8005718 <LL_mDelay>
  for(int id = 1; id <= 6; id++) {
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	3301      	adds	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	ddeb      	ble.n	8002a66 <main+0x126>
    }

    for(int id = 1; id <= 6; id++) {
 8002a8e:	2301      	movs	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e010      	b.n	8002ab6 <main+0x176>
        OperatingMode(id, POSITION);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2103      	movs	r1, #3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fde6 	bl	800166c <OperatingMode>
        while (dynamixel_Ready != 1);
 8002aa0:	bf00      	nop
 8002aa2:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <main+0x204>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d1fb      	bne.n	8002aa2 <main+0x162>
        LL_mDelay(1);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f002 fe34 	bl	8005718 <LL_mDelay>
    for(int id = 1; id <= 6; id++) {
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	ddeb      	ble.n	8002a94 <main+0x154>
    }

    for(int id = 1; id <= 6; id++) {
 8002abc:	2301      	movs	r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	e010      	b.n	8002ae4 <main+0x1a4>
  	  TorqueEnable(id,1);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fe47 	bl	800175c <TorqueEnable>
  	  while (dynamixel_Ready != 1);
 8002ace:	bf00      	nop
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b44 <main+0x204>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d1fb      	bne.n	8002ad0 <main+0x190>
        LL_mDelay(1);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f002 fe1d 	bl	8005718 <LL_mDelay>
    for(int id = 1; id <= 6; id++) {
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	ddeb      	ble.n	8002ac2 <main+0x182>
    }
  SyncWrite_EnableDynamixels(6, ID_list);
 8002aea:	463b      	mov	r3, r7
 8002aec:	4619      	mov	r1, r3
 8002aee:	2006      	movs	r0, #6
 8002af0:	f7fe ff0e 	bl	8001910 <SyncWrite_EnableDynamixels>
  LL_mDelay(1);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f002 fe0f 	bl	8005718 <LL_mDelay>

	while(1){
		loop_check_uart5(uart5_rx_buffer, &uart5_packet_ready);
 8002afa:	4913      	ldr	r1, [pc, #76]	@ (8002b48 <main+0x208>)
 8002afc:	4813      	ldr	r0, [pc, #76]	@ (8002b4c <main+0x20c>)
 8002afe:	f000 f953 	bl	8002da8 <loop_check_uart5>
		if (data_ready)
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <main+0x210>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f6      	beq.n	8002afa <main+0x1ba>
		{
			data_ready = 0;
 8002b0c:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <main+0x210>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
			printf("interrupt\r\n");
 8002b12:	4810      	ldr	r0, [pc, #64]	@ (8002b54 <main+0x214>)
 8002b14:	f003 fd72 	bl	80065fc <puts>
			parse_and_control((char *)rx_buffer);  // 呼叫解析與控制函數
 8002b18:	480f      	ldr	r0, [pc, #60]	@ (8002b58 <main+0x218>)
 8002b1a:	f7ff f8f7 	bl	8001d0c <parse_and_control>
		loop_check_uart5(uart5_rx_buffer, &uart5_packet_ready);
 8002b1e:	e7ec      	b.n	8002afa <main+0x1ba>
 8002b20:	0aba9500 	.word	0x0aba9500
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40004800 	.word	0x40004800
 8002b30:	40005000 	.word	0x40005000
 8002b34:	080089bc 	.word	0x080089bc
 8002b38:	40004c00 	.word	0x40004c00
 8002b3c:	40011400 	.word	0x40011400
 8002b40:	080089d0 	.word	0x080089d0
 8002b44:	20000000 	.word	0x20000000
 8002b48:	2000092a 	.word	0x2000092a
 8002b4c:	20000920 	.word	0x20000920
 8002b50:	2000091c 	.word	0x2000091c
 8002b54:	080089c4 	.word	0x080089c4
 8002b58:	20000534 	.word	0x20000534

08002b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8002b60:	2005      	movs	r0, #5
 8002b62:	f7ff fdd5 	bl	8002710 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8002b66:	bf00      	nop
 8002b68:	f7ff fde6 	bl	8002738 <LL_FLASH_GetLatency>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d1fa      	bne.n	8002b68 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002b72:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8002b76:	f7ff fe29 	bl	80027cc <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8002b7a:	f7ff fe17 	bl	80027ac <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_EnableBypass();
 8002b7e:	f7ff fc9d 	bl	80024bc <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8002b82:	f7ff fcab 	bl	80024dc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002b86:	bf00      	nop
 8002b88:	f7ff fcb8 	bl	80024fc <LL_RCC_HSE_IsReady>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d1fa      	bne.n	8002b88 <SystemClock_Config+0x2c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 8002b92:	2300      	movs	r3, #0
 8002b94:	22b4      	movs	r2, #180	@ 0xb4
 8002b96:	2104      	movs	r1, #4
 8002b98:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002b9c:	f7ff fd5a 	bl	8002654 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002ba0:	f7ff fd34 	bl	800260c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002ba4:	bf00      	nop
 8002ba6:	f7ff fd41 	bl	800262c <LL_RCC_PLL_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d1fa      	bne.n	8002ba6 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8002bb0:	bf00      	nop
 8002bb2:	f7ff fe1f 	bl	80027f4 <LL_PWR_IsActiveFlag_VOS>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0fa      	beq.n	8002bb2 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7ff fcd3 	bl	8002568 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8002bc2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8002bc6:	f7ff fce3 	bl	8002590 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8002bca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002bce:	f7ff fcf3 	bl	80025b8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002bd2:	2002      	movs	r0, #2
 8002bd4:	f7ff fca6 	bl	8002524 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002bd8:	bf00      	nop
 8002bda:	f7ff fcb7 	bl	800254c <LL_RCC_GetSysClkSource>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d1fa      	bne.n	8002bda <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
 8002be4:	4805      	ldr	r0, [pc, #20]	@ (8002bfc <SystemClock_Config+0xa0>)
 8002be6:	f002 fd89 	bl	80056fc <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
 8002bea:	4804      	ldr	r0, [pc, #16]	@ (8002bfc <SystemClock_Config+0xa0>)
 8002bec:	f002 fdba 	bl	8005764 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7ff fcf5 	bl	80025e0 <LL_RCC_SetTIMPrescaler>
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0aba9500 	.word	0x0aba9500

08002c00 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e011      	b.n	8002c36 <_write+0x36>
		LL_USART_TransmitData8(USART2, (uint8_t)*ptr++);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	60ba      	str	r2, [r7, #8]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480a      	ldr	r0, [pc, #40]	@ (8002c48 <_write+0x48>)
 8002c1e:	f7ff fe71 	bl	8002904 <LL_USART_TransmitData8>
		while(LL_USART_IsActiveFlag_TXE(USART2) == RESET)
 8002c22:	bf00      	nop
 8002c24:	4808      	ldr	r0, [pc, #32]	@ (8002c48 <_write+0x48>)
 8002c26:	f7ff fe37 	bl	8002898 <LL_USART_IsActiveFlag_TXE>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f9      	beq.n	8002c24 <_write+0x24>
	for(DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3301      	adds	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	dbe9      	blt.n	8002c12 <_write+0x12>
			;
	}
	return len;
 8002c3e:	687b      	ldr	r3, [r7, #4]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40004400 	.word	0x40004400

08002c4c <LL_USART_IsActiveFlag_TXE>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5c:	2b80      	cmp	r3, #128	@ 0x80
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_USART_TransmitData8>:
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	605a      	str	r2, [r3, #4]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <process_ps4_packet>:

#include "main.h"
#include "ps4_parser.h"
#include <stdio.h>

void process_ps4_packet(uint8_t *packet) {
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b09a      	sub	sp, #104	@ 0x68
 8002c94:	af04      	add	r7, sp, #16
 8002c96:	6078      	str	r0, [r7, #4]
    if (packet[0] != 0xAA || packet[8] != 0x55) return;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2baa      	cmp	r3, #170	@ 0xaa
 8002c9e:	d178      	bne.n	8002d92 <process_ps4_packet+0x102>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b55      	cmp	r3, #85	@ 0x55
 8002ca8:	d173      	bne.n	8002d92 <process_ps4_packet+0x102>

    int8_t lx = (int8_t)packet[1];
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3301      	adds	r3, #1
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    int8_t ly = (int8_t)packet[2];
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    int8_t rx = (int8_t)packet[3];
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3303      	adds	r3, #3
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    int8_t ry = (int8_t)packet[4];
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    uint16_t buttons = packet[5] | (packet[6] << 8);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3305      	adds	r3, #5
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3306      	adds	r3, #6
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint8_t checksum = (lx + ly + rx + ry + packet[5] + packet[6]) & 0xFF;
 8002cee:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8002cf2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8002cf6:	4413      	add	r3, r2
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8002cfe:	4413      	add	r3, r2
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002d06:	4413      	add	r3, r2
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3305      	adds	r3, #5
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3306      	adds	r3, #6
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (checksum != packet[7]) return;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3307      	adds	r3, #7
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d133      	bne.n	8002d96 <process_ps4_packet+0x106>
    char debug_msg[64];
    sprintf(debug_msg, "LX=%d LY=%d RX=%d RY=%d BTN=0x%04X\r\n", lx, ly, rx, ry, buttons);
 8002d2e:	f997 4053 	ldrsb.w	r4, [r7, #83]	@ 0x53
 8002d32:	f997 5052 	ldrsb.w	r5, [r7, #82]	@ 0x52
 8002d36:	f997 3051 	ldrsb.w	r3, [r7, #81]	@ 0x51
 8002d3a:	f997 2050 	ldrsb.w	r2, [r7, #80]	@ 0x50
 8002d3e:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8002d42:	f107 000c 	add.w	r0, r7, #12
 8002d46:	9102      	str	r1, [sp, #8]
 8002d48:	9201      	str	r2, [sp, #4]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	4622      	mov	r2, r4
 8002d50:	4913      	ldr	r1, [pc, #76]	@ (8002da0 <process_ps4_packet+0x110>)
 8002d52:	f003 fc5b 	bl	800660c <siprintf>
    for (char *p = debug_msg; *p; p++) {
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d5c:	e014      	b.n	8002d88 <process_ps4_packet+0xf8>
        while (!LL_USART_IsActiveFlag_TXE(USART2));
 8002d5e:	bf00      	nop
 8002d60:	4810      	ldr	r0, [pc, #64]	@ (8002da4 <process_ps4_packet+0x114>)
 8002d62:	f7ff ff73 	bl	8002c4c <LL_USART_IsActiveFlag_TXE>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f4      	bne.n	8002d60 <process_ps4_packet+0xd0>
        LL_USART_TransmitData8(USART2, *p);
 8002d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4809      	ldr	r0, [pc, #36]	@ (8002da4 <process_ps4_packet+0x114>)
 8002d7e:	f7ff ff78 	bl	8002c72 <LL_USART_TransmitData8>
    for (char *p = debug_msg; *p; p++) {
 8002d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d84:	3301      	adds	r3, #1
 8002d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e6      	bne.n	8002d5e <process_ps4_packet+0xce>
 8002d90:	e002      	b.n	8002d98 <process_ps4_packet+0x108>
    if (packet[0] != 0xAA || packet[8] != 0x55) return;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <process_ps4_packet+0x108>
    if (checksum != packet[7]) return;
 8002d96:	bf00      	nop
    }
}
 8002d98:	3758      	adds	r7, #88	@ 0x58
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	080089d8 	.word	0x080089d8
 8002da4:	40004400 	.word	0x40004400

08002da8 <loop_check_uart5>:

void loop_check_uart5(uint8_t *rx_buffer, volatile uint8_t *packet_ready) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
    if (*packet_ready) {
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <loop_check_uart5+0x2a>
        *packet_ready = 0;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
        process_ps4_packet(rx_buffer);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff5f 	bl	8002c90 <process_ps4_packet>
    }
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <LL_DMA_EnableStream>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002de6:	4a0c      	ldr	r2, [pc, #48]	@ (8002e18 <LL_DMA_EnableStream+0x3c>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4908      	ldr	r1, [pc, #32]	@ (8002e18 <LL_DMA_EnableStream+0x3c>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	440a      	add	r2, r1
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	440a      	add	r2, r1
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6013      	str	r3, [r2, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	08008a90 	.word	0x08008a90

08002e1c <LL_DMA_DisableStream>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002e26:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <LL_DMA_DisableStream+0x3c>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4908      	ldr	r1, [pc, #32]	@ (8002e58 <LL_DMA_DisableStream+0x3c>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	440a      	add	r2, r1
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	440a      	add	r2, r1
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6013      	str	r3, [r2, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	08008a90 	.word	0x08008a90

08002e5c <LL_DMA_IsEnabledStream>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8002e66:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <LL_DMA_IsEnabledStream+0x34>)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	08008a90 	.word	0x08008a90

08002e94 <LL_DMA_SetDataLength>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <LL_DMA_SetDataLength+0x44>)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <LL_DMA_SetDataLength+0x44>)
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	440a      	add	r2, r1
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	440a      	add	r2, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	08008a90 	.word	0x08008a90

08002edc <LL_DMA_SetMemoryAddress>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8002ee8:	4a07      	ldr	r2, [pc, #28]	@ (8002f08 <LL_DMA_SetMemoryAddress+0x2c>)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	08008a90 	.word	0x08008a90

08002f0c <LL_DMA_SetPeriphAddress>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8002f18:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <LL_DMA_SetPeriphAddress+0x2c>)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4413      	add	r3, r2
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6093      	str	r3, [r2, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	08008a90 	.word	0x08008a90

08002f3c <LL_DMA_IsActiveFlag_TC1>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_DMA_IsActiveFlag_TC2>:
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF2)==(DMA_LISR_TCIF2));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_DMA_IsActiveFlag_TC4>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_DMA_IsActiveFlag_TC5>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF5)==(DMA_HISR_TCIF5));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_DMA_IsActiveFlag_TC6>:
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF6)==(DMA_HISR_TCIF6));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_DMA_ClearFlag_HT1>:
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003010:	609a      	str	r2, [r3, #8]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_DMA_ClearFlag_HT2>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CHTIF2);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800302c:	609a      	str	r2, [r3, #8]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_DMA_ClearFlag_HT4>:
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF4);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2210      	movs	r2, #16
 8003046:	60da      	str	r2, [r3, #12]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_DMA_ClearFlag_HT6>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CHTIF6);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003062:	60da      	str	r2, [r3, #12]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_DMA_ClearFlag_TC1>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800307e:	609a      	str	r2, [r3, #8]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_DMA_ClearFlag_TC2>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_DMA_ClearFlag_TC4>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	60da      	str	r2, [r3, #12]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_DMA_ClearFlag_TC5>:
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF5);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030d0:	60da      	str	r2, [r3, #12]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <LL_DMA_ClearFlag_TC6>:
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF6);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80030ec:	60da      	str	r2, [r3, #12]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_DMA_ClearFlag_TE1>:
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003108:	609a      	str	r2, [r3, #8]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_DMA_ClearFlag_TE2>:
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTEIF2);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003124:	609a      	str	r2, [r3, #8]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_DMA_ClearFlag_TE4>:
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2208      	movs	r2, #8
 800313e:	60da      	str	r2, [r3, #12]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_DMA_ClearFlag_TE6>:
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF6);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800315a:	60da      	str	r2, [r3, #12]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_DMA_EnableIT_TC>:
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003172:	4a0c      	ldr	r2, [pc, #48]	@ (80031a4 <LL_DMA_EnableIT_TC+0x3c>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4908      	ldr	r1, [pc, #32]	@ (80031a4 <LL_DMA_EnableIT_TC+0x3c>)
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	440a      	add	r2, r1
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	4611      	mov	r1, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	440a      	add	r2, r1
 8003190:	f043 0310 	orr.w	r3, r3, #16
 8003194:	6013      	str	r3, [r2, #0]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	08008a90 	.word	0x08008a90

080031a8 <LL_TIM_ClearFlag_UPDATE>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f06f 0201 	mvn.w	r2, #1
 80031b6:	611a      	str	r2, [r3, #16]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_USART_IsActiveFlag_RXNE>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_USART_IsActiveFlag_TC>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b40      	cmp	r3, #64	@ 0x40
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_USART_ClearFlag_TC>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003244:	601a      	str	r2, [r3, #0]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_USART_DisableIT_TC>:
{
 8003252:	b480      	push	{r7}
 8003254:	b089      	sub	sp, #36	@ 0x24
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	330c      	adds	r3, #12
 800325e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60bb      	str	r3, [r7, #8]
   return(result);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	330c      	adds	r3, #12
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	61ba      	str	r2, [r7, #24]
 8003278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6979      	ldr	r1, [r7, #20]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	613b      	str	r3, [r7, #16]
   return(result);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e7      	bne.n	800325a <LL_USART_DisableIT_TC+0x8>
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	3724      	adds	r7, #36	@ 0x24
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_USART_IsEnabledIT_RXNE>:
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_USART_EnableDMAReq_RX>:
{
 80032be:	b480      	push	{r7}
 80032c0:	b089      	sub	sp, #36	@ 0x24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3314      	adds	r3, #20
 80032ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3314      	adds	r3, #20
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	61ba      	str	r2, [r7, #24]
 80032e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e6:	6979      	ldr	r1, [r7, #20]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	e841 2300 	strex	r3, r2, [r1]
 80032ee:	613b      	str	r3, [r7, #16]
   return(result);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1e7      	bne.n	80032c6 <LL_USART_EnableDMAReq_RX+0x8>
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	3724      	adds	r7, #36	@ 0x24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_USART_EnableDMAReq_TX>:
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3314      	adds	r3, #20
 8003310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	60bb      	str	r3, [r7, #8]
   return(result);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3314      	adds	r3, #20
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	61ba      	str	r2, [r7, #24]
 800332a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6979      	ldr	r1, [r7, #20]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	613b      	str	r3, [r7, #16]
   return(result);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e7      	bne.n	800330c <LL_USART_EnableDMAReq_TX+0x8>
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3724      	adds	r7, #36	@ 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <LL_USART_DisableDMAReq_TX>:
{
 800334a:	b480      	push	{r7}
 800334c:	b089      	sub	sp, #36	@ 0x24
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3314      	adds	r3, #20
 8003356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3314      	adds	r3, #20
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	61ba      	str	r2, [r7, #24]
 8003370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	613b      	str	r3, [r7, #16]
   return(result);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e7      	bne.n	8003352 <LL_USART_DisableDMAReq_TX+0x8>
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	3724      	adds	r7, #36	@ 0x24
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_USART_DMA_GetRegAddr>:
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  return ((uint32_t) &(USARTx->DR));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_USART_ReceiveData8>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	b2db      	uxtb	r3, r3
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_GPIO_ResetOutputPin>:
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	041a      	lsls	r2, r3, #16
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033e4:	bf00      	nop
 80033e6:	e7fd      	b.n	80033e4 <NMI_Handler+0x4>

080033e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <HardFault_Handler+0x4>

080033f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f4:	bf00      	nop
 80033f6:	e7fd      	b.n	80033f4 <MemManage_Handler+0x4>

080033f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <BusFault_Handler+0x4>

08003400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <UsageFault_Handler+0x4>

08003408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC2(DMA1)) {
 8003444:	4814      	ldr	r0, [pc, #80]	@ (8003498 <DMA1_Stream2_IRQHandler+0x58>)
 8003446:	f7ff fd8d 	bl	8002f64 <LL_DMA_IsActiveFlag_TC2>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d021      	beq.n	8003494 <DMA1_Stream2_IRQHandler+0x54>
			LL_DMA_ClearFlag_TC2(DMA1);
 8003450:	4811      	ldr	r0, [pc, #68]	@ (8003498 <DMA1_Stream2_IRQHandler+0x58>)
 8003452:	f7ff fe1b 	bl	800308c <LL_DMA_ClearFlag_TC2>
			printf("stream2 it\r\n");
 8003456:	4811      	ldr	r0, [pc, #68]	@ (800349c <DMA1_Stream2_IRQHandler+0x5c>)
 8003458:	f003 f8d0 	bl	80065fc <puts>
			readStatusPacket_pos_DMA(dynamixel_position);
 800345c:	4810      	ldr	r0, [pc, #64]	@ (80034a0 <DMA1_Stream2_IRQHandler+0x60>)
 800345e:	f7fe f89d 	bl	800159c <readStatusPacket_pos_DMA>
//			readStatusPacket_PING(dynamixel_position);
//	        readStatusPacket_pos_vel_DMA(dynamixel_position, dynamixel_velocity);
//	        readStatusPacket_pos_vel_cur_DMA(dynamixel_position, dynamixel_velocity, dynamixel_current);
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8003462:	2102      	movs	r1, #2
 8003464:	480c      	ldr	r0, [pc, #48]	@ (8003498 <DMA1_Stream2_IRQHandler+0x58>)
 8003466:	f7ff fcd9 	bl	8002e1c <LL_DMA_DisableStream>
			Packet_Return -= 1;
 800346a:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <DMA1_Stream2_IRQHandler+0x64>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	3b01      	subs	r3, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <DMA1_Stream2_IRQHandler+0x64>)
 8003474:	701a      	strb	r2, [r3, #0]
			if(Packet_Return == 0) {
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <DMA1_Stream2_IRQHandler+0x64>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <DMA1_Stream2_IRQHandler+0x4c>
				Is_dynamixel_GetData = 1;
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <DMA1_Stream2_IRQHandler+0x68>)
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
				dynamixel_Ready = 1;
 8003484:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <DMA1_Stream2_IRQHandler+0x6c>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800348a:	e003      	b.n	8003494 <DMA1_Stream2_IRQHandler+0x54>
			    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 800348c:	2102      	movs	r1, #2
 800348e:	4802      	ldr	r0, [pc, #8]	@ (8003498 <DMA1_Stream2_IRQHandler+0x58>)
 8003490:	f7ff fca4 	bl	8002ddc <LL_DMA_EnableStream>
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40026000 	.word	0x40026000
 800349c:	08008a00 	.word	0x08008a00
 80034a0:	200004c0 	.word	0x200004c0
 80034a4:	20000001 	.word	0x20000001
 80034a8:	2000050c 	.word	0x2000050c
 80034ac:	20000000 	.word	0x20000000

080034b0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == 1) {
 80034b4:	480c      	ldr	r0, [pc, #48]	@ (80034e8 <DMA1_Stream4_IRQHandler+0x38>)
 80034b6:	f7ff fd69 	bl	8002f8c <LL_DMA_IsActiveFlag_TC4>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d111      	bne.n	80034e4 <DMA1_Stream4_IRQHandler+0x34>
		    printf("DMA TX Complete\r\n");
 80034c0:	480a      	ldr	r0, [pc, #40]	@ (80034ec <DMA1_Stream4_IRQHandler+0x3c>)
 80034c2:	f003 f89b 	bl	80065fc <puts>
			LL_DMA_ClearFlag_TC4(DMA1);
 80034c6:	4808      	ldr	r0, [pc, #32]	@ (80034e8 <DMA1_Stream4_IRQHandler+0x38>)
 80034c8:	f7ff fdee 	bl	80030a8 <LL_DMA_ClearFlag_TC4>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 80034cc:	2104      	movs	r1, #4
 80034ce:	4806      	ldr	r0, [pc, #24]	@ (80034e8 <DMA1_Stream4_IRQHandler+0x38>)
 80034d0:	f7ff fca4 	bl	8002e1c <LL_DMA_DisableStream>
			LL_USART_DisableDMAReq_TX(UART4);
 80034d4:	4806      	ldr	r0, [pc, #24]	@ (80034f0 <DMA1_Stream4_IRQHandler+0x40>)
 80034d6:	f7ff ff38 	bl	800334a <LL_USART_DisableDMAReq_TX>
			uart4_dma_rx_start();
 80034da:	f000 f9c3 	bl	8003864 <uart4_dma_rx_start>
			dynamixel_Ready = 1;
 80034de:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <DMA1_Stream4_IRQHandler+0x44>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40026000 	.word	0x40026000
 80034ec:	08008a0c 	.word	0x08008a0c
 80034f0:	40004c00 	.word	0x40004c00
 80034f4:	20000000 	.word	0x20000000

080034f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1) == 1) {
 80034fc:	4807      	ldr	r0, [pc, #28]	@ (800351c <DMA1_Stream5_IRQHandler+0x24>)
 80034fe:	f7ff fd58 	bl	8002fb2 <LL_DMA_IsActiveFlag_TC5>
 8003502:	4603      	mov	r3, r0
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <DMA1_Stream5_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC5(DMA1);
 8003508:	4804      	ldr	r0, [pc, #16]	@ (800351c <DMA1_Stream5_IRQHandler+0x24>)
 800350a:	f7ff fdda 	bl	80030c2 <LL_DMA_ClearFlag_TC5>
			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_5);
 800350e:	2105      	movs	r1, #5
 8003510:	4802      	ldr	r0, [pc, #8]	@ (800351c <DMA1_Stream5_IRQHandler+0x24>)
 8003512:	f7ff fc83 	bl	8002e1c <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40026000 	.word	0x40026000

08003520 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1) {
 8003524:	4807      	ldr	r0, [pc, #28]	@ (8003544 <DMA1_Stream6_IRQHandler+0x24>)
 8003526:	f7ff fd58 	bl	8002fda <LL_DMA_IsActiveFlag_TC6>
 800352a:	4603      	mov	r3, r0
 800352c:	2b01      	cmp	r3, #1
 800352e:	d106      	bne.n	800353e <DMA1_Stream6_IRQHandler+0x1e>
			LL_DMA_ClearFlag_TC6(DMA1);
 8003530:	4804      	ldr	r0, [pc, #16]	@ (8003544 <DMA1_Stream6_IRQHandler+0x24>)
 8003532:	f7ff fdd4 	bl	80030de <LL_DMA_ClearFlag_TC6>

			LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_6);
 8003536:	2106      	movs	r1, #6
 8003538:	4802      	ldr	r0, [pc, #8]	@ (8003544 <DMA1_Stream6_IRQHandler+0x24>)
 800353a:	f7ff fc6f 	bl	8002e1c <LL_DMA_DisableStream>
		}
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40026000 	.word	0x40026000

08003548 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 800354c:	4806      	ldr	r0, [pc, #24]	@ (8003568 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800354e:	f7ff fe39 	bl	80031c4 <LL_TIM_IsActiveFlag_UPDATE>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <TIM1_UP_TIM10_IRQHandler+0x1c>
			LL_TIM_ClearFlag_UPDATE(TIM1);
 8003558:	4803      	ldr	r0, [pc, #12]	@ (8003568 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800355a:	f7ff fe25 	bl	80031a8 <LL_TIM_ClearFlag_UPDATE>
			start_trans_mx = 1;
 800355e:	4b03      	ldr	r3, [pc, #12]	@ (800356c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40010000 	.word	0x40010000
 800356c:	20000530 	.word	0x20000530

08003570 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(USART3) && LL_USART_IsEnabledIT_RXNE(USART3))
 8003574:	481d      	ldr	r0, [pc, #116]	@ (80035ec <USART3_IRQHandler+0x7c>)
 8003576:	f7ff fe38 	bl	80031ea <LL_USART_IsActiveFlag_RXNE>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d033      	beq.n	80035e8 <USART3_IRQHandler+0x78>
 8003580:	481a      	ldr	r0, [pc, #104]	@ (80035ec <USART3_IRQHandler+0x7c>)
 8003582:	f7ff fe89 	bl	8003298 <LL_USART_IsEnabledIT_RXNE>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d02d      	beq.n	80035e8 <USART3_IRQHandler+0x78>
	{
		rx_data = LL_USART_ReceiveData8(USART3);
 800358c:	4817      	ldr	r0, [pc, #92]	@ (80035ec <USART3_IRQHandler+0x7c>)
 800358e:	f7ff ff0b 	bl	80033a8 <LL_USART_ReceiveData8>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	4b16      	ldr	r3, [pc, #88]	@ (80035f0 <USART3_IRQHandler+0x80>)
 8003598:	701a      	strb	r2, [r3, #0]

		// 檢查是否資料結束（這裡用 ! 當作結尾）
		if (rx_data == '!' || rx_index >= RX_BUFFER_SIZE - 1)
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <USART3_IRQHandler+0x80>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b21      	cmp	r3, #33	@ 0x21
 80035a2:	d006      	beq.n	80035b2 <USART3_IRQHandler+0x42>
 80035a4:	4b13      	ldr	r3, [pc, #76]	@ (80035f4 <USART3_IRQHandler+0x84>)
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f240 32e6 	movw	r2, #998	@ 0x3e6
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d90d      	bls.n	80035ce <USART3_IRQHandler+0x5e>
		{
		    rx_buffer[rx_index] = '\0';  // 加上結尾字元
 80035b2:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <USART3_IRQHandler+0x84>)
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <USART3_IRQHandler+0x88>)
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]
		    rx_index = 0;
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <USART3_IRQHandler+0x84>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	801a      	strh	r2, [r3, #0]
		    data_ready = 1;  // 設定資料完成旗標
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <USART3_IRQHandler+0x8c>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
		{
		    rx_buffer[rx_index++] = rx_data;
		}
	}
  /* USER CODE END USART3_IRQn 1 */
}
 80035cc:	e00c      	b.n	80035e8 <USART3_IRQHandler+0x78>
		    rx_buffer[rx_index++] = rx_data;
 80035ce:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <USART3_IRQHandler+0x84>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	b291      	uxth	r1, r2
 80035d8:	4a06      	ldr	r2, [pc, #24]	@ (80035f4 <USART3_IRQHandler+0x84>)
 80035da:	8011      	strh	r1, [r2, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <USART3_IRQHandler+0x80>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2d9      	uxtb	r1, r3
 80035e4:	4b04      	ldr	r3, [pc, #16]	@ (80035f8 <USART3_IRQHandler+0x88>)
 80035e6:	5499      	strb	r1, [r3, r2]
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40004800 	.word	0x40004800
 80035f0:	20000531 	.word	0x20000531
 80035f4:	20000532 	.word	0x20000532
 80035f8:	20000534 	.word	0x20000534
 80035fc:	2000091c 	.word	0x2000091c

08003600 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	printf("uart4 it\r\n");
 8003604:	4812      	ldr	r0, [pc, #72]	@ (8003650 <UART4_IRQHandler+0x50>)
 8003606:	f002 fff9 	bl	80065fc <puts>
	LL_mDelay(100);
 800360a:	2064      	movs	r0, #100	@ 0x64
 800360c:	f002 f884 	bl	8005718 <LL_mDelay>
	if(LL_USART_IsActiveFlag_TC(UART4) == 1) {
 8003610:	4810      	ldr	r0, [pc, #64]	@ (8003654 <UART4_IRQHandler+0x54>)
 8003612:	f7ff fdfd 	bl	8003210 <LL_USART_IsActiveFlag_TC>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	d117      	bne.n	800364c <UART4_IRQHandler+0x4c>
		printf("TX complete, switching to RX mode\r\n");
 800361c:	480e      	ldr	r0, [pc, #56]	@ (8003658 <UART4_IRQHandler+0x58>)
 800361e:	f002 ffed 	bl	80065fc <puts>
		LL_USART_ClearFlag_TC(UART4);
 8003622:	480c      	ldr	r0, [pc, #48]	@ (8003654 <UART4_IRQHandler+0x54>)
 8003624:	f7ff fe07 	bl	8003236 <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(UART4);  // 避免反覆進中斷
 8003628:	480a      	ldr	r0, [pc, #40]	@ (8003654 <UART4_IRQHandler+0x54>)
 800362a:	f7ff fe12 	bl	8003252 <LL_USART_DisableIT_TC>
	#if USE_THREE_STATE_GATE == 1
		LL_mDelay(1);  // 多數 buffer 切換需要時間
 800362e:	2001      	movs	r0, #1
 8003630:	f002 f872 	bl	8005718 <LL_mDelay>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8003634:	2110      	movs	r1, #16
 8003636:	4809      	ldr	r0, [pc, #36]	@ (800365c <UART4_IRQHandler+0x5c>)
 8003638:	f7ff fec3 	bl	80033c2 <LL_GPIO_ResetOutputPin>
	#else
	    LL_USART_SetTransferDirection(UART4, LL_USART_DIRECTION_RX); //change UART direction
	#endif
		if(Packet_Return == 0) {
 800363c:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <UART4_IRQHandler+0x60>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <UART4_IRQHandler+0x4c>
			dynamixel_Ready = 1;
 8003644:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <UART4_IRQHandler+0x64>)
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
			return;
 800364a:	bf00      	nop
			}
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	08008a20 	.word	0x08008a20
 8003654:	40004c00 	.word	0x40004c00
 8003658:	08008a2c 	.word	0x08008a2c
 800365c:	40020000 	.word	0x40020000
 8003660:	20000001 	.word	0x20000001
 8003664:	20000000 	.word	0x20000000

08003668 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */
	if (LL_USART_IsActiveFlag_RXNE(UART5) && LL_USART_IsEnabledIT_RXNE(UART5)) {
 800366e:	4815      	ldr	r0, [pc, #84]	@ (80036c4 <UART5_IRQHandler+0x5c>)
 8003670:	f7ff fdbb 	bl	80031ea <LL_USART_IsActiveFlag_RXNE>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d015      	beq.n	80036a6 <UART5_IRQHandler+0x3e>
 800367a:	4812      	ldr	r0, [pc, #72]	@ (80036c4 <UART5_IRQHandler+0x5c>)
 800367c:	f7ff fe0c 	bl	8003298 <LL_USART_IsEnabledIT_RXNE>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00f      	beq.n	80036a6 <UART5_IRQHandler+0x3e>
	    uint8_t byte = LL_USART_ReceiveData8(UART5);
 8003686:	480f      	ldr	r0, [pc, #60]	@ (80036c4 <UART5_IRQHandler+0x5c>)
 8003688:	f7ff fe8e 	bl	80033a8 <LL_USART_ReceiveData8>
 800368c:	4603      	mov	r3, r0
 800368e:	71fb      	strb	r3, [r7, #7]
	    uart5_rx_buffer[uart5_rx_index++] = byte;
 8003690:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <UART5_IRQHandler+0x60>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	b2d1      	uxtb	r1, r2
 800369a:	4a0b      	ldr	r2, [pc, #44]	@ (80036c8 <UART5_IRQHandler+0x60>)
 800369c:	7011      	strb	r1, [r2, #0]
 800369e:	4619      	mov	r1, r3
 80036a0:	4a0a      	ldr	r2, [pc, #40]	@ (80036cc <UART5_IRQHandler+0x64>)
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	5453      	strb	r3, [r2, r1]
	}
	if (uart5_rx_index >= PACKET_SIZE) {
 80036a6:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <UART5_IRQHandler+0x60>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d905      	bls.n	80036bc <UART5_IRQHandler+0x54>
	   uart5_rx_index = 0;
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <UART5_IRQHandler+0x60>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
	   uart5_packet_ready = 1;
 80036b6:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <UART5_IRQHandler+0x68>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART5_IRQn 1 */
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40005000 	.word	0x40005000
 80036c8:	20000929 	.word	0x20000929
 80036cc:	20000920 	.word	0x20000920
 80036d0:	2000092a 	.word	0x2000092a

080036d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC1(DMA2)) {
 80036d8:	4814      	ldr	r0, [pc, #80]	@ (800372c <DMA2_Stream1_IRQHandler+0x58>)
 80036da:	f7ff fc2f 	bl	8002f3c <LL_DMA_IsActiveFlag_TC1>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d021      	beq.n	8003728 <DMA2_Stream1_IRQHandler+0x54>
		LL_DMA_ClearFlag_TC1(DMA2);
 80036e4:	4811      	ldr	r0, [pc, #68]	@ (800372c <DMA2_Stream1_IRQHandler+0x58>)
 80036e6:	f7ff fcc3 	bl	8003070 <LL_DMA_ClearFlag_TC1>
		printf("stream1 it\r\n");
 80036ea:	4811      	ldr	r0, [pc, #68]	@ (8003730 <DMA2_Stream1_IRQHandler+0x5c>)
 80036ec:	f002 ff86 	bl	80065fc <puts>
		readStatusPacket_pos_DMA(dynamixel_position);
 80036f0:	4810      	ldr	r0, [pc, #64]	@ (8003734 <DMA2_Stream1_IRQHandler+0x60>)
 80036f2:	f7fd ff53 	bl	800159c <readStatusPacket_pos_DMA>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 80036f6:	2101      	movs	r1, #1
 80036f8:	480c      	ldr	r0, [pc, #48]	@ (800372c <DMA2_Stream1_IRQHandler+0x58>)
 80036fa:	f7ff fb8f 	bl	8002e1c <LL_DMA_DisableStream>
		Packet_Return -= 1;
 80036fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003738 <DMA2_Stream1_IRQHandler+0x64>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	3b01      	subs	r3, #1
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <DMA2_Stream1_IRQHandler+0x64>)
 8003708:	701a      	strb	r2, [r3, #0]
		if(Packet_Return == 0) {
 800370a:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <DMA2_Stream1_IRQHandler+0x64>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <DMA2_Stream1_IRQHandler+0x4c>
			Is_dynamixel_GetData = 1;
 8003712:	4b0a      	ldr	r3, [pc, #40]	@ (800373c <DMA2_Stream1_IRQHandler+0x68>)
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
			dynamixel_Ready = 1;
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <DMA2_Stream1_IRQHandler+0x6c>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800371e:	e003      	b.n	8003728 <DMA2_Stream1_IRQHandler+0x54>
			LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 8003720:	2101      	movs	r1, #1
 8003722:	4802      	ldr	r0, [pc, #8]	@ (800372c <DMA2_Stream1_IRQHandler+0x58>)
 8003724:	f7ff fb5a 	bl	8002ddc <LL_DMA_EnableStream>
}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40026400 	.word	0x40026400
 8003730:	08008a50 	.word	0x08008a50
 8003734:	200004c0 	.word	0x200004c0
 8003738:	20000001 	.word	0x20000001
 800373c:	2000050c 	.word	0x2000050c
 8003740:	20000000 	.word	0x20000000

08003744 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA2) == 1) {
 8003748:	480c      	ldr	r0, [pc, #48]	@ (800377c <DMA2_Stream6_IRQHandler+0x38>)
 800374a:	f7ff fc46 	bl	8002fda <LL_DMA_IsActiveFlag_TC6>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d111      	bne.n	8003778 <DMA2_Stream6_IRQHandler+0x34>
		printf("DMA TX Complete\r\n");
 8003754:	480a      	ldr	r0, [pc, #40]	@ (8003780 <DMA2_Stream6_IRQHandler+0x3c>)
 8003756:	f002 ff51 	bl	80065fc <puts>
		LL_DMA_ClearFlag_TC6(DMA2);
 800375a:	4808      	ldr	r0, [pc, #32]	@ (800377c <DMA2_Stream6_IRQHandler+0x38>)
 800375c:	f7ff fcbf 	bl	80030de <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 8003760:	2106      	movs	r1, #6
 8003762:	4806      	ldr	r0, [pc, #24]	@ (800377c <DMA2_Stream6_IRQHandler+0x38>)
 8003764:	f7ff fb5a 	bl	8002e1c <LL_DMA_DisableStream>
		LL_USART_DisableDMAReq_TX(USART6);
 8003768:	4806      	ldr	r0, [pc, #24]	@ (8003784 <DMA2_Stream6_IRQHandler+0x40>)
 800376a:	f7ff fdee 	bl	800334a <LL_USART_DisableDMAReq_TX>
		usart6_dma_rx_start();
 800376e:	f000 f901 	bl	8003974 <usart6_dma_rx_start>
		dynamixel_Ready = 1;
 8003772:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <DMA2_Stream6_IRQHandler+0x44>)
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40026400 	.word	0x40026400
 8003780:	08008a0c 	.word	0x08008a0c
 8003784:	40011400 	.word	0x40011400
 8003788:	20000000 	.word	0x20000000

0800378c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	printf("usart6 it\r\n");
 8003790:	480d      	ldr	r0, [pc, #52]	@ (80037c8 <USART6_IRQHandler+0x3c>)
 8003792:	f002 ff33 	bl	80065fc <puts>
//		LL_mDelay(100);
		if(LL_USART_IsActiveFlag_TC(USART6) == 1) {
 8003796:	480d      	ldr	r0, [pc, #52]	@ (80037cc <USART6_IRQHandler+0x40>)
 8003798:	f7ff fd3a 	bl	8003210 <LL_USART_IsActiveFlag_TC>
 800379c:	4603      	mov	r3, r0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d111      	bne.n	80037c6 <USART6_IRQHandler+0x3a>
			    printf("TX complete, switching to RX mode\r\n");
 80037a2:	480b      	ldr	r0, [pc, #44]	@ (80037d0 <USART6_IRQHandler+0x44>)
 80037a4:	f002 ff2a 	bl	80065fc <puts>
			    LL_USART_ClearFlag_TC(USART6);
 80037a8:	4808      	ldr	r0, [pc, #32]	@ (80037cc <USART6_IRQHandler+0x40>)
 80037aa:	f7ff fd44 	bl	8003236 <LL_USART_ClearFlag_TC>
		#if USE_THREE_STATE_GATE == 1
				LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80037ae:	2101      	movs	r1, #1
 80037b0:	4808      	ldr	r0, [pc, #32]	@ (80037d4 <USART6_IRQHandler+0x48>)
 80037b2:	f7ff fe06 	bl	80033c2 <LL_GPIO_ResetOutputPin>
		#else
				LL_USART_SetTransferDirection(USART6, LL_USART_DIRECTION_RX); //change UART direction
		#endif
					if(Packet_Return == 0) {
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <USART6_IRQHandler+0x4c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <USART6_IRQHandler+0x3a>
						dynamixel_Ready = 1;
 80037be:	4b07      	ldr	r3, [pc, #28]	@ (80037dc <USART6_IRQHandler+0x50>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
						return;
 80037c4:	bf00      	nop
		}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	08008a5c 	.word	0x08008a5c
 80037cc:	40011400 	.word	0x40011400
 80037d0:	08008a2c 	.word	0x08008a2c
 80037d4:	40020400 	.word	0x40020400
 80037d8:	20000001 	.word	0x20000001
 80037dc:	20000000 	.word	0x20000000

080037e0 <uart4_dma_tx_start>:

/* USER CODE BEGIN 1 */
void uart4_dma_tx_start(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
    printf("DMA4 started\r\n");
 80037e4:	481a      	ldr	r0, [pc, #104]	@ (8003850 <uart4_dma_tx_start+0x70>)
 80037e6:	f002 ff09 	bl	80065fc <puts>
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_4);
 80037ea:	2104      	movs	r1, #4
 80037ec:	4819      	ldr	r0, [pc, #100]	@ (8003854 <uart4_dma_tx_start+0x74>)
 80037ee:	f7ff fb15 	bl	8002e1c <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_4));
 80037f2:	bf00      	nop
 80037f4:	2104      	movs	r1, #4
 80037f6:	4817      	ldr	r0, [pc, #92]	@ (8003854 <uart4_dma_tx_start+0x74>)
 80037f8:	f7ff fb30 	bl	8002e5c <LL_DMA_IsEnabledStream>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f8      	bne.n	80037f4 <uart4_dma_tx_start+0x14>

    LL_DMA_ClearFlag_TC4(DMA1);
 8003802:	4814      	ldr	r0, [pc, #80]	@ (8003854 <uart4_dma_tx_start+0x74>)
 8003804:	f7ff fc50 	bl	80030a8 <LL_DMA_ClearFlag_TC4>
    LL_DMA_ClearFlag_TE4(DMA1);
 8003808:	4812      	ldr	r0, [pc, #72]	@ (8003854 <uart4_dma_tx_start+0x74>)
 800380a:	f7ff fc92 	bl	8003132 <LL_DMA_ClearFlag_TE4>
    LL_DMA_ClearFlag_HT4(DMA1);
 800380e:	4811      	ldr	r0, [pc, #68]	@ (8003854 <uart4_dma_tx_start+0x74>)
 8003810:	f7ff fc13 	bl	800303a <LL_DMA_ClearFlag_HT4>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)tx_data);
 8003814:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <uart4_dma_tx_start+0x78>)
 8003816:	461a      	mov	r2, r3
 8003818:	2104      	movs	r1, #4
 800381a:	480e      	ldr	r0, [pc, #56]	@ (8003854 <uart4_dma_tx_start+0x74>)
 800381c:	f7ff fb5e 	bl	8002edc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_4, (uint32_t)&UART4->DR);
 8003820:	4a0e      	ldr	r2, [pc, #56]	@ (800385c <uart4_dma_tx_start+0x7c>)
 8003822:	2104      	movs	r1, #4
 8003824:	480b      	ldr	r0, [pc, #44]	@ (8003854 <uart4_dma_tx_start+0x74>)
 8003826:	f7ff fb71 	bl	8002f0c <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_4, sizeof(tx_data));
 800382a:	2209      	movs	r2, #9
 800382c:	2104      	movs	r1, #4
 800382e:	4809      	ldr	r0, [pc, #36]	@ (8003854 <uart4_dma_tx_start+0x74>)
 8003830:	f7ff fb30 	bl	8002e94 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_4);
 8003834:	2104      	movs	r1, #4
 8003836:	4807      	ldr	r0, [pc, #28]	@ (8003854 <uart4_dma_tx_start+0x74>)
 8003838:	f7ff fc96 	bl	8003168 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_4);
 800383c:	2104      	movs	r1, #4
 800383e:	4805      	ldr	r0, [pc, #20]	@ (8003854 <uart4_dma_tx_start+0x74>)
 8003840:	f7ff facc 	bl	8002ddc <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_TX(UART4);
 8003844:	4806      	ldr	r0, [pc, #24]	@ (8003860 <uart4_dma_tx_start+0x80>)
 8003846:	f7ff fd5d 	bl	8003304 <LL_USART_EnableDMAReq_TX>
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	08008a68 	.word	0x08008a68
 8003854:	40026000 	.word	0x40026000
 8003858:	200002cc 	.word	0x200002cc
 800385c:	40004c04 	.word	0x40004c04
 8003860:	40004c00 	.word	0x40004c00

08003864 <uart4_dma_rx_start>:
void uart4_dma_rx_start(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_2);
 8003868:	2102      	movs	r1, #2
 800386a:	481c      	ldr	r0, [pc, #112]	@ (80038dc <uart4_dma_rx_start+0x78>)
 800386c:	f7ff fad6 	bl	8002e1c <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA1, LL_DMA_STREAM_2));
 8003870:	bf00      	nop
 8003872:	2102      	movs	r1, #2
 8003874:	4819      	ldr	r0, [pc, #100]	@ (80038dc <uart4_dma_rx_start+0x78>)
 8003876:	f7ff faf1 	bl	8002e5c <LL_DMA_IsEnabledStream>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f8      	bne.n	8003872 <uart4_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC2(DMA1);
 8003880:	4816      	ldr	r0, [pc, #88]	@ (80038dc <uart4_dma_rx_start+0x78>)
 8003882:	f7ff fc03 	bl	800308c <LL_DMA_ClearFlag_TC2>
    LL_DMA_ClearFlag_TE2(DMA1);
 8003886:	4815      	ldr	r0, [pc, #84]	@ (80038dc <uart4_dma_rx_start+0x78>)
 8003888:	f7ff fc45 	bl	8003116 <LL_DMA_ClearFlag_TE2>
    LL_DMA_ClearFlag_HT2(DMA2);
 800388c:	4814      	ldr	r0, [pc, #80]	@ (80038e0 <uart4_dma_rx_start+0x7c>)
 800388e:	f7ff fbc6 	bl	800301e <LL_DMA_ClearFlag_HT2>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_2, (uint32_t)Status_Packet_Array);
 8003892:	4b14      	ldr	r3, [pc, #80]	@ (80038e4 <uart4_dma_rx_start+0x80>)
 8003894:	461a      	mov	r2, r3
 8003896:	2102      	movs	r1, #2
 8003898:	4810      	ldr	r0, [pc, #64]	@ (80038dc <uart4_dma_rx_start+0x78>)
 800389a:	f7ff fb1f 	bl	8002edc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_2, LL_USART_DMA_GetRegAddr(UART4));
 800389e:	4812      	ldr	r0, [pc, #72]	@ (80038e8 <uart4_dma_rx_start+0x84>)
 80038a0:	f7ff fd76 	bl	8003390 <LL_USART_DMA_GetRegAddr>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	2102      	movs	r1, #2
 80038aa:	480c      	ldr	r0, [pc, #48]	@ (80038dc <uart4_dma_rx_start+0x78>)
 80038ac:	f7ff fb2e 	bl	8002f0c <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_2, Status_packet_length + 4);
 80038b0:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <uart4_dma_rx_start+0x88>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3304      	adds	r3, #4
 80038b6:	461a      	mov	r2, r3
 80038b8:	2102      	movs	r1, #2
 80038ba:	4808      	ldr	r0, [pc, #32]	@ (80038dc <uart4_dma_rx_start+0x78>)
 80038bc:	f7ff faea 	bl	8002e94 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_2);
 80038c0:	2102      	movs	r1, #2
 80038c2:	4806      	ldr	r0, [pc, #24]	@ (80038dc <uart4_dma_rx_start+0x78>)
 80038c4:	f7ff fc50 	bl	8003168 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_2);
 80038c8:	2102      	movs	r1, #2
 80038ca:	4804      	ldr	r0, [pc, #16]	@ (80038dc <uart4_dma_rx_start+0x78>)
 80038cc:	f7ff fa86 	bl	8002ddc <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(UART4);
 80038d0:	4805      	ldr	r0, [pc, #20]	@ (80038e8 <uart4_dma_rx_start+0x84>)
 80038d2:	f7ff fcf4 	bl	80032be <LL_USART_EnableDMAReq_RX>
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40026000 	.word	0x40026000
 80038e0:	40026400 	.word	0x40026400
 80038e4:	20000514 	.word	0x20000514
 80038e8:	40004c00 	.word	0x40004c00
 80038ec:	20000510 	.word	0x20000510

080038f0 <usart6_dma_tx_start>:
void usart6_dma_tx_start(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
    printf("DMA6 started\r\n");
 80038f4:	481a      	ldr	r0, [pc, #104]	@ (8003960 <usart6_dma_tx_start+0x70>)
 80038f6:	f002 fe81 	bl	80065fc <puts>
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_6);
 80038fa:	2106      	movs	r1, #6
 80038fc:	4819      	ldr	r0, [pc, #100]	@ (8003964 <usart6_dma_tx_start+0x74>)
 80038fe:	f7ff fa8d 	bl	8002e1c <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_6));
 8003902:	bf00      	nop
 8003904:	2106      	movs	r1, #6
 8003906:	4817      	ldr	r0, [pc, #92]	@ (8003964 <usart6_dma_tx_start+0x74>)
 8003908:	f7ff faa8 	bl	8002e5c <LL_DMA_IsEnabledStream>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f8      	bne.n	8003904 <usart6_dma_tx_start+0x14>

    LL_DMA_ClearFlag_TC6(DMA2);
 8003912:	4814      	ldr	r0, [pc, #80]	@ (8003964 <usart6_dma_tx_start+0x74>)
 8003914:	f7ff fbe3 	bl	80030de <LL_DMA_ClearFlag_TC6>
    LL_DMA_ClearFlag_TE6(DMA2);
 8003918:	4812      	ldr	r0, [pc, #72]	@ (8003964 <usart6_dma_tx_start+0x74>)
 800391a:	f7ff fc17 	bl	800314c <LL_DMA_ClearFlag_TE6>
    LL_DMA_ClearFlag_HT6(DMA2);
 800391e:	4811      	ldr	r0, [pc, #68]	@ (8003964 <usart6_dma_tx_start+0x74>)
 8003920:	f7ff fb98 	bl	8003054 <LL_DMA_ClearFlag_HT6>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)tx_data);
 8003924:	4b10      	ldr	r3, [pc, #64]	@ (8003968 <usart6_dma_tx_start+0x78>)
 8003926:	461a      	mov	r2, r3
 8003928:	2106      	movs	r1, #6
 800392a:	480e      	ldr	r0, [pc, #56]	@ (8003964 <usart6_dma_tx_start+0x74>)
 800392c:	f7ff fad6 	bl	8002edc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_6, (uint32_t)&USART6->DR);
 8003930:	4a0e      	ldr	r2, [pc, #56]	@ (800396c <usart6_dma_tx_start+0x7c>)
 8003932:	2106      	movs	r1, #6
 8003934:	480b      	ldr	r0, [pc, #44]	@ (8003964 <usart6_dma_tx_start+0x74>)
 8003936:	f7ff fae9 	bl	8002f0c <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_6, sizeof(tx_data));
 800393a:	2209      	movs	r2, #9
 800393c:	2106      	movs	r1, #6
 800393e:	4809      	ldr	r0, [pc, #36]	@ (8003964 <usart6_dma_tx_start+0x74>)
 8003940:	f7ff faa8 	bl	8002e94 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_6);
 8003944:	2106      	movs	r1, #6
 8003946:	4807      	ldr	r0, [pc, #28]	@ (8003964 <usart6_dma_tx_start+0x74>)
 8003948:	f7ff fc0e 	bl	8003168 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_6);
 800394c:	2106      	movs	r1, #6
 800394e:	4805      	ldr	r0, [pc, #20]	@ (8003964 <usart6_dma_tx_start+0x74>)
 8003950:	f7ff fa44 	bl	8002ddc <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_TX(USART6);
 8003954:	4806      	ldr	r0, [pc, #24]	@ (8003970 <usart6_dma_tx_start+0x80>)
 8003956:	f7ff fcd5 	bl	8003304 <LL_USART_EnableDMAReq_TX>
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	08008a78 	.word	0x08008a78
 8003964:	40026400 	.word	0x40026400
 8003968:	200002cc 	.word	0x200002cc
 800396c:	40011404 	.word	0x40011404
 8003970:	40011400 	.word	0x40011400

08003974 <usart6_dma_rx_start>:
void usart6_dma_rx_start(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_1);
 8003978:	2101      	movs	r1, #1
 800397a:	481c      	ldr	r0, [pc, #112]	@ (80039ec <usart6_dma_rx_start+0x78>)
 800397c:	f7ff fa4e 	bl	8002e1c <LL_DMA_DisableStream>
    while (LL_DMA_IsEnabledStream(DMA2, LL_DMA_STREAM_1));
 8003980:	bf00      	nop
 8003982:	2101      	movs	r1, #1
 8003984:	4819      	ldr	r0, [pc, #100]	@ (80039ec <usart6_dma_rx_start+0x78>)
 8003986:	f7ff fa69 	bl	8002e5c <LL_DMA_IsEnabledStream>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f8      	bne.n	8003982 <usart6_dma_rx_start+0xe>

    LL_DMA_ClearFlag_TC1(DMA2);
 8003990:	4816      	ldr	r0, [pc, #88]	@ (80039ec <usart6_dma_rx_start+0x78>)
 8003992:	f7ff fb6d 	bl	8003070 <LL_DMA_ClearFlag_TC1>
    LL_DMA_ClearFlag_TE1(DMA2);
 8003996:	4815      	ldr	r0, [pc, #84]	@ (80039ec <usart6_dma_rx_start+0x78>)
 8003998:	f7ff fbaf 	bl	80030fa <LL_DMA_ClearFlag_TE1>
    LL_DMA_ClearFlag_HT1(DMA2);
 800399c:	4813      	ldr	r0, [pc, #76]	@ (80039ec <usart6_dma_rx_start+0x78>)
 800399e:	f7ff fb30 	bl	8003002 <LL_DMA_ClearFlag_HT1>

    LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_1, (uint32_t)Status_Packet_Array);
 80039a2:	4b13      	ldr	r3, [pc, #76]	@ (80039f0 <usart6_dma_rx_start+0x7c>)
 80039a4:	461a      	mov	r2, r3
 80039a6:	2101      	movs	r1, #1
 80039a8:	4810      	ldr	r0, [pc, #64]	@ (80039ec <usart6_dma_rx_start+0x78>)
 80039aa:	f7ff fa97 	bl	8002edc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_1, LL_USART_DMA_GetRegAddr(USART6));
 80039ae:	4811      	ldr	r0, [pc, #68]	@ (80039f4 <usart6_dma_rx_start+0x80>)
 80039b0:	f7ff fcee 	bl	8003390 <LL_USART_DMA_GetRegAddr>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	2101      	movs	r1, #1
 80039ba:	480c      	ldr	r0, [pc, #48]	@ (80039ec <usart6_dma_rx_start+0x78>)
 80039bc:	f7ff faa6 	bl	8002f0c <LL_DMA_SetPeriphAddress>
    LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_1, Status_packet_length + 4);
 80039c0:	4b0d      	ldr	r3, [pc, #52]	@ (80039f8 <usart6_dma_rx_start+0x84>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3304      	adds	r3, #4
 80039c6:	461a      	mov	r2, r3
 80039c8:	2101      	movs	r1, #1
 80039ca:	4808      	ldr	r0, [pc, #32]	@ (80039ec <usart6_dma_rx_start+0x78>)
 80039cc:	f7ff fa62 	bl	8002e94 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_1);
 80039d0:	2101      	movs	r1, #1
 80039d2:	4806      	ldr	r0, [pc, #24]	@ (80039ec <usart6_dma_rx_start+0x78>)
 80039d4:	f7ff fbc8 	bl	8003168 <LL_DMA_EnableIT_TC>
    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_1);
 80039d8:	2101      	movs	r1, #1
 80039da:	4804      	ldr	r0, [pc, #16]	@ (80039ec <usart6_dma_rx_start+0x78>)
 80039dc:	f7ff f9fe 	bl	8002ddc <LL_DMA_EnableStream>
    LL_USART_EnableDMAReq_RX(USART6);
 80039e0:	4804      	ldr	r0, [pc, #16]	@ (80039f4 <usart6_dma_rx_start+0x80>)
 80039e2:	f7ff fc6c 	bl	80032be <LL_USART_EnableDMAReq_RX>
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40026400 	.word	0x40026400
 80039f0:	20000514 	.word	0x20000514
 80039f4:	40011400 	.word	0x40011400
 80039f8:	20000510 	.word	0x20000510

080039fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return 1;
 8003a00:	2301      	movs	r3, #1
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <_kill>:

int _kill(int pid, int sig)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a16:	f002 ffbd 	bl	8006994 <__errno>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2216      	movs	r2, #22
 8003a1e:	601a      	str	r2, [r3, #0]
  return -1;
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <_exit>:

void _exit (int status)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a34:	f04f 31ff 	mov.w	r1, #4294967295
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ffe7 	bl	8003a0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a3e:	bf00      	nop
 8003a40:	e7fd      	b.n	8003a3e <_exit+0x12>

08003a42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e00a      	b.n	8003a6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a54:	f3af 8000 	nop.w
 8003a58:	4601      	mov	r1, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	60ba      	str	r2, [r7, #8]
 8003a60:	b2ca      	uxtb	r2, r1
 8003a62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3301      	adds	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	dbf0      	blt.n	8003a54 <_read+0x12>
  }

  return len;
 8003a72:	687b      	ldr	r3, [r7, #4]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_close>:
  }
  return len;
}

int _close(int file)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aa4:	605a      	str	r2, [r3, #4]
  return 0;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <_isatty>:

int _isatty(int file)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003abc:	2301      	movs	r3, #1
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aec:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <_sbrk+0x5c>)
 8003aee:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <_sbrk+0x60>)
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af8:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <_sbrk+0x64>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b00:	4b11      	ldr	r3, [pc, #68]	@ (8003b48 <_sbrk+0x64>)
 8003b02:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <_sbrk+0x68>)
 8003b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <_sbrk+0x64>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d207      	bcs.n	8003b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b14:	f002 ff3e 	bl	8006994 <__errno>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	220c      	movs	r2, #12
 8003b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	e009      	b.n	8003b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b24:	4b08      	ldr	r3, [pc, #32]	@ (8003b48 <_sbrk+0x64>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b2a:	4b07      	ldr	r3, [pc, #28]	@ (8003b48 <_sbrk+0x64>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	4a05      	ldr	r2, [pc, #20]	@ (8003b48 <_sbrk+0x64>)
 8003b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20020000 	.word	0x20020000
 8003b44:	00000400 	.word	0x00000400
 8003b48:	2000092c 	.word	0x2000092c
 8003b4c:	20000a80 	.word	0x20000a80

08003b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b54:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <SystemInit+0x20>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	4a05      	ldr	r2, [pc, #20]	@ (8003b70 <SystemInit+0x20>)
 8003b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <__NVIC_GetPriorityGrouping>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b78:	4b04      	ldr	r3, [pc, #16]	@ (8003b8c <__NVIC_GetPriorityGrouping+0x18>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	f003 0307 	and.w	r3, r3, #7
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <__NVIC_EnableIRQ>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	db0b      	blt.n	8003bba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	f003 021f 	and.w	r2, r3, #31
 8003ba8:	4907      	ldr	r1, [pc, #28]	@ (8003bc8 <__NVIC_EnableIRQ+0x38>)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <__NVIC_SetPriority>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	db0a      	blt.n	8003bf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	490c      	ldr	r1, [pc, #48]	@ (8003c18 <__NVIC_SetPriority+0x4c>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	440b      	add	r3, r1
 8003bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003bf4:	e00a      	b.n	8003c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	4908      	ldr	r1, [pc, #32]	@ (8003c1c <__NVIC_SetPriority+0x50>)
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	3b04      	subs	r3, #4
 8003c04:	0112      	lsls	r2, r2, #4
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	440b      	add	r3, r1
 8003c0a:	761a      	strb	r2, [r3, #24]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000e100 	.word	0xe000e100
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <NVIC_EncodePriority>:
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	@ 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f1c3 0307 	rsb	r3, r3, #7
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	bf28      	it	cs
 8003c3e:	2304      	movcs	r3, #4
 8003c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d902      	bls.n	8003c50 <NVIC_EncodePriority+0x30>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3b03      	subs	r3, #3
 8003c4e:	e000      	b.n	8003c52 <NVIC_EncodePriority+0x32>
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	401a      	ands	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c68:	f04f 31ff 	mov.w	r1, #4294967295
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	43d9      	mvns	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	4313      	orrs	r3, r2
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3724      	adds	r7, #36	@ 0x24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <LL_APB2_GRP1_EnableClock>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003c90:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003c92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c94:	4907      	ldr	r1, [pc, #28]	@ (8003cb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003c9c:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003c9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <LL_TIM_DisableARRPreload>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	601a      	str	r2, [r3, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_TIM_SetClockSource>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cea:	f023 0307 	bic.w	r3, r3, #7
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_TIM_SetTriggerOutput>:
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	605a      	str	r2, [r3, #4]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_TIM_DisableMasterSlaveMode>:
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f7ff ff93 	bl	8003c88 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003d62:	f7ff ff07 	bl	8003b74 <__NVIC_GetPriorityGrouping>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff57 	bl	8003c20 <NVIC_EncodePriority>
 8003d72:	4603      	mov	r3, r0
 8003d74:	4619      	mov	r1, r3
 8003d76:	2019      	movs	r0, #25
 8003d78:	f7ff ff28 	bl	8003bcc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003d7c:	2019      	movs	r0, #25
 8003d7e:	f7ff ff07 	bl	8003b90 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 29;
 8003d82:	231d      	movs	r3, #29
 8003d84:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 60000;
 8003d8a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003d8e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	480a      	ldr	r0, [pc, #40]	@ (8003dc8 <MX_TIM1_Init+0x80>)
 8003d9e:	f001 f911 	bl	8004fc4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003da2:	4809      	ldr	r0, [pc, #36]	@ (8003dc8 <MX_TIM1_Init+0x80>)
 8003da4:	f7ff ff88 	bl	8003cb8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003da8:	2100      	movs	r1, #0
 8003daa:	4807      	ldr	r0, [pc, #28]	@ (8003dc8 <MX_TIM1_Init+0x80>)
 8003dac:	f7ff ff94 	bl	8003cd8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003db0:	2100      	movs	r1, #0
 8003db2:	4805      	ldr	r0, [pc, #20]	@ (8003dc8 <MX_TIM1_Init+0x80>)
 8003db4:	f7ff ffa5 	bl	8003d02 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003db8:	4803      	ldr	r0, [pc, #12]	@ (8003dc8 <MX_TIM1_Init+0x80>)
 8003dba:	f7ff ffb5 	bl	8003d28 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40010000 	.word	0x40010000

08003dcc <__NVIC_GetPriorityGrouping>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	f003 0307 	and.w	r3, r3, #7
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_EnableIRQ>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db0b      	blt.n	8003e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	4907      	ldr	r1, [pc, #28]	@ (8003e20 <__NVIC_EnableIRQ+0x38>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2001      	movs	r0, #1
 8003e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_SetPriority>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	@ (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	@ (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	@ 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	@ 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <LL_DMA_SetDataTransferDirection>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8003eec:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <LL_DMA_SetDataTransferDirection+0x44>)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4413      	add	r3, r2
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f00:	4908      	ldr	r1, [pc, #32]	@ (8003f24 <LL_DMA_SetDataTransferDirection+0x44>)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	440b      	add	r3, r1
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	440b      	add	r3, r1
 8003f0e:	4619      	mov	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	08008ab0 	.word	0x08008ab0

08003f28 <LL_DMA_SetMode>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003f34:	4a0d      	ldr	r2, [pc, #52]	@ (8003f6c <LL_DMA_SetMode+0x44>)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4413      	add	r3, r2
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8003f48:	4908      	ldr	r1, [pc, #32]	@ (8003f6c <LL_DMA_SetMode+0x44>)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	440b      	add	r3, r1
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4619      	mov	r1, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	440b      	add	r3, r1
 8003f56:	4619      	mov	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	08008ab0 	.word	0x08008ab0

08003f70 <LL_DMA_SetPeriphIncMode>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb4 <LL_DMA_SetPeriphIncMode+0x44>)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003f90:	4908      	ldr	r1, [pc, #32]	@ (8003fb4 <LL_DMA_SetPeriphIncMode+0x44>)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	440b      	add	r3, r1
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	440b      	add	r3, r1
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	08008ab0 	.word	0x08008ab0

08003fb8 <LL_DMA_SetMemoryIncMode>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003ffc <LL_DMA_SetMemoryIncMode+0x44>)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003fd8:	4908      	ldr	r1, [pc, #32]	@ (8003ffc <LL_DMA_SetMemoryIncMode+0x44>)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	440b      	add	r3, r1
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	440b      	add	r3, r1
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	08008ab0 	.word	0x08008ab0

08004000 <LL_DMA_SetPeriphSize>:
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800400c:	4a0d      	ldr	r2, [pc, #52]	@ (8004044 <LL_DMA_SetPeriphSize+0x44>)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4413      	add	r3, r2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004020:	4908      	ldr	r1, [pc, #32]	@ (8004044 <LL_DMA_SetPeriphSize+0x44>)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	440b      	add	r3, r1
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	440b      	add	r3, r1
 800402e:	4619      	mov	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	08008ab0 	.word	0x08008ab0

08004048 <LL_DMA_SetMemorySize>:
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8004054:	4a0d      	ldr	r2, [pc, #52]	@ (800408c <LL_DMA_SetMemorySize+0x44>)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4413      	add	r3, r2
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8004068:	4908      	ldr	r1, [pc, #32]	@ (800408c <LL_DMA_SetMemorySize+0x44>)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	440b      	add	r3, r1
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	4619      	mov	r1, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	440b      	add	r3, r1
 8004076:	4619      	mov	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	08008ab0 	.word	0x08008ab0

08004090 <LL_DMA_SetStreamPriorityLevel>:
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800409c:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4413      	add	r3, r2
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040b0:	4908      	ldr	r1, [pc, #32]	@ (80040d4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	440b      	add	r3, r1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	440b      	add	r3, r1
 80040be:	4619      	mov	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	08008ab0 	.word	0x08008ab0

080040d8 <LL_DMA_SetChannelSelection>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80040e4:	4a0d      	ldr	r2, [pc, #52]	@ (800411c <LL_DMA_SetChannelSelection+0x44>)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4413      	add	r3, r2
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80040f8:	4908      	ldr	r1, [pc, #32]	@ (800411c <LL_DMA_SetChannelSelection+0x44>)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	440b      	add	r3, r1
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	4619      	mov	r1, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	440b      	add	r3, r1
 8004106:	4619      	mov	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	08008ab0 	.word	0x08008ab0

08004120 <LL_DMA_DisableFifoMode>:
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800412a:	4a0c      	ldr	r2, [pc, #48]	@ (800415c <LL_DMA_DisableFifoMode+0x3c>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	4908      	ldr	r1, [pc, #32]	@ (800415c <LL_DMA_DisableFifoMode+0x3c>)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	440a      	add	r2, r1
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	4611      	mov	r1, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	440a      	add	r2, r1
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	6153      	str	r3, [r2, #20]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	08008ab0 	.word	0x08008ab0

08004160 <LL_AHB1_GRP1_EnableClock>:
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004168:	4b08      	ldr	r3, [pc, #32]	@ (800418c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800416a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800416c:	4907      	ldr	r1, [pc, #28]	@ (800418c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4313      	orrs	r3, r2
 8004172:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004174:	4b05      	ldr	r3, [pc, #20]	@ (800418c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4013      	ands	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40023800 	.word	0x40023800

08004190 <LL_APB1_GRP1_EnableClock>:
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004198:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800419a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800419c:	4907      	ldr	r1, [pc, #28]	@ (80041bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <LL_APB1_GRP1_EnableClock+0x2c>)
 80041a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4013      	ands	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40023800 	.word	0x40023800

080041c0 <LL_APB2_GRP1_EnableClock>:
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80041c8:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80041ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041cc:	4907      	ldr	r1, [pc, #28]	@ (80041ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <LL_APB2_GRP1_EnableClock+0x2c>)
 80041d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4013      	ands	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40023800 	.word	0x40023800

080041f0 <LL_USART_Enable>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_USART_ConfigAsyncMode>:
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	615a      	str	r2, [r3, #20]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08e      	sub	sp, #56	@ 0x38
 8004240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004242:	f107 031c 	add.w	r3, r7, #28
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	611a      	str	r2, [r3, #16]
 8004252:	615a      	str	r2, [r3, #20]
 8004254:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]
 8004264:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8004266:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800426a:	f7ff ff91 	bl	8004190 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800426e:	2001      	movs	r0, #1
 8004270:	f7ff ff76 	bl	8004160 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  PA1   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8004274:	2303      	movs	r3, #3
 8004276:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004278:	2302      	movs	r3, #2
 800427a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800427c:	2303      	movs	r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004280:	2300      	movs	r3, #0
 8004282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004288:	2308      	movs	r3, #8
 800428a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4846      	ldr	r0, [pc, #280]	@ (80043ac <MX_UART4_Init+0x170>)
 8004292:	f000 fc63 	bl	8004b5c <LL_GPIO_Init>

  /* UART4 DMA Init */

  /* UART4_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8004296:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800429a:	2102      	movs	r1, #2
 800429c:	4844      	ldr	r0, [pc, #272]	@ (80043b0 <MX_UART4_Init+0x174>)
 800429e:	f7ff ff1b 	bl	80040d8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2102      	movs	r1, #2
 80042a6:	4842      	ldr	r0, [pc, #264]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042a8:	f7ff fe1a 	bl	8003ee0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 80042ac:	2200      	movs	r2, #0
 80042ae:	2102      	movs	r1, #2
 80042b0:	483f      	ldr	r0, [pc, #252]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042b2:	f7ff feed 	bl	8004090 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2102      	movs	r1, #2
 80042ba:	483d      	ldr	r0, [pc, #244]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042bc:	f7ff fe34 	bl	8003f28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 80042c0:	2200      	movs	r2, #0
 80042c2:	2102      	movs	r1, #2
 80042c4:	483a      	ldr	r0, [pc, #232]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042c6:	f7ff fe53 	bl	8003f70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 80042ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042ce:	2102      	movs	r1, #2
 80042d0:	4837      	ldr	r0, [pc, #220]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042d2:	f7ff fe71 	bl	8003fb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 80042d6:	2200      	movs	r2, #0
 80042d8:	2102      	movs	r1, #2
 80042da:	4835      	ldr	r0, [pc, #212]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042dc:	f7ff fe90 	bl	8004000 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 80042e0:	2200      	movs	r2, #0
 80042e2:	2102      	movs	r1, #2
 80042e4:	4832      	ldr	r0, [pc, #200]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042e6:	f7ff feaf 	bl	8004048 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_2);
 80042ea:	2102      	movs	r1, #2
 80042ec:	4830      	ldr	r0, [pc, #192]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042ee:	f7ff ff17 	bl	8004120 <LL_DMA_DisableFifoMode>

  /* UART4_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_4, LL_DMA_CHANNEL_4);
 80042f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80042f6:	2104      	movs	r1, #4
 80042f8:	482d      	ldr	r0, [pc, #180]	@ (80043b0 <MX_UART4_Init+0x174>)
 80042fa:	f7ff feed 	bl	80040d8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80042fe:	2240      	movs	r2, #64	@ 0x40
 8004300:	2104      	movs	r1, #4
 8004302:	482b      	ldr	r0, [pc, #172]	@ (80043b0 <MX_UART4_Init+0x174>)
 8004304:	f7ff fdec 	bl	8003ee0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8004308:	2200      	movs	r2, #0
 800430a:	2104      	movs	r1, #4
 800430c:	4828      	ldr	r0, [pc, #160]	@ (80043b0 <MX_UART4_Init+0x174>)
 800430e:	f7ff febf 	bl	8004090 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 8004312:	2200      	movs	r2, #0
 8004314:	2104      	movs	r1, #4
 8004316:	4826      	ldr	r0, [pc, #152]	@ (80043b0 <MX_UART4_Init+0x174>)
 8004318:	f7ff fe06 	bl	8003f28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 800431c:	2200      	movs	r2, #0
 800431e:	2104      	movs	r1, #4
 8004320:	4823      	ldr	r0, [pc, #140]	@ (80043b0 <MX_UART4_Init+0x174>)
 8004322:	f7ff fe25 	bl	8003f70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8004326:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800432a:	2104      	movs	r1, #4
 800432c:	4820      	ldr	r0, [pc, #128]	@ (80043b0 <MX_UART4_Init+0x174>)
 800432e:	f7ff fe43 	bl	8003fb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 8004332:	2200      	movs	r2, #0
 8004334:	2104      	movs	r1, #4
 8004336:	481e      	ldr	r0, [pc, #120]	@ (80043b0 <MX_UART4_Init+0x174>)
 8004338:	f7ff fe62 	bl	8004000 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 800433c:	2200      	movs	r2, #0
 800433e:	2104      	movs	r1, #4
 8004340:	481b      	ldr	r0, [pc, #108]	@ (80043b0 <MX_UART4_Init+0x174>)
 8004342:	f7ff fe81 	bl	8004048 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 8004346:	2104      	movs	r1, #4
 8004348:	4819      	ldr	r0, [pc, #100]	@ (80043b0 <MX_UART4_Init+0x174>)
 800434a:	f7ff fee9 	bl	8004120 <LL_DMA_DisableFifoMode>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800434e:	f7ff fd3d 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 8004352:	4603      	mov	r3, r0
 8004354:	2200      	movs	r2, #0
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fd8d 	bl	8003e78 <NVIC_EncodePriority>
 800435e:	4603      	mov	r3, r0
 8004360:	4619      	mov	r1, r3
 8004362:	2034      	movs	r0, #52	@ 0x34
 8004364:	f7ff fd5e 	bl	8003e24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8004368:	2034      	movs	r0, #52	@ 0x34
 800436a:	f7ff fd3d 	bl	8003de8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 800436e:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <MX_UART4_Init+0x178>)
 8004370:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004372:	2300      	movs	r3, #0
 8004374:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004376:	2300      	movs	r3, #0
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800437a:	2300      	movs	r3, #0
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800437e:	230c      	movs	r3, #12
 8004380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004382:	2300      	movs	r3, #0
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004386:	2300      	movs	r3, #0
 8004388:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800438a:	f107 031c 	add.w	r3, r7, #28
 800438e:	4619      	mov	r1, r3
 8004390:	4809      	ldr	r0, [pc, #36]	@ (80043b8 <MX_UART4_Init+0x17c>)
 8004392:	f001 f919 	bl	80055c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8004396:	4808      	ldr	r0, [pc, #32]	@ (80043b8 <MX_UART4_Init+0x17c>)
 8004398:	f7ff ff3a 	bl	8004210 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800439c:	4806      	ldr	r0, [pc, #24]	@ (80043b8 <MX_UART4_Init+0x17c>)
 800439e:	f7ff ff27 	bl	80041f0 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80043a2:	bf00      	nop
 80043a4:	3738      	adds	r7, #56	@ 0x38
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40020000 	.word	0x40020000
 80043b0:	40026000 	.word	0x40026000
 80043b4:	000f4240 	.word	0x000f4240
 80043b8:	40004c00 	.word	0x40004c00

080043bc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08e      	sub	sp, #56	@ 0x38
 80043c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80043c2:	f107 031c 	add.w	r3, r7, #28
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	615a      	str	r2, [r3, #20]
 80043d4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	611a      	str	r2, [r3, #16]
 80043e4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80043e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80043ea:	f7ff fed1 	bl	8004190 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80043ee:	2004      	movs	r0, #4
 80043f0:	f7ff feb6 	bl	8004160 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80043f4:	2008      	movs	r0, #8
 80043f6:	f7ff feb3 	bl	8004160 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80043fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004400:	2302      	movs	r3, #2
 8004402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004404:	2303      	movs	r3, #3
 8004406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004410:	2308      	movs	r3, #8
 8004412:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	4619      	mov	r1, r3
 8004418:	4821      	ldr	r0, [pc, #132]	@ (80044a0 <MX_UART5_Init+0xe4>)
 800441a:	f000 fb9f 	bl	8004b5c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800441e:	2304      	movs	r3, #4
 8004420:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004422:	2302      	movs	r3, #2
 8004424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004426:	2303      	movs	r3, #3
 8004428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004432:	2308      	movs	r3, #8
 8004434:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004436:	1d3b      	adds	r3, r7, #4
 8004438:	4619      	mov	r1, r3
 800443a:	481a      	ldr	r0, [pc, #104]	@ (80044a4 <MX_UART5_Init+0xe8>)
 800443c:	f000 fb8e 	bl	8004b5c <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004440:	f7ff fcc4 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 8004444:	4603      	mov	r3, r0
 8004446:	2200      	movs	r2, #0
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fd14 	bl	8003e78 <NVIC_EncodePriority>
 8004450:	4603      	mov	r3, r0
 8004452:	4619      	mov	r1, r3
 8004454:	2035      	movs	r0, #53	@ 0x35
 8004456:	f7ff fce5 	bl	8003e24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800445a:	2035      	movs	r0, #53	@ 0x35
 800445c:	f7ff fcc4 	bl	8003de8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004460:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8004464:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800446e:	2300      	movs	r3, #0
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004472:	230c      	movs	r3, #12
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004476:	2300      	movs	r3, #0
 8004478:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800447a:	2300      	movs	r3, #0
 800447c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800447e:	f107 031c 	add.w	r3, r7, #28
 8004482:	4619      	mov	r1, r3
 8004484:	4808      	ldr	r0, [pc, #32]	@ (80044a8 <MX_UART5_Init+0xec>)
 8004486:	f001 f89f 	bl	80055c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800448a:	4807      	ldr	r0, [pc, #28]	@ (80044a8 <MX_UART5_Init+0xec>)
 800448c:	f7ff fec0 	bl	8004210 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8004490:	4805      	ldr	r0, [pc, #20]	@ (80044a8 <MX_UART5_Init+0xec>)
 8004492:	f7ff fead 	bl	80041f0 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004496:	bf00      	nop
 8004498:	3738      	adds	r7, #56	@ 0x38
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40020c00 	.word	0x40020c00
 80044a8:	40005000 	.word	0x40005000

080044ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08e      	sub	sp, #56	@ 0x38
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80044b2:	f107 031c 	add.w	r3, r7, #28
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	611a      	str	r2, [r3, #16]
 80044c2:	615a      	str	r2, [r3, #20]
 80044c4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c6:	1d3b      	adds	r3, r7, #4
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	611a      	str	r2, [r3, #16]
 80044d4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80044d6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80044da:	f7ff fe59 	bl	8004190 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80044de:	2001      	movs	r0, #1
 80044e0:	f7ff fe3e 	bl	8004160 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80044e4:	230c      	movs	r3, #12
 80044e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80044e8:	2302      	movs	r3, #2
 80044ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80044ec:	2303      	movs	r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80044f8:	2307      	movs	r3, #7
 80044fa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	483e      	ldr	r0, [pc, #248]	@ (80045fc <MX_USART2_UART_Init+0x150>)
 8004502:	f000 fb2b 	bl	8004b5c <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_4);
 8004506:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800450a:	2105      	movs	r1, #5
 800450c:	483c      	ldr	r0, [pc, #240]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 800450e:	f7ff fde3 	bl	80040d8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004512:	2200      	movs	r2, #0
 8004514:	2105      	movs	r1, #5
 8004516:	483a      	ldr	r0, [pc, #232]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 8004518:	f7ff fce2 	bl	8003ee0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 800451c:	2200      	movs	r2, #0
 800451e:	2105      	movs	r1, #5
 8004520:	4837      	ldr	r0, [pc, #220]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 8004522:	f7ff fdb5 	bl	8004090 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
 8004526:	2200      	movs	r2, #0
 8004528:	2105      	movs	r1, #5
 800452a:	4835      	ldr	r0, [pc, #212]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 800452c:	f7ff fcfc 	bl	8003f28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8004530:	2200      	movs	r2, #0
 8004532:	2105      	movs	r1, #5
 8004534:	4832      	ldr	r0, [pc, #200]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 8004536:	f7ff fd1b 	bl	8003f70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 800453a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800453e:	2105      	movs	r1, #5
 8004540:	482f      	ldr	r0, [pc, #188]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 8004542:	f7ff fd39 	bl	8003fb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
 8004546:	2200      	movs	r2, #0
 8004548:	2105      	movs	r1, #5
 800454a:	482d      	ldr	r0, [pc, #180]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 800454c:	f7ff fd58 	bl	8004000 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
 8004550:	2200      	movs	r2, #0
 8004552:	2105      	movs	r1, #5
 8004554:	482a      	ldr	r0, [pc, #168]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 8004556:	f7ff fd77 	bl	8004048 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 800455a:	2105      	movs	r1, #5
 800455c:	4828      	ldr	r0, [pc, #160]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 800455e:	f7ff fddf 	bl	8004120 <LL_DMA_DisableFifoMode>

  /* USART2_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
 8004562:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004566:	2106      	movs	r1, #6
 8004568:	4825      	ldr	r0, [pc, #148]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 800456a:	f7ff fdb5 	bl	80040d8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800456e:	2240      	movs	r2, #64	@ 0x40
 8004570:	2106      	movs	r1, #6
 8004572:	4823      	ldr	r0, [pc, #140]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 8004574:	f7ff fcb4 	bl	8003ee0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8004578:	2200      	movs	r2, #0
 800457a:	2106      	movs	r1, #6
 800457c:	4820      	ldr	r0, [pc, #128]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 800457e:	f7ff fd87 	bl	8004090 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8004582:	2200      	movs	r2, #0
 8004584:	2106      	movs	r1, #6
 8004586:	481e      	ldr	r0, [pc, #120]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 8004588:	f7ff fcce 	bl	8003f28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800458c:	2200      	movs	r2, #0
 800458e:	2106      	movs	r1, #6
 8004590:	481b      	ldr	r0, [pc, #108]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 8004592:	f7ff fced 	bl	8003f70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8004596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800459a:	2106      	movs	r1, #6
 800459c:	4818      	ldr	r0, [pc, #96]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 800459e:	f7ff fd0b 	bl	8003fb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2106      	movs	r1, #6
 80045a6:	4816      	ldr	r0, [pc, #88]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 80045a8:	f7ff fd2a 	bl	8004000 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2106      	movs	r1, #6
 80045b0:	4813      	ldr	r0, [pc, #76]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 80045b2:	f7ff fd49 	bl	8004048 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
 80045b6:	2106      	movs	r1, #6
 80045b8:	4811      	ldr	r0, [pc, #68]	@ (8004600 <MX_USART2_UART_Init+0x154>)
 80045ba:	f7ff fdb1 	bl	8004120 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80045be:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80045c2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80045c4:	2300      	movs	r3, #0
 80045c6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80045d0:	230c      	movs	r3, #12
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80045d8:	2300      	movs	r3, #0
 80045da:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80045dc:	f107 031c 	add.w	r3, r7, #28
 80045e0:	4619      	mov	r1, r3
 80045e2:	4808      	ldr	r0, [pc, #32]	@ (8004604 <MX_USART2_UART_Init+0x158>)
 80045e4:	f000 fff0 	bl	80055c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80045e8:	4806      	ldr	r0, [pc, #24]	@ (8004604 <MX_USART2_UART_Init+0x158>)
 80045ea:	f7ff fe11 	bl	8004210 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80045ee:	4805      	ldr	r0, [pc, #20]	@ (8004604 <MX_USART2_UART_Init+0x158>)
 80045f0:	f7ff fdfe 	bl	80041f0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045f4:	bf00      	nop
 80045f6:	3738      	adds	r7, #56	@ 0x38
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40020000 	.word	0x40020000
 8004600:	40026000 	.word	0x40026000
 8004604:	40004400 	.word	0x40004400

08004608 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08e      	sub	sp, #56	@ 0x38
 800460c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800460e:	f107 031c 	add.w	r3, r7, #28
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	609a      	str	r2, [r3, #8]
 800461a:	60da      	str	r2, [r3, #12]
 800461c:	611a      	str	r2, [r3, #16]
 800461e:	615a      	str	r2, [r3, #20]
 8004620:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
 8004630:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8004632:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004636:	f7ff fdab 	bl	8004190 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800463a:	2004      	movs	r0, #4
 800463c:	f7ff fd90 	bl	8004160 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004640:	2002      	movs	r0, #2
 8004642:	f7ff fd8d 	bl	8004160 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8004646:	2320      	movs	r3, #32
 8004648:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800464a:	2302      	movs	r3, #2
 800464c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800464e:	2303      	movs	r3, #3
 8004650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800465a:	2307      	movs	r3, #7
 800465c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4822      	ldr	r0, [pc, #136]	@ (80046ec <MX_USART3_UART_Init+0xe4>)
 8004664:	f000 fa7a 	bl	8004b5c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8004668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800466c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800466e:	2302      	movs	r3, #2
 8004670:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004672:	2303      	movs	r3, #3
 8004674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800467e:	2307      	movs	r3, #7
 8004680:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	4619      	mov	r1, r3
 8004686:	481a      	ldr	r0, [pc, #104]	@ (80046f0 <MX_USART3_UART_Init+0xe8>)
 8004688:	f000 fa68 	bl	8004b5c <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800468c:	f7ff fb9e 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 8004690:	4603      	mov	r3, r0
 8004692:	2200      	movs	r2, #0
 8004694:	2100      	movs	r1, #0
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fbee 	bl	8003e78 <NVIC_EncodePriority>
 800469c:	4603      	mov	r3, r0
 800469e:	4619      	mov	r1, r3
 80046a0:	2027      	movs	r0, #39	@ 0x27
 80046a2:	f7ff fbbf 	bl	8003e24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80046a6:	2027      	movs	r0, #39	@ 0x27
 80046a8:	f7ff fb9e 	bl	8003de8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80046ac:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80046b0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80046b2:	2300      	movs	r3, #0
 80046b4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80046be:	230c      	movs	r3, #12
 80046c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80046c6:	2300      	movs	r3, #0
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80046ca:	f107 031c 	add.w	r3, r7, #28
 80046ce:	4619      	mov	r1, r3
 80046d0:	4808      	ldr	r0, [pc, #32]	@ (80046f4 <MX_USART3_UART_Init+0xec>)
 80046d2:	f000 ff79 	bl	80055c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80046d6:	4807      	ldr	r0, [pc, #28]	@ (80046f4 <MX_USART3_UART_Init+0xec>)
 80046d8:	f7ff fd9a 	bl	8004210 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80046dc:	4805      	ldr	r0, [pc, #20]	@ (80046f4 <MX_USART3_UART_Init+0xec>)
 80046de:	f7ff fd87 	bl	80041f0 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80046e2:	bf00      	nop
 80046e4:	3738      	adds	r7, #56	@ 0x38
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40020800 	.word	0x40020800
 80046f0:	40020400 	.word	0x40020400
 80046f4:	40004800 	.word	0x40004800

080046f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	@ 0x38
 80046fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80046fe:	f107 031c 	add.w	r3, r7, #28
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	611a      	str	r2, [r3, #16]
 800470e:	615a      	str	r2, [r3, #20]
 8004710:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	611a      	str	r2, [r3, #16]
 8004720:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8004722:	2020      	movs	r0, #32
 8004724:	f7ff fd4c 	bl	80041c0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004728:	2004      	movs	r0, #4
 800472a:	f7ff fd19 	bl	8004160 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800472e:	23c0      	movs	r3, #192	@ 0xc0
 8004730:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004732:	2302      	movs	r3, #2
 8004734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004736:	2303      	movs	r3, #3
 8004738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004742:	2308      	movs	r3, #8
 8004744:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004746:	1d3b      	adds	r3, r7, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4846      	ldr	r0, [pc, #280]	@ (8004864 <MX_USART6_UART_Init+0x16c>)
 800474c:	f000 fa06 	bl	8004b5c <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_5);
 8004750:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004754:	2106      	movs	r1, #6
 8004756:	4844      	ldr	r0, [pc, #272]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 8004758:	f7ff fcbe 	bl	80040d8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800475c:	2240      	movs	r2, #64	@ 0x40
 800475e:	2106      	movs	r1, #6
 8004760:	4841      	ldr	r0, [pc, #260]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 8004762:	f7ff fbbd 	bl	8003ee0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 8004766:	2200      	movs	r2, #0
 8004768:	2106      	movs	r1, #6
 800476a:	483f      	ldr	r0, [pc, #252]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 800476c:	f7ff fc90 	bl	8004090 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 8004770:	2200      	movs	r2, #0
 8004772:	2106      	movs	r1, #6
 8004774:	483c      	ldr	r0, [pc, #240]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 8004776:	f7ff fbd7 	bl	8003f28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 800477a:	2200      	movs	r2, #0
 800477c:	2106      	movs	r1, #6
 800477e:	483a      	ldr	r0, [pc, #232]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 8004780:	f7ff fbf6 	bl	8003f70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 8004784:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004788:	2106      	movs	r1, #6
 800478a:	4837      	ldr	r0, [pc, #220]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 800478c:	f7ff fc14 	bl	8003fb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
 8004790:	2200      	movs	r2, #0
 8004792:	2106      	movs	r1, #6
 8004794:	4834      	ldr	r0, [pc, #208]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 8004796:	f7ff fc33 	bl	8004000 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
 800479a:	2200      	movs	r2, #0
 800479c:	2106      	movs	r1, #6
 800479e:	4832      	ldr	r0, [pc, #200]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047a0:	f7ff fc52 	bl	8004048 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 80047a4:	2106      	movs	r1, #6
 80047a6:	4830      	ldr	r0, [pc, #192]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047a8:	f7ff fcba 	bl	8004120 <LL_DMA_DisableFifoMode>

  /* USART6_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_1, LL_DMA_CHANNEL_5);
 80047ac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80047b0:	2101      	movs	r1, #1
 80047b2:	482d      	ldr	r0, [pc, #180]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047b4:	f7ff fc90 	bl	80040d8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80047b8:	2200      	movs	r2, #0
 80047ba:	2101      	movs	r1, #1
 80047bc:	482a      	ldr	r0, [pc, #168]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047be:	f7ff fb8f 	bl	8003ee0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 80047c2:	2200      	movs	r2, #0
 80047c4:	2101      	movs	r1, #1
 80047c6:	4828      	ldr	r0, [pc, #160]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047c8:	f7ff fc62 	bl	8004090 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MODE_NORMAL);
 80047cc:	2200      	movs	r2, #0
 80047ce:	2101      	movs	r1, #1
 80047d0:	4825      	ldr	r0, [pc, #148]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047d2:	f7ff fba9 	bl	8003f28 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2101      	movs	r1, #1
 80047da:	4823      	ldr	r0, [pc, #140]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047dc:	f7ff fbc8 	bl	8003f70 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80047e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047e4:	2101      	movs	r1, #1
 80047e6:	4820      	ldr	r0, [pc, #128]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047e8:	f7ff fbe6 	bl	8003fb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80047ec:	2200      	movs	r2, #0
 80047ee:	2101      	movs	r1, #1
 80047f0:	481d      	ldr	r0, [pc, #116]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047f2:	f7ff fc05 	bl	8004000 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80047f6:	2200      	movs	r2, #0
 80047f8:	2101      	movs	r1, #1
 80047fa:	481b      	ldr	r0, [pc, #108]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 80047fc:	f7ff fc24 	bl	8004048 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_1);
 8004800:	2101      	movs	r1, #1
 8004802:	4819      	ldr	r0, [pc, #100]	@ (8004868 <MX_USART6_UART_Init+0x170>)
 8004804:	f7ff fc8c 	bl	8004120 <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004808:	f7ff fae0 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 800480c:	4603      	mov	r3, r0
 800480e:	2200      	movs	r2, #0
 8004810:	2100      	movs	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fb30 	bl	8003e78 <NVIC_EncodePriority>
 8004818:	4603      	mov	r3, r0
 800481a:	4619      	mov	r1, r3
 800481c:	2047      	movs	r0, #71	@ 0x47
 800481e:	f7ff fb01 	bl	8003e24 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8004822:	2047      	movs	r0, #71	@ 0x47
 8004824:	f7ff fae0 	bl	8003de8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 2000000;
 8004828:	4b10      	ldr	r3, [pc, #64]	@ (800486c <MX_USART6_UART_Init+0x174>)
 800482a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800482c:	2300      	movs	r3, #0
 800482e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004834:	2300      	movs	r3, #0
 8004836:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004838:	230c      	movs	r3, #12
 800483a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800483c:	2300      	movs	r3, #0
 800483e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004840:	2300      	movs	r3, #0
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8004844:	f107 031c 	add.w	r3, r7, #28
 8004848:	4619      	mov	r1, r3
 800484a:	4809      	ldr	r0, [pc, #36]	@ (8004870 <MX_USART6_UART_Init+0x178>)
 800484c:	f000 febc 	bl	80055c8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004850:	4807      	ldr	r0, [pc, #28]	@ (8004870 <MX_USART6_UART_Init+0x178>)
 8004852:	f7ff fcdd 	bl	8004210 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004856:	4806      	ldr	r0, [pc, #24]	@ (8004870 <MX_USART6_UART_Init+0x178>)
 8004858:	f7ff fcca 	bl	80041f0 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800485c:	bf00      	nop
 800485e:	3738      	adds	r7, #56	@ 0x38
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40020800 	.word	0x40020800
 8004868:	40026400 	.word	0x40026400
 800486c:	001e8480 	.word	0x001e8480
 8004870:	40011400 	.word	0x40011400

08004874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80048ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004878:	f7ff f96a 	bl	8003b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800487c:	480c      	ldr	r0, [pc, #48]	@ (80048b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800487e:	490d      	ldr	r1, [pc, #52]	@ (80048b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004880:	4a0d      	ldr	r2, [pc, #52]	@ (80048b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004884:	e002      	b.n	800488c <LoopCopyDataInit>

08004886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800488a:	3304      	adds	r3, #4

0800488c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800488c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800488e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004890:	d3f9      	bcc.n	8004886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004892:	4a0a      	ldr	r2, [pc, #40]	@ (80048bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004894:	4c0a      	ldr	r4, [pc, #40]	@ (80048c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004898:	e001      	b.n	800489e <LoopFillZerobss>

0800489a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800489a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800489c:	3204      	adds	r2, #4

0800489e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800489e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048a0:	d3fb      	bcc.n	800489a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80048a2:	f002 f87d 	bl	80069a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048a6:	f7fe f84b 	bl	8002940 <main>
  bx  lr    
 80048aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048b4:	200004a4 	.word	0x200004a4
  ldr r2, =_sidata
 80048b8:	08008edc 	.word	0x08008edc
  ldr r2, =_sbss
 80048bc:	200004a4 	.word	0x200004a4
  ldr r4, =_ebss
 80048c0:	20000a7c 	.word	0x20000a7c

080048c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048c4:	e7fe      	b.n	80048c4 <ADC_IRQHandler>

080048c6 <LL_GPIO_SetPinMode>:
{
 80048c6:	b480      	push	{r7}
 80048c8:	b08b      	sub	sp, #44	@ 0x2c
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	fa93 f3a3 	rbit	r3, r3
 80048e0:	613b      	str	r3, [r7, #16]
  return result;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80048ec:	2320      	movs	r3, #32
 80048ee:	e003      	b.n	80048f8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	fab3 f383 	clz	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2103      	movs	r1, #3
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	401a      	ands	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	61fb      	str	r3, [r7, #28]
  return result;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800491a:	2320      	movs	r3, #32
 800491c:	e003      	b.n	8004926 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b2db      	uxtb	r3, r3
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	431a      	orrs	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	372c      	adds	r7, #44	@ 0x2c
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_GPIO_SetPinOutputType>:
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	43db      	mvns	r3, r3
 8004954:	401a      	ands	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	431a      	orrs	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
}
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_GPIO_SetPinSpeed>:
{
 8004970:	b480      	push	{r7}
 8004972:	b08b      	sub	sp, #44	@ 0x2c
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	613b      	str	r3, [r7, #16]
  return result;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004996:	2320      	movs	r3, #32
 8004998:	e003      	b.n	80049a2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2103      	movs	r1, #3
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	401a      	ands	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	61fb      	str	r3, [r7, #28]
  return result;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80049c4:	2320      	movs	r3, #32
 80049c6:	e003      	b.n	80049d0 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	431a      	orrs	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	609a      	str	r2, [r3, #8]
}
 80049de:	bf00      	nop
 80049e0:	372c      	adds	r7, #44	@ 0x2c
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <LL_GPIO_SetPinPull>:
{
 80049ea:	b480      	push	{r7}
 80049ec:	b08b      	sub	sp, #44	@ 0x2c
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	fa93 f3a3 	rbit	r3, r3
 8004a04:	613b      	str	r3, [r7, #16]
  return result;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004a10:	2320      	movs	r3, #32
 8004a12:	e003      	b.n	8004a1c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	fab3 f383 	clz	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2103      	movs	r1, #3
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	401a      	ands	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	61fb      	str	r3, [r7, #28]
  return result;
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	e003      	b.n	8004a4a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a52:	431a      	orrs	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	60da      	str	r2, [r3, #12]
}
 8004a58:	bf00      	nop
 8004a5a:	372c      	adds	r7, #44	@ 0x2c
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <LL_GPIO_SetAFPin_0_7>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	b08b      	sub	sp, #44	@ 0x2c
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	613b      	str	r3, [r7, #16]
  return result;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004a8a:	2320      	movs	r3, #32
 8004a8c:	e003      	b.n	8004a96 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	210f      	movs	r1, #15
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	fa93 f3a3 	rbit	r3, r3
 8004aac:	61fb      	str	r3, [r7, #28]
  return result;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004ab8:	2320      	movs	r3, #32
 8004aba:	e003      	b.n	8004ac4 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	fab3 f383 	clz	r3, r3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	372c      	adds	r7, #44	@ 0x2c
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <LL_GPIO_SetAFPin_8_15>:
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b08b      	sub	sp, #44	@ 0x2c
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	613b      	str	r3, [r7, #16]
  return result;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004b06:	2320      	movs	r3, #32
 8004b08:	e003      	b.n	8004b12 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	fab3 f383 	clz	r3, r3
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	210f      	movs	r1, #15
 8004b16:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	61fb      	str	r3, [r7, #28]
  return result;
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004b36:	2320      	movs	r3, #32
 8004b38:	e003      	b.n	8004b42 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	fab3 f383 	clz	r3, r3
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004b50:	bf00      	nop
 8004b52:	372c      	adds	r7, #44	@ 0x2c
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	@ 0x28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	fa93 f3a3 	rbit	r3, r3
 8004b7a:	617b      	str	r3, [r7, #20]
  return result;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <LL_GPIO_Init+0x2e>
    return 32U;
 8004b86:	2320      	movs	r3, #32
 8004b88:	e003      	b.n	8004b92 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004b94:	e057      	b.n	8004c46 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d049      	beq.n	8004c40 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d003      	beq.n	8004bbc <LL_GPIO_Init+0x60>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d10d      	bne.n	8004bd8 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6a39      	ldr	r1, [r7, #32]
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fed3 	bl	8004970 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6a39      	ldr	r1, [r7, #32]
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff feb4 	bl	8004940 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6a39      	ldr	r1, [r7, #32]
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff02 	bl	80049ea <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d121      	bne.n	8004c32 <LL_GPIO_Init+0xd6>
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	60bb      	str	r3, [r7, #8]
  return result;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <LL_GPIO_Init+0xac>
    return 32U;
 8004c04:	2320      	movs	r3, #32
 8004c06:	e003      	b.n	8004c10 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	d807      	bhi.n	8004c24 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6a39      	ldr	r1, [r7, #32]
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff21 	bl	8004a64 <LL_GPIO_SetAFPin_0_7>
 8004c22:	e006      	b.n	8004c32 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6a39      	ldr	r1, [r7, #32]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ff56 	bl	8004ade <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	6a39      	ldr	r1, [r7, #32]
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fe43 	bl	80048c6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	3301      	adds	r3, #1
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1a0      	bne.n	8004b96 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3728      	adds	r7, #40	@ 0x28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <LL_RCC_GetSysClkSource>:
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c64:	4b04      	ldr	r3, [pc, #16]	@ (8004c78 <LL_RCC_GetSysClkSource+0x18>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800

08004c7c <LL_RCC_GetAHBPrescaler>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004c80:	4b04      	ldr	r3, [pc, #16]	@ (8004c94 <LL_RCC_GetAHBPrescaler+0x18>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800

08004c98 <LL_RCC_GetAPB1Prescaler>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c9c:	4b04      	ldr	r3, [pc, #16]	@ (8004cb0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800

08004cb4 <LL_RCC_GetAPB2Prescaler>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004cb8:	4b04      	ldr	r3, [pc, #16]	@ (8004ccc <LL_RCC_GetAPB2Prescaler+0x18>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800

08004cd0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004cd4:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <LL_RCC_PLL_GetMainSource+0x18>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40023800 	.word	0x40023800

08004cec <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004cf0:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <LL_RCC_PLL_GetN+0x18>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40023800 	.word	0x40023800

08004d08 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004d0c:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <LL_RCC_PLL_GetP+0x18>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004d28:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <LL_RCC_PLL_GetR+0x18>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800

08004d40 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d44:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <LL_RCC_PLL_GetDivider+0x18>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800

08004d5c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004d64:	f000 f820 	bl	8004da8 <RCC_GetSystemClockFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f85c 	bl	8004e30 <RCC_GetHCLKClockFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f86a 	bl	8004e5c <RCC_GetPCLK1ClockFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f876 	bl	8004e84 <RCC_GetPCLK2ClockFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60da      	str	r2, [r3, #12]
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004db2:	f7ff ff55 	bl	8004c60 <LL_RCC_GetSysClkSource>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	d82d      	bhi.n	8004e18 <RCC_GetSystemClockFreq+0x70>
 8004dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <RCC_GetSystemClockFreq+0x1c>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004df9 	.word	0x08004df9
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004e19 	.word	0x08004e19
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
 8004de4:	08004e05 	.word	0x08004e05
 8004de8:	08004e19 	.word	0x08004e19
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e19 	.word	0x08004e19
 8004df4:	08004e0f 	.word	0x08004e0f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004df8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e28 <RCC_GetSystemClockFreq+0x80>)
 8004dfa:	607b      	str	r3, [r7, #4]
      break;
 8004dfc:	e00f      	b.n	8004e1e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <RCC_GetSystemClockFreq+0x84>)
 8004e00:	607b      	str	r3, [r7, #4]
      break;
 8004e02:	e00c      	b.n	8004e1e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004e04:	2008      	movs	r0, #8
 8004e06:	f000 f851 	bl	8004eac <RCC_PLL_GetFreqDomain_SYS>
 8004e0a:	6078      	str	r0, [r7, #4]
      break;
 8004e0c:	e007      	b.n	8004e1e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8004e0e:	200c      	movs	r0, #12
 8004e10:	f000 f84c 	bl	8004eac <RCC_PLL_GetFreqDomain_SYS>
 8004e14:	6078      	str	r0, [r7, #4]
      break;
 8004e16:	e002      	b.n	8004e1e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004e18:	4b03      	ldr	r3, [pc, #12]	@ (8004e28 <RCC_GetSystemClockFreq+0x80>)
 8004e1a:	607b      	str	r3, [r7, #4]
      break;
 8004e1c:	bf00      	nop
  }

  return frequency;
 8004e1e:	687b      	ldr	r3, [r7, #4]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	00f42400 	.word	0x00f42400
 8004e2c:	007a1200 	.word	0x007a1200

08004e30 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004e38:	f7ff ff20 	bl	8004c7c <LL_RCC_GetAHBPrescaler>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	4a04      	ldr	r2, [pc, #16]	@ (8004e58 <RCC_GetHCLKClockFreq+0x28>)
 8004e46:	5cd3      	ldrb	r3, [r2, r3]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	40d3      	lsrs	r3, r2
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	08008a98 	.word	0x08008a98

08004e5c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004e64:	f7ff ff18 	bl	8004c98 <LL_RCC_GetAPB1Prescaler>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	0a9b      	lsrs	r3, r3, #10
 8004e6c:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <RCC_GetPCLK1ClockFreq+0x24>)
 8004e6e:	5cd3      	ldrb	r3, [r2, r3]
 8004e70:	461a      	mov	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	40d3      	lsrs	r3, r2
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	08008aa8 	.word	0x08008aa8

08004e84 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004e8c:	f7ff ff12 	bl	8004cb4 <LL_RCC_GetAPB2Prescaler>
 8004e90:	4603      	mov	r3, r0
 8004e92:	0b5b      	lsrs	r3, r3, #13
 8004e94:	4a04      	ldr	r2, [pc, #16]	@ (8004ea8 <RCC_GetPCLK2ClockFreq+0x24>)
 8004e96:	5cd3      	ldrb	r3, [r2, r3]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	40d3      	lsrs	r3, r2
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08008aa8 	.word	0x08008aa8

08004eac <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ec0:	f7ff ff06 	bl	8004cd0 <LL_RCC_PLL_GetMainSource>
 8004ec4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed2:	d003      	beq.n	8004edc <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004ed4:	e005      	b.n	8004ee2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8004f48 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8004ed8:	617b      	str	r3, [r7, #20]
      break;
 8004eda:	e005      	b.n	8004ee8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004edc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f4c <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 8004ede:	617b      	str	r3, [r7, #20]
      break;
 8004ee0:	e002      	b.n	8004ee8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004ee2:	4b19      	ldr	r3, [pc, #100]	@ (8004f48 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8004ee4:	617b      	str	r3, [r7, #20]
      break;
 8004ee6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d114      	bne.n	8004f18 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004eee:	f7ff ff27 	bl	8004d40 <LL_RCC_PLL_GetDivider>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	fbb3 f4f2 	udiv	r4, r3, r2
 8004efa:	f7ff fef7 	bl	8004cec <LL_RCC_PLL_GetN>
 8004efe:	4603      	mov	r3, r0
 8004f00:	fb03 f404 	mul.w	r4, r3, r4
 8004f04:	f7ff ff00 	bl	8004d08 <LL_RCC_PLL_GetP>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	e011      	b.n	8004f3c <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004f18:	f7ff ff12 	bl	8004d40 <LL_RCC_PLL_GetDivider>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	fbb3 f4f2 	udiv	r4, r3, r2
 8004f24:	f7ff fee2 	bl	8004cec <LL_RCC_PLL_GetN>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	fb03 f404 	mul.w	r4, r3, r4
 8004f2e:	f7ff fef9 	bl	8004d24 <LL_RCC_PLL_GetR>
 8004f32:	4603      	mov	r3, r0
 8004f34:	0f1b      	lsrs	r3, r3, #28
 8004f36:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f3a:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004f3c:	693b      	ldr	r3, [r7, #16]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	00f42400 	.word	0x00f42400
 8004f4c:	007a1200 	.word	0x007a1200

08004f50 <LL_TIM_SetPrescaler>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <LL_TIM_SetAutoReload>:
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <LL_TIM_SetRepetitionCounter>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	615a      	str	r2, [r3, #20]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80050cc <LL_TIM_Init+0x108>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <LL_TIM_Init+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe2:	d00f      	beq.n	8005004 <LL_TIM_Init+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3a      	ldr	r2, [pc, #232]	@ (80050d0 <LL_TIM_Init+0x10c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00b      	beq.n	8005004 <LL_TIM_Init+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a39      	ldr	r2, [pc, #228]	@ (80050d4 <LL_TIM_Init+0x110>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <LL_TIM_Init+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a38      	ldr	r2, [pc, #224]	@ (80050d8 <LL_TIM_Init+0x114>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <LL_TIM_Init+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a37      	ldr	r2, [pc, #220]	@ (80050dc <LL_TIM_Init+0x118>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d106      	bne.n	8005012 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2d      	ldr	r2, [pc, #180]	@ (80050cc <LL_TIM_Init+0x108>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d02b      	beq.n	8005072 <LL_TIM_Init+0xae>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005020:	d027      	beq.n	8005072 <LL_TIM_Init+0xae>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <LL_TIM_Init+0x10c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d023      	beq.n	8005072 <LL_TIM_Init+0xae>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <LL_TIM_Init+0x110>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01f      	beq.n	8005072 <LL_TIM_Init+0xae>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <LL_TIM_Init+0x114>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d01b      	beq.n	8005072 <LL_TIM_Init+0xae>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <LL_TIM_Init+0x118>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d017      	beq.n	8005072 <LL_TIM_Init+0xae>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <LL_TIM_Init+0x11c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <LL_TIM_Init+0xae>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a25      	ldr	r2, [pc, #148]	@ (80050e4 <LL_TIM_Init+0x120>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00f      	beq.n	8005072 <LL_TIM_Init+0xae>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a24      	ldr	r2, [pc, #144]	@ (80050e8 <LL_TIM_Init+0x124>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00b      	beq.n	8005072 <LL_TIM_Init+0xae>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a23      	ldr	r2, [pc, #140]	@ (80050ec <LL_TIM_Init+0x128>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <LL_TIM_Init+0xae>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a22      	ldr	r2, [pc, #136]	@ (80050f0 <LL_TIM_Init+0x12c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <LL_TIM_Init+0xae>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a21      	ldr	r2, [pc, #132]	@ (80050f4 <LL_TIM_Init+0x130>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d106      	bne.n	8005080 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ff6d 	bl	8004f6c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff59 	bl	8004f50 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	@ (80050cc <LL_TIM_Init+0x108>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <LL_TIM_Init+0xea>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a0c      	ldr	r2, [pc, #48]	@ (80050dc <LL_TIM_Init+0x118>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d105      	bne.n	80050ba <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4619      	mov	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff67 	bl	8004f88 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff ff72 	bl	8004fa4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800
 80050ec:	40001800 	.word	0x40001800
 80050f0:	40001c00 	.word	0x40001c00
 80050f4:	40002000 	.word	0x40002000

080050f8 <LL_USART_IsEnabled>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800510c:	bf0c      	ite	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	2300      	movne	r3, #0
 8005112:	b2db      	uxtb	r3, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <LL_USART_SetStopBitsLength>:
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <LL_USART_SetHWFlowCtrl>:
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	615a      	str	r2, [r3, #20]
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_USART_SetBaudRate>:
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b0c0      	sub	sp, #256	@ 0x100
 8005172:	af00      	add	r7, sp, #0
 8005174:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005178:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800517c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005180:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005188:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800518c:	f040 810c 	bne.w	80053a8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005190:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005194:	2200      	movs	r2, #0
 8005196:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800519a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800519e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	1891      	adds	r1, r2, r2
 80051a8:	6639      	str	r1, [r7, #96]	@ 0x60
 80051aa:	415b      	adcs	r3, r3
 80051ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80051b2:	4621      	mov	r1, r4
 80051b4:	eb12 0801 	adds.w	r8, r2, r1
 80051b8:	4629      	mov	r1, r5
 80051ba:	eb43 0901 	adc.w	r9, r3, r1
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d2:	4690      	mov	r8, r2
 80051d4:	4699      	mov	r9, r3
 80051d6:	4623      	mov	r3, r4
 80051d8:	eb18 0303 	adds.w	r3, r8, r3
 80051dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051e0:	462b      	mov	r3, r5
 80051e2:	eb49 0303 	adc.w	r3, r9, r3
 80051e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80051ee:	2200      	movs	r2, #0
 80051f0:	469a      	mov	sl, r3
 80051f2:	4693      	mov	fp, r2
 80051f4:	eb1a 030a 	adds.w	r3, sl, sl
 80051f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051fa:	eb4b 030b 	adc.w	r3, fp, fp
 80051fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005200:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005208:	f7fb fd18 	bl	8000c3c <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4b64      	ldr	r3, [pc, #400]	@ (80053a4 <LL_USART_SetBaudRate+0x238>)
 8005212:	fba3 2302 	umull	r2, r3, r3, r2
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	b29b      	uxth	r3, r3
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	b29c      	uxth	r4, r3
 800521e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005222:	2200      	movs	r2, #0
 8005224:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005228:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800522c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	1891      	adds	r1, r2, r2
 8005236:	6539      	str	r1, [r7, #80]	@ 0x50
 8005238:	415b      	adcs	r3, r3
 800523a:	657b      	str	r3, [r7, #84]	@ 0x54
 800523c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005240:	4641      	mov	r1, r8
 8005242:	1851      	adds	r1, r2, r1
 8005244:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005246:	4649      	mov	r1, r9
 8005248:	414b      	adcs	r3, r1
 800524a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005258:	4659      	mov	r1, fp
 800525a:	00cb      	lsls	r3, r1, #3
 800525c:	4651      	mov	r1, sl
 800525e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005262:	4651      	mov	r1, sl
 8005264:	00ca      	lsls	r2, r1, #3
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	4603      	mov	r3, r0
 800526c:	4642      	mov	r2, r8
 800526e:	189b      	adds	r3, r3, r2
 8005270:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005274:	464b      	mov	r3, r9
 8005276:	460a      	mov	r2, r1
 8005278:	eb42 0303 	adc.w	r3, r2, r3
 800527c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005280:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800528a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800528e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005292:	460b      	mov	r3, r1
 8005294:	18db      	adds	r3, r3, r3
 8005296:	643b      	str	r3, [r7, #64]	@ 0x40
 8005298:	4613      	mov	r3, r2
 800529a:	eb42 0303 	adc.w	r3, r2, r3
 800529e:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052a4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80052a8:	f7fb fcc8 	bl	8000c3c <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	4b3c      	ldr	r3, [pc, #240]	@ (80053a4 <LL_USART_SetBaudRate+0x238>)
 80052b4:	fba3 2301 	umull	r2, r3, r3, r1
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	2264      	movs	r2, #100	@ 0x64
 80052bc:	fb02 f303 	mul.w	r3, r2, r3
 80052c0:	1acb      	subs	r3, r1, r3
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052c8:	4b36      	ldr	r3, [pc, #216]	@ (80053a4 <LL_USART_SetBaudRate+0x238>)
 80052ca:	fba3 2302 	umull	r2, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052da:	b29b      	uxth	r3, r3
 80052dc:	4423      	add	r3, r4
 80052de:	b29c      	uxth	r4, r3
 80052e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ea:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052ee:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80052f2:	4642      	mov	r2, r8
 80052f4:	464b      	mov	r3, r9
 80052f6:	1891      	adds	r1, r2, r2
 80052f8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052fa:	415b      	adcs	r3, r3
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005302:	4641      	mov	r1, r8
 8005304:	1851      	adds	r1, r2, r1
 8005306:	6339      	str	r1, [r7, #48]	@ 0x30
 8005308:	4649      	mov	r1, r9
 800530a:	414b      	adcs	r3, r1
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800531a:	4659      	mov	r1, fp
 800531c:	00cb      	lsls	r3, r1, #3
 800531e:	4651      	mov	r1, sl
 8005320:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005324:	4651      	mov	r1, sl
 8005326:	00ca      	lsls	r2, r1, #3
 8005328:	4610      	mov	r0, r2
 800532a:	4619      	mov	r1, r3
 800532c:	4603      	mov	r3, r0
 800532e:	4642      	mov	r2, r8
 8005330:	189b      	adds	r3, r3, r2
 8005332:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005336:	464b      	mov	r3, r9
 8005338:	460a      	mov	r2, r1
 800533a:	eb42 0303 	adc.w	r3, r2, r3
 800533e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005342:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800534c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005350:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005354:	460b      	mov	r3, r1
 8005356:	18db      	adds	r3, r3, r3
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800535a:	4613      	mov	r3, r2
 800535c:	eb42 0303 	adc.w	r3, r2, r3
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005366:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800536a:	f7fb fc67 	bl	8000c3c <__aeabi_uldivmod>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <LL_USART_SetBaudRate+0x238>)
 8005374:	fba3 1302 	umull	r1, r3, r3, r2
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	2164      	movs	r1, #100	@ 0x64
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	3332      	adds	r3, #50	@ 0x32
 8005386:	4a07      	ldr	r2, [pc, #28]	@ (80053a4 <LL_USART_SetBaudRate+0x238>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	b29b      	uxth	r3, r3
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	b29b      	uxth	r3, r3
 8005396:	4423      	add	r3, r4
 8005398:	b29b      	uxth	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a0:	609a      	str	r2, [r3, #8]
}
 80053a2:	e108      	b.n	80055b6 <LL_USART_SetBaudRate+0x44a>
 80053a4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80053a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053b2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053b6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80053ba:	4642      	mov	r2, r8
 80053bc:	464b      	mov	r3, r9
 80053be:	1891      	adds	r1, r2, r2
 80053c0:	6239      	str	r1, [r7, #32]
 80053c2:	415b      	adcs	r3, r3
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ca:	4641      	mov	r1, r8
 80053cc:	1854      	adds	r4, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb43 0501 	adc.w	r5, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	00eb      	lsls	r3, r5, #3
 80053de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e2:	00e2      	lsls	r2, r4, #3
 80053e4:	4614      	mov	r4, r2
 80053e6:	461d      	mov	r5, r3
 80053e8:	4643      	mov	r3, r8
 80053ea:	18e3      	adds	r3, r4, r3
 80053ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053f0:	464b      	mov	r3, r9
 80053f2:	eb45 0303 	adc.w	r3, r5, r3
 80053f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005404:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005414:	4629      	mov	r1, r5
 8005416:	008b      	lsls	r3, r1, #2
 8005418:	4621      	mov	r1, r4
 800541a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800541e:	4621      	mov	r1, r4
 8005420:	008a      	lsls	r2, r1, #2
 8005422:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005426:	f7fb fc09 	bl	8000c3c <__aeabi_uldivmod>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4b65      	ldr	r3, [pc, #404]	@ (80055c4 <LL_USART_SetBaudRate+0x458>)
 8005430:	fba3 2302 	umull	r2, r3, r3, r2
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	b29b      	uxth	r3, r3
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	b29c      	uxth	r4, r3
 800543c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005440:	2200      	movs	r2, #0
 8005442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800544a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800544e:	4642      	mov	r2, r8
 8005450:	464b      	mov	r3, r9
 8005452:	1891      	adds	r1, r2, r2
 8005454:	61b9      	str	r1, [r7, #24]
 8005456:	415b      	adcs	r3, r3
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800545e:	4641      	mov	r1, r8
 8005460:	1851      	adds	r1, r2, r1
 8005462:	6139      	str	r1, [r7, #16]
 8005464:	4649      	mov	r1, r9
 8005466:	414b      	adcs	r3, r1
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005476:	4659      	mov	r1, fp
 8005478:	00cb      	lsls	r3, r1, #3
 800547a:	4651      	mov	r1, sl
 800547c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005480:	4651      	mov	r1, sl
 8005482:	00ca      	lsls	r2, r1, #3
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	4603      	mov	r3, r0
 800548a:	4642      	mov	r2, r8
 800548c:	189b      	adds	r3, r3, r2
 800548e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005492:	464b      	mov	r3, r9
 8005494:	460a      	mov	r2, r1
 8005496:	eb42 0303 	adc.w	r3, r2, r3
 800549a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800549e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80054b8:	4649      	mov	r1, r9
 80054ba:	008b      	lsls	r3, r1, #2
 80054bc:	4641      	mov	r1, r8
 80054be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c2:	4641      	mov	r1, r8
 80054c4:	008a      	lsls	r2, r1, #2
 80054c6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80054ca:	f7fb fbb7 	bl	8000c3c <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	4b3b      	ldr	r3, [pc, #236]	@ (80055c4 <LL_USART_SetBaudRate+0x458>)
 80054d6:	fba3 2301 	umull	r2, r3, r3, r1
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2264      	movs	r2, #100	@ 0x64
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	1acb      	subs	r3, r1, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	3332      	adds	r3, #50	@ 0x32
 80054e8:	4a36      	ldr	r2, [pc, #216]	@ (80055c4 <LL_USART_SetBaudRate+0x458>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	4423      	add	r3, r4
 80054fa:	b29c      	uxth	r4, r3
 80054fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005500:	2200      	movs	r2, #0
 8005502:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005504:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005506:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800550a:	4642      	mov	r2, r8
 800550c:	464b      	mov	r3, r9
 800550e:	1891      	adds	r1, r2, r2
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	415b      	adcs	r3, r3
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800551a:	4641      	mov	r1, r8
 800551c:	1851      	adds	r1, r2, r1
 800551e:	6039      	str	r1, [r7, #0]
 8005520:	4649      	mov	r1, r9
 8005522:	414b      	adcs	r3, r1
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005532:	4659      	mov	r1, fp
 8005534:	00cb      	lsls	r3, r1, #3
 8005536:	4651      	mov	r1, sl
 8005538:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800553c:	4651      	mov	r1, sl
 800553e:	00ca      	lsls	r2, r1, #3
 8005540:	4610      	mov	r0, r2
 8005542:	4619      	mov	r1, r3
 8005544:	4603      	mov	r3, r0
 8005546:	4642      	mov	r2, r8
 8005548:	189b      	adds	r3, r3, r2
 800554a:	673b      	str	r3, [r7, #112]	@ 0x70
 800554c:	464b      	mov	r3, r9
 800554e:	460a      	mov	r2, r1
 8005550:	eb42 0303 	adc.w	r3, r2, r3
 8005554:	677b      	str	r3, [r7, #116]	@ 0x74
 8005556:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800555a:	2200      	movs	r2, #0
 800555c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800555e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800556c:	4649      	mov	r1, r9
 800556e:	008b      	lsls	r3, r1, #2
 8005570:	4641      	mov	r1, r8
 8005572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005576:	4641      	mov	r1, r8
 8005578:	008a      	lsls	r2, r1, #2
 800557a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800557e:	f7fb fb5d 	bl	8000c3c <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4b0f      	ldr	r3, [pc, #60]	@ (80055c4 <LL_USART_SetBaudRate+0x458>)
 8005588:	fba3 1302 	umull	r1, r3, r3, r2
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	2164      	movs	r1, #100	@ 0x64
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	3332      	adds	r3, #50	@ 0x32
 800559a:	4a0a      	ldr	r2, [pc, #40]	@ (80055c4 <LL_USART_SetBaudRate+0x458>)
 800559c:	fba2 2303 	umull	r2, r3, r2, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	4423      	add	r3, r4
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b4:	609a      	str	r2, [r3, #8]
}
 80055b6:	bf00      	nop
 80055b8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055bc:	46bd      	mov	sp, r7
 80055be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c2:	bf00      	nop
 80055c4:	51eb851f 	.word	0x51eb851f

080055c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fd8c 	bl	80050f8 <LL_USART_IsEnabled>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d15e      	bne.n	80056a4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80055ee:	f023 030c 	bic.w	r3, r3, #12
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	6851      	ldr	r1, [r2, #4]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68d2      	ldr	r2, [r2, #12]
 80055fa:	4311      	orrs	r1, r2
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	6912      	ldr	r2, [r2, #16]
 8005600:	4311      	orrs	r1, r2
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	6992      	ldr	r2, [r2, #24]
 8005606:	430a      	orrs	r2, r1
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fd83 	bl	8005120 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fd90 	bl	8005146 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fb96 	bl	8004d5c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1f      	ldr	r2, [pc, #124]	@ (80056b0 <LL_USART_Init+0xe8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d102      	bne.n	800563e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	e021      	b.n	8005682 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <LL_USART_Init+0xec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d102      	bne.n	800564c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e01a      	b.n	8005682 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1a      	ldr	r2, [pc, #104]	@ (80056b8 <LL_USART_Init+0xf0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d102      	bne.n	800565a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e013      	b.n	8005682 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a17      	ldr	r2, [pc, #92]	@ (80056bc <LL_USART_Init+0xf4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d102      	bne.n	8005668 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	e00c      	b.n	8005682 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a15      	ldr	r2, [pc, #84]	@ (80056c0 <LL_USART_Init+0xf8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d102      	bne.n	8005676 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	e005      	b.n	8005682 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a12      	ldr	r2, [pc, #72]	@ (80056c4 <LL_USART_Init+0xfc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d101      	bne.n	8005682 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005690:	2300      	movs	r3, #0
 8005692:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800569c:	69b9      	ldr	r1, [r7, #24]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff fd64 	bl	800516c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80056a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3720      	adds	r7, #32
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40011000 	.word	0x40011000
 80056b4:	40004400 	.word	0x40004400
 80056b8:	40004800 	.word	0x40004800
 80056bc:	40011400 	.word	0x40011400
 80056c0:	40004c00 	.word	0x40004c00
 80056c4:	40005000 	.word	0x40005000

080056c8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056da:	4a07      	ldr	r2, [pc, #28]	@ (80056f8 <LL_InitTick+0x30>)
 80056dc:	3b01      	subs	r3, #1
 80056de:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80056e0:	4b05      	ldr	r3, [pc, #20]	@ (80056f8 <LL_InitTick+0x30>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056e6:	4b04      	ldr	r3, [pc, #16]	@ (80056f8 <LL_InitTick+0x30>)
 80056e8:	2205      	movs	r2, #5
 80056ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	e000e010 	.word	0xe000e010

080056fc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005704:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff ffdd 	bl	80056c8 <LL_InitTick>
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005720:	4b0f      	ldr	r3, [pc, #60]	@ (8005760 <LL_mDelay+0x48>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005726:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d00c      	beq.n	800574a <LL_mDelay+0x32>
  {
    Delay++;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3301      	adds	r3, #1
 8005734:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8005736:	e008      	b.n	800574a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <LL_mDelay+0x48>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <LL_mDelay+0x32>
    {
      Delay--;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3b01      	subs	r3, #1
 8005748:	607b      	str	r3, [r7, #4]
  while (Delay)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f3      	bne.n	8005738 <LL_mDelay+0x20>
    }
  }
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000e010 	.word	0xe000e010

08005764 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800576c:	4a04      	ldr	r2, [pc, #16]	@ (8005780 <LL_SetSystemCoreClock+0x1c>)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6013      	str	r3, [r2, #0]
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	200002d8 	.word	0x200002d8

08005784 <atof>:
 8005784:	2100      	movs	r1, #0
 8005786:	f000 be03 	b.w	8006390 <strtod>

0800578a <sulp>:
 800578a:	b570      	push	{r4, r5, r6, lr}
 800578c:	4604      	mov	r4, r0
 800578e:	460d      	mov	r5, r1
 8005790:	ec45 4b10 	vmov	d0, r4, r5
 8005794:	4616      	mov	r6, r2
 8005796:	f002 f921 	bl	80079dc <__ulp>
 800579a:	ec51 0b10 	vmov	r0, r1, d0
 800579e:	b17e      	cbz	r6, 80057c0 <sulp+0x36>
 80057a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80057a4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	dd09      	ble.n	80057c0 <sulp+0x36>
 80057ac:	051b      	lsls	r3, r3, #20
 80057ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80057b2:	2400      	movs	r4, #0
 80057b4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	f7fa ff34 	bl	8000628 <__aeabi_dmul>
 80057c0:	ec41 0b10 	vmov	d0, r0, r1
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080057c8 <_strtod_l>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	b09f      	sub	sp, #124	@ 0x7c
 80057ce:	460c      	mov	r4, r1
 80057d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80057d2:	2200      	movs	r2, #0
 80057d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80057d6:	9005      	str	r0, [sp, #20]
 80057d8:	f04f 0a00 	mov.w	sl, #0
 80057dc:	f04f 0b00 	mov.w	fp, #0
 80057e0:	460a      	mov	r2, r1
 80057e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80057e4:	7811      	ldrb	r1, [r2, #0]
 80057e6:	292b      	cmp	r1, #43	@ 0x2b
 80057e8:	d04a      	beq.n	8005880 <_strtod_l+0xb8>
 80057ea:	d838      	bhi.n	800585e <_strtod_l+0x96>
 80057ec:	290d      	cmp	r1, #13
 80057ee:	d832      	bhi.n	8005856 <_strtod_l+0x8e>
 80057f0:	2908      	cmp	r1, #8
 80057f2:	d832      	bhi.n	800585a <_strtod_l+0x92>
 80057f4:	2900      	cmp	r1, #0
 80057f6:	d03b      	beq.n	8005870 <_strtod_l+0xa8>
 80057f8:	2200      	movs	r2, #0
 80057fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80057fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80057fe:	782a      	ldrb	r2, [r5, #0]
 8005800:	2a30      	cmp	r2, #48	@ 0x30
 8005802:	f040 80b2 	bne.w	800596a <_strtod_l+0x1a2>
 8005806:	786a      	ldrb	r2, [r5, #1]
 8005808:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800580c:	2a58      	cmp	r2, #88	@ 0x58
 800580e:	d16e      	bne.n	80058ee <_strtod_l+0x126>
 8005810:	9302      	str	r3, [sp, #8]
 8005812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	ab1a      	add	r3, sp, #104	@ 0x68
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	4a8f      	ldr	r2, [pc, #572]	@ (8005a58 <_strtod_l+0x290>)
 800581c:	9805      	ldr	r0, [sp, #20]
 800581e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005820:	a919      	add	r1, sp, #100	@ 0x64
 8005822:	f001 f9d5 	bl	8006bd0 <__gethex>
 8005826:	f010 060f 	ands.w	r6, r0, #15
 800582a:	4604      	mov	r4, r0
 800582c:	d005      	beq.n	800583a <_strtod_l+0x72>
 800582e:	2e06      	cmp	r6, #6
 8005830:	d128      	bne.n	8005884 <_strtod_l+0xbc>
 8005832:	3501      	adds	r5, #1
 8005834:	2300      	movs	r3, #0
 8005836:	9519      	str	r5, [sp, #100]	@ 0x64
 8005838:	930e      	str	r3, [sp, #56]	@ 0x38
 800583a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800583c:	2b00      	cmp	r3, #0
 800583e:	f040 858e 	bne.w	800635e <_strtod_l+0xb96>
 8005842:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005844:	b1cb      	cbz	r3, 800587a <_strtod_l+0xb2>
 8005846:	4652      	mov	r2, sl
 8005848:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800584c:	ec43 2b10 	vmov	d0, r2, r3
 8005850:	b01f      	add	sp, #124	@ 0x7c
 8005852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005856:	2920      	cmp	r1, #32
 8005858:	d1ce      	bne.n	80057f8 <_strtod_l+0x30>
 800585a:	3201      	adds	r2, #1
 800585c:	e7c1      	b.n	80057e2 <_strtod_l+0x1a>
 800585e:	292d      	cmp	r1, #45	@ 0x2d
 8005860:	d1ca      	bne.n	80057f8 <_strtod_l+0x30>
 8005862:	2101      	movs	r1, #1
 8005864:	910e      	str	r1, [sp, #56]	@ 0x38
 8005866:	1c51      	adds	r1, r2, #1
 8005868:	9119      	str	r1, [sp, #100]	@ 0x64
 800586a:	7852      	ldrb	r2, [r2, #1]
 800586c:	2a00      	cmp	r2, #0
 800586e:	d1c5      	bne.n	80057fc <_strtod_l+0x34>
 8005870:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005872:	9419      	str	r4, [sp, #100]	@ 0x64
 8005874:	2b00      	cmp	r3, #0
 8005876:	f040 8570 	bne.w	800635a <_strtod_l+0xb92>
 800587a:	4652      	mov	r2, sl
 800587c:	465b      	mov	r3, fp
 800587e:	e7e5      	b.n	800584c <_strtod_l+0x84>
 8005880:	2100      	movs	r1, #0
 8005882:	e7ef      	b.n	8005864 <_strtod_l+0x9c>
 8005884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005886:	b13a      	cbz	r2, 8005898 <_strtod_l+0xd0>
 8005888:	2135      	movs	r1, #53	@ 0x35
 800588a:	a81c      	add	r0, sp, #112	@ 0x70
 800588c:	f002 f9a0 	bl	8007bd0 <__copybits>
 8005890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005892:	9805      	ldr	r0, [sp, #20]
 8005894:	f001 fd76 	bl	8007384 <_Bfree>
 8005898:	3e01      	subs	r6, #1
 800589a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800589c:	2e04      	cmp	r6, #4
 800589e:	d806      	bhi.n	80058ae <_strtod_l+0xe6>
 80058a0:	e8df f006 	tbb	[pc, r6]
 80058a4:	201d0314 	.word	0x201d0314
 80058a8:	14          	.byte	0x14
 80058a9:	00          	.byte	0x00
 80058aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80058ae:	05e1      	lsls	r1, r4, #23
 80058b0:	bf48      	it	mi
 80058b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80058b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80058ba:	0d1b      	lsrs	r3, r3, #20
 80058bc:	051b      	lsls	r3, r3, #20
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1bb      	bne.n	800583a <_strtod_l+0x72>
 80058c2:	f001 f867 	bl	8006994 <__errno>
 80058c6:	2322      	movs	r3, #34	@ 0x22
 80058c8:	6003      	str	r3, [r0, #0]
 80058ca:	e7b6      	b.n	800583a <_strtod_l+0x72>
 80058cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80058d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80058d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80058d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80058dc:	e7e7      	b.n	80058ae <_strtod_l+0xe6>
 80058de:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005a60 <_strtod_l+0x298>
 80058e2:	e7e4      	b.n	80058ae <_strtod_l+0xe6>
 80058e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80058e8:	f04f 3aff 	mov.w	sl, #4294967295
 80058ec:	e7df      	b.n	80058ae <_strtod_l+0xe6>
 80058ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	2b30      	cmp	r3, #48	@ 0x30
 80058f8:	d0f9      	beq.n	80058ee <_strtod_l+0x126>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d09d      	beq.n	800583a <_strtod_l+0x72>
 80058fe:	2301      	movs	r3, #1
 8005900:	2700      	movs	r7, #0
 8005902:	9308      	str	r3, [sp, #32]
 8005904:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005906:	930c      	str	r3, [sp, #48]	@ 0x30
 8005908:	970b      	str	r7, [sp, #44]	@ 0x2c
 800590a:	46b9      	mov	r9, r7
 800590c:	220a      	movs	r2, #10
 800590e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005910:	7805      	ldrb	r5, [r0, #0]
 8005912:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005916:	b2d9      	uxtb	r1, r3
 8005918:	2909      	cmp	r1, #9
 800591a:	d928      	bls.n	800596e <_strtod_l+0x1a6>
 800591c:	494f      	ldr	r1, [pc, #316]	@ (8005a5c <_strtod_l+0x294>)
 800591e:	2201      	movs	r2, #1
 8005920:	f000 ff83 	bl	800682a <strncmp>
 8005924:	2800      	cmp	r0, #0
 8005926:	d032      	beq.n	800598e <_strtod_l+0x1c6>
 8005928:	2000      	movs	r0, #0
 800592a:	462a      	mov	r2, r5
 800592c:	900a      	str	r0, [sp, #40]	@ 0x28
 800592e:	464d      	mov	r5, r9
 8005930:	4603      	mov	r3, r0
 8005932:	2a65      	cmp	r2, #101	@ 0x65
 8005934:	d001      	beq.n	800593a <_strtod_l+0x172>
 8005936:	2a45      	cmp	r2, #69	@ 0x45
 8005938:	d114      	bne.n	8005964 <_strtod_l+0x19c>
 800593a:	b91d      	cbnz	r5, 8005944 <_strtod_l+0x17c>
 800593c:	9a08      	ldr	r2, [sp, #32]
 800593e:	4302      	orrs	r2, r0
 8005940:	d096      	beq.n	8005870 <_strtod_l+0xa8>
 8005942:	2500      	movs	r5, #0
 8005944:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005946:	1c62      	adds	r2, r4, #1
 8005948:	9219      	str	r2, [sp, #100]	@ 0x64
 800594a:	7862      	ldrb	r2, [r4, #1]
 800594c:	2a2b      	cmp	r2, #43	@ 0x2b
 800594e:	d07a      	beq.n	8005a46 <_strtod_l+0x27e>
 8005950:	2a2d      	cmp	r2, #45	@ 0x2d
 8005952:	d07e      	beq.n	8005a52 <_strtod_l+0x28a>
 8005954:	f04f 0c00 	mov.w	ip, #0
 8005958:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800595c:	2909      	cmp	r1, #9
 800595e:	f240 8085 	bls.w	8005a6c <_strtod_l+0x2a4>
 8005962:	9419      	str	r4, [sp, #100]	@ 0x64
 8005964:	f04f 0800 	mov.w	r8, #0
 8005968:	e0a5      	b.n	8005ab6 <_strtod_l+0x2ee>
 800596a:	2300      	movs	r3, #0
 800596c:	e7c8      	b.n	8005900 <_strtod_l+0x138>
 800596e:	f1b9 0f08 	cmp.w	r9, #8
 8005972:	bfd8      	it	le
 8005974:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005976:	f100 0001 	add.w	r0, r0, #1
 800597a:	bfda      	itte	le
 800597c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005980:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005982:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005986:	f109 0901 	add.w	r9, r9, #1
 800598a:	9019      	str	r0, [sp, #100]	@ 0x64
 800598c:	e7bf      	b.n	800590e <_strtod_l+0x146>
 800598e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	9219      	str	r2, [sp, #100]	@ 0x64
 8005994:	785a      	ldrb	r2, [r3, #1]
 8005996:	f1b9 0f00 	cmp.w	r9, #0
 800599a:	d03b      	beq.n	8005a14 <_strtod_l+0x24c>
 800599c:	900a      	str	r0, [sp, #40]	@ 0x28
 800599e:	464d      	mov	r5, r9
 80059a0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80059a4:	2b09      	cmp	r3, #9
 80059a6:	d912      	bls.n	80059ce <_strtod_l+0x206>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7c2      	b.n	8005932 <_strtod_l+0x16a>
 80059ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80059b2:	785a      	ldrb	r2, [r3, #1]
 80059b4:	3001      	adds	r0, #1
 80059b6:	2a30      	cmp	r2, #48	@ 0x30
 80059b8:	d0f8      	beq.n	80059ac <_strtod_l+0x1e4>
 80059ba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80059be:	2b08      	cmp	r3, #8
 80059c0:	f200 84d2 	bhi.w	8006368 <_strtod_l+0xba0>
 80059c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80059c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80059c8:	2000      	movs	r0, #0
 80059ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80059cc:	4605      	mov	r5, r0
 80059ce:	3a30      	subs	r2, #48	@ 0x30
 80059d0:	f100 0301 	add.w	r3, r0, #1
 80059d4:	d018      	beq.n	8005a08 <_strtod_l+0x240>
 80059d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059d8:	4419      	add	r1, r3
 80059da:	910a      	str	r1, [sp, #40]	@ 0x28
 80059dc:	462e      	mov	r6, r5
 80059de:	f04f 0e0a 	mov.w	lr, #10
 80059e2:	1c71      	adds	r1, r6, #1
 80059e4:	eba1 0c05 	sub.w	ip, r1, r5
 80059e8:	4563      	cmp	r3, ip
 80059ea:	dc15      	bgt.n	8005a18 <_strtod_l+0x250>
 80059ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80059f0:	182b      	adds	r3, r5, r0
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	f105 0501 	add.w	r5, r5, #1
 80059f8:	4405      	add	r5, r0
 80059fa:	dc1a      	bgt.n	8005a32 <_strtod_l+0x26a>
 80059fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80059fe:	230a      	movs	r3, #10
 8005a00:	fb03 2301 	mla	r3, r3, r1, r2
 8005a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a06:	2300      	movs	r3, #0
 8005a08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a0a:	1c51      	adds	r1, r2, #1
 8005a0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a0e:	7852      	ldrb	r2, [r2, #1]
 8005a10:	4618      	mov	r0, r3
 8005a12:	e7c5      	b.n	80059a0 <_strtod_l+0x1d8>
 8005a14:	4648      	mov	r0, r9
 8005a16:	e7ce      	b.n	80059b6 <_strtod_l+0x1ee>
 8005a18:	2e08      	cmp	r6, #8
 8005a1a:	dc05      	bgt.n	8005a28 <_strtod_l+0x260>
 8005a1c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005a1e:	fb0e f606 	mul.w	r6, lr, r6
 8005a22:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005a24:	460e      	mov	r6, r1
 8005a26:	e7dc      	b.n	80059e2 <_strtod_l+0x21a>
 8005a28:	2910      	cmp	r1, #16
 8005a2a:	bfd8      	it	le
 8005a2c:	fb0e f707 	mulle.w	r7, lr, r7
 8005a30:	e7f8      	b.n	8005a24 <_strtod_l+0x25c>
 8005a32:	2b0f      	cmp	r3, #15
 8005a34:	bfdc      	itt	le
 8005a36:	230a      	movle	r3, #10
 8005a38:	fb03 2707 	mlale	r7, r3, r7, r2
 8005a3c:	e7e3      	b.n	8005a06 <_strtod_l+0x23e>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a42:	2301      	movs	r3, #1
 8005a44:	e77a      	b.n	800593c <_strtod_l+0x174>
 8005a46:	f04f 0c00 	mov.w	ip, #0
 8005a4a:	1ca2      	adds	r2, r4, #2
 8005a4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a4e:	78a2      	ldrb	r2, [r4, #2]
 8005a50:	e782      	b.n	8005958 <_strtod_l+0x190>
 8005a52:	f04f 0c01 	mov.w	ip, #1
 8005a56:	e7f8      	b.n	8005a4a <_strtod_l+0x282>
 8005a58:	08008c8c 	.word	0x08008c8c
 8005a5c:	08008ab8 	.word	0x08008ab8
 8005a60:	7ff00000 	.word	0x7ff00000
 8005a64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a66:	1c51      	adds	r1, r2, #1
 8005a68:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a6a:	7852      	ldrb	r2, [r2, #1]
 8005a6c:	2a30      	cmp	r2, #48	@ 0x30
 8005a6e:	d0f9      	beq.n	8005a64 <_strtod_l+0x29c>
 8005a70:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005a74:	2908      	cmp	r1, #8
 8005a76:	f63f af75 	bhi.w	8005964 <_strtod_l+0x19c>
 8005a7a:	3a30      	subs	r2, #48	@ 0x30
 8005a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a80:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005a82:	f04f 080a 	mov.w	r8, #10
 8005a86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a88:	1c56      	adds	r6, r2, #1
 8005a8a:	9619      	str	r6, [sp, #100]	@ 0x64
 8005a8c:	7852      	ldrb	r2, [r2, #1]
 8005a8e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005a92:	f1be 0f09 	cmp.w	lr, #9
 8005a96:	d939      	bls.n	8005b0c <_strtod_l+0x344>
 8005a98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a9a:	1a76      	subs	r6, r6, r1
 8005a9c:	2e08      	cmp	r6, #8
 8005a9e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005aa2:	dc03      	bgt.n	8005aac <_strtod_l+0x2e4>
 8005aa4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005aa6:	4588      	cmp	r8, r1
 8005aa8:	bfa8      	it	ge
 8005aaa:	4688      	movge	r8, r1
 8005aac:	f1bc 0f00 	cmp.w	ip, #0
 8005ab0:	d001      	beq.n	8005ab6 <_strtod_l+0x2ee>
 8005ab2:	f1c8 0800 	rsb	r8, r8, #0
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	d14e      	bne.n	8005b58 <_strtod_l+0x390>
 8005aba:	9908      	ldr	r1, [sp, #32]
 8005abc:	4308      	orrs	r0, r1
 8005abe:	f47f aebc 	bne.w	800583a <_strtod_l+0x72>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f47f aed4 	bne.w	8005870 <_strtod_l+0xa8>
 8005ac8:	2a69      	cmp	r2, #105	@ 0x69
 8005aca:	d028      	beq.n	8005b1e <_strtod_l+0x356>
 8005acc:	dc25      	bgt.n	8005b1a <_strtod_l+0x352>
 8005ace:	2a49      	cmp	r2, #73	@ 0x49
 8005ad0:	d025      	beq.n	8005b1e <_strtod_l+0x356>
 8005ad2:	2a4e      	cmp	r2, #78	@ 0x4e
 8005ad4:	f47f aecc 	bne.w	8005870 <_strtod_l+0xa8>
 8005ad8:	499a      	ldr	r1, [pc, #616]	@ (8005d44 <_strtod_l+0x57c>)
 8005ada:	a819      	add	r0, sp, #100	@ 0x64
 8005adc:	f001 fa9a 	bl	8007014 <__match>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	f43f aec5 	beq.w	8005870 <_strtod_l+0xa8>
 8005ae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b28      	cmp	r3, #40	@ 0x28
 8005aec:	d12e      	bne.n	8005b4c <_strtod_l+0x384>
 8005aee:	4996      	ldr	r1, [pc, #600]	@ (8005d48 <_strtod_l+0x580>)
 8005af0:	aa1c      	add	r2, sp, #112	@ 0x70
 8005af2:	a819      	add	r0, sp, #100	@ 0x64
 8005af4:	f001 faa2 	bl	800703c <__hexnan>
 8005af8:	2805      	cmp	r0, #5
 8005afa:	d127      	bne.n	8005b4c <_strtod_l+0x384>
 8005afc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005afe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005b02:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005b06:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005b0a:	e696      	b.n	800583a <_strtod_l+0x72>
 8005b0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b0e:	fb08 2101 	mla	r1, r8, r1, r2
 8005b12:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005b16:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b18:	e7b5      	b.n	8005a86 <_strtod_l+0x2be>
 8005b1a:	2a6e      	cmp	r2, #110	@ 0x6e
 8005b1c:	e7da      	b.n	8005ad4 <_strtod_l+0x30c>
 8005b1e:	498b      	ldr	r1, [pc, #556]	@ (8005d4c <_strtod_l+0x584>)
 8005b20:	a819      	add	r0, sp, #100	@ 0x64
 8005b22:	f001 fa77 	bl	8007014 <__match>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f43f aea2 	beq.w	8005870 <_strtod_l+0xa8>
 8005b2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b2e:	4988      	ldr	r1, [pc, #544]	@ (8005d50 <_strtod_l+0x588>)
 8005b30:	3b01      	subs	r3, #1
 8005b32:	a819      	add	r0, sp, #100	@ 0x64
 8005b34:	9319      	str	r3, [sp, #100]	@ 0x64
 8005b36:	f001 fa6d 	bl	8007014 <__match>
 8005b3a:	b910      	cbnz	r0, 8005b42 <_strtod_l+0x37a>
 8005b3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b3e:	3301      	adds	r3, #1
 8005b40:	9319      	str	r3, [sp, #100]	@ 0x64
 8005b42:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005d60 <_strtod_l+0x598>
 8005b46:	f04f 0a00 	mov.w	sl, #0
 8005b4a:	e676      	b.n	800583a <_strtod_l+0x72>
 8005b4c:	4881      	ldr	r0, [pc, #516]	@ (8005d54 <_strtod_l+0x58c>)
 8005b4e:	f000 ff67 	bl	8006a20 <nan>
 8005b52:	ec5b ab10 	vmov	sl, fp, d0
 8005b56:	e670      	b.n	800583a <_strtod_l+0x72>
 8005b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b5a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005b5c:	eba8 0303 	sub.w	r3, r8, r3
 8005b60:	f1b9 0f00 	cmp.w	r9, #0
 8005b64:	bf08      	it	eq
 8005b66:	46a9      	moveq	r9, r5
 8005b68:	2d10      	cmp	r5, #16
 8005b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b6c:	462c      	mov	r4, r5
 8005b6e:	bfa8      	it	ge
 8005b70:	2410      	movge	r4, #16
 8005b72:	f7fa fcdf 	bl	8000534 <__aeabi_ui2d>
 8005b76:	2d09      	cmp	r5, #9
 8005b78:	4682      	mov	sl, r0
 8005b7a:	468b      	mov	fp, r1
 8005b7c:	dc13      	bgt.n	8005ba6 <_strtod_l+0x3de>
 8005b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f43f ae5a 	beq.w	800583a <_strtod_l+0x72>
 8005b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b88:	dd78      	ble.n	8005c7c <_strtod_l+0x4b4>
 8005b8a:	2b16      	cmp	r3, #22
 8005b8c:	dc5f      	bgt.n	8005c4e <_strtod_l+0x486>
 8005b8e:	4972      	ldr	r1, [pc, #456]	@ (8005d58 <_strtod_l+0x590>)
 8005b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b98:	4652      	mov	r2, sl
 8005b9a:	465b      	mov	r3, fp
 8005b9c:	f7fa fd44 	bl	8000628 <__aeabi_dmul>
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	468b      	mov	fp, r1
 8005ba4:	e649      	b.n	800583a <_strtod_l+0x72>
 8005ba6:	4b6c      	ldr	r3, [pc, #432]	@ (8005d58 <_strtod_l+0x590>)
 8005ba8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005bb0:	f7fa fd3a 	bl	8000628 <__aeabi_dmul>
 8005bb4:	4682      	mov	sl, r0
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	468b      	mov	fp, r1
 8005bba:	f7fa fcbb 	bl	8000534 <__aeabi_ui2d>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	f7fa fb79 	bl	80002bc <__adddf3>
 8005bca:	2d0f      	cmp	r5, #15
 8005bcc:	4682      	mov	sl, r0
 8005bce:	468b      	mov	fp, r1
 8005bd0:	ddd5      	ble.n	8005b7e <_strtod_l+0x3b6>
 8005bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd4:	1b2c      	subs	r4, r5, r4
 8005bd6:	441c      	add	r4, r3
 8005bd8:	2c00      	cmp	r4, #0
 8005bda:	f340 8093 	ble.w	8005d04 <_strtod_l+0x53c>
 8005bde:	f014 030f 	ands.w	r3, r4, #15
 8005be2:	d00a      	beq.n	8005bfa <_strtod_l+0x432>
 8005be4:	495c      	ldr	r1, [pc, #368]	@ (8005d58 <_strtod_l+0x590>)
 8005be6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005bea:	4652      	mov	r2, sl
 8005bec:	465b      	mov	r3, fp
 8005bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bf2:	f7fa fd19 	bl	8000628 <__aeabi_dmul>
 8005bf6:	4682      	mov	sl, r0
 8005bf8:	468b      	mov	fp, r1
 8005bfa:	f034 040f 	bics.w	r4, r4, #15
 8005bfe:	d073      	beq.n	8005ce8 <_strtod_l+0x520>
 8005c00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005c04:	dd49      	ble.n	8005c9a <_strtod_l+0x4d2>
 8005c06:	2400      	movs	r4, #0
 8005c08:	46a0      	mov	r8, r4
 8005c0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c0c:	46a1      	mov	r9, r4
 8005c0e:	9a05      	ldr	r2, [sp, #20]
 8005c10:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005d60 <_strtod_l+0x598>
 8005c14:	2322      	movs	r3, #34	@ 0x22
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	f04f 0a00 	mov.w	sl, #0
 8005c1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f43f ae0b 	beq.w	800583a <_strtod_l+0x72>
 8005c24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c26:	9805      	ldr	r0, [sp, #20]
 8005c28:	f001 fbac 	bl	8007384 <_Bfree>
 8005c2c:	9805      	ldr	r0, [sp, #20]
 8005c2e:	4649      	mov	r1, r9
 8005c30:	f001 fba8 	bl	8007384 <_Bfree>
 8005c34:	9805      	ldr	r0, [sp, #20]
 8005c36:	4641      	mov	r1, r8
 8005c38:	f001 fba4 	bl	8007384 <_Bfree>
 8005c3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c3e:	9805      	ldr	r0, [sp, #20]
 8005c40:	f001 fba0 	bl	8007384 <_Bfree>
 8005c44:	9805      	ldr	r0, [sp, #20]
 8005c46:	4621      	mov	r1, r4
 8005c48:	f001 fb9c 	bl	8007384 <_Bfree>
 8005c4c:	e5f5      	b.n	800583a <_strtod_l+0x72>
 8005c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005c54:	4293      	cmp	r3, r2
 8005c56:	dbbc      	blt.n	8005bd2 <_strtod_l+0x40a>
 8005c58:	4c3f      	ldr	r4, [pc, #252]	@ (8005d58 <_strtod_l+0x590>)
 8005c5a:	f1c5 050f 	rsb	r5, r5, #15
 8005c5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005c62:	4652      	mov	r2, sl
 8005c64:	465b      	mov	r3, fp
 8005c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c6a:	f7fa fcdd 	bl	8000628 <__aeabi_dmul>
 8005c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c70:	1b5d      	subs	r5, r3, r5
 8005c72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005c76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c7a:	e78f      	b.n	8005b9c <_strtod_l+0x3d4>
 8005c7c:	3316      	adds	r3, #22
 8005c7e:	dba8      	blt.n	8005bd2 <_strtod_l+0x40a>
 8005c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c82:	eba3 0808 	sub.w	r8, r3, r8
 8005c86:	4b34      	ldr	r3, [pc, #208]	@ (8005d58 <_strtod_l+0x590>)
 8005c88:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005c8c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005c90:	4650      	mov	r0, sl
 8005c92:	4659      	mov	r1, fp
 8005c94:	f7fa fdf2 	bl	800087c <__aeabi_ddiv>
 8005c98:	e782      	b.n	8005ba0 <_strtod_l+0x3d8>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4f2f      	ldr	r7, [pc, #188]	@ (8005d5c <_strtod_l+0x594>)
 8005c9e:	1124      	asrs	r4, r4, #4
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	461e      	mov	r6, r3
 8005ca6:	2c01      	cmp	r4, #1
 8005ca8:	dc21      	bgt.n	8005cee <_strtod_l+0x526>
 8005caa:	b10b      	cbz	r3, 8005cb0 <_strtod_l+0x4e8>
 8005cac:	4682      	mov	sl, r0
 8005cae:	468b      	mov	fp, r1
 8005cb0:	492a      	ldr	r1, [pc, #168]	@ (8005d5c <_strtod_l+0x594>)
 8005cb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005cb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005cba:	4652      	mov	r2, sl
 8005cbc:	465b      	mov	r3, fp
 8005cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cc2:	f7fa fcb1 	bl	8000628 <__aeabi_dmul>
 8005cc6:	4b26      	ldr	r3, [pc, #152]	@ (8005d60 <_strtod_l+0x598>)
 8005cc8:	460a      	mov	r2, r1
 8005cca:	400b      	ands	r3, r1
 8005ccc:	4925      	ldr	r1, [pc, #148]	@ (8005d64 <_strtod_l+0x59c>)
 8005cce:	428b      	cmp	r3, r1
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	d898      	bhi.n	8005c06 <_strtod_l+0x43e>
 8005cd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005cd8:	428b      	cmp	r3, r1
 8005cda:	bf86      	itte	hi
 8005cdc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005d68 <_strtod_l+0x5a0>
 8005ce0:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ce4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9308      	str	r3, [sp, #32]
 8005cec:	e076      	b.n	8005ddc <_strtod_l+0x614>
 8005cee:	07e2      	lsls	r2, r4, #31
 8005cf0:	d504      	bpl.n	8005cfc <_strtod_l+0x534>
 8005cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf6:	f7fa fc97 	bl	8000628 <__aeabi_dmul>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	3601      	adds	r6, #1
 8005cfe:	1064      	asrs	r4, r4, #1
 8005d00:	3708      	adds	r7, #8
 8005d02:	e7d0      	b.n	8005ca6 <_strtod_l+0x4de>
 8005d04:	d0f0      	beq.n	8005ce8 <_strtod_l+0x520>
 8005d06:	4264      	negs	r4, r4
 8005d08:	f014 020f 	ands.w	r2, r4, #15
 8005d0c:	d00a      	beq.n	8005d24 <_strtod_l+0x55c>
 8005d0e:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <_strtod_l+0x590>)
 8005d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d14:	4650      	mov	r0, sl
 8005d16:	4659      	mov	r1, fp
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f7fa fdae 	bl	800087c <__aeabi_ddiv>
 8005d20:	4682      	mov	sl, r0
 8005d22:	468b      	mov	fp, r1
 8005d24:	1124      	asrs	r4, r4, #4
 8005d26:	d0df      	beq.n	8005ce8 <_strtod_l+0x520>
 8005d28:	2c1f      	cmp	r4, #31
 8005d2a:	dd1f      	ble.n	8005d6c <_strtod_l+0x5a4>
 8005d2c:	2400      	movs	r4, #0
 8005d2e:	46a0      	mov	r8, r4
 8005d30:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d32:	46a1      	mov	r9, r4
 8005d34:	9a05      	ldr	r2, [sp, #20]
 8005d36:	2322      	movs	r3, #34	@ 0x22
 8005d38:	f04f 0a00 	mov.w	sl, #0
 8005d3c:	f04f 0b00 	mov.w	fp, #0
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e76b      	b.n	8005c1c <_strtod_l+0x454>
 8005d44:	08008ac3 	.word	0x08008ac3
 8005d48:	08008c78 	.word	0x08008c78
 8005d4c:	08008aba 	.word	0x08008aba
 8005d50:	08008abd 	.word	0x08008abd
 8005d54:	08008b7a 	.word	0x08008b7a
 8005d58:	08008d00 	.word	0x08008d00
 8005d5c:	08008cd8 	.word	0x08008cd8
 8005d60:	7ff00000 	.word	0x7ff00000
 8005d64:	7ca00000 	.word	0x7ca00000
 8005d68:	7fefffff 	.word	0x7fefffff
 8005d6c:	f014 0310 	ands.w	r3, r4, #16
 8005d70:	bf18      	it	ne
 8005d72:	236a      	movne	r3, #106	@ 0x6a
 8005d74:	4ea9      	ldr	r6, [pc, #676]	@ (800601c <_strtod_l+0x854>)
 8005d76:	9308      	str	r3, [sp, #32]
 8005d78:	4650      	mov	r0, sl
 8005d7a:	4659      	mov	r1, fp
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	07e7      	lsls	r7, r4, #31
 8005d80:	d504      	bpl.n	8005d8c <_strtod_l+0x5c4>
 8005d82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d86:	f7fa fc4f 	bl	8000628 <__aeabi_dmul>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	1064      	asrs	r4, r4, #1
 8005d8e:	f106 0608 	add.w	r6, r6, #8
 8005d92:	d1f4      	bne.n	8005d7e <_strtod_l+0x5b6>
 8005d94:	b10b      	cbz	r3, 8005d9a <_strtod_l+0x5d2>
 8005d96:	4682      	mov	sl, r0
 8005d98:	468b      	mov	fp, r1
 8005d9a:	9b08      	ldr	r3, [sp, #32]
 8005d9c:	b1b3      	cbz	r3, 8005dcc <_strtod_l+0x604>
 8005d9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005da2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	4659      	mov	r1, fp
 8005daa:	dd0f      	ble.n	8005dcc <_strtod_l+0x604>
 8005dac:	2b1f      	cmp	r3, #31
 8005dae:	dd56      	ble.n	8005e5e <_strtod_l+0x696>
 8005db0:	2b34      	cmp	r3, #52	@ 0x34
 8005db2:	bfde      	ittt	le
 8005db4:	f04f 33ff 	movle.w	r3, #4294967295
 8005db8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005dbc:	4093      	lslle	r3, r2
 8005dbe:	f04f 0a00 	mov.w	sl, #0
 8005dc2:	bfcc      	ite	gt
 8005dc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005dc8:	ea03 0b01 	andle.w	fp, r3, r1
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2300      	movs	r3, #0
 8005dd0:	4650      	mov	r0, sl
 8005dd2:	4659      	mov	r1, fp
 8005dd4:	f7fa fe90 	bl	8000af8 <__aeabi_dcmpeq>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d1a7      	bne.n	8005d2c <_strtod_l+0x564>
 8005ddc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005de2:	9805      	ldr	r0, [sp, #20]
 8005de4:	462b      	mov	r3, r5
 8005de6:	464a      	mov	r2, r9
 8005de8:	f001 fb34 	bl	8007454 <__s2b>
 8005dec:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005dee:	2800      	cmp	r0, #0
 8005df0:	f43f af09 	beq.w	8005c06 <_strtod_l+0x43e>
 8005df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	eba3 0308 	sub.w	r3, r3, r8
 8005dfe:	bfa8      	it	ge
 8005e00:	2300      	movge	r3, #0
 8005e02:	9312      	str	r3, [sp, #72]	@ 0x48
 8005e04:	2400      	movs	r4, #0
 8005e06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005e0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8005e0c:	46a0      	mov	r8, r4
 8005e0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e10:	9805      	ldr	r0, [sp, #20]
 8005e12:	6859      	ldr	r1, [r3, #4]
 8005e14:	f001 fa76 	bl	8007304 <_Balloc>
 8005e18:	4681      	mov	r9, r0
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	f43f aef7 	beq.w	8005c0e <_strtod_l+0x446>
 8005e20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	3202      	adds	r2, #2
 8005e26:	f103 010c 	add.w	r1, r3, #12
 8005e2a:	0092      	lsls	r2, r2, #2
 8005e2c:	300c      	adds	r0, #12
 8005e2e:	f000 fde6 	bl	80069fe <memcpy>
 8005e32:	ec4b ab10 	vmov	d0, sl, fp
 8005e36:	9805      	ldr	r0, [sp, #20]
 8005e38:	aa1c      	add	r2, sp, #112	@ 0x70
 8005e3a:	a91b      	add	r1, sp, #108	@ 0x6c
 8005e3c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005e40:	f001 fe3c 	bl	8007abc <__d2b>
 8005e44:	901a      	str	r0, [sp, #104]	@ 0x68
 8005e46:	2800      	cmp	r0, #0
 8005e48:	f43f aee1 	beq.w	8005c0e <_strtod_l+0x446>
 8005e4c:	9805      	ldr	r0, [sp, #20]
 8005e4e:	2101      	movs	r1, #1
 8005e50:	f001 fb96 	bl	8007580 <__i2b>
 8005e54:	4680      	mov	r8, r0
 8005e56:	b948      	cbnz	r0, 8005e6c <_strtod_l+0x6a4>
 8005e58:	f04f 0800 	mov.w	r8, #0
 8005e5c:	e6d7      	b.n	8005c0e <_strtod_l+0x446>
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	ea03 0a0a 	and.w	sl, r3, sl
 8005e6a:	e7af      	b.n	8005dcc <_strtod_l+0x604>
 8005e6c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005e6e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	bfab      	itete	ge
 8005e74:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005e76:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005e78:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005e7a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005e7c:	bfac      	ite	ge
 8005e7e:	18ef      	addge	r7, r5, r3
 8005e80:	1b5e      	sublt	r6, r3, r5
 8005e82:	9b08      	ldr	r3, [sp, #32]
 8005e84:	1aed      	subs	r5, r5, r3
 8005e86:	4415      	add	r5, r2
 8005e88:	4b65      	ldr	r3, [pc, #404]	@ (8006020 <_strtod_l+0x858>)
 8005e8a:	3d01      	subs	r5, #1
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005e92:	da50      	bge.n	8005f36 <_strtod_l+0x76e>
 8005e94:	1b5b      	subs	r3, r3, r5
 8005e96:	2b1f      	cmp	r3, #31
 8005e98:	eba2 0203 	sub.w	r2, r2, r3
 8005e9c:	f04f 0101 	mov.w	r1, #1
 8005ea0:	dc3d      	bgt.n	8005f1e <_strtod_l+0x756>
 8005ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9310      	str	r3, [sp, #64]	@ 0x40
 8005eac:	18bd      	adds	r5, r7, r2
 8005eae:	9b08      	ldr	r3, [sp, #32]
 8005eb0:	42af      	cmp	r7, r5
 8005eb2:	4416      	add	r6, r2
 8005eb4:	441e      	add	r6, r3
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	bfa8      	it	ge
 8005eba:	462b      	movge	r3, r5
 8005ebc:	42b3      	cmp	r3, r6
 8005ebe:	bfa8      	it	ge
 8005ec0:	4633      	movge	r3, r6
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfc2      	ittt	gt
 8005ec6:	1aed      	subgt	r5, r5, r3
 8005ec8:	1af6      	subgt	r6, r6, r3
 8005eca:	1aff      	subgt	r7, r7, r3
 8005ecc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dd16      	ble.n	8005f00 <_strtod_l+0x738>
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	9805      	ldr	r0, [sp, #20]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f001 fc0a 	bl	80076f0 <__pow5mult>
 8005edc:	4680      	mov	r8, r0
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d0ba      	beq.n	8005e58 <_strtod_l+0x690>
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005ee6:	9805      	ldr	r0, [sp, #20]
 8005ee8:	f001 fb60 	bl	80075ac <__multiply>
 8005eec:	900a      	str	r0, [sp, #40]	@ 0x28
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f43f ae8d 	beq.w	8005c0e <_strtod_l+0x446>
 8005ef4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ef6:	9805      	ldr	r0, [sp, #20]
 8005ef8:	f001 fa44 	bl	8007384 <_Bfree>
 8005efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005efe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	dc1d      	bgt.n	8005f40 <_strtod_l+0x778>
 8005f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dd23      	ble.n	8005f52 <_strtod_l+0x78a>
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005f0e:	9805      	ldr	r0, [sp, #20]
 8005f10:	f001 fbee 	bl	80076f0 <__pow5mult>
 8005f14:	4681      	mov	r9, r0
 8005f16:	b9e0      	cbnz	r0, 8005f52 <_strtod_l+0x78a>
 8005f18:	f04f 0900 	mov.w	r9, #0
 8005f1c:	e677      	b.n	8005c0e <_strtod_l+0x446>
 8005f1e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005f22:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005f26:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005f2a:	35e2      	adds	r5, #226	@ 0xe2
 8005f2c:	fa01 f305 	lsl.w	r3, r1, r5
 8005f30:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f32:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005f34:	e7ba      	b.n	8005eac <_strtod_l+0x6e4>
 8005f36:	2300      	movs	r3, #0
 8005f38:	9310      	str	r3, [sp, #64]	@ 0x40
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f3e:	e7b5      	b.n	8005eac <_strtod_l+0x6e4>
 8005f40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f42:	9805      	ldr	r0, [sp, #20]
 8005f44:	462a      	mov	r2, r5
 8005f46:	f001 fc2d 	bl	80077a4 <__lshift>
 8005f4a:	901a      	str	r0, [sp, #104]	@ 0x68
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d1d9      	bne.n	8005f04 <_strtod_l+0x73c>
 8005f50:	e65d      	b.n	8005c0e <_strtod_l+0x446>
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	dd07      	ble.n	8005f66 <_strtod_l+0x79e>
 8005f56:	4649      	mov	r1, r9
 8005f58:	9805      	ldr	r0, [sp, #20]
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	f001 fc22 	bl	80077a4 <__lshift>
 8005f60:	4681      	mov	r9, r0
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d0d8      	beq.n	8005f18 <_strtod_l+0x750>
 8005f66:	2f00      	cmp	r7, #0
 8005f68:	dd08      	ble.n	8005f7c <_strtod_l+0x7b4>
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	9805      	ldr	r0, [sp, #20]
 8005f6e:	463a      	mov	r2, r7
 8005f70:	f001 fc18 	bl	80077a4 <__lshift>
 8005f74:	4680      	mov	r8, r0
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f43f ae49 	beq.w	8005c0e <_strtod_l+0x446>
 8005f7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f7e:	9805      	ldr	r0, [sp, #20]
 8005f80:	464a      	mov	r2, r9
 8005f82:	f001 fc97 	bl	80078b4 <__mdiff>
 8005f86:	4604      	mov	r4, r0
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f43f ae40 	beq.w	8005c0e <_strtod_l+0x446>
 8005f8e:	68c3      	ldr	r3, [r0, #12]
 8005f90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f92:	2300      	movs	r3, #0
 8005f94:	60c3      	str	r3, [r0, #12]
 8005f96:	4641      	mov	r1, r8
 8005f98:	f001 fc70 	bl	800787c <__mcmp>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	da45      	bge.n	800602c <_strtod_l+0x864>
 8005fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fa2:	ea53 030a 	orrs.w	r3, r3, sl
 8005fa6:	d16b      	bne.n	8006080 <_strtod_l+0x8b8>
 8005fa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d167      	bne.n	8006080 <_strtod_l+0x8b8>
 8005fb0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005fb4:	0d1b      	lsrs	r3, r3, #20
 8005fb6:	051b      	lsls	r3, r3, #20
 8005fb8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005fbc:	d960      	bls.n	8006080 <_strtod_l+0x8b8>
 8005fbe:	6963      	ldr	r3, [r4, #20]
 8005fc0:	b913      	cbnz	r3, 8005fc8 <_strtod_l+0x800>
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	dd5b      	ble.n	8006080 <_strtod_l+0x8b8>
 8005fc8:	4621      	mov	r1, r4
 8005fca:	2201      	movs	r2, #1
 8005fcc:	9805      	ldr	r0, [sp, #20]
 8005fce:	f001 fbe9 	bl	80077a4 <__lshift>
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	f001 fc51 	bl	800787c <__mcmp>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	dd50      	ble.n	8006080 <_strtod_l+0x8b8>
 8005fde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005fe2:	9a08      	ldr	r2, [sp, #32]
 8005fe4:	0d1b      	lsrs	r3, r3, #20
 8005fe6:	051b      	lsls	r3, r3, #20
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	d06a      	beq.n	80060c2 <_strtod_l+0x8fa>
 8005fec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005ff0:	d867      	bhi.n	80060c2 <_strtod_l+0x8fa>
 8005ff2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005ff6:	f67f ae9d 	bls.w	8005d34 <_strtod_l+0x56c>
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8006024 <_strtod_l+0x85c>)
 8005ffc:	4650      	mov	r0, sl
 8005ffe:	4659      	mov	r1, fp
 8006000:	2200      	movs	r2, #0
 8006002:	f7fa fb11 	bl	8000628 <__aeabi_dmul>
 8006006:	4b08      	ldr	r3, [pc, #32]	@ (8006028 <_strtod_l+0x860>)
 8006008:	400b      	ands	r3, r1
 800600a:	4682      	mov	sl, r0
 800600c:	468b      	mov	fp, r1
 800600e:	2b00      	cmp	r3, #0
 8006010:	f47f ae08 	bne.w	8005c24 <_strtod_l+0x45c>
 8006014:	9a05      	ldr	r2, [sp, #20]
 8006016:	2322      	movs	r3, #34	@ 0x22
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	e603      	b.n	8005c24 <_strtod_l+0x45c>
 800601c:	08008ca0 	.word	0x08008ca0
 8006020:	fffffc02 	.word	0xfffffc02
 8006024:	39500000 	.word	0x39500000
 8006028:	7ff00000 	.word	0x7ff00000
 800602c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006030:	d165      	bne.n	80060fe <_strtod_l+0x936>
 8006032:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006038:	b35a      	cbz	r2, 8006092 <_strtod_l+0x8ca>
 800603a:	4a9f      	ldr	r2, [pc, #636]	@ (80062b8 <_strtod_l+0xaf0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d12b      	bne.n	8006098 <_strtod_l+0x8d0>
 8006040:	9b08      	ldr	r3, [sp, #32]
 8006042:	4651      	mov	r1, sl
 8006044:	b303      	cbz	r3, 8006088 <_strtod_l+0x8c0>
 8006046:	4b9d      	ldr	r3, [pc, #628]	@ (80062bc <_strtod_l+0xaf4>)
 8006048:	465a      	mov	r2, fp
 800604a:	4013      	ands	r3, r2
 800604c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006050:	f04f 32ff 	mov.w	r2, #4294967295
 8006054:	d81b      	bhi.n	800608e <_strtod_l+0x8c6>
 8006056:	0d1b      	lsrs	r3, r3, #20
 8006058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	4299      	cmp	r1, r3
 8006062:	d119      	bne.n	8006098 <_strtod_l+0x8d0>
 8006064:	4b96      	ldr	r3, [pc, #600]	@ (80062c0 <_strtod_l+0xaf8>)
 8006066:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006068:	429a      	cmp	r2, r3
 800606a:	d102      	bne.n	8006072 <_strtod_l+0x8aa>
 800606c:	3101      	adds	r1, #1
 800606e:	f43f adce 	beq.w	8005c0e <_strtod_l+0x446>
 8006072:	4b92      	ldr	r3, [pc, #584]	@ (80062bc <_strtod_l+0xaf4>)
 8006074:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006076:	401a      	ands	r2, r3
 8006078:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800607c:	f04f 0a00 	mov.w	sl, #0
 8006080:	9b08      	ldr	r3, [sp, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1b9      	bne.n	8005ffa <_strtod_l+0x832>
 8006086:	e5cd      	b.n	8005c24 <_strtod_l+0x45c>
 8006088:	f04f 33ff 	mov.w	r3, #4294967295
 800608c:	e7e8      	b.n	8006060 <_strtod_l+0x898>
 800608e:	4613      	mov	r3, r2
 8006090:	e7e6      	b.n	8006060 <_strtod_l+0x898>
 8006092:	ea53 030a 	orrs.w	r3, r3, sl
 8006096:	d0a2      	beq.n	8005fde <_strtod_l+0x816>
 8006098:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800609a:	b1db      	cbz	r3, 80060d4 <_strtod_l+0x90c>
 800609c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800609e:	4213      	tst	r3, r2
 80060a0:	d0ee      	beq.n	8006080 <_strtod_l+0x8b8>
 80060a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060a4:	9a08      	ldr	r2, [sp, #32]
 80060a6:	4650      	mov	r0, sl
 80060a8:	4659      	mov	r1, fp
 80060aa:	b1bb      	cbz	r3, 80060dc <_strtod_l+0x914>
 80060ac:	f7ff fb6d 	bl	800578a <sulp>
 80060b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060b4:	ec53 2b10 	vmov	r2, r3, d0
 80060b8:	f7fa f900 	bl	80002bc <__adddf3>
 80060bc:	4682      	mov	sl, r0
 80060be:	468b      	mov	fp, r1
 80060c0:	e7de      	b.n	8006080 <_strtod_l+0x8b8>
 80060c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80060c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80060ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80060ce:	f04f 3aff 	mov.w	sl, #4294967295
 80060d2:	e7d5      	b.n	8006080 <_strtod_l+0x8b8>
 80060d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060d6:	ea13 0f0a 	tst.w	r3, sl
 80060da:	e7e1      	b.n	80060a0 <_strtod_l+0x8d8>
 80060dc:	f7ff fb55 	bl	800578a <sulp>
 80060e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060e4:	ec53 2b10 	vmov	r2, r3, d0
 80060e8:	f7fa f8e6 	bl	80002b8 <__aeabi_dsub>
 80060ec:	2200      	movs	r2, #0
 80060ee:	2300      	movs	r3, #0
 80060f0:	4682      	mov	sl, r0
 80060f2:	468b      	mov	fp, r1
 80060f4:	f7fa fd00 	bl	8000af8 <__aeabi_dcmpeq>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d0c1      	beq.n	8006080 <_strtod_l+0x8b8>
 80060fc:	e61a      	b.n	8005d34 <_strtod_l+0x56c>
 80060fe:	4641      	mov	r1, r8
 8006100:	4620      	mov	r0, r4
 8006102:	f001 fd33 	bl	8007b6c <__ratio>
 8006106:	ec57 6b10 	vmov	r6, r7, d0
 800610a:	2200      	movs	r2, #0
 800610c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	f7fa fd04 	bl	8000b20 <__aeabi_dcmple>
 8006118:	2800      	cmp	r0, #0
 800611a:	d06f      	beq.n	80061fc <_strtod_l+0xa34>
 800611c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d17a      	bne.n	8006218 <_strtod_l+0xa50>
 8006122:	f1ba 0f00 	cmp.w	sl, #0
 8006126:	d158      	bne.n	80061da <_strtod_l+0xa12>
 8006128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800612a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800612e:	2b00      	cmp	r3, #0
 8006130:	d15a      	bne.n	80061e8 <_strtod_l+0xa20>
 8006132:	4b64      	ldr	r3, [pc, #400]	@ (80062c4 <_strtod_l+0xafc>)
 8006134:	2200      	movs	r2, #0
 8006136:	4630      	mov	r0, r6
 8006138:	4639      	mov	r1, r7
 800613a:	f7fa fce7 	bl	8000b0c <__aeabi_dcmplt>
 800613e:	2800      	cmp	r0, #0
 8006140:	d159      	bne.n	80061f6 <_strtod_l+0xa2e>
 8006142:	4630      	mov	r0, r6
 8006144:	4639      	mov	r1, r7
 8006146:	4b60      	ldr	r3, [pc, #384]	@ (80062c8 <_strtod_l+0xb00>)
 8006148:	2200      	movs	r2, #0
 800614a:	f7fa fa6d 	bl	8000628 <__aeabi_dmul>
 800614e:	4606      	mov	r6, r0
 8006150:	460f      	mov	r7, r1
 8006152:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006156:	9606      	str	r6, [sp, #24]
 8006158:	9307      	str	r3, [sp, #28]
 800615a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800615e:	4d57      	ldr	r5, [pc, #348]	@ (80062bc <_strtod_l+0xaf4>)
 8006160:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006166:	401d      	ands	r5, r3
 8006168:	4b58      	ldr	r3, [pc, #352]	@ (80062cc <_strtod_l+0xb04>)
 800616a:	429d      	cmp	r5, r3
 800616c:	f040 80b2 	bne.w	80062d4 <_strtod_l+0xb0c>
 8006170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006172:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006176:	ec4b ab10 	vmov	d0, sl, fp
 800617a:	f001 fc2f 	bl	80079dc <__ulp>
 800617e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006182:	ec51 0b10 	vmov	r0, r1, d0
 8006186:	f7fa fa4f 	bl	8000628 <__aeabi_dmul>
 800618a:	4652      	mov	r2, sl
 800618c:	465b      	mov	r3, fp
 800618e:	f7fa f895 	bl	80002bc <__adddf3>
 8006192:	460b      	mov	r3, r1
 8006194:	4949      	ldr	r1, [pc, #292]	@ (80062bc <_strtod_l+0xaf4>)
 8006196:	4a4e      	ldr	r2, [pc, #312]	@ (80062d0 <_strtod_l+0xb08>)
 8006198:	4019      	ands	r1, r3
 800619a:	4291      	cmp	r1, r2
 800619c:	4682      	mov	sl, r0
 800619e:	d942      	bls.n	8006226 <_strtod_l+0xa5e>
 80061a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80061a2:	4b47      	ldr	r3, [pc, #284]	@ (80062c0 <_strtod_l+0xaf8>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d103      	bne.n	80061b0 <_strtod_l+0x9e8>
 80061a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80061aa:	3301      	adds	r3, #1
 80061ac:	f43f ad2f 	beq.w	8005c0e <_strtod_l+0x446>
 80061b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80062c0 <_strtod_l+0xaf8>
 80061b4:	f04f 3aff 	mov.w	sl, #4294967295
 80061b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061ba:	9805      	ldr	r0, [sp, #20]
 80061bc:	f001 f8e2 	bl	8007384 <_Bfree>
 80061c0:	9805      	ldr	r0, [sp, #20]
 80061c2:	4649      	mov	r1, r9
 80061c4:	f001 f8de 	bl	8007384 <_Bfree>
 80061c8:	9805      	ldr	r0, [sp, #20]
 80061ca:	4641      	mov	r1, r8
 80061cc:	f001 f8da 	bl	8007384 <_Bfree>
 80061d0:	9805      	ldr	r0, [sp, #20]
 80061d2:	4621      	mov	r1, r4
 80061d4:	f001 f8d6 	bl	8007384 <_Bfree>
 80061d8:	e619      	b.n	8005e0e <_strtod_l+0x646>
 80061da:	f1ba 0f01 	cmp.w	sl, #1
 80061de:	d103      	bne.n	80061e8 <_strtod_l+0xa20>
 80061e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f43f ada6 	beq.w	8005d34 <_strtod_l+0x56c>
 80061e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006298 <_strtod_l+0xad0>
 80061ec:	4f35      	ldr	r7, [pc, #212]	@ (80062c4 <_strtod_l+0xafc>)
 80061ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80061f2:	2600      	movs	r6, #0
 80061f4:	e7b1      	b.n	800615a <_strtod_l+0x992>
 80061f6:	4f34      	ldr	r7, [pc, #208]	@ (80062c8 <_strtod_l+0xb00>)
 80061f8:	2600      	movs	r6, #0
 80061fa:	e7aa      	b.n	8006152 <_strtod_l+0x98a>
 80061fc:	4b32      	ldr	r3, [pc, #200]	@ (80062c8 <_strtod_l+0xb00>)
 80061fe:	4630      	mov	r0, r6
 8006200:	4639      	mov	r1, r7
 8006202:	2200      	movs	r2, #0
 8006204:	f7fa fa10 	bl	8000628 <__aeabi_dmul>
 8006208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d09f      	beq.n	8006152 <_strtod_l+0x98a>
 8006212:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006216:	e7a0      	b.n	800615a <_strtod_l+0x992>
 8006218:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80062a0 <_strtod_l+0xad8>
 800621c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006220:	ec57 6b17 	vmov	r6, r7, d7
 8006224:	e799      	b.n	800615a <_strtod_l+0x992>
 8006226:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800622a:	9b08      	ldr	r3, [sp, #32]
 800622c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1c1      	bne.n	80061b8 <_strtod_l+0x9f0>
 8006234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006238:	0d1b      	lsrs	r3, r3, #20
 800623a:	051b      	lsls	r3, r3, #20
 800623c:	429d      	cmp	r5, r3
 800623e:	d1bb      	bne.n	80061b8 <_strtod_l+0x9f0>
 8006240:	4630      	mov	r0, r6
 8006242:	4639      	mov	r1, r7
 8006244:	f7fa fd12 	bl	8000c6c <__aeabi_d2lz>
 8006248:	f7fa f9c0 	bl	80005cc <__aeabi_l2d>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4630      	mov	r0, r6
 8006252:	4639      	mov	r1, r7
 8006254:	f7fa f830 	bl	80002b8 <__aeabi_dsub>
 8006258:	460b      	mov	r3, r1
 800625a:	4602      	mov	r2, r0
 800625c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006260:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006266:	ea46 060a 	orr.w	r6, r6, sl
 800626a:	431e      	orrs	r6, r3
 800626c:	d06f      	beq.n	800634e <_strtod_l+0xb86>
 800626e:	a30e      	add	r3, pc, #56	@ (adr r3, 80062a8 <_strtod_l+0xae0>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7fa fc4a 	bl	8000b0c <__aeabi_dcmplt>
 8006278:	2800      	cmp	r0, #0
 800627a:	f47f acd3 	bne.w	8005c24 <_strtod_l+0x45c>
 800627e:	a30c      	add	r3, pc, #48	@ (adr r3, 80062b0 <_strtod_l+0xae8>)
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006288:	f7fa fc5e 	bl	8000b48 <__aeabi_dcmpgt>
 800628c:	2800      	cmp	r0, #0
 800628e:	d093      	beq.n	80061b8 <_strtod_l+0x9f0>
 8006290:	e4c8      	b.n	8005c24 <_strtod_l+0x45c>
 8006292:	bf00      	nop
 8006294:	f3af 8000 	nop.w
 8006298:	00000000 	.word	0x00000000
 800629c:	bff00000 	.word	0xbff00000
 80062a0:	00000000 	.word	0x00000000
 80062a4:	3ff00000 	.word	0x3ff00000
 80062a8:	94a03595 	.word	0x94a03595
 80062ac:	3fdfffff 	.word	0x3fdfffff
 80062b0:	35afe535 	.word	0x35afe535
 80062b4:	3fe00000 	.word	0x3fe00000
 80062b8:	000fffff 	.word	0x000fffff
 80062bc:	7ff00000 	.word	0x7ff00000
 80062c0:	7fefffff 	.word	0x7fefffff
 80062c4:	3ff00000 	.word	0x3ff00000
 80062c8:	3fe00000 	.word	0x3fe00000
 80062cc:	7fe00000 	.word	0x7fe00000
 80062d0:	7c9fffff 	.word	0x7c9fffff
 80062d4:	9b08      	ldr	r3, [sp, #32]
 80062d6:	b323      	cbz	r3, 8006322 <_strtod_l+0xb5a>
 80062d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80062dc:	d821      	bhi.n	8006322 <_strtod_l+0xb5a>
 80062de:	a328      	add	r3, pc, #160	@ (adr r3, 8006380 <_strtod_l+0xbb8>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	4630      	mov	r0, r6
 80062e6:	4639      	mov	r1, r7
 80062e8:	f7fa fc1a 	bl	8000b20 <__aeabi_dcmple>
 80062ec:	b1a0      	cbz	r0, 8006318 <_strtod_l+0xb50>
 80062ee:	4639      	mov	r1, r7
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7fa fc33 	bl	8000b5c <__aeabi_d2uiz>
 80062f6:	2801      	cmp	r0, #1
 80062f8:	bf38      	it	cc
 80062fa:	2001      	movcc	r0, #1
 80062fc:	f7fa f91a 	bl	8000534 <__aeabi_ui2d>
 8006300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006302:	4606      	mov	r6, r0
 8006304:	460f      	mov	r7, r1
 8006306:	b9fb      	cbnz	r3, 8006348 <_strtod_l+0xb80>
 8006308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800630c:	9014      	str	r0, [sp, #80]	@ 0x50
 800630e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006314:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006318:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800631a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800631e:	1b5b      	subs	r3, r3, r5
 8006320:	9311      	str	r3, [sp, #68]	@ 0x44
 8006322:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006326:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800632a:	f001 fb57 	bl	80079dc <__ulp>
 800632e:	4650      	mov	r0, sl
 8006330:	ec53 2b10 	vmov	r2, r3, d0
 8006334:	4659      	mov	r1, fp
 8006336:	f7fa f977 	bl	8000628 <__aeabi_dmul>
 800633a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800633e:	f7f9 ffbd 	bl	80002bc <__adddf3>
 8006342:	4682      	mov	sl, r0
 8006344:	468b      	mov	fp, r1
 8006346:	e770      	b.n	800622a <_strtod_l+0xa62>
 8006348:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800634c:	e7e0      	b.n	8006310 <_strtod_l+0xb48>
 800634e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006388 <_strtod_l+0xbc0>)
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa fbda 	bl	8000b0c <__aeabi_dcmplt>
 8006358:	e798      	b.n	800628c <_strtod_l+0xac4>
 800635a:	2300      	movs	r3, #0
 800635c:	930e      	str	r3, [sp, #56]	@ 0x38
 800635e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	f7ff ba6d 	b.w	8005842 <_strtod_l+0x7a>
 8006368:	2a65      	cmp	r2, #101	@ 0x65
 800636a:	f43f ab68 	beq.w	8005a3e <_strtod_l+0x276>
 800636e:	2a45      	cmp	r2, #69	@ 0x45
 8006370:	f43f ab65 	beq.w	8005a3e <_strtod_l+0x276>
 8006374:	2301      	movs	r3, #1
 8006376:	f7ff bba0 	b.w	8005aba <_strtod_l+0x2f2>
 800637a:	bf00      	nop
 800637c:	f3af 8000 	nop.w
 8006380:	ffc00000 	.word	0xffc00000
 8006384:	41dfffff 	.word	0x41dfffff
 8006388:	94a03595 	.word	0x94a03595
 800638c:	3fcfffff 	.word	0x3fcfffff

08006390 <strtod>:
 8006390:	460a      	mov	r2, r1
 8006392:	4601      	mov	r1, r0
 8006394:	4802      	ldr	r0, [pc, #8]	@ (80063a0 <strtod+0x10>)
 8006396:	4b03      	ldr	r3, [pc, #12]	@ (80063a4 <strtod+0x14>)
 8006398:	6800      	ldr	r0, [r0, #0]
 800639a:	f7ff ba15 	b.w	80057c8 <_strtod_l>
 800639e:	bf00      	nop
 80063a0:	20000454 	.word	0x20000454
 80063a4:	200002e8 	.word	0x200002e8

080063a8 <std>:
 80063a8:	2300      	movs	r3, #0
 80063aa:	b510      	push	{r4, lr}
 80063ac:	4604      	mov	r4, r0
 80063ae:	e9c0 3300 	strd	r3, r3, [r0]
 80063b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063b6:	6083      	str	r3, [r0, #8]
 80063b8:	8181      	strh	r1, [r0, #12]
 80063ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80063bc:	81c2      	strh	r2, [r0, #14]
 80063be:	6183      	str	r3, [r0, #24]
 80063c0:	4619      	mov	r1, r3
 80063c2:	2208      	movs	r2, #8
 80063c4:	305c      	adds	r0, #92	@ 0x5c
 80063c6:	f000 fa1b 	bl	8006800 <memset>
 80063ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <std+0x58>)
 80063cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <std+0x5c>)
 80063d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <std+0x60>)
 80063d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063d6:	4b0d      	ldr	r3, [pc, #52]	@ (800640c <std+0x64>)
 80063d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80063da:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <std+0x68>)
 80063dc:	6224      	str	r4, [r4, #32]
 80063de:	429c      	cmp	r4, r3
 80063e0:	d006      	beq.n	80063f0 <std+0x48>
 80063e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063e6:	4294      	cmp	r4, r2
 80063e8:	d002      	beq.n	80063f0 <std+0x48>
 80063ea:	33d0      	adds	r3, #208	@ 0xd0
 80063ec:	429c      	cmp	r4, r3
 80063ee:	d105      	bne.n	80063fc <std+0x54>
 80063f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f8:	f000 baf6 	b.w	80069e8 <__retarget_lock_init_recursive>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	bf00      	nop
 8006400:	08006651 	.word	0x08006651
 8006404:	08006673 	.word	0x08006673
 8006408:	080066ab 	.word	0x080066ab
 800640c:	080066cf 	.word	0x080066cf
 8006410:	20000930 	.word	0x20000930

08006414 <stdio_exit_handler>:
 8006414:	4a02      	ldr	r2, [pc, #8]	@ (8006420 <stdio_exit_handler+0xc>)
 8006416:	4903      	ldr	r1, [pc, #12]	@ (8006424 <stdio_exit_handler+0x10>)
 8006418:	4803      	ldr	r0, [pc, #12]	@ (8006428 <stdio_exit_handler+0x14>)
 800641a:	f000 b869 	b.w	80064f0 <_fwalk_sglue>
 800641e:	bf00      	nop
 8006420:	200002dc 	.word	0x200002dc
 8006424:	080085c5 	.word	0x080085c5
 8006428:	20000458 	.word	0x20000458

0800642c <cleanup_stdio>:
 800642c:	6841      	ldr	r1, [r0, #4]
 800642e:	4b0c      	ldr	r3, [pc, #48]	@ (8006460 <cleanup_stdio+0x34>)
 8006430:	4299      	cmp	r1, r3
 8006432:	b510      	push	{r4, lr}
 8006434:	4604      	mov	r4, r0
 8006436:	d001      	beq.n	800643c <cleanup_stdio+0x10>
 8006438:	f002 f8c4 	bl	80085c4 <_fflush_r>
 800643c:	68a1      	ldr	r1, [r4, #8]
 800643e:	4b09      	ldr	r3, [pc, #36]	@ (8006464 <cleanup_stdio+0x38>)
 8006440:	4299      	cmp	r1, r3
 8006442:	d002      	beq.n	800644a <cleanup_stdio+0x1e>
 8006444:	4620      	mov	r0, r4
 8006446:	f002 f8bd 	bl	80085c4 <_fflush_r>
 800644a:	68e1      	ldr	r1, [r4, #12]
 800644c:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <cleanup_stdio+0x3c>)
 800644e:	4299      	cmp	r1, r3
 8006450:	d004      	beq.n	800645c <cleanup_stdio+0x30>
 8006452:	4620      	mov	r0, r4
 8006454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006458:	f002 b8b4 	b.w	80085c4 <_fflush_r>
 800645c:	bd10      	pop	{r4, pc}
 800645e:	bf00      	nop
 8006460:	20000930 	.word	0x20000930
 8006464:	20000998 	.word	0x20000998
 8006468:	20000a00 	.word	0x20000a00

0800646c <global_stdio_init.part.0>:
 800646c:	b510      	push	{r4, lr}
 800646e:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <global_stdio_init.part.0+0x30>)
 8006470:	4c0b      	ldr	r4, [pc, #44]	@ (80064a0 <global_stdio_init.part.0+0x34>)
 8006472:	4a0c      	ldr	r2, [pc, #48]	@ (80064a4 <global_stdio_init.part.0+0x38>)
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	4620      	mov	r0, r4
 8006478:	2200      	movs	r2, #0
 800647a:	2104      	movs	r1, #4
 800647c:	f7ff ff94 	bl	80063a8 <std>
 8006480:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006484:	2201      	movs	r2, #1
 8006486:	2109      	movs	r1, #9
 8006488:	f7ff ff8e 	bl	80063a8 <std>
 800648c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006490:	2202      	movs	r2, #2
 8006492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006496:	2112      	movs	r1, #18
 8006498:	f7ff bf86 	b.w	80063a8 <std>
 800649c:	20000a68 	.word	0x20000a68
 80064a0:	20000930 	.word	0x20000930
 80064a4:	08006415 	.word	0x08006415

080064a8 <__sfp_lock_acquire>:
 80064a8:	4801      	ldr	r0, [pc, #4]	@ (80064b0 <__sfp_lock_acquire+0x8>)
 80064aa:	f000 ba9e 	b.w	80069ea <__retarget_lock_acquire_recursive>
 80064ae:	bf00      	nop
 80064b0:	20000a71 	.word	0x20000a71

080064b4 <__sfp_lock_release>:
 80064b4:	4801      	ldr	r0, [pc, #4]	@ (80064bc <__sfp_lock_release+0x8>)
 80064b6:	f000 ba99 	b.w	80069ec <__retarget_lock_release_recursive>
 80064ba:	bf00      	nop
 80064bc:	20000a71 	.word	0x20000a71

080064c0 <__sinit>:
 80064c0:	b510      	push	{r4, lr}
 80064c2:	4604      	mov	r4, r0
 80064c4:	f7ff fff0 	bl	80064a8 <__sfp_lock_acquire>
 80064c8:	6a23      	ldr	r3, [r4, #32]
 80064ca:	b11b      	cbz	r3, 80064d4 <__sinit+0x14>
 80064cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d0:	f7ff bff0 	b.w	80064b4 <__sfp_lock_release>
 80064d4:	4b04      	ldr	r3, [pc, #16]	@ (80064e8 <__sinit+0x28>)
 80064d6:	6223      	str	r3, [r4, #32]
 80064d8:	4b04      	ldr	r3, [pc, #16]	@ (80064ec <__sinit+0x2c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f5      	bne.n	80064cc <__sinit+0xc>
 80064e0:	f7ff ffc4 	bl	800646c <global_stdio_init.part.0>
 80064e4:	e7f2      	b.n	80064cc <__sinit+0xc>
 80064e6:	bf00      	nop
 80064e8:	0800642d 	.word	0x0800642d
 80064ec:	20000a68 	.word	0x20000a68

080064f0 <_fwalk_sglue>:
 80064f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064f4:	4607      	mov	r7, r0
 80064f6:	4688      	mov	r8, r1
 80064f8:	4614      	mov	r4, r2
 80064fa:	2600      	movs	r6, #0
 80064fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006500:	f1b9 0901 	subs.w	r9, r9, #1
 8006504:	d505      	bpl.n	8006512 <_fwalk_sglue+0x22>
 8006506:	6824      	ldr	r4, [r4, #0]
 8006508:	2c00      	cmp	r4, #0
 800650a:	d1f7      	bne.n	80064fc <_fwalk_sglue+0xc>
 800650c:	4630      	mov	r0, r6
 800650e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006512:	89ab      	ldrh	r3, [r5, #12]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d907      	bls.n	8006528 <_fwalk_sglue+0x38>
 8006518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800651c:	3301      	adds	r3, #1
 800651e:	d003      	beq.n	8006528 <_fwalk_sglue+0x38>
 8006520:	4629      	mov	r1, r5
 8006522:	4638      	mov	r0, r7
 8006524:	47c0      	blx	r8
 8006526:	4306      	orrs	r6, r0
 8006528:	3568      	adds	r5, #104	@ 0x68
 800652a:	e7e9      	b.n	8006500 <_fwalk_sglue+0x10>

0800652c <iprintf>:
 800652c:	b40f      	push	{r0, r1, r2, r3}
 800652e:	b507      	push	{r0, r1, r2, lr}
 8006530:	4906      	ldr	r1, [pc, #24]	@ (800654c <iprintf+0x20>)
 8006532:	ab04      	add	r3, sp, #16
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	f853 2b04 	ldr.w	r2, [r3], #4
 800653a:	6881      	ldr	r1, [r0, #8]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	f001 fd19 	bl	8007f74 <_vfiprintf_r>
 8006542:	b003      	add	sp, #12
 8006544:	f85d eb04 	ldr.w	lr, [sp], #4
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr
 800654c:	20000454 	.word	0x20000454

08006550 <_puts_r>:
 8006550:	6a03      	ldr	r3, [r0, #32]
 8006552:	b570      	push	{r4, r5, r6, lr}
 8006554:	6884      	ldr	r4, [r0, #8]
 8006556:	4605      	mov	r5, r0
 8006558:	460e      	mov	r6, r1
 800655a:	b90b      	cbnz	r3, 8006560 <_puts_r+0x10>
 800655c:	f7ff ffb0 	bl	80064c0 <__sinit>
 8006560:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006562:	07db      	lsls	r3, r3, #31
 8006564:	d405      	bmi.n	8006572 <_puts_r+0x22>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	0598      	lsls	r0, r3, #22
 800656a:	d402      	bmi.n	8006572 <_puts_r+0x22>
 800656c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800656e:	f000 fa3c 	bl	80069ea <__retarget_lock_acquire_recursive>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	0719      	lsls	r1, r3, #28
 8006576:	d502      	bpl.n	800657e <_puts_r+0x2e>
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d135      	bne.n	80065ea <_puts_r+0x9a>
 800657e:	4621      	mov	r1, r4
 8006580:	4628      	mov	r0, r5
 8006582:	f000 f8e7 	bl	8006754 <__swsetup_r>
 8006586:	b380      	cbz	r0, 80065ea <_puts_r+0x9a>
 8006588:	f04f 35ff 	mov.w	r5, #4294967295
 800658c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800658e:	07da      	lsls	r2, r3, #31
 8006590:	d405      	bmi.n	800659e <_puts_r+0x4e>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	059b      	lsls	r3, r3, #22
 8006596:	d402      	bmi.n	800659e <_puts_r+0x4e>
 8006598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800659a:	f000 fa27 	bl	80069ec <__retarget_lock_release_recursive>
 800659e:	4628      	mov	r0, r5
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	da04      	bge.n	80065b0 <_puts_r+0x60>
 80065a6:	69a2      	ldr	r2, [r4, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	dc17      	bgt.n	80065dc <_puts_r+0x8c>
 80065ac:	290a      	cmp	r1, #10
 80065ae:	d015      	beq.n	80065dc <_puts_r+0x8c>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	6022      	str	r2, [r4, #0]
 80065b6:	7019      	strb	r1, [r3, #0]
 80065b8:	68a3      	ldr	r3, [r4, #8]
 80065ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065be:	3b01      	subs	r3, #1
 80065c0:	60a3      	str	r3, [r4, #8]
 80065c2:	2900      	cmp	r1, #0
 80065c4:	d1ed      	bne.n	80065a2 <_puts_r+0x52>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da11      	bge.n	80065ee <_puts_r+0x9e>
 80065ca:	4622      	mov	r2, r4
 80065cc:	210a      	movs	r1, #10
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f881 	bl	80066d6 <__swbuf_r>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d0d7      	beq.n	8006588 <_puts_r+0x38>
 80065d8:	250a      	movs	r5, #10
 80065da:	e7d7      	b.n	800658c <_puts_r+0x3c>
 80065dc:	4622      	mov	r2, r4
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 f879 	bl	80066d6 <__swbuf_r>
 80065e4:	3001      	adds	r0, #1
 80065e6:	d1e7      	bne.n	80065b8 <_puts_r+0x68>
 80065e8:	e7ce      	b.n	8006588 <_puts_r+0x38>
 80065ea:	3e01      	subs	r6, #1
 80065ec:	e7e4      	b.n	80065b8 <_puts_r+0x68>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	6022      	str	r2, [r4, #0]
 80065f4:	220a      	movs	r2, #10
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	e7ee      	b.n	80065d8 <_puts_r+0x88>
	...

080065fc <puts>:
 80065fc:	4b02      	ldr	r3, [pc, #8]	@ (8006608 <puts+0xc>)
 80065fe:	4601      	mov	r1, r0
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	f7ff bfa5 	b.w	8006550 <_puts_r>
 8006606:	bf00      	nop
 8006608:	20000454 	.word	0x20000454

0800660c <siprintf>:
 800660c:	b40e      	push	{r1, r2, r3}
 800660e:	b510      	push	{r4, lr}
 8006610:	b09d      	sub	sp, #116	@ 0x74
 8006612:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006614:	9002      	str	r0, [sp, #8]
 8006616:	9006      	str	r0, [sp, #24]
 8006618:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800661c:	480a      	ldr	r0, [pc, #40]	@ (8006648 <siprintf+0x3c>)
 800661e:	9107      	str	r1, [sp, #28]
 8006620:	9104      	str	r1, [sp, #16]
 8006622:	490a      	ldr	r1, [pc, #40]	@ (800664c <siprintf+0x40>)
 8006624:	f853 2b04 	ldr.w	r2, [r3], #4
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	2400      	movs	r4, #0
 800662c:	a902      	add	r1, sp, #8
 800662e:	6800      	ldr	r0, [r0, #0]
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006634:	f001 fb78 	bl	8007d28 <_svfiprintf_r>
 8006638:	9b02      	ldr	r3, [sp, #8]
 800663a:	701c      	strb	r4, [r3, #0]
 800663c:	b01d      	add	sp, #116	@ 0x74
 800663e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006642:	b003      	add	sp, #12
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000454 	.word	0x20000454
 800664c:	ffff0208 	.word	0xffff0208

08006650 <__sread>:
 8006650:	b510      	push	{r4, lr}
 8006652:	460c      	mov	r4, r1
 8006654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006658:	f000 f978 	bl	800694c <_read_r>
 800665c:	2800      	cmp	r0, #0
 800665e:	bfab      	itete	ge
 8006660:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006662:	89a3      	ldrhlt	r3, [r4, #12]
 8006664:	181b      	addge	r3, r3, r0
 8006666:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800666a:	bfac      	ite	ge
 800666c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800666e:	81a3      	strhlt	r3, [r4, #12]
 8006670:	bd10      	pop	{r4, pc}

08006672 <__swrite>:
 8006672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	461f      	mov	r7, r3
 8006678:	898b      	ldrh	r3, [r1, #12]
 800667a:	05db      	lsls	r3, r3, #23
 800667c:	4605      	mov	r5, r0
 800667e:	460c      	mov	r4, r1
 8006680:	4616      	mov	r6, r2
 8006682:	d505      	bpl.n	8006690 <__swrite+0x1e>
 8006684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006688:	2302      	movs	r3, #2
 800668a:	2200      	movs	r2, #0
 800668c:	f000 f94c 	bl	8006928 <_lseek_r>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	4632      	mov	r2, r6
 800669e:	463b      	mov	r3, r7
 80066a0:	4628      	mov	r0, r5
 80066a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a6:	f000 b963 	b.w	8006970 <_write_r>

080066aa <__sseek>:
 80066aa:	b510      	push	{r4, lr}
 80066ac:	460c      	mov	r4, r1
 80066ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b2:	f000 f939 	bl	8006928 <_lseek_r>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	bf15      	itete	ne
 80066bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066c6:	81a3      	strheq	r3, [r4, #12]
 80066c8:	bf18      	it	ne
 80066ca:	81a3      	strhne	r3, [r4, #12]
 80066cc:	bd10      	pop	{r4, pc}

080066ce <__sclose>:
 80066ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d2:	f000 b919 	b.w	8006908 <_close_r>

080066d6 <__swbuf_r>:
 80066d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d8:	460e      	mov	r6, r1
 80066da:	4614      	mov	r4, r2
 80066dc:	4605      	mov	r5, r0
 80066de:	b118      	cbz	r0, 80066e8 <__swbuf_r+0x12>
 80066e0:	6a03      	ldr	r3, [r0, #32]
 80066e2:	b90b      	cbnz	r3, 80066e8 <__swbuf_r+0x12>
 80066e4:	f7ff feec 	bl	80064c0 <__sinit>
 80066e8:	69a3      	ldr	r3, [r4, #24]
 80066ea:	60a3      	str	r3, [r4, #8]
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	071a      	lsls	r2, r3, #28
 80066f0:	d501      	bpl.n	80066f6 <__swbuf_r+0x20>
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	b943      	cbnz	r3, 8006708 <__swbuf_r+0x32>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 f82b 	bl	8006754 <__swsetup_r>
 80066fe:	b118      	cbz	r0, 8006708 <__swbuf_r+0x32>
 8006700:	f04f 37ff 	mov.w	r7, #4294967295
 8006704:	4638      	mov	r0, r7
 8006706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	6922      	ldr	r2, [r4, #16]
 800670c:	1a98      	subs	r0, r3, r2
 800670e:	6963      	ldr	r3, [r4, #20]
 8006710:	b2f6      	uxtb	r6, r6
 8006712:	4283      	cmp	r3, r0
 8006714:	4637      	mov	r7, r6
 8006716:	dc05      	bgt.n	8006724 <__swbuf_r+0x4e>
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f001 ff52 	bl	80085c4 <_fflush_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	d1ed      	bne.n	8006700 <__swbuf_r+0x2a>
 8006724:	68a3      	ldr	r3, [r4, #8]
 8006726:	3b01      	subs	r3, #1
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	701e      	strb	r6, [r3, #0]
 8006732:	6962      	ldr	r2, [r4, #20]
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	429a      	cmp	r2, r3
 8006738:	d004      	beq.n	8006744 <__swbuf_r+0x6e>
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	07db      	lsls	r3, r3, #31
 800673e:	d5e1      	bpl.n	8006704 <__swbuf_r+0x2e>
 8006740:	2e0a      	cmp	r6, #10
 8006742:	d1df      	bne.n	8006704 <__swbuf_r+0x2e>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f001 ff3c 	bl	80085c4 <_fflush_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0d9      	beq.n	8006704 <__swbuf_r+0x2e>
 8006750:	e7d6      	b.n	8006700 <__swbuf_r+0x2a>
	...

08006754 <__swsetup_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4b29      	ldr	r3, [pc, #164]	@ (80067fc <__swsetup_r+0xa8>)
 8006758:	4605      	mov	r5, r0
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	460c      	mov	r4, r1
 800675e:	b118      	cbz	r0, 8006768 <__swsetup_r+0x14>
 8006760:	6a03      	ldr	r3, [r0, #32]
 8006762:	b90b      	cbnz	r3, 8006768 <__swsetup_r+0x14>
 8006764:	f7ff feac 	bl	80064c0 <__sinit>
 8006768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676c:	0719      	lsls	r1, r3, #28
 800676e:	d422      	bmi.n	80067b6 <__swsetup_r+0x62>
 8006770:	06da      	lsls	r2, r3, #27
 8006772:	d407      	bmi.n	8006784 <__swsetup_r+0x30>
 8006774:	2209      	movs	r2, #9
 8006776:	602a      	str	r2, [r5, #0]
 8006778:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800677c:	81a3      	strh	r3, [r4, #12]
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	e033      	b.n	80067ec <__swsetup_r+0x98>
 8006784:	0758      	lsls	r0, r3, #29
 8006786:	d512      	bpl.n	80067ae <__swsetup_r+0x5a>
 8006788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800678a:	b141      	cbz	r1, 800679e <__swsetup_r+0x4a>
 800678c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006790:	4299      	cmp	r1, r3
 8006792:	d002      	beq.n	800679a <__swsetup_r+0x46>
 8006794:	4628      	mov	r0, r5
 8006796:	f000 f969 	bl	8006a6c <_free_r>
 800679a:	2300      	movs	r3, #0
 800679c:	6363      	str	r3, [r4, #52]	@ 0x34
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	2300      	movs	r3, #0
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f043 0308 	orr.w	r3, r3, #8
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	b94b      	cbnz	r3, 80067ce <__swsetup_r+0x7a>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067c4:	d003      	beq.n	80067ce <__swsetup_r+0x7a>
 80067c6:	4621      	mov	r1, r4
 80067c8:	4628      	mov	r0, r5
 80067ca:	f001 ff5b 	bl	8008684 <__smakebuf_r>
 80067ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d2:	f013 0201 	ands.w	r2, r3, #1
 80067d6:	d00a      	beq.n	80067ee <__swsetup_r+0x9a>
 80067d8:	2200      	movs	r2, #0
 80067da:	60a2      	str	r2, [r4, #8]
 80067dc:	6962      	ldr	r2, [r4, #20]
 80067de:	4252      	negs	r2, r2
 80067e0:	61a2      	str	r2, [r4, #24]
 80067e2:	6922      	ldr	r2, [r4, #16]
 80067e4:	b942      	cbnz	r2, 80067f8 <__swsetup_r+0xa4>
 80067e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80067ea:	d1c5      	bne.n	8006778 <__swsetup_r+0x24>
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
 80067ee:	0799      	lsls	r1, r3, #30
 80067f0:	bf58      	it	pl
 80067f2:	6962      	ldrpl	r2, [r4, #20]
 80067f4:	60a2      	str	r2, [r4, #8]
 80067f6:	e7f4      	b.n	80067e2 <__swsetup_r+0x8e>
 80067f8:	2000      	movs	r0, #0
 80067fa:	e7f7      	b.n	80067ec <__swsetup_r+0x98>
 80067fc:	20000454 	.word	0x20000454

08006800 <memset>:
 8006800:	4402      	add	r2, r0
 8006802:	4603      	mov	r3, r0
 8006804:	4293      	cmp	r3, r2
 8006806:	d100      	bne.n	800680a <memset+0xa>
 8006808:	4770      	bx	lr
 800680a:	f803 1b01 	strb.w	r1, [r3], #1
 800680e:	e7f9      	b.n	8006804 <memset+0x4>

08006810 <strchr>:
 8006810:	b2c9      	uxtb	r1, r1
 8006812:	4603      	mov	r3, r0
 8006814:	4618      	mov	r0, r3
 8006816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800681a:	b112      	cbz	r2, 8006822 <strchr+0x12>
 800681c:	428a      	cmp	r2, r1
 800681e:	d1f9      	bne.n	8006814 <strchr+0x4>
 8006820:	4770      	bx	lr
 8006822:	2900      	cmp	r1, #0
 8006824:	bf18      	it	ne
 8006826:	2000      	movne	r0, #0
 8006828:	4770      	bx	lr

0800682a <strncmp>:
 800682a:	b510      	push	{r4, lr}
 800682c:	b16a      	cbz	r2, 800684a <strncmp+0x20>
 800682e:	3901      	subs	r1, #1
 8006830:	1884      	adds	r4, r0, r2
 8006832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006836:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800683a:	429a      	cmp	r2, r3
 800683c:	d103      	bne.n	8006846 <strncmp+0x1c>
 800683e:	42a0      	cmp	r0, r4
 8006840:	d001      	beq.n	8006846 <strncmp+0x1c>
 8006842:	2a00      	cmp	r2, #0
 8006844:	d1f5      	bne.n	8006832 <strncmp+0x8>
 8006846:	1ad0      	subs	r0, r2, r3
 8006848:	bd10      	pop	{r4, pc}
 800684a:	4610      	mov	r0, r2
 800684c:	e7fc      	b.n	8006848 <strncmp+0x1e>
	...

08006850 <strtok>:
 8006850:	4b16      	ldr	r3, [pc, #88]	@ (80068ac <strtok+0x5c>)
 8006852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006856:	681f      	ldr	r7, [r3, #0]
 8006858:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800685a:	4605      	mov	r5, r0
 800685c:	460e      	mov	r6, r1
 800685e:	b9ec      	cbnz	r4, 800689c <strtok+0x4c>
 8006860:	2050      	movs	r0, #80	@ 0x50
 8006862:	f000 fc87 	bl	8007174 <malloc>
 8006866:	4602      	mov	r2, r0
 8006868:	6478      	str	r0, [r7, #68]	@ 0x44
 800686a:	b920      	cbnz	r0, 8006876 <strtok+0x26>
 800686c:	4b10      	ldr	r3, [pc, #64]	@ (80068b0 <strtok+0x60>)
 800686e:	4811      	ldr	r0, [pc, #68]	@ (80068b4 <strtok+0x64>)
 8006870:	215b      	movs	r1, #91	@ 0x5b
 8006872:	f000 f8dd 	bl	8006a30 <__assert_func>
 8006876:	e9c0 4400 	strd	r4, r4, [r0]
 800687a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800687e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006882:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006886:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800688a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800688e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006892:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006896:	6184      	str	r4, [r0, #24]
 8006898:	7704      	strb	r4, [r0, #28]
 800689a:	6244      	str	r4, [r0, #36]	@ 0x24
 800689c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	2301      	movs	r3, #1
 80068a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068a8:	f000 b806 	b.w	80068b8 <__strtok_r>
 80068ac:	20000454 	.word	0x20000454
 80068b0:	08008ac6 	.word	0x08008ac6
 80068b4:	08008add 	.word	0x08008add

080068b8 <__strtok_r>:
 80068b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ba:	4604      	mov	r4, r0
 80068bc:	b908      	cbnz	r0, 80068c2 <__strtok_r+0xa>
 80068be:	6814      	ldr	r4, [r2, #0]
 80068c0:	b144      	cbz	r4, 80068d4 <__strtok_r+0x1c>
 80068c2:	4620      	mov	r0, r4
 80068c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80068c8:	460f      	mov	r7, r1
 80068ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80068ce:	b91e      	cbnz	r6, 80068d8 <__strtok_r+0x20>
 80068d0:	b965      	cbnz	r5, 80068ec <__strtok_r+0x34>
 80068d2:	6015      	str	r5, [r2, #0]
 80068d4:	2000      	movs	r0, #0
 80068d6:	e005      	b.n	80068e4 <__strtok_r+0x2c>
 80068d8:	42b5      	cmp	r5, r6
 80068da:	d1f6      	bne.n	80068ca <__strtok_r+0x12>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f0      	bne.n	80068c2 <__strtok_r+0xa>
 80068e0:	6014      	str	r4, [r2, #0]
 80068e2:	7003      	strb	r3, [r0, #0]
 80068e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e6:	461c      	mov	r4, r3
 80068e8:	e00c      	b.n	8006904 <__strtok_r+0x4c>
 80068ea:	b91d      	cbnz	r5, 80068f4 <__strtok_r+0x3c>
 80068ec:	4627      	mov	r7, r4
 80068ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068f2:	460e      	mov	r6, r1
 80068f4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	d1f6      	bne.n	80068ea <__strtok_r+0x32>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0f2      	beq.n	80068e6 <__strtok_r+0x2e>
 8006900:	2300      	movs	r3, #0
 8006902:	703b      	strb	r3, [r7, #0]
 8006904:	6014      	str	r4, [r2, #0]
 8006906:	e7ed      	b.n	80068e4 <__strtok_r+0x2c>

08006908 <_close_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d06      	ldr	r5, [pc, #24]	@ (8006924 <_close_r+0x1c>)
 800690c:	2300      	movs	r3, #0
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	f7fd f8b2 	bl	8003a7c <_close>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_close_r+0x1a>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_close_r+0x1a>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20000a6c 	.word	0x20000a6c

08006928 <_lseek_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d07      	ldr	r5, [pc, #28]	@ (8006948 <_lseek_r+0x20>)
 800692c:	4604      	mov	r4, r0
 800692e:	4608      	mov	r0, r1
 8006930:	4611      	mov	r1, r2
 8006932:	2200      	movs	r2, #0
 8006934:	602a      	str	r2, [r5, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f7fd f8c7 	bl	8003aca <_lseek>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_lseek_r+0x1e>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_lseek_r+0x1e>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20000a6c 	.word	0x20000a6c

0800694c <_read_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4d07      	ldr	r5, [pc, #28]	@ (800696c <_read_r+0x20>)
 8006950:	4604      	mov	r4, r0
 8006952:	4608      	mov	r0, r1
 8006954:	4611      	mov	r1, r2
 8006956:	2200      	movs	r2, #0
 8006958:	602a      	str	r2, [r5, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f7fd f871 	bl	8003a42 <_read>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_read_r+0x1e>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_read_r+0x1e>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	20000a6c 	.word	0x20000a6c

08006970 <_write_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d07      	ldr	r5, [pc, #28]	@ (8006990 <_write_r+0x20>)
 8006974:	4604      	mov	r4, r0
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	2200      	movs	r2, #0
 800697c:	602a      	str	r2, [r5, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fc f93e 	bl	8002c00 <_write>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_write_r+0x1e>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_write_r+0x1e>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20000a6c 	.word	0x20000a6c

08006994 <__errno>:
 8006994:	4b01      	ldr	r3, [pc, #4]	@ (800699c <__errno+0x8>)
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20000454 	.word	0x20000454

080069a0 <__libc_init_array>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	4d0d      	ldr	r5, [pc, #52]	@ (80069d8 <__libc_init_array+0x38>)
 80069a4:	4c0d      	ldr	r4, [pc, #52]	@ (80069dc <__libc_init_array+0x3c>)
 80069a6:	1b64      	subs	r4, r4, r5
 80069a8:	10a4      	asrs	r4, r4, #2
 80069aa:	2600      	movs	r6, #0
 80069ac:	42a6      	cmp	r6, r4
 80069ae:	d109      	bne.n	80069c4 <__libc_init_array+0x24>
 80069b0:	4d0b      	ldr	r5, [pc, #44]	@ (80069e0 <__libc_init_array+0x40>)
 80069b2:	4c0c      	ldr	r4, [pc, #48]	@ (80069e4 <__libc_init_array+0x44>)
 80069b4:	f001 ff84 	bl	80088c0 <_init>
 80069b8:	1b64      	subs	r4, r4, r5
 80069ba:	10a4      	asrs	r4, r4, #2
 80069bc:	2600      	movs	r6, #0
 80069be:	42a6      	cmp	r6, r4
 80069c0:	d105      	bne.n	80069ce <__libc_init_array+0x2e>
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c8:	4798      	blx	r3
 80069ca:	3601      	adds	r6, #1
 80069cc:	e7ee      	b.n	80069ac <__libc_init_array+0xc>
 80069ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d2:	4798      	blx	r3
 80069d4:	3601      	adds	r6, #1
 80069d6:	e7f2      	b.n	80069be <__libc_init_array+0x1e>
 80069d8:	08008ed4 	.word	0x08008ed4
 80069dc:	08008ed4 	.word	0x08008ed4
 80069e0:	08008ed4 	.word	0x08008ed4
 80069e4:	08008ed8 	.word	0x08008ed8

080069e8 <__retarget_lock_init_recursive>:
 80069e8:	4770      	bx	lr

080069ea <__retarget_lock_acquire_recursive>:
 80069ea:	4770      	bx	lr

080069ec <__retarget_lock_release_recursive>:
 80069ec:	4770      	bx	lr

080069ee <strcpy>:
 80069ee:	4603      	mov	r3, r0
 80069f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069f4:	f803 2b01 	strb.w	r2, [r3], #1
 80069f8:	2a00      	cmp	r2, #0
 80069fa:	d1f9      	bne.n	80069f0 <strcpy+0x2>
 80069fc:	4770      	bx	lr

080069fe <memcpy>:
 80069fe:	440a      	add	r2, r1
 8006a00:	4291      	cmp	r1, r2
 8006a02:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a06:	d100      	bne.n	8006a0a <memcpy+0xc>
 8006a08:	4770      	bx	lr
 8006a0a:	b510      	push	{r4, lr}
 8006a0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a14:	4291      	cmp	r1, r2
 8006a16:	d1f9      	bne.n	8006a0c <memcpy+0xe>
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	0000      	movs	r0, r0
 8006a1c:	0000      	movs	r0, r0
	...

08006a20 <nan>:
 8006a20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006a28 <nan+0x8>
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	00000000 	.word	0x00000000
 8006a2c:	7ff80000 	.word	0x7ff80000

08006a30 <__assert_func>:
 8006a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a32:	4614      	mov	r4, r2
 8006a34:	461a      	mov	r2, r3
 8006a36:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <__assert_func+0x2c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4605      	mov	r5, r0
 8006a3c:	68d8      	ldr	r0, [r3, #12]
 8006a3e:	b14c      	cbz	r4, 8006a54 <__assert_func+0x24>
 8006a40:	4b07      	ldr	r3, [pc, #28]	@ (8006a60 <__assert_func+0x30>)
 8006a42:	9100      	str	r1, [sp, #0]
 8006a44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a48:	4906      	ldr	r1, [pc, #24]	@ (8006a64 <__assert_func+0x34>)
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	f001 fde2 	bl	8008614 <fiprintf>
 8006a50:	f001 fea0 	bl	8008794 <abort>
 8006a54:	4b04      	ldr	r3, [pc, #16]	@ (8006a68 <__assert_func+0x38>)
 8006a56:	461c      	mov	r4, r3
 8006a58:	e7f3      	b.n	8006a42 <__assert_func+0x12>
 8006a5a:	bf00      	nop
 8006a5c:	20000454 	.word	0x20000454
 8006a60:	08008b3f 	.word	0x08008b3f
 8006a64:	08008b4c 	.word	0x08008b4c
 8006a68:	08008b7a 	.word	0x08008b7a

08006a6c <_free_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4605      	mov	r5, r0
 8006a70:	2900      	cmp	r1, #0
 8006a72:	d041      	beq.n	8006af8 <_free_r+0x8c>
 8006a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a78:	1f0c      	subs	r4, r1, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfb8      	it	lt
 8006a7e:	18e4      	addlt	r4, r4, r3
 8006a80:	f000 fc34 	bl	80072ec <__malloc_lock>
 8006a84:	4a1d      	ldr	r2, [pc, #116]	@ (8006afc <_free_r+0x90>)
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	b933      	cbnz	r3, 8006a98 <_free_r+0x2c>
 8006a8a:	6063      	str	r3, [r4, #4]
 8006a8c:	6014      	str	r4, [r2, #0]
 8006a8e:	4628      	mov	r0, r5
 8006a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a94:	f000 bc30 	b.w	80072f8 <__malloc_unlock>
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d908      	bls.n	8006aae <_free_r+0x42>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	1821      	adds	r1, r4, r0
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	bf01      	itttt	eq
 8006aa4:	6819      	ldreq	r1, [r3, #0]
 8006aa6:	685b      	ldreq	r3, [r3, #4]
 8006aa8:	1809      	addeq	r1, r1, r0
 8006aaa:	6021      	streq	r1, [r4, #0]
 8006aac:	e7ed      	b.n	8006a8a <_free_r+0x1e>
 8006aae:	461a      	mov	r2, r3
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b10b      	cbz	r3, 8006ab8 <_free_r+0x4c>
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	d9fa      	bls.n	8006aae <_free_r+0x42>
 8006ab8:	6811      	ldr	r1, [r2, #0]
 8006aba:	1850      	adds	r0, r2, r1
 8006abc:	42a0      	cmp	r0, r4
 8006abe:	d10b      	bne.n	8006ad8 <_free_r+0x6c>
 8006ac0:	6820      	ldr	r0, [r4, #0]
 8006ac2:	4401      	add	r1, r0
 8006ac4:	1850      	adds	r0, r2, r1
 8006ac6:	4283      	cmp	r3, r0
 8006ac8:	6011      	str	r1, [r2, #0]
 8006aca:	d1e0      	bne.n	8006a8e <_free_r+0x22>
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	6053      	str	r3, [r2, #4]
 8006ad2:	4408      	add	r0, r1
 8006ad4:	6010      	str	r0, [r2, #0]
 8006ad6:	e7da      	b.n	8006a8e <_free_r+0x22>
 8006ad8:	d902      	bls.n	8006ae0 <_free_r+0x74>
 8006ada:	230c      	movs	r3, #12
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	e7d6      	b.n	8006a8e <_free_r+0x22>
 8006ae0:	6820      	ldr	r0, [r4, #0]
 8006ae2:	1821      	adds	r1, r4, r0
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	bf04      	itt	eq
 8006ae8:	6819      	ldreq	r1, [r3, #0]
 8006aea:	685b      	ldreq	r3, [r3, #4]
 8006aec:	6063      	str	r3, [r4, #4]
 8006aee:	bf04      	itt	eq
 8006af0:	1809      	addeq	r1, r1, r0
 8006af2:	6021      	streq	r1, [r4, #0]
 8006af4:	6054      	str	r4, [r2, #4]
 8006af6:	e7ca      	b.n	8006a8e <_free_r+0x22>
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	20000a78 	.word	0x20000a78

08006b00 <rshift>:
 8006b00:	6903      	ldr	r3, [r0, #16]
 8006b02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b0e:	f100 0414 	add.w	r4, r0, #20
 8006b12:	dd45      	ble.n	8006ba0 <rshift+0xa0>
 8006b14:	f011 011f 	ands.w	r1, r1, #31
 8006b18:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b1c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b20:	d10c      	bne.n	8006b3c <rshift+0x3c>
 8006b22:	f100 0710 	add.w	r7, r0, #16
 8006b26:	4629      	mov	r1, r5
 8006b28:	42b1      	cmp	r1, r6
 8006b2a:	d334      	bcc.n	8006b96 <rshift+0x96>
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	1eea      	subs	r2, r5, #3
 8006b32:	4296      	cmp	r6, r2
 8006b34:	bf38      	it	cc
 8006b36:	2300      	movcc	r3, #0
 8006b38:	4423      	add	r3, r4
 8006b3a:	e015      	b.n	8006b68 <rshift+0x68>
 8006b3c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b40:	f1c1 0820 	rsb	r8, r1, #32
 8006b44:	40cf      	lsrs	r7, r1
 8006b46:	f105 0e04 	add.w	lr, r5, #4
 8006b4a:	46a1      	mov	r9, r4
 8006b4c:	4576      	cmp	r6, lr
 8006b4e:	46f4      	mov	ip, lr
 8006b50:	d815      	bhi.n	8006b7e <rshift+0x7e>
 8006b52:	1a9a      	subs	r2, r3, r2
 8006b54:	0092      	lsls	r2, r2, #2
 8006b56:	3a04      	subs	r2, #4
 8006b58:	3501      	adds	r5, #1
 8006b5a:	42ae      	cmp	r6, r5
 8006b5c:	bf38      	it	cc
 8006b5e:	2200      	movcc	r2, #0
 8006b60:	18a3      	adds	r3, r4, r2
 8006b62:	50a7      	str	r7, [r4, r2]
 8006b64:	b107      	cbz	r7, 8006b68 <rshift+0x68>
 8006b66:	3304      	adds	r3, #4
 8006b68:	1b1a      	subs	r2, r3, r4
 8006b6a:	42a3      	cmp	r3, r4
 8006b6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b70:	bf08      	it	eq
 8006b72:	2300      	moveq	r3, #0
 8006b74:	6102      	str	r2, [r0, #16]
 8006b76:	bf08      	it	eq
 8006b78:	6143      	streq	r3, [r0, #20]
 8006b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b7e:	f8dc c000 	ldr.w	ip, [ip]
 8006b82:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b86:	ea4c 0707 	orr.w	r7, ip, r7
 8006b8a:	f849 7b04 	str.w	r7, [r9], #4
 8006b8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b92:	40cf      	lsrs	r7, r1
 8006b94:	e7da      	b.n	8006b4c <rshift+0x4c>
 8006b96:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b9a:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b9e:	e7c3      	b.n	8006b28 <rshift+0x28>
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	e7e1      	b.n	8006b68 <rshift+0x68>

08006ba4 <__hexdig_fun>:
 8006ba4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006ba8:	2b09      	cmp	r3, #9
 8006baa:	d802      	bhi.n	8006bb2 <__hexdig_fun+0xe>
 8006bac:	3820      	subs	r0, #32
 8006bae:	b2c0      	uxtb	r0, r0
 8006bb0:	4770      	bx	lr
 8006bb2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006bb6:	2b05      	cmp	r3, #5
 8006bb8:	d801      	bhi.n	8006bbe <__hexdig_fun+0x1a>
 8006bba:	3847      	subs	r0, #71	@ 0x47
 8006bbc:	e7f7      	b.n	8006bae <__hexdig_fun+0xa>
 8006bbe:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	d801      	bhi.n	8006bca <__hexdig_fun+0x26>
 8006bc6:	3827      	subs	r0, #39	@ 0x27
 8006bc8:	e7f1      	b.n	8006bae <__hexdig_fun+0xa>
 8006bca:	2000      	movs	r0, #0
 8006bcc:	4770      	bx	lr
	...

08006bd0 <__gethex>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	468a      	mov	sl, r1
 8006bd8:	9302      	str	r3, [sp, #8]
 8006bda:	680b      	ldr	r3, [r1, #0]
 8006bdc:	9001      	str	r0, [sp, #4]
 8006bde:	4690      	mov	r8, r2
 8006be0:	1c9c      	adds	r4, r3, #2
 8006be2:	46a1      	mov	r9, r4
 8006be4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006be8:	2830      	cmp	r0, #48	@ 0x30
 8006bea:	d0fa      	beq.n	8006be2 <__gethex+0x12>
 8006bec:	eba9 0303 	sub.w	r3, r9, r3
 8006bf0:	f1a3 0b02 	sub.w	fp, r3, #2
 8006bf4:	f7ff ffd6 	bl	8006ba4 <__hexdig_fun>
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d168      	bne.n	8006cd0 <__gethex+0x100>
 8006bfe:	49a0      	ldr	r1, [pc, #640]	@ (8006e80 <__gethex+0x2b0>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	4648      	mov	r0, r9
 8006c04:	f7ff fe11 	bl	800682a <strncmp>
 8006c08:	4607      	mov	r7, r0
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d167      	bne.n	8006cde <__gethex+0x10e>
 8006c0e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006c12:	4626      	mov	r6, r4
 8006c14:	f7ff ffc6 	bl	8006ba4 <__hexdig_fun>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d062      	beq.n	8006ce2 <__gethex+0x112>
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	7818      	ldrb	r0, [r3, #0]
 8006c20:	2830      	cmp	r0, #48	@ 0x30
 8006c22:	4699      	mov	r9, r3
 8006c24:	f103 0301 	add.w	r3, r3, #1
 8006c28:	d0f9      	beq.n	8006c1e <__gethex+0x4e>
 8006c2a:	f7ff ffbb 	bl	8006ba4 <__hexdig_fun>
 8006c2e:	fab0 f580 	clz	r5, r0
 8006c32:	096d      	lsrs	r5, r5, #5
 8006c34:	f04f 0b01 	mov.w	fp, #1
 8006c38:	464a      	mov	r2, r9
 8006c3a:	4616      	mov	r6, r2
 8006c3c:	3201      	adds	r2, #1
 8006c3e:	7830      	ldrb	r0, [r6, #0]
 8006c40:	f7ff ffb0 	bl	8006ba4 <__hexdig_fun>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d1f8      	bne.n	8006c3a <__gethex+0x6a>
 8006c48:	498d      	ldr	r1, [pc, #564]	@ (8006e80 <__gethex+0x2b0>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7ff fdec 	bl	800682a <strncmp>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d13f      	bne.n	8006cd6 <__gethex+0x106>
 8006c56:	b944      	cbnz	r4, 8006c6a <__gethex+0x9a>
 8006c58:	1c74      	adds	r4, r6, #1
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	3201      	adds	r2, #1
 8006c60:	7830      	ldrb	r0, [r6, #0]
 8006c62:	f7ff ff9f 	bl	8006ba4 <__hexdig_fun>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d1f8      	bne.n	8006c5c <__gethex+0x8c>
 8006c6a:	1ba4      	subs	r4, r4, r6
 8006c6c:	00a7      	lsls	r7, r4, #2
 8006c6e:	7833      	ldrb	r3, [r6, #0]
 8006c70:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006c74:	2b50      	cmp	r3, #80	@ 0x50
 8006c76:	d13e      	bne.n	8006cf6 <__gethex+0x126>
 8006c78:	7873      	ldrb	r3, [r6, #1]
 8006c7a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006c7c:	d033      	beq.n	8006ce6 <__gethex+0x116>
 8006c7e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006c80:	d034      	beq.n	8006cec <__gethex+0x11c>
 8006c82:	1c71      	adds	r1, r6, #1
 8006c84:	2400      	movs	r4, #0
 8006c86:	7808      	ldrb	r0, [r1, #0]
 8006c88:	f7ff ff8c 	bl	8006ba4 <__hexdig_fun>
 8006c8c:	1e43      	subs	r3, r0, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b18      	cmp	r3, #24
 8006c92:	d830      	bhi.n	8006cf6 <__gethex+0x126>
 8006c94:	f1a0 0210 	sub.w	r2, r0, #16
 8006c98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c9c:	f7ff ff82 	bl	8006ba4 <__hexdig_fun>
 8006ca0:	f100 3cff 	add.w	ip, r0, #4294967295
 8006ca4:	fa5f fc8c 	uxtb.w	ip, ip
 8006ca8:	f1bc 0f18 	cmp.w	ip, #24
 8006cac:	f04f 030a 	mov.w	r3, #10
 8006cb0:	d91e      	bls.n	8006cf0 <__gethex+0x120>
 8006cb2:	b104      	cbz	r4, 8006cb6 <__gethex+0xe6>
 8006cb4:	4252      	negs	r2, r2
 8006cb6:	4417      	add	r7, r2
 8006cb8:	f8ca 1000 	str.w	r1, [sl]
 8006cbc:	b1ed      	cbz	r5, 8006cfa <__gethex+0x12a>
 8006cbe:	f1bb 0f00 	cmp.w	fp, #0
 8006cc2:	bf0c      	ite	eq
 8006cc4:	2506      	moveq	r5, #6
 8006cc6:	2500      	movne	r5, #0
 8006cc8:	4628      	mov	r0, r5
 8006cca:	b005      	add	sp, #20
 8006ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd0:	2500      	movs	r5, #0
 8006cd2:	462c      	mov	r4, r5
 8006cd4:	e7b0      	b.n	8006c38 <__gethex+0x68>
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	d1c7      	bne.n	8006c6a <__gethex+0x9a>
 8006cda:	4627      	mov	r7, r4
 8006cdc:	e7c7      	b.n	8006c6e <__gethex+0x9e>
 8006cde:	464e      	mov	r6, r9
 8006ce0:	462f      	mov	r7, r5
 8006ce2:	2501      	movs	r5, #1
 8006ce4:	e7c3      	b.n	8006c6e <__gethex+0x9e>
 8006ce6:	2400      	movs	r4, #0
 8006ce8:	1cb1      	adds	r1, r6, #2
 8006cea:	e7cc      	b.n	8006c86 <__gethex+0xb6>
 8006cec:	2401      	movs	r4, #1
 8006cee:	e7fb      	b.n	8006ce8 <__gethex+0x118>
 8006cf0:	fb03 0002 	mla	r0, r3, r2, r0
 8006cf4:	e7ce      	b.n	8006c94 <__gethex+0xc4>
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	e7de      	b.n	8006cb8 <__gethex+0xe8>
 8006cfa:	eba6 0309 	sub.w	r3, r6, r9
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	4629      	mov	r1, r5
 8006d02:	2b07      	cmp	r3, #7
 8006d04:	dc0a      	bgt.n	8006d1c <__gethex+0x14c>
 8006d06:	9801      	ldr	r0, [sp, #4]
 8006d08:	f000 fafc 	bl	8007304 <_Balloc>
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	b940      	cbnz	r0, 8006d22 <__gethex+0x152>
 8006d10:	4b5c      	ldr	r3, [pc, #368]	@ (8006e84 <__gethex+0x2b4>)
 8006d12:	4602      	mov	r2, r0
 8006d14:	21e4      	movs	r1, #228	@ 0xe4
 8006d16:	485c      	ldr	r0, [pc, #368]	@ (8006e88 <__gethex+0x2b8>)
 8006d18:	f7ff fe8a 	bl	8006a30 <__assert_func>
 8006d1c:	3101      	adds	r1, #1
 8006d1e:	105b      	asrs	r3, r3, #1
 8006d20:	e7ef      	b.n	8006d02 <__gethex+0x132>
 8006d22:	f100 0a14 	add.w	sl, r0, #20
 8006d26:	2300      	movs	r3, #0
 8006d28:	4655      	mov	r5, sl
 8006d2a:	469b      	mov	fp, r3
 8006d2c:	45b1      	cmp	r9, r6
 8006d2e:	d337      	bcc.n	8006da0 <__gethex+0x1d0>
 8006d30:	f845 bb04 	str.w	fp, [r5], #4
 8006d34:	eba5 050a 	sub.w	r5, r5, sl
 8006d38:	10ad      	asrs	r5, r5, #2
 8006d3a:	6125      	str	r5, [r4, #16]
 8006d3c:	4658      	mov	r0, fp
 8006d3e:	f000 fbd3 	bl	80074e8 <__hi0bits>
 8006d42:	016d      	lsls	r5, r5, #5
 8006d44:	f8d8 6000 	ldr.w	r6, [r8]
 8006d48:	1a2d      	subs	r5, r5, r0
 8006d4a:	42b5      	cmp	r5, r6
 8006d4c:	dd54      	ble.n	8006df8 <__gethex+0x228>
 8006d4e:	1bad      	subs	r5, r5, r6
 8006d50:	4629      	mov	r1, r5
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 ff5f 	bl	8007c16 <__any_on>
 8006d58:	4681      	mov	r9, r0
 8006d5a:	b178      	cbz	r0, 8006d7c <__gethex+0x1ac>
 8006d5c:	1e6b      	subs	r3, r5, #1
 8006d5e:	1159      	asrs	r1, r3, #5
 8006d60:	f003 021f 	and.w	r2, r3, #31
 8006d64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006d68:	f04f 0901 	mov.w	r9, #1
 8006d6c:	fa09 f202 	lsl.w	r2, r9, r2
 8006d70:	420a      	tst	r2, r1
 8006d72:	d003      	beq.n	8006d7c <__gethex+0x1ac>
 8006d74:	454b      	cmp	r3, r9
 8006d76:	dc36      	bgt.n	8006de6 <__gethex+0x216>
 8006d78:	f04f 0902 	mov.w	r9, #2
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f7ff febe 	bl	8006b00 <rshift>
 8006d84:	442f      	add	r7, r5
 8006d86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d8a:	42bb      	cmp	r3, r7
 8006d8c:	da42      	bge.n	8006e14 <__gethex+0x244>
 8006d8e:	9801      	ldr	r0, [sp, #4]
 8006d90:	4621      	mov	r1, r4
 8006d92:	f000 faf7 	bl	8007384 <_Bfree>
 8006d96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	25a3      	movs	r5, #163	@ 0xa3
 8006d9e:	e793      	b.n	8006cc8 <__gethex+0xf8>
 8006da0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006da4:	2a2e      	cmp	r2, #46	@ 0x2e
 8006da6:	d012      	beq.n	8006dce <__gethex+0x1fe>
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d104      	bne.n	8006db6 <__gethex+0x1e6>
 8006dac:	f845 bb04 	str.w	fp, [r5], #4
 8006db0:	f04f 0b00 	mov.w	fp, #0
 8006db4:	465b      	mov	r3, fp
 8006db6:	7830      	ldrb	r0, [r6, #0]
 8006db8:	9303      	str	r3, [sp, #12]
 8006dba:	f7ff fef3 	bl	8006ba4 <__hexdig_fun>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	f000 000f 	and.w	r0, r0, #15
 8006dc4:	4098      	lsls	r0, r3
 8006dc6:	ea4b 0b00 	orr.w	fp, fp, r0
 8006dca:	3304      	adds	r3, #4
 8006dcc:	e7ae      	b.n	8006d2c <__gethex+0x15c>
 8006dce:	45b1      	cmp	r9, r6
 8006dd0:	d8ea      	bhi.n	8006da8 <__gethex+0x1d8>
 8006dd2:	492b      	ldr	r1, [pc, #172]	@ (8006e80 <__gethex+0x2b0>)
 8006dd4:	9303      	str	r3, [sp, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff fd26 	bl	800682a <strncmp>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1e1      	bne.n	8006da8 <__gethex+0x1d8>
 8006de4:	e7a2      	b.n	8006d2c <__gethex+0x15c>
 8006de6:	1ea9      	subs	r1, r5, #2
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 ff14 	bl	8007c16 <__any_on>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d0c2      	beq.n	8006d78 <__gethex+0x1a8>
 8006df2:	f04f 0903 	mov.w	r9, #3
 8006df6:	e7c1      	b.n	8006d7c <__gethex+0x1ac>
 8006df8:	da09      	bge.n	8006e0e <__gethex+0x23e>
 8006dfa:	1b75      	subs	r5, r6, r5
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	9801      	ldr	r0, [sp, #4]
 8006e00:	462a      	mov	r2, r5
 8006e02:	f000 fccf 	bl	80077a4 <__lshift>
 8006e06:	1b7f      	subs	r7, r7, r5
 8006e08:	4604      	mov	r4, r0
 8006e0a:	f100 0a14 	add.w	sl, r0, #20
 8006e0e:	f04f 0900 	mov.w	r9, #0
 8006e12:	e7b8      	b.n	8006d86 <__gethex+0x1b6>
 8006e14:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e18:	42bd      	cmp	r5, r7
 8006e1a:	dd6f      	ble.n	8006efc <__gethex+0x32c>
 8006e1c:	1bed      	subs	r5, r5, r7
 8006e1e:	42ae      	cmp	r6, r5
 8006e20:	dc34      	bgt.n	8006e8c <__gethex+0x2bc>
 8006e22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d022      	beq.n	8006e70 <__gethex+0x2a0>
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d024      	beq.n	8006e78 <__gethex+0x2a8>
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d115      	bne.n	8006e5e <__gethex+0x28e>
 8006e32:	42ae      	cmp	r6, r5
 8006e34:	d113      	bne.n	8006e5e <__gethex+0x28e>
 8006e36:	2e01      	cmp	r6, #1
 8006e38:	d10b      	bne.n	8006e52 <__gethex+0x282>
 8006e3a:	9a02      	ldr	r2, [sp, #8]
 8006e3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	2301      	movs	r3, #1
 8006e44:	6123      	str	r3, [r4, #16]
 8006e46:	f8ca 3000 	str.w	r3, [sl]
 8006e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e4c:	2562      	movs	r5, #98	@ 0x62
 8006e4e:	601c      	str	r4, [r3, #0]
 8006e50:	e73a      	b.n	8006cc8 <__gethex+0xf8>
 8006e52:	1e71      	subs	r1, r6, #1
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 fede 	bl	8007c16 <__any_on>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d1ed      	bne.n	8006e3a <__gethex+0x26a>
 8006e5e:	9801      	ldr	r0, [sp, #4]
 8006e60:	4621      	mov	r1, r4
 8006e62:	f000 fa8f 	bl	8007384 <_Bfree>
 8006e66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e68:	2300      	movs	r3, #0
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	2550      	movs	r5, #80	@ 0x50
 8006e6e:	e72b      	b.n	8006cc8 <__gethex+0xf8>
 8006e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f3      	bne.n	8006e5e <__gethex+0x28e>
 8006e76:	e7e0      	b.n	8006e3a <__gethex+0x26a>
 8006e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1dd      	bne.n	8006e3a <__gethex+0x26a>
 8006e7e:	e7ee      	b.n	8006e5e <__gethex+0x28e>
 8006e80:	08008ab8 	.word	0x08008ab8
 8006e84:	08008b7b 	.word	0x08008b7b
 8006e88:	08008b8c 	.word	0x08008b8c
 8006e8c:	1e6f      	subs	r7, r5, #1
 8006e8e:	f1b9 0f00 	cmp.w	r9, #0
 8006e92:	d130      	bne.n	8006ef6 <__gethex+0x326>
 8006e94:	b127      	cbz	r7, 8006ea0 <__gethex+0x2d0>
 8006e96:	4639      	mov	r1, r7
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 febc 	bl	8007c16 <__any_on>
 8006e9e:	4681      	mov	r9, r0
 8006ea0:	117a      	asrs	r2, r7, #5
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006ea8:	f007 071f 	and.w	r7, r7, #31
 8006eac:	40bb      	lsls	r3, r7
 8006eae:	4213      	tst	r3, r2
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	bf18      	it	ne
 8006eb6:	f049 0902 	orrne.w	r9, r9, #2
 8006eba:	f7ff fe21 	bl	8006b00 <rshift>
 8006ebe:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006ec2:	1b76      	subs	r6, r6, r5
 8006ec4:	2502      	movs	r5, #2
 8006ec6:	f1b9 0f00 	cmp.w	r9, #0
 8006eca:	d047      	beq.n	8006f5c <__gethex+0x38c>
 8006ecc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d015      	beq.n	8006f00 <__gethex+0x330>
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d017      	beq.n	8006f08 <__gethex+0x338>
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d109      	bne.n	8006ef0 <__gethex+0x320>
 8006edc:	f019 0f02 	tst.w	r9, #2
 8006ee0:	d006      	beq.n	8006ef0 <__gethex+0x320>
 8006ee2:	f8da 3000 	ldr.w	r3, [sl]
 8006ee6:	ea49 0903 	orr.w	r9, r9, r3
 8006eea:	f019 0f01 	tst.w	r9, #1
 8006eee:	d10e      	bne.n	8006f0e <__gethex+0x33e>
 8006ef0:	f045 0510 	orr.w	r5, r5, #16
 8006ef4:	e032      	b.n	8006f5c <__gethex+0x38c>
 8006ef6:	f04f 0901 	mov.w	r9, #1
 8006efa:	e7d1      	b.n	8006ea0 <__gethex+0x2d0>
 8006efc:	2501      	movs	r5, #1
 8006efe:	e7e2      	b.n	8006ec6 <__gethex+0x2f6>
 8006f00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f02:	f1c3 0301 	rsb	r3, r3, #1
 8006f06:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <__gethex+0x320>
 8006f0e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f12:	f104 0314 	add.w	r3, r4, #20
 8006f16:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f1a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f1e:	f04f 0c00 	mov.w	ip, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f28:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f2c:	d01b      	beq.n	8006f66 <__gethex+0x396>
 8006f2e:	3201      	adds	r2, #1
 8006f30:	6002      	str	r2, [r0, #0]
 8006f32:	2d02      	cmp	r5, #2
 8006f34:	f104 0314 	add.w	r3, r4, #20
 8006f38:	d13c      	bne.n	8006fb4 <__gethex+0x3e4>
 8006f3a:	f8d8 2000 	ldr.w	r2, [r8]
 8006f3e:	3a01      	subs	r2, #1
 8006f40:	42b2      	cmp	r2, r6
 8006f42:	d109      	bne.n	8006f58 <__gethex+0x388>
 8006f44:	1171      	asrs	r1, r6, #5
 8006f46:	2201      	movs	r2, #1
 8006f48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f4c:	f006 061f 	and.w	r6, r6, #31
 8006f50:	fa02 f606 	lsl.w	r6, r2, r6
 8006f54:	421e      	tst	r6, r3
 8006f56:	d13a      	bne.n	8006fce <__gethex+0x3fe>
 8006f58:	f045 0520 	orr.w	r5, r5, #32
 8006f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f5e:	601c      	str	r4, [r3, #0]
 8006f60:	9b02      	ldr	r3, [sp, #8]
 8006f62:	601f      	str	r7, [r3, #0]
 8006f64:	e6b0      	b.n	8006cc8 <__gethex+0xf8>
 8006f66:	4299      	cmp	r1, r3
 8006f68:	f843 cc04 	str.w	ip, [r3, #-4]
 8006f6c:	d8d9      	bhi.n	8006f22 <__gethex+0x352>
 8006f6e:	68a3      	ldr	r3, [r4, #8]
 8006f70:	459b      	cmp	fp, r3
 8006f72:	db17      	blt.n	8006fa4 <__gethex+0x3d4>
 8006f74:	6861      	ldr	r1, [r4, #4]
 8006f76:	9801      	ldr	r0, [sp, #4]
 8006f78:	3101      	adds	r1, #1
 8006f7a:	f000 f9c3 	bl	8007304 <_Balloc>
 8006f7e:	4681      	mov	r9, r0
 8006f80:	b918      	cbnz	r0, 8006f8a <__gethex+0x3ba>
 8006f82:	4b1a      	ldr	r3, [pc, #104]	@ (8006fec <__gethex+0x41c>)
 8006f84:	4602      	mov	r2, r0
 8006f86:	2184      	movs	r1, #132	@ 0x84
 8006f88:	e6c5      	b.n	8006d16 <__gethex+0x146>
 8006f8a:	6922      	ldr	r2, [r4, #16]
 8006f8c:	3202      	adds	r2, #2
 8006f8e:	f104 010c 	add.w	r1, r4, #12
 8006f92:	0092      	lsls	r2, r2, #2
 8006f94:	300c      	adds	r0, #12
 8006f96:	f7ff fd32 	bl	80069fe <memcpy>
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	9801      	ldr	r0, [sp, #4]
 8006f9e:	f000 f9f1 	bl	8007384 <_Bfree>
 8006fa2:	464c      	mov	r4, r9
 8006fa4:	6923      	ldr	r3, [r4, #16]
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fac:	6122      	str	r2, [r4, #16]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	615a      	str	r2, [r3, #20]
 8006fb2:	e7be      	b.n	8006f32 <__gethex+0x362>
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	455a      	cmp	r2, fp
 8006fb8:	dd0b      	ble.n	8006fd2 <__gethex+0x402>
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f7ff fd9f 	bl	8006b00 <rshift>
 8006fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fc6:	3701      	adds	r7, #1
 8006fc8:	42bb      	cmp	r3, r7
 8006fca:	f6ff aee0 	blt.w	8006d8e <__gethex+0x1be>
 8006fce:	2501      	movs	r5, #1
 8006fd0:	e7c2      	b.n	8006f58 <__gethex+0x388>
 8006fd2:	f016 061f 	ands.w	r6, r6, #31
 8006fd6:	d0fa      	beq.n	8006fce <__gethex+0x3fe>
 8006fd8:	4453      	add	r3, sl
 8006fda:	f1c6 0620 	rsb	r6, r6, #32
 8006fde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006fe2:	f000 fa81 	bl	80074e8 <__hi0bits>
 8006fe6:	42b0      	cmp	r0, r6
 8006fe8:	dbe7      	blt.n	8006fba <__gethex+0x3ea>
 8006fea:	e7f0      	b.n	8006fce <__gethex+0x3fe>
 8006fec:	08008b7b 	.word	0x08008b7b

08006ff0 <L_shift>:
 8006ff0:	f1c2 0208 	rsb	r2, r2, #8
 8006ff4:	0092      	lsls	r2, r2, #2
 8006ff6:	b570      	push	{r4, r5, r6, lr}
 8006ff8:	f1c2 0620 	rsb	r6, r2, #32
 8006ffc:	6843      	ldr	r3, [r0, #4]
 8006ffe:	6804      	ldr	r4, [r0, #0]
 8007000:	fa03 f506 	lsl.w	r5, r3, r6
 8007004:	432c      	orrs	r4, r5
 8007006:	40d3      	lsrs	r3, r2
 8007008:	6004      	str	r4, [r0, #0]
 800700a:	f840 3f04 	str.w	r3, [r0, #4]!
 800700e:	4288      	cmp	r0, r1
 8007010:	d3f4      	bcc.n	8006ffc <L_shift+0xc>
 8007012:	bd70      	pop	{r4, r5, r6, pc}

08007014 <__match>:
 8007014:	b530      	push	{r4, r5, lr}
 8007016:	6803      	ldr	r3, [r0, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800701e:	b914      	cbnz	r4, 8007026 <__match+0x12>
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	2001      	movs	r0, #1
 8007024:	bd30      	pop	{r4, r5, pc}
 8007026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800702a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800702e:	2d19      	cmp	r5, #25
 8007030:	bf98      	it	ls
 8007032:	3220      	addls	r2, #32
 8007034:	42a2      	cmp	r2, r4
 8007036:	d0f0      	beq.n	800701a <__match+0x6>
 8007038:	2000      	movs	r0, #0
 800703a:	e7f3      	b.n	8007024 <__match+0x10>

0800703c <__hexnan>:
 800703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	680b      	ldr	r3, [r1, #0]
 8007042:	6801      	ldr	r1, [r0, #0]
 8007044:	115e      	asrs	r6, r3, #5
 8007046:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800704a:	f013 031f 	ands.w	r3, r3, #31
 800704e:	b087      	sub	sp, #28
 8007050:	bf18      	it	ne
 8007052:	3604      	addne	r6, #4
 8007054:	2500      	movs	r5, #0
 8007056:	1f37      	subs	r7, r6, #4
 8007058:	4682      	mov	sl, r0
 800705a:	4690      	mov	r8, r2
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007062:	46b9      	mov	r9, r7
 8007064:	463c      	mov	r4, r7
 8007066:	9502      	str	r5, [sp, #8]
 8007068:	46ab      	mov	fp, r5
 800706a:	784a      	ldrb	r2, [r1, #1]
 800706c:	1c4b      	adds	r3, r1, #1
 800706e:	9303      	str	r3, [sp, #12]
 8007070:	b342      	cbz	r2, 80070c4 <__hexnan+0x88>
 8007072:	4610      	mov	r0, r2
 8007074:	9105      	str	r1, [sp, #20]
 8007076:	9204      	str	r2, [sp, #16]
 8007078:	f7ff fd94 	bl	8006ba4 <__hexdig_fun>
 800707c:	2800      	cmp	r0, #0
 800707e:	d151      	bne.n	8007124 <__hexnan+0xe8>
 8007080:	9a04      	ldr	r2, [sp, #16]
 8007082:	9905      	ldr	r1, [sp, #20]
 8007084:	2a20      	cmp	r2, #32
 8007086:	d818      	bhi.n	80070ba <__hexnan+0x7e>
 8007088:	9b02      	ldr	r3, [sp, #8]
 800708a:	459b      	cmp	fp, r3
 800708c:	dd13      	ble.n	80070b6 <__hexnan+0x7a>
 800708e:	454c      	cmp	r4, r9
 8007090:	d206      	bcs.n	80070a0 <__hexnan+0x64>
 8007092:	2d07      	cmp	r5, #7
 8007094:	dc04      	bgt.n	80070a0 <__hexnan+0x64>
 8007096:	462a      	mov	r2, r5
 8007098:	4649      	mov	r1, r9
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff ffa8 	bl	8006ff0 <L_shift>
 80070a0:	4544      	cmp	r4, r8
 80070a2:	d952      	bls.n	800714a <__hexnan+0x10e>
 80070a4:	2300      	movs	r3, #0
 80070a6:	f1a4 0904 	sub.w	r9, r4, #4
 80070aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80070ae:	f8cd b008 	str.w	fp, [sp, #8]
 80070b2:	464c      	mov	r4, r9
 80070b4:	461d      	mov	r5, r3
 80070b6:	9903      	ldr	r1, [sp, #12]
 80070b8:	e7d7      	b.n	800706a <__hexnan+0x2e>
 80070ba:	2a29      	cmp	r2, #41	@ 0x29
 80070bc:	d157      	bne.n	800716e <__hexnan+0x132>
 80070be:	3102      	adds	r1, #2
 80070c0:	f8ca 1000 	str.w	r1, [sl]
 80070c4:	f1bb 0f00 	cmp.w	fp, #0
 80070c8:	d051      	beq.n	800716e <__hexnan+0x132>
 80070ca:	454c      	cmp	r4, r9
 80070cc:	d206      	bcs.n	80070dc <__hexnan+0xa0>
 80070ce:	2d07      	cmp	r5, #7
 80070d0:	dc04      	bgt.n	80070dc <__hexnan+0xa0>
 80070d2:	462a      	mov	r2, r5
 80070d4:	4649      	mov	r1, r9
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7ff ff8a 	bl	8006ff0 <L_shift>
 80070dc:	4544      	cmp	r4, r8
 80070de:	d936      	bls.n	800714e <__hexnan+0x112>
 80070e0:	f1a8 0204 	sub.w	r2, r8, #4
 80070e4:	4623      	mov	r3, r4
 80070e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80070ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80070ee:	429f      	cmp	r7, r3
 80070f0:	d2f9      	bcs.n	80070e6 <__hexnan+0xaa>
 80070f2:	1b3b      	subs	r3, r7, r4
 80070f4:	f023 0303 	bic.w	r3, r3, #3
 80070f8:	3304      	adds	r3, #4
 80070fa:	3401      	adds	r4, #1
 80070fc:	3e03      	subs	r6, #3
 80070fe:	42b4      	cmp	r4, r6
 8007100:	bf88      	it	hi
 8007102:	2304      	movhi	r3, #4
 8007104:	4443      	add	r3, r8
 8007106:	2200      	movs	r2, #0
 8007108:	f843 2b04 	str.w	r2, [r3], #4
 800710c:	429f      	cmp	r7, r3
 800710e:	d2fb      	bcs.n	8007108 <__hexnan+0xcc>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	b91b      	cbnz	r3, 800711c <__hexnan+0xe0>
 8007114:	4547      	cmp	r7, r8
 8007116:	d128      	bne.n	800716a <__hexnan+0x12e>
 8007118:	2301      	movs	r3, #1
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	2005      	movs	r0, #5
 800711e:	b007      	add	sp, #28
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	3501      	adds	r5, #1
 8007126:	2d08      	cmp	r5, #8
 8007128:	f10b 0b01 	add.w	fp, fp, #1
 800712c:	dd06      	ble.n	800713c <__hexnan+0x100>
 800712e:	4544      	cmp	r4, r8
 8007130:	d9c1      	bls.n	80070b6 <__hexnan+0x7a>
 8007132:	2300      	movs	r3, #0
 8007134:	f844 3c04 	str.w	r3, [r4, #-4]
 8007138:	2501      	movs	r5, #1
 800713a:	3c04      	subs	r4, #4
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	f000 000f 	and.w	r0, r0, #15
 8007142:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007146:	6020      	str	r0, [r4, #0]
 8007148:	e7b5      	b.n	80070b6 <__hexnan+0x7a>
 800714a:	2508      	movs	r5, #8
 800714c:	e7b3      	b.n	80070b6 <__hexnan+0x7a>
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0dd      	beq.n	8007110 <__hexnan+0xd4>
 8007154:	f1c3 0320 	rsb	r3, r3, #32
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	40da      	lsrs	r2, r3
 800715e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007162:	4013      	ands	r3, r2
 8007164:	f846 3c04 	str.w	r3, [r6, #-4]
 8007168:	e7d2      	b.n	8007110 <__hexnan+0xd4>
 800716a:	3f04      	subs	r7, #4
 800716c:	e7d0      	b.n	8007110 <__hexnan+0xd4>
 800716e:	2004      	movs	r0, #4
 8007170:	e7d5      	b.n	800711e <__hexnan+0xe2>
	...

08007174 <malloc>:
 8007174:	4b02      	ldr	r3, [pc, #8]	@ (8007180 <malloc+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f000 b825 	b.w	80071c8 <_malloc_r>
 800717e:	bf00      	nop
 8007180:	20000454 	.word	0x20000454

08007184 <sbrk_aligned>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4e0f      	ldr	r6, [pc, #60]	@ (80071c4 <sbrk_aligned+0x40>)
 8007188:	460c      	mov	r4, r1
 800718a:	6831      	ldr	r1, [r6, #0]
 800718c:	4605      	mov	r5, r0
 800718e:	b911      	cbnz	r1, 8007196 <sbrk_aligned+0x12>
 8007190:	f001 faf0 	bl	8008774 <_sbrk_r>
 8007194:	6030      	str	r0, [r6, #0]
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f001 faeb 	bl	8008774 <_sbrk_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	d103      	bne.n	80071aa <sbrk_aligned+0x26>
 80071a2:	f04f 34ff 	mov.w	r4, #4294967295
 80071a6:	4620      	mov	r0, r4
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
 80071aa:	1cc4      	adds	r4, r0, #3
 80071ac:	f024 0403 	bic.w	r4, r4, #3
 80071b0:	42a0      	cmp	r0, r4
 80071b2:	d0f8      	beq.n	80071a6 <sbrk_aligned+0x22>
 80071b4:	1a21      	subs	r1, r4, r0
 80071b6:	4628      	mov	r0, r5
 80071b8:	f001 fadc 	bl	8008774 <_sbrk_r>
 80071bc:	3001      	adds	r0, #1
 80071be:	d1f2      	bne.n	80071a6 <sbrk_aligned+0x22>
 80071c0:	e7ef      	b.n	80071a2 <sbrk_aligned+0x1e>
 80071c2:	bf00      	nop
 80071c4:	20000a74 	.word	0x20000a74

080071c8 <_malloc_r>:
 80071c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071cc:	1ccd      	adds	r5, r1, #3
 80071ce:	f025 0503 	bic.w	r5, r5, #3
 80071d2:	3508      	adds	r5, #8
 80071d4:	2d0c      	cmp	r5, #12
 80071d6:	bf38      	it	cc
 80071d8:	250c      	movcc	r5, #12
 80071da:	2d00      	cmp	r5, #0
 80071dc:	4606      	mov	r6, r0
 80071de:	db01      	blt.n	80071e4 <_malloc_r+0x1c>
 80071e0:	42a9      	cmp	r1, r5
 80071e2:	d904      	bls.n	80071ee <_malloc_r+0x26>
 80071e4:	230c      	movs	r3, #12
 80071e6:	6033      	str	r3, [r6, #0]
 80071e8:	2000      	movs	r0, #0
 80071ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072c4 <_malloc_r+0xfc>
 80071f2:	f000 f87b 	bl	80072ec <__malloc_lock>
 80071f6:	f8d8 3000 	ldr.w	r3, [r8]
 80071fa:	461c      	mov	r4, r3
 80071fc:	bb44      	cbnz	r4, 8007250 <_malloc_r+0x88>
 80071fe:	4629      	mov	r1, r5
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff ffbf 	bl	8007184 <sbrk_aligned>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	4604      	mov	r4, r0
 800720a:	d158      	bne.n	80072be <_malloc_r+0xf6>
 800720c:	f8d8 4000 	ldr.w	r4, [r8]
 8007210:	4627      	mov	r7, r4
 8007212:	2f00      	cmp	r7, #0
 8007214:	d143      	bne.n	800729e <_malloc_r+0xd6>
 8007216:	2c00      	cmp	r4, #0
 8007218:	d04b      	beq.n	80072b2 <_malloc_r+0xea>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	4639      	mov	r1, r7
 800721e:	4630      	mov	r0, r6
 8007220:	eb04 0903 	add.w	r9, r4, r3
 8007224:	f001 faa6 	bl	8008774 <_sbrk_r>
 8007228:	4581      	cmp	r9, r0
 800722a:	d142      	bne.n	80072b2 <_malloc_r+0xea>
 800722c:	6821      	ldr	r1, [r4, #0]
 800722e:	1a6d      	subs	r5, r5, r1
 8007230:	4629      	mov	r1, r5
 8007232:	4630      	mov	r0, r6
 8007234:	f7ff ffa6 	bl	8007184 <sbrk_aligned>
 8007238:	3001      	adds	r0, #1
 800723a:	d03a      	beq.n	80072b2 <_malloc_r+0xea>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	442b      	add	r3, r5
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	f8d8 3000 	ldr.w	r3, [r8]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	bb62      	cbnz	r2, 80072a4 <_malloc_r+0xdc>
 800724a:	f8c8 7000 	str.w	r7, [r8]
 800724e:	e00f      	b.n	8007270 <_malloc_r+0xa8>
 8007250:	6822      	ldr	r2, [r4, #0]
 8007252:	1b52      	subs	r2, r2, r5
 8007254:	d420      	bmi.n	8007298 <_malloc_r+0xd0>
 8007256:	2a0b      	cmp	r2, #11
 8007258:	d917      	bls.n	800728a <_malloc_r+0xc2>
 800725a:	1961      	adds	r1, r4, r5
 800725c:	42a3      	cmp	r3, r4
 800725e:	6025      	str	r5, [r4, #0]
 8007260:	bf18      	it	ne
 8007262:	6059      	strne	r1, [r3, #4]
 8007264:	6863      	ldr	r3, [r4, #4]
 8007266:	bf08      	it	eq
 8007268:	f8c8 1000 	streq.w	r1, [r8]
 800726c:	5162      	str	r2, [r4, r5]
 800726e:	604b      	str	r3, [r1, #4]
 8007270:	4630      	mov	r0, r6
 8007272:	f000 f841 	bl	80072f8 <__malloc_unlock>
 8007276:	f104 000b 	add.w	r0, r4, #11
 800727a:	1d23      	adds	r3, r4, #4
 800727c:	f020 0007 	bic.w	r0, r0, #7
 8007280:	1ac2      	subs	r2, r0, r3
 8007282:	bf1c      	itt	ne
 8007284:	1a1b      	subne	r3, r3, r0
 8007286:	50a3      	strne	r3, [r4, r2]
 8007288:	e7af      	b.n	80071ea <_malloc_r+0x22>
 800728a:	6862      	ldr	r2, [r4, #4]
 800728c:	42a3      	cmp	r3, r4
 800728e:	bf0c      	ite	eq
 8007290:	f8c8 2000 	streq.w	r2, [r8]
 8007294:	605a      	strne	r2, [r3, #4]
 8007296:	e7eb      	b.n	8007270 <_malloc_r+0xa8>
 8007298:	4623      	mov	r3, r4
 800729a:	6864      	ldr	r4, [r4, #4]
 800729c:	e7ae      	b.n	80071fc <_malloc_r+0x34>
 800729e:	463c      	mov	r4, r7
 80072a0:	687f      	ldr	r7, [r7, #4]
 80072a2:	e7b6      	b.n	8007212 <_malloc_r+0x4a>
 80072a4:	461a      	mov	r2, r3
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d1fb      	bne.n	80072a4 <_malloc_r+0xdc>
 80072ac:	2300      	movs	r3, #0
 80072ae:	6053      	str	r3, [r2, #4]
 80072b0:	e7de      	b.n	8007270 <_malloc_r+0xa8>
 80072b2:	230c      	movs	r3, #12
 80072b4:	6033      	str	r3, [r6, #0]
 80072b6:	4630      	mov	r0, r6
 80072b8:	f000 f81e 	bl	80072f8 <__malloc_unlock>
 80072bc:	e794      	b.n	80071e8 <_malloc_r+0x20>
 80072be:	6005      	str	r5, [r0, #0]
 80072c0:	e7d6      	b.n	8007270 <_malloc_r+0xa8>
 80072c2:	bf00      	nop
 80072c4:	20000a78 	.word	0x20000a78

080072c8 <__ascii_mbtowc>:
 80072c8:	b082      	sub	sp, #8
 80072ca:	b901      	cbnz	r1, 80072ce <__ascii_mbtowc+0x6>
 80072cc:	a901      	add	r1, sp, #4
 80072ce:	b142      	cbz	r2, 80072e2 <__ascii_mbtowc+0x1a>
 80072d0:	b14b      	cbz	r3, 80072e6 <__ascii_mbtowc+0x1e>
 80072d2:	7813      	ldrb	r3, [r2, #0]
 80072d4:	600b      	str	r3, [r1, #0]
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	1e10      	subs	r0, r2, #0
 80072da:	bf18      	it	ne
 80072dc:	2001      	movne	r0, #1
 80072de:	b002      	add	sp, #8
 80072e0:	4770      	bx	lr
 80072e2:	4610      	mov	r0, r2
 80072e4:	e7fb      	b.n	80072de <__ascii_mbtowc+0x16>
 80072e6:	f06f 0001 	mvn.w	r0, #1
 80072ea:	e7f8      	b.n	80072de <__ascii_mbtowc+0x16>

080072ec <__malloc_lock>:
 80072ec:	4801      	ldr	r0, [pc, #4]	@ (80072f4 <__malloc_lock+0x8>)
 80072ee:	f7ff bb7c 	b.w	80069ea <__retarget_lock_acquire_recursive>
 80072f2:	bf00      	nop
 80072f4:	20000a70 	.word	0x20000a70

080072f8 <__malloc_unlock>:
 80072f8:	4801      	ldr	r0, [pc, #4]	@ (8007300 <__malloc_unlock+0x8>)
 80072fa:	f7ff bb77 	b.w	80069ec <__retarget_lock_release_recursive>
 80072fe:	bf00      	nop
 8007300:	20000a70 	.word	0x20000a70

08007304 <_Balloc>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	69c6      	ldr	r6, [r0, #28]
 8007308:	4604      	mov	r4, r0
 800730a:	460d      	mov	r5, r1
 800730c:	b976      	cbnz	r6, 800732c <_Balloc+0x28>
 800730e:	2010      	movs	r0, #16
 8007310:	f7ff ff30 	bl	8007174 <malloc>
 8007314:	4602      	mov	r2, r0
 8007316:	61e0      	str	r0, [r4, #28]
 8007318:	b920      	cbnz	r0, 8007324 <_Balloc+0x20>
 800731a:	4b18      	ldr	r3, [pc, #96]	@ (800737c <_Balloc+0x78>)
 800731c:	4818      	ldr	r0, [pc, #96]	@ (8007380 <_Balloc+0x7c>)
 800731e:	216b      	movs	r1, #107	@ 0x6b
 8007320:	f7ff fb86 	bl	8006a30 <__assert_func>
 8007324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007328:	6006      	str	r6, [r0, #0]
 800732a:	60c6      	str	r6, [r0, #12]
 800732c:	69e6      	ldr	r6, [r4, #28]
 800732e:	68f3      	ldr	r3, [r6, #12]
 8007330:	b183      	cbz	r3, 8007354 <_Balloc+0x50>
 8007332:	69e3      	ldr	r3, [r4, #28]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800733a:	b9b8      	cbnz	r0, 800736c <_Balloc+0x68>
 800733c:	2101      	movs	r1, #1
 800733e:	fa01 f605 	lsl.w	r6, r1, r5
 8007342:	1d72      	adds	r2, r6, #5
 8007344:	0092      	lsls	r2, r2, #2
 8007346:	4620      	mov	r0, r4
 8007348:	f001 fa2b 	bl	80087a2 <_calloc_r>
 800734c:	b160      	cbz	r0, 8007368 <_Balloc+0x64>
 800734e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007352:	e00e      	b.n	8007372 <_Balloc+0x6e>
 8007354:	2221      	movs	r2, #33	@ 0x21
 8007356:	2104      	movs	r1, #4
 8007358:	4620      	mov	r0, r4
 800735a:	f001 fa22 	bl	80087a2 <_calloc_r>
 800735e:	69e3      	ldr	r3, [r4, #28]
 8007360:	60f0      	str	r0, [r6, #12]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e4      	bne.n	8007332 <_Balloc+0x2e>
 8007368:	2000      	movs	r0, #0
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	6802      	ldr	r2, [r0, #0]
 800736e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007372:	2300      	movs	r3, #0
 8007374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007378:	e7f7      	b.n	800736a <_Balloc+0x66>
 800737a:	bf00      	nop
 800737c:	08008ac6 	.word	0x08008ac6
 8007380:	08008bec 	.word	0x08008bec

08007384 <_Bfree>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	69c6      	ldr	r6, [r0, #28]
 8007388:	4605      	mov	r5, r0
 800738a:	460c      	mov	r4, r1
 800738c:	b976      	cbnz	r6, 80073ac <_Bfree+0x28>
 800738e:	2010      	movs	r0, #16
 8007390:	f7ff fef0 	bl	8007174 <malloc>
 8007394:	4602      	mov	r2, r0
 8007396:	61e8      	str	r0, [r5, #28]
 8007398:	b920      	cbnz	r0, 80073a4 <_Bfree+0x20>
 800739a:	4b09      	ldr	r3, [pc, #36]	@ (80073c0 <_Bfree+0x3c>)
 800739c:	4809      	ldr	r0, [pc, #36]	@ (80073c4 <_Bfree+0x40>)
 800739e:	218f      	movs	r1, #143	@ 0x8f
 80073a0:	f7ff fb46 	bl	8006a30 <__assert_func>
 80073a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073a8:	6006      	str	r6, [r0, #0]
 80073aa:	60c6      	str	r6, [r0, #12]
 80073ac:	b13c      	cbz	r4, 80073be <_Bfree+0x3a>
 80073ae:	69eb      	ldr	r3, [r5, #28]
 80073b0:	6862      	ldr	r2, [r4, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073b8:	6021      	str	r1, [r4, #0]
 80073ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	08008ac6 	.word	0x08008ac6
 80073c4:	08008bec 	.word	0x08008bec

080073c8 <__multadd>:
 80073c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073cc:	690d      	ldr	r5, [r1, #16]
 80073ce:	4607      	mov	r7, r0
 80073d0:	460c      	mov	r4, r1
 80073d2:	461e      	mov	r6, r3
 80073d4:	f101 0c14 	add.w	ip, r1, #20
 80073d8:	2000      	movs	r0, #0
 80073da:	f8dc 3000 	ldr.w	r3, [ip]
 80073de:	b299      	uxth	r1, r3
 80073e0:	fb02 6101 	mla	r1, r2, r1, r6
 80073e4:	0c1e      	lsrs	r6, r3, #16
 80073e6:	0c0b      	lsrs	r3, r1, #16
 80073e8:	fb02 3306 	mla	r3, r2, r6, r3
 80073ec:	b289      	uxth	r1, r1
 80073ee:	3001      	adds	r0, #1
 80073f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073f4:	4285      	cmp	r5, r0
 80073f6:	f84c 1b04 	str.w	r1, [ip], #4
 80073fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073fe:	dcec      	bgt.n	80073da <__multadd+0x12>
 8007400:	b30e      	cbz	r6, 8007446 <__multadd+0x7e>
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	42ab      	cmp	r3, r5
 8007406:	dc19      	bgt.n	800743c <__multadd+0x74>
 8007408:	6861      	ldr	r1, [r4, #4]
 800740a:	4638      	mov	r0, r7
 800740c:	3101      	adds	r1, #1
 800740e:	f7ff ff79 	bl	8007304 <_Balloc>
 8007412:	4680      	mov	r8, r0
 8007414:	b928      	cbnz	r0, 8007422 <__multadd+0x5a>
 8007416:	4602      	mov	r2, r0
 8007418:	4b0c      	ldr	r3, [pc, #48]	@ (800744c <__multadd+0x84>)
 800741a:	480d      	ldr	r0, [pc, #52]	@ (8007450 <__multadd+0x88>)
 800741c:	21ba      	movs	r1, #186	@ 0xba
 800741e:	f7ff fb07 	bl	8006a30 <__assert_func>
 8007422:	6922      	ldr	r2, [r4, #16]
 8007424:	3202      	adds	r2, #2
 8007426:	f104 010c 	add.w	r1, r4, #12
 800742a:	0092      	lsls	r2, r2, #2
 800742c:	300c      	adds	r0, #12
 800742e:	f7ff fae6 	bl	80069fe <memcpy>
 8007432:	4621      	mov	r1, r4
 8007434:	4638      	mov	r0, r7
 8007436:	f7ff ffa5 	bl	8007384 <_Bfree>
 800743a:	4644      	mov	r4, r8
 800743c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007440:	3501      	adds	r5, #1
 8007442:	615e      	str	r6, [r3, #20]
 8007444:	6125      	str	r5, [r4, #16]
 8007446:	4620      	mov	r0, r4
 8007448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800744c:	08008b7b 	.word	0x08008b7b
 8007450:	08008bec 	.word	0x08008bec

08007454 <__s2b>:
 8007454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007458:	460c      	mov	r4, r1
 800745a:	4615      	mov	r5, r2
 800745c:	461f      	mov	r7, r3
 800745e:	2209      	movs	r2, #9
 8007460:	3308      	adds	r3, #8
 8007462:	4606      	mov	r6, r0
 8007464:	fb93 f3f2 	sdiv	r3, r3, r2
 8007468:	2100      	movs	r1, #0
 800746a:	2201      	movs	r2, #1
 800746c:	429a      	cmp	r2, r3
 800746e:	db09      	blt.n	8007484 <__s2b+0x30>
 8007470:	4630      	mov	r0, r6
 8007472:	f7ff ff47 	bl	8007304 <_Balloc>
 8007476:	b940      	cbnz	r0, 800748a <__s2b+0x36>
 8007478:	4602      	mov	r2, r0
 800747a:	4b19      	ldr	r3, [pc, #100]	@ (80074e0 <__s2b+0x8c>)
 800747c:	4819      	ldr	r0, [pc, #100]	@ (80074e4 <__s2b+0x90>)
 800747e:	21d3      	movs	r1, #211	@ 0xd3
 8007480:	f7ff fad6 	bl	8006a30 <__assert_func>
 8007484:	0052      	lsls	r2, r2, #1
 8007486:	3101      	adds	r1, #1
 8007488:	e7f0      	b.n	800746c <__s2b+0x18>
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	6143      	str	r3, [r0, #20]
 800748e:	2d09      	cmp	r5, #9
 8007490:	f04f 0301 	mov.w	r3, #1
 8007494:	6103      	str	r3, [r0, #16]
 8007496:	dd16      	ble.n	80074c6 <__s2b+0x72>
 8007498:	f104 0909 	add.w	r9, r4, #9
 800749c:	46c8      	mov	r8, r9
 800749e:	442c      	add	r4, r5
 80074a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80074a4:	4601      	mov	r1, r0
 80074a6:	3b30      	subs	r3, #48	@ 0x30
 80074a8:	220a      	movs	r2, #10
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff ff8c 	bl	80073c8 <__multadd>
 80074b0:	45a0      	cmp	r8, r4
 80074b2:	d1f5      	bne.n	80074a0 <__s2b+0x4c>
 80074b4:	f1a5 0408 	sub.w	r4, r5, #8
 80074b8:	444c      	add	r4, r9
 80074ba:	1b2d      	subs	r5, r5, r4
 80074bc:	1963      	adds	r3, r4, r5
 80074be:	42bb      	cmp	r3, r7
 80074c0:	db04      	blt.n	80074cc <__s2b+0x78>
 80074c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c6:	340a      	adds	r4, #10
 80074c8:	2509      	movs	r5, #9
 80074ca:	e7f6      	b.n	80074ba <__s2b+0x66>
 80074cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074d0:	4601      	mov	r1, r0
 80074d2:	3b30      	subs	r3, #48	@ 0x30
 80074d4:	220a      	movs	r2, #10
 80074d6:	4630      	mov	r0, r6
 80074d8:	f7ff ff76 	bl	80073c8 <__multadd>
 80074dc:	e7ee      	b.n	80074bc <__s2b+0x68>
 80074de:	bf00      	nop
 80074e0:	08008b7b 	.word	0x08008b7b
 80074e4:	08008bec 	.word	0x08008bec

080074e8 <__hi0bits>:
 80074e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80074ec:	4603      	mov	r3, r0
 80074ee:	bf36      	itet	cc
 80074f0:	0403      	lslcc	r3, r0, #16
 80074f2:	2000      	movcs	r0, #0
 80074f4:	2010      	movcc	r0, #16
 80074f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074fa:	bf3c      	itt	cc
 80074fc:	021b      	lslcc	r3, r3, #8
 80074fe:	3008      	addcc	r0, #8
 8007500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007504:	bf3c      	itt	cc
 8007506:	011b      	lslcc	r3, r3, #4
 8007508:	3004      	addcc	r0, #4
 800750a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800750e:	bf3c      	itt	cc
 8007510:	009b      	lslcc	r3, r3, #2
 8007512:	3002      	addcc	r0, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	db05      	blt.n	8007524 <__hi0bits+0x3c>
 8007518:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800751c:	f100 0001 	add.w	r0, r0, #1
 8007520:	bf08      	it	eq
 8007522:	2020      	moveq	r0, #32
 8007524:	4770      	bx	lr

08007526 <__lo0bits>:
 8007526:	6803      	ldr	r3, [r0, #0]
 8007528:	4602      	mov	r2, r0
 800752a:	f013 0007 	ands.w	r0, r3, #7
 800752e:	d00b      	beq.n	8007548 <__lo0bits+0x22>
 8007530:	07d9      	lsls	r1, r3, #31
 8007532:	d421      	bmi.n	8007578 <__lo0bits+0x52>
 8007534:	0798      	lsls	r0, r3, #30
 8007536:	bf49      	itett	mi
 8007538:	085b      	lsrmi	r3, r3, #1
 800753a:	089b      	lsrpl	r3, r3, #2
 800753c:	2001      	movmi	r0, #1
 800753e:	6013      	strmi	r3, [r2, #0]
 8007540:	bf5c      	itt	pl
 8007542:	6013      	strpl	r3, [r2, #0]
 8007544:	2002      	movpl	r0, #2
 8007546:	4770      	bx	lr
 8007548:	b299      	uxth	r1, r3
 800754a:	b909      	cbnz	r1, 8007550 <__lo0bits+0x2a>
 800754c:	0c1b      	lsrs	r3, r3, #16
 800754e:	2010      	movs	r0, #16
 8007550:	b2d9      	uxtb	r1, r3
 8007552:	b909      	cbnz	r1, 8007558 <__lo0bits+0x32>
 8007554:	3008      	adds	r0, #8
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	0719      	lsls	r1, r3, #28
 800755a:	bf04      	itt	eq
 800755c:	091b      	lsreq	r3, r3, #4
 800755e:	3004      	addeq	r0, #4
 8007560:	0799      	lsls	r1, r3, #30
 8007562:	bf04      	itt	eq
 8007564:	089b      	lsreq	r3, r3, #2
 8007566:	3002      	addeq	r0, #2
 8007568:	07d9      	lsls	r1, r3, #31
 800756a:	d403      	bmi.n	8007574 <__lo0bits+0x4e>
 800756c:	085b      	lsrs	r3, r3, #1
 800756e:	f100 0001 	add.w	r0, r0, #1
 8007572:	d003      	beq.n	800757c <__lo0bits+0x56>
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	4770      	bx	lr
 8007578:	2000      	movs	r0, #0
 800757a:	4770      	bx	lr
 800757c:	2020      	movs	r0, #32
 800757e:	4770      	bx	lr

08007580 <__i2b>:
 8007580:	b510      	push	{r4, lr}
 8007582:	460c      	mov	r4, r1
 8007584:	2101      	movs	r1, #1
 8007586:	f7ff febd 	bl	8007304 <_Balloc>
 800758a:	4602      	mov	r2, r0
 800758c:	b928      	cbnz	r0, 800759a <__i2b+0x1a>
 800758e:	4b05      	ldr	r3, [pc, #20]	@ (80075a4 <__i2b+0x24>)
 8007590:	4805      	ldr	r0, [pc, #20]	@ (80075a8 <__i2b+0x28>)
 8007592:	f240 1145 	movw	r1, #325	@ 0x145
 8007596:	f7ff fa4b 	bl	8006a30 <__assert_func>
 800759a:	2301      	movs	r3, #1
 800759c:	6144      	str	r4, [r0, #20]
 800759e:	6103      	str	r3, [r0, #16]
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	bf00      	nop
 80075a4:	08008b7b 	.word	0x08008b7b
 80075a8:	08008bec 	.word	0x08008bec

080075ac <__multiply>:
 80075ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b0:	4617      	mov	r7, r2
 80075b2:	690a      	ldr	r2, [r1, #16]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	bfa8      	it	ge
 80075ba:	463b      	movge	r3, r7
 80075bc:	4689      	mov	r9, r1
 80075be:	bfa4      	itt	ge
 80075c0:	460f      	movge	r7, r1
 80075c2:	4699      	movge	r9, r3
 80075c4:	693d      	ldr	r5, [r7, #16]
 80075c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	eb05 060a 	add.w	r6, r5, sl
 80075d2:	42b3      	cmp	r3, r6
 80075d4:	b085      	sub	sp, #20
 80075d6:	bfb8      	it	lt
 80075d8:	3101      	addlt	r1, #1
 80075da:	f7ff fe93 	bl	8007304 <_Balloc>
 80075de:	b930      	cbnz	r0, 80075ee <__multiply+0x42>
 80075e0:	4602      	mov	r2, r0
 80075e2:	4b41      	ldr	r3, [pc, #260]	@ (80076e8 <__multiply+0x13c>)
 80075e4:	4841      	ldr	r0, [pc, #260]	@ (80076ec <__multiply+0x140>)
 80075e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80075ea:	f7ff fa21 	bl	8006a30 <__assert_func>
 80075ee:	f100 0414 	add.w	r4, r0, #20
 80075f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80075f6:	4623      	mov	r3, r4
 80075f8:	2200      	movs	r2, #0
 80075fa:	4573      	cmp	r3, lr
 80075fc:	d320      	bcc.n	8007640 <__multiply+0x94>
 80075fe:	f107 0814 	add.w	r8, r7, #20
 8007602:	f109 0114 	add.w	r1, r9, #20
 8007606:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800760a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800760e:	9302      	str	r3, [sp, #8]
 8007610:	1beb      	subs	r3, r5, r7
 8007612:	3b15      	subs	r3, #21
 8007614:	f023 0303 	bic.w	r3, r3, #3
 8007618:	3304      	adds	r3, #4
 800761a:	3715      	adds	r7, #21
 800761c:	42bd      	cmp	r5, r7
 800761e:	bf38      	it	cc
 8007620:	2304      	movcc	r3, #4
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	9b02      	ldr	r3, [sp, #8]
 8007626:	9103      	str	r1, [sp, #12]
 8007628:	428b      	cmp	r3, r1
 800762a:	d80c      	bhi.n	8007646 <__multiply+0x9a>
 800762c:	2e00      	cmp	r6, #0
 800762e:	dd03      	ble.n	8007638 <__multiply+0x8c>
 8007630:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007634:	2b00      	cmp	r3, #0
 8007636:	d055      	beq.n	80076e4 <__multiply+0x138>
 8007638:	6106      	str	r6, [r0, #16]
 800763a:	b005      	add	sp, #20
 800763c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007640:	f843 2b04 	str.w	r2, [r3], #4
 8007644:	e7d9      	b.n	80075fa <__multiply+0x4e>
 8007646:	f8b1 a000 	ldrh.w	sl, [r1]
 800764a:	f1ba 0f00 	cmp.w	sl, #0
 800764e:	d01f      	beq.n	8007690 <__multiply+0xe4>
 8007650:	46c4      	mov	ip, r8
 8007652:	46a1      	mov	r9, r4
 8007654:	2700      	movs	r7, #0
 8007656:	f85c 2b04 	ldr.w	r2, [ip], #4
 800765a:	f8d9 3000 	ldr.w	r3, [r9]
 800765e:	fa1f fb82 	uxth.w	fp, r2
 8007662:	b29b      	uxth	r3, r3
 8007664:	fb0a 330b 	mla	r3, sl, fp, r3
 8007668:	443b      	add	r3, r7
 800766a:	f8d9 7000 	ldr.w	r7, [r9]
 800766e:	0c12      	lsrs	r2, r2, #16
 8007670:	0c3f      	lsrs	r7, r7, #16
 8007672:	fb0a 7202 	mla	r2, sl, r2, r7
 8007676:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800767a:	b29b      	uxth	r3, r3
 800767c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007680:	4565      	cmp	r5, ip
 8007682:	f849 3b04 	str.w	r3, [r9], #4
 8007686:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800768a:	d8e4      	bhi.n	8007656 <__multiply+0xaa>
 800768c:	9b01      	ldr	r3, [sp, #4]
 800768e:	50e7      	str	r7, [r4, r3]
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007696:	3104      	adds	r1, #4
 8007698:	f1b9 0f00 	cmp.w	r9, #0
 800769c:	d020      	beq.n	80076e0 <__multiply+0x134>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	4647      	mov	r7, r8
 80076a2:	46a4      	mov	ip, r4
 80076a4:	f04f 0a00 	mov.w	sl, #0
 80076a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80076ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80076b0:	fb09 220b 	mla	r2, r9, fp, r2
 80076b4:	4452      	add	r2, sl
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076bc:	f84c 3b04 	str.w	r3, [ip], #4
 80076c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80076c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80076cc:	fb09 330a 	mla	r3, r9, sl, r3
 80076d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80076d4:	42bd      	cmp	r5, r7
 80076d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076da:	d8e5      	bhi.n	80076a8 <__multiply+0xfc>
 80076dc:	9a01      	ldr	r2, [sp, #4]
 80076de:	50a3      	str	r3, [r4, r2]
 80076e0:	3404      	adds	r4, #4
 80076e2:	e79f      	b.n	8007624 <__multiply+0x78>
 80076e4:	3e01      	subs	r6, #1
 80076e6:	e7a1      	b.n	800762c <__multiply+0x80>
 80076e8:	08008b7b 	.word	0x08008b7b
 80076ec:	08008bec 	.word	0x08008bec

080076f0 <__pow5mult>:
 80076f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	4615      	mov	r5, r2
 80076f6:	f012 0203 	ands.w	r2, r2, #3
 80076fa:	4607      	mov	r7, r0
 80076fc:	460e      	mov	r6, r1
 80076fe:	d007      	beq.n	8007710 <__pow5mult+0x20>
 8007700:	4c25      	ldr	r4, [pc, #148]	@ (8007798 <__pow5mult+0xa8>)
 8007702:	3a01      	subs	r2, #1
 8007704:	2300      	movs	r3, #0
 8007706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800770a:	f7ff fe5d 	bl	80073c8 <__multadd>
 800770e:	4606      	mov	r6, r0
 8007710:	10ad      	asrs	r5, r5, #2
 8007712:	d03d      	beq.n	8007790 <__pow5mult+0xa0>
 8007714:	69fc      	ldr	r4, [r7, #28]
 8007716:	b97c      	cbnz	r4, 8007738 <__pow5mult+0x48>
 8007718:	2010      	movs	r0, #16
 800771a:	f7ff fd2b 	bl	8007174 <malloc>
 800771e:	4602      	mov	r2, r0
 8007720:	61f8      	str	r0, [r7, #28]
 8007722:	b928      	cbnz	r0, 8007730 <__pow5mult+0x40>
 8007724:	4b1d      	ldr	r3, [pc, #116]	@ (800779c <__pow5mult+0xac>)
 8007726:	481e      	ldr	r0, [pc, #120]	@ (80077a0 <__pow5mult+0xb0>)
 8007728:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800772c:	f7ff f980 	bl	8006a30 <__assert_func>
 8007730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007734:	6004      	str	r4, [r0, #0]
 8007736:	60c4      	str	r4, [r0, #12]
 8007738:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800773c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007740:	b94c      	cbnz	r4, 8007756 <__pow5mult+0x66>
 8007742:	f240 2171 	movw	r1, #625	@ 0x271
 8007746:	4638      	mov	r0, r7
 8007748:	f7ff ff1a 	bl	8007580 <__i2b>
 800774c:	2300      	movs	r3, #0
 800774e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007752:	4604      	mov	r4, r0
 8007754:	6003      	str	r3, [r0, #0]
 8007756:	f04f 0900 	mov.w	r9, #0
 800775a:	07eb      	lsls	r3, r5, #31
 800775c:	d50a      	bpl.n	8007774 <__pow5mult+0x84>
 800775e:	4631      	mov	r1, r6
 8007760:	4622      	mov	r2, r4
 8007762:	4638      	mov	r0, r7
 8007764:	f7ff ff22 	bl	80075ac <__multiply>
 8007768:	4631      	mov	r1, r6
 800776a:	4680      	mov	r8, r0
 800776c:	4638      	mov	r0, r7
 800776e:	f7ff fe09 	bl	8007384 <_Bfree>
 8007772:	4646      	mov	r6, r8
 8007774:	106d      	asrs	r5, r5, #1
 8007776:	d00b      	beq.n	8007790 <__pow5mult+0xa0>
 8007778:	6820      	ldr	r0, [r4, #0]
 800777a:	b938      	cbnz	r0, 800778c <__pow5mult+0x9c>
 800777c:	4622      	mov	r2, r4
 800777e:	4621      	mov	r1, r4
 8007780:	4638      	mov	r0, r7
 8007782:	f7ff ff13 	bl	80075ac <__multiply>
 8007786:	6020      	str	r0, [r4, #0]
 8007788:	f8c0 9000 	str.w	r9, [r0]
 800778c:	4604      	mov	r4, r0
 800778e:	e7e4      	b.n	800775a <__pow5mult+0x6a>
 8007790:	4630      	mov	r0, r6
 8007792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007796:	bf00      	nop
 8007798:	08008cc8 	.word	0x08008cc8
 800779c:	08008ac6 	.word	0x08008ac6
 80077a0:	08008bec 	.word	0x08008bec

080077a4 <__lshift>:
 80077a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a8:	460c      	mov	r4, r1
 80077aa:	6849      	ldr	r1, [r1, #4]
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077b2:	68a3      	ldr	r3, [r4, #8]
 80077b4:	4607      	mov	r7, r0
 80077b6:	4691      	mov	r9, r2
 80077b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077bc:	f108 0601 	add.w	r6, r8, #1
 80077c0:	42b3      	cmp	r3, r6
 80077c2:	db0b      	blt.n	80077dc <__lshift+0x38>
 80077c4:	4638      	mov	r0, r7
 80077c6:	f7ff fd9d 	bl	8007304 <_Balloc>
 80077ca:	4605      	mov	r5, r0
 80077cc:	b948      	cbnz	r0, 80077e2 <__lshift+0x3e>
 80077ce:	4602      	mov	r2, r0
 80077d0:	4b28      	ldr	r3, [pc, #160]	@ (8007874 <__lshift+0xd0>)
 80077d2:	4829      	ldr	r0, [pc, #164]	@ (8007878 <__lshift+0xd4>)
 80077d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80077d8:	f7ff f92a 	bl	8006a30 <__assert_func>
 80077dc:	3101      	adds	r1, #1
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	e7ee      	b.n	80077c0 <__lshift+0x1c>
 80077e2:	2300      	movs	r3, #0
 80077e4:	f100 0114 	add.w	r1, r0, #20
 80077e8:	f100 0210 	add.w	r2, r0, #16
 80077ec:	4618      	mov	r0, r3
 80077ee:	4553      	cmp	r3, sl
 80077f0:	db33      	blt.n	800785a <__lshift+0xb6>
 80077f2:	6920      	ldr	r0, [r4, #16]
 80077f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077f8:	f104 0314 	add.w	r3, r4, #20
 80077fc:	f019 091f 	ands.w	r9, r9, #31
 8007800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007808:	d02b      	beq.n	8007862 <__lshift+0xbe>
 800780a:	f1c9 0e20 	rsb	lr, r9, #32
 800780e:	468a      	mov	sl, r1
 8007810:	2200      	movs	r2, #0
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	fa00 f009 	lsl.w	r0, r0, r9
 8007818:	4310      	orrs	r0, r2
 800781a:	f84a 0b04 	str.w	r0, [sl], #4
 800781e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007822:	459c      	cmp	ip, r3
 8007824:	fa22 f20e 	lsr.w	r2, r2, lr
 8007828:	d8f3      	bhi.n	8007812 <__lshift+0x6e>
 800782a:	ebac 0304 	sub.w	r3, ip, r4
 800782e:	3b15      	subs	r3, #21
 8007830:	f023 0303 	bic.w	r3, r3, #3
 8007834:	3304      	adds	r3, #4
 8007836:	f104 0015 	add.w	r0, r4, #21
 800783a:	4560      	cmp	r0, ip
 800783c:	bf88      	it	hi
 800783e:	2304      	movhi	r3, #4
 8007840:	50ca      	str	r2, [r1, r3]
 8007842:	b10a      	cbz	r2, 8007848 <__lshift+0xa4>
 8007844:	f108 0602 	add.w	r6, r8, #2
 8007848:	3e01      	subs	r6, #1
 800784a:	4638      	mov	r0, r7
 800784c:	612e      	str	r6, [r5, #16]
 800784e:	4621      	mov	r1, r4
 8007850:	f7ff fd98 	bl	8007384 <_Bfree>
 8007854:	4628      	mov	r0, r5
 8007856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785a:	f842 0f04 	str.w	r0, [r2, #4]!
 800785e:	3301      	adds	r3, #1
 8007860:	e7c5      	b.n	80077ee <__lshift+0x4a>
 8007862:	3904      	subs	r1, #4
 8007864:	f853 2b04 	ldr.w	r2, [r3], #4
 8007868:	f841 2f04 	str.w	r2, [r1, #4]!
 800786c:	459c      	cmp	ip, r3
 800786e:	d8f9      	bhi.n	8007864 <__lshift+0xc0>
 8007870:	e7ea      	b.n	8007848 <__lshift+0xa4>
 8007872:	bf00      	nop
 8007874:	08008b7b 	.word	0x08008b7b
 8007878:	08008bec 	.word	0x08008bec

0800787c <__mcmp>:
 800787c:	690a      	ldr	r2, [r1, #16]
 800787e:	4603      	mov	r3, r0
 8007880:	6900      	ldr	r0, [r0, #16]
 8007882:	1a80      	subs	r0, r0, r2
 8007884:	b530      	push	{r4, r5, lr}
 8007886:	d10e      	bne.n	80078a6 <__mcmp+0x2a>
 8007888:	3314      	adds	r3, #20
 800788a:	3114      	adds	r1, #20
 800788c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007890:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007894:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007898:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800789c:	4295      	cmp	r5, r2
 800789e:	d003      	beq.n	80078a8 <__mcmp+0x2c>
 80078a0:	d205      	bcs.n	80078ae <__mcmp+0x32>
 80078a2:	f04f 30ff 	mov.w	r0, #4294967295
 80078a6:	bd30      	pop	{r4, r5, pc}
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	d3f3      	bcc.n	8007894 <__mcmp+0x18>
 80078ac:	e7fb      	b.n	80078a6 <__mcmp+0x2a>
 80078ae:	2001      	movs	r0, #1
 80078b0:	e7f9      	b.n	80078a6 <__mcmp+0x2a>
	...

080078b4 <__mdiff>:
 80078b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b8:	4689      	mov	r9, r1
 80078ba:	4606      	mov	r6, r0
 80078bc:	4611      	mov	r1, r2
 80078be:	4648      	mov	r0, r9
 80078c0:	4614      	mov	r4, r2
 80078c2:	f7ff ffdb 	bl	800787c <__mcmp>
 80078c6:	1e05      	subs	r5, r0, #0
 80078c8:	d112      	bne.n	80078f0 <__mdiff+0x3c>
 80078ca:	4629      	mov	r1, r5
 80078cc:	4630      	mov	r0, r6
 80078ce:	f7ff fd19 	bl	8007304 <_Balloc>
 80078d2:	4602      	mov	r2, r0
 80078d4:	b928      	cbnz	r0, 80078e2 <__mdiff+0x2e>
 80078d6:	4b3f      	ldr	r3, [pc, #252]	@ (80079d4 <__mdiff+0x120>)
 80078d8:	f240 2137 	movw	r1, #567	@ 0x237
 80078dc:	483e      	ldr	r0, [pc, #248]	@ (80079d8 <__mdiff+0x124>)
 80078de:	f7ff f8a7 	bl	8006a30 <__assert_func>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078e8:	4610      	mov	r0, r2
 80078ea:	b003      	add	sp, #12
 80078ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f0:	bfbc      	itt	lt
 80078f2:	464b      	movlt	r3, r9
 80078f4:	46a1      	movlt	r9, r4
 80078f6:	4630      	mov	r0, r6
 80078f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078fc:	bfba      	itte	lt
 80078fe:	461c      	movlt	r4, r3
 8007900:	2501      	movlt	r5, #1
 8007902:	2500      	movge	r5, #0
 8007904:	f7ff fcfe 	bl	8007304 <_Balloc>
 8007908:	4602      	mov	r2, r0
 800790a:	b918      	cbnz	r0, 8007914 <__mdiff+0x60>
 800790c:	4b31      	ldr	r3, [pc, #196]	@ (80079d4 <__mdiff+0x120>)
 800790e:	f240 2145 	movw	r1, #581	@ 0x245
 8007912:	e7e3      	b.n	80078dc <__mdiff+0x28>
 8007914:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007918:	6926      	ldr	r6, [r4, #16]
 800791a:	60c5      	str	r5, [r0, #12]
 800791c:	f109 0310 	add.w	r3, r9, #16
 8007920:	f109 0514 	add.w	r5, r9, #20
 8007924:	f104 0e14 	add.w	lr, r4, #20
 8007928:	f100 0b14 	add.w	fp, r0, #20
 800792c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007930:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	46d9      	mov	r9, fp
 8007938:	f04f 0c00 	mov.w	ip, #0
 800793c:	9b01      	ldr	r3, [sp, #4]
 800793e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007942:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	fa1f f38a 	uxth.w	r3, sl
 800794c:	4619      	mov	r1, r3
 800794e:	b283      	uxth	r3, r0
 8007950:	1acb      	subs	r3, r1, r3
 8007952:	0c00      	lsrs	r0, r0, #16
 8007954:	4463      	add	r3, ip
 8007956:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800795a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007964:	4576      	cmp	r6, lr
 8007966:	f849 3b04 	str.w	r3, [r9], #4
 800796a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800796e:	d8e5      	bhi.n	800793c <__mdiff+0x88>
 8007970:	1b33      	subs	r3, r6, r4
 8007972:	3b15      	subs	r3, #21
 8007974:	f023 0303 	bic.w	r3, r3, #3
 8007978:	3415      	adds	r4, #21
 800797a:	3304      	adds	r3, #4
 800797c:	42a6      	cmp	r6, r4
 800797e:	bf38      	it	cc
 8007980:	2304      	movcc	r3, #4
 8007982:	441d      	add	r5, r3
 8007984:	445b      	add	r3, fp
 8007986:	461e      	mov	r6, r3
 8007988:	462c      	mov	r4, r5
 800798a:	4544      	cmp	r4, r8
 800798c:	d30e      	bcc.n	80079ac <__mdiff+0xf8>
 800798e:	f108 0103 	add.w	r1, r8, #3
 8007992:	1b49      	subs	r1, r1, r5
 8007994:	f021 0103 	bic.w	r1, r1, #3
 8007998:	3d03      	subs	r5, #3
 800799a:	45a8      	cmp	r8, r5
 800799c:	bf38      	it	cc
 800799e:	2100      	movcc	r1, #0
 80079a0:	440b      	add	r3, r1
 80079a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079a6:	b191      	cbz	r1, 80079ce <__mdiff+0x11a>
 80079a8:	6117      	str	r7, [r2, #16]
 80079aa:	e79d      	b.n	80078e8 <__mdiff+0x34>
 80079ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80079b0:	46e6      	mov	lr, ip
 80079b2:	0c08      	lsrs	r0, r1, #16
 80079b4:	fa1c fc81 	uxtah	ip, ip, r1
 80079b8:	4471      	add	r1, lr
 80079ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079be:	b289      	uxth	r1, r1
 80079c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079c4:	f846 1b04 	str.w	r1, [r6], #4
 80079c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079cc:	e7dd      	b.n	800798a <__mdiff+0xd6>
 80079ce:	3f01      	subs	r7, #1
 80079d0:	e7e7      	b.n	80079a2 <__mdiff+0xee>
 80079d2:	bf00      	nop
 80079d4:	08008b7b 	.word	0x08008b7b
 80079d8:	08008bec 	.word	0x08008bec

080079dc <__ulp>:
 80079dc:	b082      	sub	sp, #8
 80079de:	ed8d 0b00 	vstr	d0, [sp]
 80079e2:	9a01      	ldr	r2, [sp, #4]
 80079e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a24 <__ulp+0x48>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc08      	bgt.n	8007a02 <__ulp+0x26>
 80079f0:	425b      	negs	r3, r3
 80079f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80079f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80079fa:	da04      	bge.n	8007a06 <__ulp+0x2a>
 80079fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007a00:	4113      	asrs	r3, r2
 8007a02:	2200      	movs	r2, #0
 8007a04:	e008      	b.n	8007a18 <__ulp+0x3c>
 8007a06:	f1a2 0314 	sub.w	r3, r2, #20
 8007a0a:	2b1e      	cmp	r3, #30
 8007a0c:	bfda      	itte	le
 8007a0e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007a12:	40da      	lsrle	r2, r3
 8007a14:	2201      	movgt	r2, #1
 8007a16:	2300      	movs	r3, #0
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	ec41 0b10 	vmov	d0, r0, r1
 8007a20:	b002      	add	sp, #8
 8007a22:	4770      	bx	lr
 8007a24:	7ff00000 	.word	0x7ff00000

08007a28 <__b2d>:
 8007a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2c:	6906      	ldr	r6, [r0, #16]
 8007a2e:	f100 0814 	add.w	r8, r0, #20
 8007a32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007a36:	1f37      	subs	r7, r6, #4
 8007a38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7ff fd53 	bl	80074e8 <__hi0bits>
 8007a42:	f1c0 0320 	rsb	r3, r0, #32
 8007a46:	280a      	cmp	r0, #10
 8007a48:	600b      	str	r3, [r1, #0]
 8007a4a:	491b      	ldr	r1, [pc, #108]	@ (8007ab8 <__b2d+0x90>)
 8007a4c:	dc15      	bgt.n	8007a7a <__b2d+0x52>
 8007a4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007a52:	fa22 f30c 	lsr.w	r3, r2, ip
 8007a56:	45b8      	cmp	r8, r7
 8007a58:	ea43 0501 	orr.w	r5, r3, r1
 8007a5c:	bf34      	ite	cc
 8007a5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a62:	2300      	movcs	r3, #0
 8007a64:	3015      	adds	r0, #21
 8007a66:	fa02 f000 	lsl.w	r0, r2, r0
 8007a6a:	fa23 f30c 	lsr.w	r3, r3, ip
 8007a6e:	4303      	orrs	r3, r0
 8007a70:	461c      	mov	r4, r3
 8007a72:	ec45 4b10 	vmov	d0, r4, r5
 8007a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7a:	45b8      	cmp	r8, r7
 8007a7c:	bf3a      	itte	cc
 8007a7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007a82:	f1a6 0708 	subcc.w	r7, r6, #8
 8007a86:	2300      	movcs	r3, #0
 8007a88:	380b      	subs	r0, #11
 8007a8a:	d012      	beq.n	8007ab2 <__b2d+0x8a>
 8007a8c:	f1c0 0120 	rsb	r1, r0, #32
 8007a90:	fa23 f401 	lsr.w	r4, r3, r1
 8007a94:	4082      	lsls	r2, r0
 8007a96:	4322      	orrs	r2, r4
 8007a98:	4547      	cmp	r7, r8
 8007a9a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007a9e:	bf8c      	ite	hi
 8007aa0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007aa4:	2200      	movls	r2, #0
 8007aa6:	4083      	lsls	r3, r0
 8007aa8:	40ca      	lsrs	r2, r1
 8007aaa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	e7de      	b.n	8007a70 <__b2d+0x48>
 8007ab2:	ea42 0501 	orr.w	r5, r2, r1
 8007ab6:	e7db      	b.n	8007a70 <__b2d+0x48>
 8007ab8:	3ff00000 	.word	0x3ff00000

08007abc <__d2b>:
 8007abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ac0:	460f      	mov	r7, r1
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	ec59 8b10 	vmov	r8, r9, d0
 8007ac8:	4616      	mov	r6, r2
 8007aca:	f7ff fc1b 	bl	8007304 <_Balloc>
 8007ace:	4604      	mov	r4, r0
 8007ad0:	b930      	cbnz	r0, 8007ae0 <__d2b+0x24>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	4b23      	ldr	r3, [pc, #140]	@ (8007b64 <__d2b+0xa8>)
 8007ad6:	4824      	ldr	r0, [pc, #144]	@ (8007b68 <__d2b+0xac>)
 8007ad8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007adc:	f7fe ffa8 	bl	8006a30 <__assert_func>
 8007ae0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ae8:	b10d      	cbz	r5, 8007aee <__d2b+0x32>
 8007aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	f1b8 0300 	subs.w	r3, r8, #0
 8007af4:	d023      	beq.n	8007b3e <__d2b+0x82>
 8007af6:	4668      	mov	r0, sp
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	f7ff fd14 	bl	8007526 <__lo0bits>
 8007afe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b02:	b1d0      	cbz	r0, 8007b3a <__d2b+0x7e>
 8007b04:	f1c0 0320 	rsb	r3, r0, #32
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	40c2      	lsrs	r2, r0
 8007b10:	6163      	str	r3, [r4, #20]
 8007b12:	9201      	str	r2, [sp, #4]
 8007b14:	9b01      	ldr	r3, [sp, #4]
 8007b16:	61a3      	str	r3, [r4, #24]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bf0c      	ite	eq
 8007b1c:	2201      	moveq	r2, #1
 8007b1e:	2202      	movne	r2, #2
 8007b20:	6122      	str	r2, [r4, #16]
 8007b22:	b1a5      	cbz	r5, 8007b4e <__d2b+0x92>
 8007b24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b28:	4405      	add	r5, r0
 8007b2a:	603d      	str	r5, [r7, #0]
 8007b2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b30:	6030      	str	r0, [r6, #0]
 8007b32:	4620      	mov	r0, r4
 8007b34:	b003      	add	sp, #12
 8007b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b3a:	6161      	str	r1, [r4, #20]
 8007b3c:	e7ea      	b.n	8007b14 <__d2b+0x58>
 8007b3e:	a801      	add	r0, sp, #4
 8007b40:	f7ff fcf1 	bl	8007526 <__lo0bits>
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	6163      	str	r3, [r4, #20]
 8007b48:	3020      	adds	r0, #32
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	e7e8      	b.n	8007b20 <__d2b+0x64>
 8007b4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007b56:	6038      	str	r0, [r7, #0]
 8007b58:	6918      	ldr	r0, [r3, #16]
 8007b5a:	f7ff fcc5 	bl	80074e8 <__hi0bits>
 8007b5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b62:	e7e5      	b.n	8007b30 <__d2b+0x74>
 8007b64:	08008b7b 	.word	0x08008b7b
 8007b68:	08008bec 	.word	0x08008bec

08007b6c <__ratio>:
 8007b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b70:	b085      	sub	sp, #20
 8007b72:	e9cd 1000 	strd	r1, r0, [sp]
 8007b76:	a902      	add	r1, sp, #8
 8007b78:	f7ff ff56 	bl	8007a28 <__b2d>
 8007b7c:	9800      	ldr	r0, [sp, #0]
 8007b7e:	a903      	add	r1, sp, #12
 8007b80:	ec55 4b10 	vmov	r4, r5, d0
 8007b84:	f7ff ff50 	bl	8007a28 <__b2d>
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	6919      	ldr	r1, [r3, #16]
 8007b8c:	9b00      	ldr	r3, [sp, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	1ac9      	subs	r1, r1, r3
 8007b92:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	ec5b ab10 	vmov	sl, fp, d0
 8007b9c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	bfce      	itee	gt
 8007ba4:	462a      	movgt	r2, r5
 8007ba6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007baa:	465a      	movle	r2, fp
 8007bac:	462f      	mov	r7, r5
 8007bae:	46d9      	mov	r9, fp
 8007bb0:	bfcc      	ite	gt
 8007bb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007bb6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007bba:	464b      	mov	r3, r9
 8007bbc:	4652      	mov	r2, sl
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	f7f8 fe5b 	bl	800087c <__aeabi_ddiv>
 8007bc6:	ec41 0b10 	vmov	d0, r0, r1
 8007bca:	b005      	add	sp, #20
 8007bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bd0 <__copybits>:
 8007bd0:	3901      	subs	r1, #1
 8007bd2:	b570      	push	{r4, r5, r6, lr}
 8007bd4:	1149      	asrs	r1, r1, #5
 8007bd6:	6914      	ldr	r4, [r2, #16]
 8007bd8:	3101      	adds	r1, #1
 8007bda:	f102 0314 	add.w	r3, r2, #20
 8007bde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007be2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007be6:	1f05      	subs	r5, r0, #4
 8007be8:	42a3      	cmp	r3, r4
 8007bea:	d30c      	bcc.n	8007c06 <__copybits+0x36>
 8007bec:	1aa3      	subs	r3, r4, r2
 8007bee:	3b11      	subs	r3, #17
 8007bf0:	f023 0303 	bic.w	r3, r3, #3
 8007bf4:	3211      	adds	r2, #17
 8007bf6:	42a2      	cmp	r2, r4
 8007bf8:	bf88      	it	hi
 8007bfa:	2300      	movhi	r3, #0
 8007bfc:	4418      	add	r0, r3
 8007bfe:	2300      	movs	r3, #0
 8007c00:	4288      	cmp	r0, r1
 8007c02:	d305      	bcc.n	8007c10 <__copybits+0x40>
 8007c04:	bd70      	pop	{r4, r5, r6, pc}
 8007c06:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c0e:	e7eb      	b.n	8007be8 <__copybits+0x18>
 8007c10:	f840 3b04 	str.w	r3, [r0], #4
 8007c14:	e7f4      	b.n	8007c00 <__copybits+0x30>

08007c16 <__any_on>:
 8007c16:	f100 0214 	add.w	r2, r0, #20
 8007c1a:	6900      	ldr	r0, [r0, #16]
 8007c1c:	114b      	asrs	r3, r1, #5
 8007c1e:	4298      	cmp	r0, r3
 8007c20:	b510      	push	{r4, lr}
 8007c22:	db11      	blt.n	8007c48 <__any_on+0x32>
 8007c24:	dd0a      	ble.n	8007c3c <__any_on+0x26>
 8007c26:	f011 011f 	ands.w	r1, r1, #31
 8007c2a:	d007      	beq.n	8007c3c <__any_on+0x26>
 8007c2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c30:	fa24 f001 	lsr.w	r0, r4, r1
 8007c34:	fa00 f101 	lsl.w	r1, r0, r1
 8007c38:	428c      	cmp	r4, r1
 8007c3a:	d10b      	bne.n	8007c54 <__any_on+0x3e>
 8007c3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d803      	bhi.n	8007c4c <__any_on+0x36>
 8007c44:	2000      	movs	r0, #0
 8007c46:	bd10      	pop	{r4, pc}
 8007c48:	4603      	mov	r3, r0
 8007c4a:	e7f7      	b.n	8007c3c <__any_on+0x26>
 8007c4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c50:	2900      	cmp	r1, #0
 8007c52:	d0f5      	beq.n	8007c40 <__any_on+0x2a>
 8007c54:	2001      	movs	r0, #1
 8007c56:	e7f6      	b.n	8007c46 <__any_on+0x30>

08007c58 <__ascii_wctomb>:
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	b141      	cbz	r1, 8007c70 <__ascii_wctomb+0x18>
 8007c5e:	2aff      	cmp	r2, #255	@ 0xff
 8007c60:	d904      	bls.n	8007c6c <__ascii_wctomb+0x14>
 8007c62:	228a      	movs	r2, #138	@ 0x8a
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6a:	4770      	bx	lr
 8007c6c:	700a      	strb	r2, [r1, #0]
 8007c6e:	2001      	movs	r0, #1
 8007c70:	4770      	bx	lr

08007c72 <__ssputs_r>:
 8007c72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c76:	688e      	ldr	r6, [r1, #8]
 8007c78:	461f      	mov	r7, r3
 8007c7a:	42be      	cmp	r6, r7
 8007c7c:	680b      	ldr	r3, [r1, #0]
 8007c7e:	4682      	mov	sl, r0
 8007c80:	460c      	mov	r4, r1
 8007c82:	4690      	mov	r8, r2
 8007c84:	d82d      	bhi.n	8007ce2 <__ssputs_r+0x70>
 8007c86:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c8a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c8e:	d026      	beq.n	8007cde <__ssputs_r+0x6c>
 8007c90:	6965      	ldr	r5, [r4, #20]
 8007c92:	6909      	ldr	r1, [r1, #16]
 8007c94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c98:	eba3 0901 	sub.w	r9, r3, r1
 8007c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ca0:	1c7b      	adds	r3, r7, #1
 8007ca2:	444b      	add	r3, r9
 8007ca4:	106d      	asrs	r5, r5, #1
 8007ca6:	429d      	cmp	r5, r3
 8007ca8:	bf38      	it	cc
 8007caa:	461d      	movcc	r5, r3
 8007cac:	0553      	lsls	r3, r2, #21
 8007cae:	d527      	bpl.n	8007d00 <__ssputs_r+0x8e>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7ff fa89 	bl	80071c8 <_malloc_r>
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	b360      	cbz	r0, 8007d14 <__ssputs_r+0xa2>
 8007cba:	6921      	ldr	r1, [r4, #16]
 8007cbc:	464a      	mov	r2, r9
 8007cbe:	f7fe fe9e 	bl	80069fe <memcpy>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	6126      	str	r6, [r4, #16]
 8007cd0:	6165      	str	r5, [r4, #20]
 8007cd2:	444e      	add	r6, r9
 8007cd4:	eba5 0509 	sub.w	r5, r5, r9
 8007cd8:	6026      	str	r6, [r4, #0]
 8007cda:	60a5      	str	r5, [r4, #8]
 8007cdc:	463e      	mov	r6, r7
 8007cde:	42be      	cmp	r6, r7
 8007ce0:	d900      	bls.n	8007ce4 <__ssputs_r+0x72>
 8007ce2:	463e      	mov	r6, r7
 8007ce4:	6820      	ldr	r0, [r4, #0]
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	4641      	mov	r1, r8
 8007cea:	f000 fd07 	bl	80086fc <memmove>
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	1b9b      	subs	r3, r3, r6
 8007cf2:	60a3      	str	r3, [r4, #8]
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	4433      	add	r3, r6
 8007cf8:	6023      	str	r3, [r4, #0]
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d00:	462a      	mov	r2, r5
 8007d02:	f000 fd62 	bl	80087ca <_realloc_r>
 8007d06:	4606      	mov	r6, r0
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d1e0      	bne.n	8007cce <__ssputs_r+0x5c>
 8007d0c:	6921      	ldr	r1, [r4, #16]
 8007d0e:	4650      	mov	r0, sl
 8007d10:	f7fe feac 	bl	8006a6c <_free_r>
 8007d14:	230c      	movs	r3, #12
 8007d16:	f8ca 3000 	str.w	r3, [sl]
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	f04f 30ff 	mov.w	r0, #4294967295
 8007d26:	e7e9      	b.n	8007cfc <__ssputs_r+0x8a>

08007d28 <_svfiprintf_r>:
 8007d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	4698      	mov	r8, r3
 8007d2e:	898b      	ldrh	r3, [r1, #12]
 8007d30:	061b      	lsls	r3, r3, #24
 8007d32:	b09d      	sub	sp, #116	@ 0x74
 8007d34:	4607      	mov	r7, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	4614      	mov	r4, r2
 8007d3a:	d510      	bpl.n	8007d5e <_svfiprintf_r+0x36>
 8007d3c:	690b      	ldr	r3, [r1, #16]
 8007d3e:	b973      	cbnz	r3, 8007d5e <_svfiprintf_r+0x36>
 8007d40:	2140      	movs	r1, #64	@ 0x40
 8007d42:	f7ff fa41 	bl	80071c8 <_malloc_r>
 8007d46:	6028      	str	r0, [r5, #0]
 8007d48:	6128      	str	r0, [r5, #16]
 8007d4a:	b930      	cbnz	r0, 8007d5a <_svfiprintf_r+0x32>
 8007d4c:	230c      	movs	r3, #12
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	b01d      	add	sp, #116	@ 0x74
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	2340      	movs	r3, #64	@ 0x40
 8007d5c:	616b      	str	r3, [r5, #20]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d62:	2320      	movs	r3, #32
 8007d64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d6c:	2330      	movs	r3, #48	@ 0x30
 8007d6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f0c <_svfiprintf_r+0x1e4>
 8007d72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d76:	f04f 0901 	mov.w	r9, #1
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	469a      	mov	sl, r3
 8007d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d82:	b10a      	cbz	r2, 8007d88 <_svfiprintf_r+0x60>
 8007d84:	2a25      	cmp	r2, #37	@ 0x25
 8007d86:	d1f9      	bne.n	8007d7c <_svfiprintf_r+0x54>
 8007d88:	ebba 0b04 	subs.w	fp, sl, r4
 8007d8c:	d00b      	beq.n	8007da6 <_svfiprintf_r+0x7e>
 8007d8e:	465b      	mov	r3, fp
 8007d90:	4622      	mov	r2, r4
 8007d92:	4629      	mov	r1, r5
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7ff ff6c 	bl	8007c72 <__ssputs_r>
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	f000 80a7 	beq.w	8007eee <_svfiprintf_r+0x1c6>
 8007da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007da2:	445a      	add	r2, fp
 8007da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007da6:	f89a 3000 	ldrb.w	r3, [sl]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 809f 	beq.w	8007eee <_svfiprintf_r+0x1c6>
 8007db0:	2300      	movs	r3, #0
 8007db2:	f04f 32ff 	mov.w	r2, #4294967295
 8007db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dba:	f10a 0a01 	add.w	sl, sl, #1
 8007dbe:	9304      	str	r3, [sp, #16]
 8007dc0:	9307      	str	r3, [sp, #28]
 8007dc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dc8:	4654      	mov	r4, sl
 8007dca:	2205      	movs	r2, #5
 8007dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd0:	484e      	ldr	r0, [pc, #312]	@ (8007f0c <_svfiprintf_r+0x1e4>)
 8007dd2:	f7f8 fa1d 	bl	8000210 <memchr>
 8007dd6:	9a04      	ldr	r2, [sp, #16]
 8007dd8:	b9d8      	cbnz	r0, 8007e12 <_svfiprintf_r+0xea>
 8007dda:	06d0      	lsls	r0, r2, #27
 8007ddc:	bf44      	itt	mi
 8007dde:	2320      	movmi	r3, #32
 8007de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007de4:	0711      	lsls	r1, r2, #28
 8007de6:	bf44      	itt	mi
 8007de8:	232b      	movmi	r3, #43	@ 0x2b
 8007dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dee:	f89a 3000 	ldrb.w	r3, [sl]
 8007df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007df4:	d015      	beq.n	8007e22 <_svfiprintf_r+0xfa>
 8007df6:	9a07      	ldr	r2, [sp, #28]
 8007df8:	4654      	mov	r4, sl
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	f04f 0c0a 	mov.w	ip, #10
 8007e00:	4621      	mov	r1, r4
 8007e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e06:	3b30      	subs	r3, #48	@ 0x30
 8007e08:	2b09      	cmp	r3, #9
 8007e0a:	d94b      	bls.n	8007ea4 <_svfiprintf_r+0x17c>
 8007e0c:	b1b0      	cbz	r0, 8007e3c <_svfiprintf_r+0x114>
 8007e0e:	9207      	str	r2, [sp, #28]
 8007e10:	e014      	b.n	8007e3c <_svfiprintf_r+0x114>
 8007e12:	eba0 0308 	sub.w	r3, r0, r8
 8007e16:	fa09 f303 	lsl.w	r3, r9, r3
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	46a2      	mov	sl, r4
 8007e20:	e7d2      	b.n	8007dc8 <_svfiprintf_r+0xa0>
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	1d19      	adds	r1, r3, #4
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	9103      	str	r1, [sp, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bfbb      	ittet	lt
 8007e2e:	425b      	neglt	r3, r3
 8007e30:	f042 0202 	orrlt.w	r2, r2, #2
 8007e34:	9307      	strge	r3, [sp, #28]
 8007e36:	9307      	strlt	r3, [sp, #28]
 8007e38:	bfb8      	it	lt
 8007e3a:	9204      	strlt	r2, [sp, #16]
 8007e3c:	7823      	ldrb	r3, [r4, #0]
 8007e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e40:	d10a      	bne.n	8007e58 <_svfiprintf_r+0x130>
 8007e42:	7863      	ldrb	r3, [r4, #1]
 8007e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e46:	d132      	bne.n	8007eae <_svfiprintf_r+0x186>
 8007e48:	9b03      	ldr	r3, [sp, #12]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	9203      	str	r2, [sp, #12]
 8007e50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e54:	3402      	adds	r4, #2
 8007e56:	9305      	str	r3, [sp, #20]
 8007e58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f1c <_svfiprintf_r+0x1f4>
 8007e5c:	7821      	ldrb	r1, [r4, #0]
 8007e5e:	2203      	movs	r2, #3
 8007e60:	4650      	mov	r0, sl
 8007e62:	f7f8 f9d5 	bl	8000210 <memchr>
 8007e66:	b138      	cbz	r0, 8007e78 <_svfiprintf_r+0x150>
 8007e68:	9b04      	ldr	r3, [sp, #16]
 8007e6a:	eba0 000a 	sub.w	r0, r0, sl
 8007e6e:	2240      	movs	r2, #64	@ 0x40
 8007e70:	4082      	lsls	r2, r0
 8007e72:	4313      	orrs	r3, r2
 8007e74:	3401      	adds	r4, #1
 8007e76:	9304      	str	r3, [sp, #16]
 8007e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7c:	4824      	ldr	r0, [pc, #144]	@ (8007f10 <_svfiprintf_r+0x1e8>)
 8007e7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e82:	2206      	movs	r2, #6
 8007e84:	f7f8 f9c4 	bl	8000210 <memchr>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d036      	beq.n	8007efa <_svfiprintf_r+0x1d2>
 8007e8c:	4b21      	ldr	r3, [pc, #132]	@ (8007f14 <_svfiprintf_r+0x1ec>)
 8007e8e:	bb1b      	cbnz	r3, 8007ed8 <_svfiprintf_r+0x1b0>
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	3307      	adds	r3, #7
 8007e94:	f023 0307 	bic.w	r3, r3, #7
 8007e98:	3308      	adds	r3, #8
 8007e9a:	9303      	str	r3, [sp, #12]
 8007e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9e:	4433      	add	r3, r6
 8007ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ea2:	e76a      	b.n	8007d7a <_svfiprintf_r+0x52>
 8007ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	2001      	movs	r0, #1
 8007eac:	e7a8      	b.n	8007e00 <_svfiprintf_r+0xd8>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	3401      	adds	r4, #1
 8007eb2:	9305      	str	r3, [sp, #20]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f04f 0c0a 	mov.w	ip, #10
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ec0:	3a30      	subs	r2, #48	@ 0x30
 8007ec2:	2a09      	cmp	r2, #9
 8007ec4:	d903      	bls.n	8007ece <_svfiprintf_r+0x1a6>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0c6      	beq.n	8007e58 <_svfiprintf_r+0x130>
 8007eca:	9105      	str	r1, [sp, #20]
 8007ecc:	e7c4      	b.n	8007e58 <_svfiprintf_r+0x130>
 8007ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e7f0      	b.n	8007eba <_svfiprintf_r+0x192>
 8007ed8:	ab03      	add	r3, sp, #12
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	462a      	mov	r2, r5
 8007ede:	4b0e      	ldr	r3, [pc, #56]	@ (8007f18 <_svfiprintf_r+0x1f0>)
 8007ee0:	a904      	add	r1, sp, #16
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	f3af 8000 	nop.w
 8007ee8:	1c42      	adds	r2, r0, #1
 8007eea:	4606      	mov	r6, r0
 8007eec:	d1d6      	bne.n	8007e9c <_svfiprintf_r+0x174>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	065b      	lsls	r3, r3, #25
 8007ef2:	f53f af2d 	bmi.w	8007d50 <_svfiprintf_r+0x28>
 8007ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ef8:	e72c      	b.n	8007d54 <_svfiprintf_r+0x2c>
 8007efa:	ab03      	add	r3, sp, #12
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	462a      	mov	r2, r5
 8007f00:	4b05      	ldr	r3, [pc, #20]	@ (8007f18 <_svfiprintf_r+0x1f0>)
 8007f02:	a904      	add	r1, sp, #16
 8007f04:	4638      	mov	r0, r7
 8007f06:	f000 f9bb 	bl	8008280 <_printf_i>
 8007f0a:	e7ed      	b.n	8007ee8 <_svfiprintf_r+0x1c0>
 8007f0c:	08008c45 	.word	0x08008c45
 8007f10:	08008c4f 	.word	0x08008c4f
 8007f14:	00000000 	.word	0x00000000
 8007f18:	08007c73 	.word	0x08007c73
 8007f1c:	08008c4b 	.word	0x08008c4b

08007f20 <__sfputc_r>:
 8007f20:	6893      	ldr	r3, [r2, #8]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	b410      	push	{r4}
 8007f28:	6093      	str	r3, [r2, #8]
 8007f2a:	da08      	bge.n	8007f3e <__sfputc_r+0x1e>
 8007f2c:	6994      	ldr	r4, [r2, #24]
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	db01      	blt.n	8007f36 <__sfputc_r+0x16>
 8007f32:	290a      	cmp	r1, #10
 8007f34:	d103      	bne.n	8007f3e <__sfputc_r+0x1e>
 8007f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f3a:	f7fe bbcc 	b.w	80066d6 <__swbuf_r>
 8007f3e:	6813      	ldr	r3, [r2, #0]
 8007f40:	1c58      	adds	r0, r3, #1
 8007f42:	6010      	str	r0, [r2, #0]
 8007f44:	7019      	strb	r1, [r3, #0]
 8007f46:	4608      	mov	r0, r1
 8007f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <__sfputs_r>:
 8007f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f50:	4606      	mov	r6, r0
 8007f52:	460f      	mov	r7, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	18d5      	adds	r5, r2, r3
 8007f58:	42ac      	cmp	r4, r5
 8007f5a:	d101      	bne.n	8007f60 <__sfputs_r+0x12>
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e007      	b.n	8007f70 <__sfputs_r+0x22>
 8007f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f64:	463a      	mov	r2, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	f7ff ffda 	bl	8007f20 <__sfputc_r>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d1f3      	bne.n	8007f58 <__sfputs_r+0xa>
 8007f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f74 <_vfiprintf_r>:
 8007f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	460d      	mov	r5, r1
 8007f7a:	b09d      	sub	sp, #116	@ 0x74
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	4698      	mov	r8, r3
 8007f80:	4606      	mov	r6, r0
 8007f82:	b118      	cbz	r0, 8007f8c <_vfiprintf_r+0x18>
 8007f84:	6a03      	ldr	r3, [r0, #32]
 8007f86:	b90b      	cbnz	r3, 8007f8c <_vfiprintf_r+0x18>
 8007f88:	f7fe fa9a 	bl	80064c0 <__sinit>
 8007f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f8e:	07d9      	lsls	r1, r3, #31
 8007f90:	d405      	bmi.n	8007f9e <_vfiprintf_r+0x2a>
 8007f92:	89ab      	ldrh	r3, [r5, #12]
 8007f94:	059a      	lsls	r2, r3, #22
 8007f96:	d402      	bmi.n	8007f9e <_vfiprintf_r+0x2a>
 8007f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f9a:	f7fe fd26 	bl	80069ea <__retarget_lock_acquire_recursive>
 8007f9e:	89ab      	ldrh	r3, [r5, #12]
 8007fa0:	071b      	lsls	r3, r3, #28
 8007fa2:	d501      	bpl.n	8007fa8 <_vfiprintf_r+0x34>
 8007fa4:	692b      	ldr	r3, [r5, #16]
 8007fa6:	b99b      	cbnz	r3, 8007fd0 <_vfiprintf_r+0x5c>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7fe fbd2 	bl	8006754 <__swsetup_r>
 8007fb0:	b170      	cbz	r0, 8007fd0 <_vfiprintf_r+0x5c>
 8007fb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fb4:	07dc      	lsls	r4, r3, #31
 8007fb6:	d504      	bpl.n	8007fc2 <_vfiprintf_r+0x4e>
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbc:	b01d      	add	sp, #116	@ 0x74
 8007fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc2:	89ab      	ldrh	r3, [r5, #12]
 8007fc4:	0598      	lsls	r0, r3, #22
 8007fc6:	d4f7      	bmi.n	8007fb8 <_vfiprintf_r+0x44>
 8007fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fca:	f7fe fd0f 	bl	80069ec <__retarget_lock_release_recursive>
 8007fce:	e7f3      	b.n	8007fb8 <_vfiprintf_r+0x44>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fd4:	2320      	movs	r3, #32
 8007fd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fde:	2330      	movs	r3, #48	@ 0x30
 8007fe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008190 <_vfiprintf_r+0x21c>
 8007fe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fe8:	f04f 0901 	mov.w	r9, #1
 8007fec:	4623      	mov	r3, r4
 8007fee:	469a      	mov	sl, r3
 8007ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ff4:	b10a      	cbz	r2, 8007ffa <_vfiprintf_r+0x86>
 8007ff6:	2a25      	cmp	r2, #37	@ 0x25
 8007ff8:	d1f9      	bne.n	8007fee <_vfiprintf_r+0x7a>
 8007ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8007ffe:	d00b      	beq.n	8008018 <_vfiprintf_r+0xa4>
 8008000:	465b      	mov	r3, fp
 8008002:	4622      	mov	r2, r4
 8008004:	4629      	mov	r1, r5
 8008006:	4630      	mov	r0, r6
 8008008:	f7ff ffa1 	bl	8007f4e <__sfputs_r>
 800800c:	3001      	adds	r0, #1
 800800e:	f000 80a7 	beq.w	8008160 <_vfiprintf_r+0x1ec>
 8008012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008014:	445a      	add	r2, fp
 8008016:	9209      	str	r2, [sp, #36]	@ 0x24
 8008018:	f89a 3000 	ldrb.w	r3, [sl]
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 809f 	beq.w	8008160 <_vfiprintf_r+0x1ec>
 8008022:	2300      	movs	r3, #0
 8008024:	f04f 32ff 	mov.w	r2, #4294967295
 8008028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800802c:	f10a 0a01 	add.w	sl, sl, #1
 8008030:	9304      	str	r3, [sp, #16]
 8008032:	9307      	str	r3, [sp, #28]
 8008034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008038:	931a      	str	r3, [sp, #104]	@ 0x68
 800803a:	4654      	mov	r4, sl
 800803c:	2205      	movs	r2, #5
 800803e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008042:	4853      	ldr	r0, [pc, #332]	@ (8008190 <_vfiprintf_r+0x21c>)
 8008044:	f7f8 f8e4 	bl	8000210 <memchr>
 8008048:	9a04      	ldr	r2, [sp, #16]
 800804a:	b9d8      	cbnz	r0, 8008084 <_vfiprintf_r+0x110>
 800804c:	06d1      	lsls	r1, r2, #27
 800804e:	bf44      	itt	mi
 8008050:	2320      	movmi	r3, #32
 8008052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008056:	0713      	lsls	r3, r2, #28
 8008058:	bf44      	itt	mi
 800805a:	232b      	movmi	r3, #43	@ 0x2b
 800805c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008060:	f89a 3000 	ldrb.w	r3, [sl]
 8008064:	2b2a      	cmp	r3, #42	@ 0x2a
 8008066:	d015      	beq.n	8008094 <_vfiprintf_r+0x120>
 8008068:	9a07      	ldr	r2, [sp, #28]
 800806a:	4654      	mov	r4, sl
 800806c:	2000      	movs	r0, #0
 800806e:	f04f 0c0a 	mov.w	ip, #10
 8008072:	4621      	mov	r1, r4
 8008074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008078:	3b30      	subs	r3, #48	@ 0x30
 800807a:	2b09      	cmp	r3, #9
 800807c:	d94b      	bls.n	8008116 <_vfiprintf_r+0x1a2>
 800807e:	b1b0      	cbz	r0, 80080ae <_vfiprintf_r+0x13a>
 8008080:	9207      	str	r2, [sp, #28]
 8008082:	e014      	b.n	80080ae <_vfiprintf_r+0x13a>
 8008084:	eba0 0308 	sub.w	r3, r0, r8
 8008088:	fa09 f303 	lsl.w	r3, r9, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	9304      	str	r3, [sp, #16]
 8008090:	46a2      	mov	sl, r4
 8008092:	e7d2      	b.n	800803a <_vfiprintf_r+0xc6>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	1d19      	adds	r1, r3, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	9103      	str	r1, [sp, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	bfbb      	ittet	lt
 80080a0:	425b      	neglt	r3, r3
 80080a2:	f042 0202 	orrlt.w	r2, r2, #2
 80080a6:	9307      	strge	r3, [sp, #28]
 80080a8:	9307      	strlt	r3, [sp, #28]
 80080aa:	bfb8      	it	lt
 80080ac:	9204      	strlt	r2, [sp, #16]
 80080ae:	7823      	ldrb	r3, [r4, #0]
 80080b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80080b2:	d10a      	bne.n	80080ca <_vfiprintf_r+0x156>
 80080b4:	7863      	ldrb	r3, [r4, #1]
 80080b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80080b8:	d132      	bne.n	8008120 <_vfiprintf_r+0x1ac>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	1d1a      	adds	r2, r3, #4
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	9203      	str	r2, [sp, #12]
 80080c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080c6:	3402      	adds	r4, #2
 80080c8:	9305      	str	r3, [sp, #20]
 80080ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081a0 <_vfiprintf_r+0x22c>
 80080ce:	7821      	ldrb	r1, [r4, #0]
 80080d0:	2203      	movs	r2, #3
 80080d2:	4650      	mov	r0, sl
 80080d4:	f7f8 f89c 	bl	8000210 <memchr>
 80080d8:	b138      	cbz	r0, 80080ea <_vfiprintf_r+0x176>
 80080da:	9b04      	ldr	r3, [sp, #16]
 80080dc:	eba0 000a 	sub.w	r0, r0, sl
 80080e0:	2240      	movs	r2, #64	@ 0x40
 80080e2:	4082      	lsls	r2, r0
 80080e4:	4313      	orrs	r3, r2
 80080e6:	3401      	adds	r4, #1
 80080e8:	9304      	str	r3, [sp, #16]
 80080ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ee:	4829      	ldr	r0, [pc, #164]	@ (8008194 <_vfiprintf_r+0x220>)
 80080f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080f4:	2206      	movs	r2, #6
 80080f6:	f7f8 f88b 	bl	8000210 <memchr>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d03f      	beq.n	800817e <_vfiprintf_r+0x20a>
 80080fe:	4b26      	ldr	r3, [pc, #152]	@ (8008198 <_vfiprintf_r+0x224>)
 8008100:	bb1b      	cbnz	r3, 800814a <_vfiprintf_r+0x1d6>
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	3307      	adds	r3, #7
 8008106:	f023 0307 	bic.w	r3, r3, #7
 800810a:	3308      	adds	r3, #8
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008110:	443b      	add	r3, r7
 8008112:	9309      	str	r3, [sp, #36]	@ 0x24
 8008114:	e76a      	b.n	8007fec <_vfiprintf_r+0x78>
 8008116:	fb0c 3202 	mla	r2, ip, r2, r3
 800811a:	460c      	mov	r4, r1
 800811c:	2001      	movs	r0, #1
 800811e:	e7a8      	b.n	8008072 <_vfiprintf_r+0xfe>
 8008120:	2300      	movs	r3, #0
 8008122:	3401      	adds	r4, #1
 8008124:	9305      	str	r3, [sp, #20]
 8008126:	4619      	mov	r1, r3
 8008128:	f04f 0c0a 	mov.w	ip, #10
 800812c:	4620      	mov	r0, r4
 800812e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008132:	3a30      	subs	r2, #48	@ 0x30
 8008134:	2a09      	cmp	r2, #9
 8008136:	d903      	bls.n	8008140 <_vfiprintf_r+0x1cc>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d0c6      	beq.n	80080ca <_vfiprintf_r+0x156>
 800813c:	9105      	str	r1, [sp, #20]
 800813e:	e7c4      	b.n	80080ca <_vfiprintf_r+0x156>
 8008140:	fb0c 2101 	mla	r1, ip, r1, r2
 8008144:	4604      	mov	r4, r0
 8008146:	2301      	movs	r3, #1
 8008148:	e7f0      	b.n	800812c <_vfiprintf_r+0x1b8>
 800814a:	ab03      	add	r3, sp, #12
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	462a      	mov	r2, r5
 8008150:	4b12      	ldr	r3, [pc, #72]	@ (800819c <_vfiprintf_r+0x228>)
 8008152:	a904      	add	r1, sp, #16
 8008154:	4630      	mov	r0, r6
 8008156:	f3af 8000 	nop.w
 800815a:	4607      	mov	r7, r0
 800815c:	1c78      	adds	r0, r7, #1
 800815e:	d1d6      	bne.n	800810e <_vfiprintf_r+0x19a>
 8008160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008162:	07d9      	lsls	r1, r3, #31
 8008164:	d405      	bmi.n	8008172 <_vfiprintf_r+0x1fe>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	059a      	lsls	r2, r3, #22
 800816a:	d402      	bmi.n	8008172 <_vfiprintf_r+0x1fe>
 800816c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800816e:	f7fe fc3d 	bl	80069ec <__retarget_lock_release_recursive>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	065b      	lsls	r3, r3, #25
 8008176:	f53f af1f 	bmi.w	8007fb8 <_vfiprintf_r+0x44>
 800817a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800817c:	e71e      	b.n	8007fbc <_vfiprintf_r+0x48>
 800817e:	ab03      	add	r3, sp, #12
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	462a      	mov	r2, r5
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <_vfiprintf_r+0x228>)
 8008186:	a904      	add	r1, sp, #16
 8008188:	4630      	mov	r0, r6
 800818a:	f000 f879 	bl	8008280 <_printf_i>
 800818e:	e7e4      	b.n	800815a <_vfiprintf_r+0x1e6>
 8008190:	08008c45 	.word	0x08008c45
 8008194:	08008c4f 	.word	0x08008c4f
 8008198:	00000000 	.word	0x00000000
 800819c:	08007f4f 	.word	0x08007f4f
 80081a0:	08008c4b 	.word	0x08008c4b

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4698      	mov	r8, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bfb8      	it	lt
 80081b8:	4613      	movlt	r3, r2
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081c0:	4607      	mov	r7, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc26      	bgt.n	800823a <_printf_common+0x96>
 80081ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	3b00      	subs	r3, #0
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d42b      	bmi.n	8008254 <_printf_common+0xb0>
 80081fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008200:	4641      	mov	r1, r8
 8008202:	4638      	mov	r0, r7
 8008204:	47c8      	blx	r9
 8008206:	3001      	adds	r0, #1
 8008208:	d01e      	beq.n	8008248 <_printf_common+0xa4>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b04      	cmp	r3, #4
 8008214:	bf02      	ittt	eq
 8008216:	68e5      	ldreq	r5, [r4, #12]
 8008218:	6833      	ldreq	r3, [r6, #0]
 800821a:	1aed      	subeq	r5, r5, r3
 800821c:	68a3      	ldr	r3, [r4, #8]
 800821e:	bf0c      	ite	eq
 8008220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008224:	2500      	movne	r5, #0
 8008226:	4293      	cmp	r3, r2
 8008228:	bfc4      	itt	gt
 800822a:	1a9b      	subgt	r3, r3, r2
 800822c:	18ed      	addgt	r5, r5, r3
 800822e:	2600      	movs	r6, #0
 8008230:	341a      	adds	r4, #26
 8008232:	42b5      	cmp	r5, r6
 8008234:	d11a      	bne.n	800826c <_printf_common+0xc8>
 8008236:	2000      	movs	r0, #0
 8008238:	e008      	b.n	800824c <_printf_common+0xa8>
 800823a:	2301      	movs	r3, #1
 800823c:	4652      	mov	r2, sl
 800823e:	4641      	mov	r1, r8
 8008240:	4638      	mov	r0, r7
 8008242:	47c8      	blx	r9
 8008244:	3001      	adds	r0, #1
 8008246:	d103      	bne.n	8008250 <_printf_common+0xac>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	3501      	adds	r5, #1
 8008252:	e7c6      	b.n	80081e2 <_printf_common+0x3e>
 8008254:	18e1      	adds	r1, r4, r3
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	2030      	movs	r0, #48	@ 0x30
 800825a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800825e:	4422      	add	r2, r4
 8008260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008268:	3302      	adds	r3, #2
 800826a:	e7c7      	b.n	80081fc <_printf_common+0x58>
 800826c:	2301      	movs	r3, #1
 800826e:	4622      	mov	r2, r4
 8008270:	4641      	mov	r1, r8
 8008272:	4638      	mov	r0, r7
 8008274:	47c8      	blx	r9
 8008276:	3001      	adds	r0, #1
 8008278:	d0e6      	beq.n	8008248 <_printf_common+0xa4>
 800827a:	3601      	adds	r6, #1
 800827c:	e7d9      	b.n	8008232 <_printf_common+0x8e>
	...

08008280 <_printf_i>:
 8008280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	7e0f      	ldrb	r7, [r1, #24]
 8008286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008288:	2f78      	cmp	r7, #120	@ 0x78
 800828a:	4691      	mov	r9, r2
 800828c:	4680      	mov	r8, r0
 800828e:	460c      	mov	r4, r1
 8008290:	469a      	mov	sl, r3
 8008292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008296:	d807      	bhi.n	80082a8 <_printf_i+0x28>
 8008298:	2f62      	cmp	r7, #98	@ 0x62
 800829a:	d80a      	bhi.n	80082b2 <_printf_i+0x32>
 800829c:	2f00      	cmp	r7, #0
 800829e:	f000 80d1 	beq.w	8008444 <_printf_i+0x1c4>
 80082a2:	2f58      	cmp	r7, #88	@ 0x58
 80082a4:	f000 80b8 	beq.w	8008418 <_printf_i+0x198>
 80082a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082b0:	e03a      	b.n	8008328 <_printf_i+0xa8>
 80082b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082b6:	2b15      	cmp	r3, #21
 80082b8:	d8f6      	bhi.n	80082a8 <_printf_i+0x28>
 80082ba:	a101      	add	r1, pc, #4	@ (adr r1, 80082c0 <_printf_i+0x40>)
 80082bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c0:	08008319 	.word	0x08008319
 80082c4:	0800832d 	.word	0x0800832d
 80082c8:	080082a9 	.word	0x080082a9
 80082cc:	080082a9 	.word	0x080082a9
 80082d0:	080082a9 	.word	0x080082a9
 80082d4:	080082a9 	.word	0x080082a9
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	080082a9 	.word	0x080082a9
 80082e0:	080082a9 	.word	0x080082a9
 80082e4:	080082a9 	.word	0x080082a9
 80082e8:	080082a9 	.word	0x080082a9
 80082ec:	0800842b 	.word	0x0800842b
 80082f0:	08008357 	.word	0x08008357
 80082f4:	080083e5 	.word	0x080083e5
 80082f8:	080082a9 	.word	0x080082a9
 80082fc:	080082a9 	.word	0x080082a9
 8008300:	0800844d 	.word	0x0800844d
 8008304:	080082a9 	.word	0x080082a9
 8008308:	08008357 	.word	0x08008357
 800830c:	080082a9 	.word	0x080082a9
 8008310:	080082a9 	.word	0x080082a9
 8008314:	080083ed 	.word	0x080083ed
 8008318:	6833      	ldr	r3, [r6, #0]
 800831a:	1d1a      	adds	r2, r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6032      	str	r2, [r6, #0]
 8008320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008328:	2301      	movs	r3, #1
 800832a:	e09c      	b.n	8008466 <_printf_i+0x1e6>
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	1d19      	adds	r1, r3, #4
 8008332:	6031      	str	r1, [r6, #0]
 8008334:	0606      	lsls	r6, r0, #24
 8008336:	d501      	bpl.n	800833c <_printf_i+0xbc>
 8008338:	681d      	ldr	r5, [r3, #0]
 800833a:	e003      	b.n	8008344 <_printf_i+0xc4>
 800833c:	0645      	lsls	r5, r0, #25
 800833e:	d5fb      	bpl.n	8008338 <_printf_i+0xb8>
 8008340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008344:	2d00      	cmp	r5, #0
 8008346:	da03      	bge.n	8008350 <_printf_i+0xd0>
 8008348:	232d      	movs	r3, #45	@ 0x2d
 800834a:	426d      	negs	r5, r5
 800834c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008350:	4858      	ldr	r0, [pc, #352]	@ (80084b4 <_printf_i+0x234>)
 8008352:	230a      	movs	r3, #10
 8008354:	e011      	b.n	800837a <_printf_i+0xfa>
 8008356:	6821      	ldr	r1, [r4, #0]
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	0608      	lsls	r0, r1, #24
 800835c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008360:	d402      	bmi.n	8008368 <_printf_i+0xe8>
 8008362:	0649      	lsls	r1, r1, #25
 8008364:	bf48      	it	mi
 8008366:	b2ad      	uxthmi	r5, r5
 8008368:	2f6f      	cmp	r7, #111	@ 0x6f
 800836a:	4852      	ldr	r0, [pc, #328]	@ (80084b4 <_printf_i+0x234>)
 800836c:	6033      	str	r3, [r6, #0]
 800836e:	bf14      	ite	ne
 8008370:	230a      	movne	r3, #10
 8008372:	2308      	moveq	r3, #8
 8008374:	2100      	movs	r1, #0
 8008376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800837a:	6866      	ldr	r6, [r4, #4]
 800837c:	60a6      	str	r6, [r4, #8]
 800837e:	2e00      	cmp	r6, #0
 8008380:	db05      	blt.n	800838e <_printf_i+0x10e>
 8008382:	6821      	ldr	r1, [r4, #0]
 8008384:	432e      	orrs	r6, r5
 8008386:	f021 0104 	bic.w	r1, r1, #4
 800838a:	6021      	str	r1, [r4, #0]
 800838c:	d04b      	beq.n	8008426 <_printf_i+0x1a6>
 800838e:	4616      	mov	r6, r2
 8008390:	fbb5 f1f3 	udiv	r1, r5, r3
 8008394:	fb03 5711 	mls	r7, r3, r1, r5
 8008398:	5dc7      	ldrb	r7, [r0, r7]
 800839a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800839e:	462f      	mov	r7, r5
 80083a0:	42bb      	cmp	r3, r7
 80083a2:	460d      	mov	r5, r1
 80083a4:	d9f4      	bls.n	8008390 <_printf_i+0x110>
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d10b      	bne.n	80083c2 <_printf_i+0x142>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	07df      	lsls	r7, r3, #31
 80083ae:	d508      	bpl.n	80083c2 <_printf_i+0x142>
 80083b0:	6923      	ldr	r3, [r4, #16]
 80083b2:	6861      	ldr	r1, [r4, #4]
 80083b4:	4299      	cmp	r1, r3
 80083b6:	bfde      	ittt	le
 80083b8:	2330      	movle	r3, #48	@ 0x30
 80083ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083c2:	1b92      	subs	r2, r2, r6
 80083c4:	6122      	str	r2, [r4, #16]
 80083c6:	f8cd a000 	str.w	sl, [sp]
 80083ca:	464b      	mov	r3, r9
 80083cc:	aa03      	add	r2, sp, #12
 80083ce:	4621      	mov	r1, r4
 80083d0:	4640      	mov	r0, r8
 80083d2:	f7ff fee7 	bl	80081a4 <_printf_common>
 80083d6:	3001      	adds	r0, #1
 80083d8:	d14a      	bne.n	8008470 <_printf_i+0x1f0>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	b004      	add	sp, #16
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	f043 0320 	orr.w	r3, r3, #32
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	4832      	ldr	r0, [pc, #200]	@ (80084b8 <_printf_i+0x238>)
 80083ee:	2778      	movs	r7, #120	@ 0x78
 80083f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	6831      	ldr	r1, [r6, #0]
 80083f8:	061f      	lsls	r7, r3, #24
 80083fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80083fe:	d402      	bmi.n	8008406 <_printf_i+0x186>
 8008400:	065f      	lsls	r7, r3, #25
 8008402:	bf48      	it	mi
 8008404:	b2ad      	uxthmi	r5, r5
 8008406:	6031      	str	r1, [r6, #0]
 8008408:	07d9      	lsls	r1, r3, #31
 800840a:	bf44      	itt	mi
 800840c:	f043 0320 	orrmi.w	r3, r3, #32
 8008410:	6023      	strmi	r3, [r4, #0]
 8008412:	b11d      	cbz	r5, 800841c <_printf_i+0x19c>
 8008414:	2310      	movs	r3, #16
 8008416:	e7ad      	b.n	8008374 <_printf_i+0xf4>
 8008418:	4826      	ldr	r0, [pc, #152]	@ (80084b4 <_printf_i+0x234>)
 800841a:	e7e9      	b.n	80083f0 <_printf_i+0x170>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	f023 0320 	bic.w	r3, r3, #32
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	e7f6      	b.n	8008414 <_printf_i+0x194>
 8008426:	4616      	mov	r6, r2
 8008428:	e7bd      	b.n	80083a6 <_printf_i+0x126>
 800842a:	6833      	ldr	r3, [r6, #0]
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	6961      	ldr	r1, [r4, #20]
 8008430:	1d18      	adds	r0, r3, #4
 8008432:	6030      	str	r0, [r6, #0]
 8008434:	062e      	lsls	r6, r5, #24
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	d501      	bpl.n	800843e <_printf_i+0x1be>
 800843a:	6019      	str	r1, [r3, #0]
 800843c:	e002      	b.n	8008444 <_printf_i+0x1c4>
 800843e:	0668      	lsls	r0, r5, #25
 8008440:	d5fb      	bpl.n	800843a <_printf_i+0x1ba>
 8008442:	8019      	strh	r1, [r3, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	6123      	str	r3, [r4, #16]
 8008448:	4616      	mov	r6, r2
 800844a:	e7bc      	b.n	80083c6 <_printf_i+0x146>
 800844c:	6833      	ldr	r3, [r6, #0]
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	6032      	str	r2, [r6, #0]
 8008452:	681e      	ldr	r6, [r3, #0]
 8008454:	6862      	ldr	r2, [r4, #4]
 8008456:	2100      	movs	r1, #0
 8008458:	4630      	mov	r0, r6
 800845a:	f7f7 fed9 	bl	8000210 <memchr>
 800845e:	b108      	cbz	r0, 8008464 <_printf_i+0x1e4>
 8008460:	1b80      	subs	r0, r0, r6
 8008462:	6060      	str	r0, [r4, #4]
 8008464:	6863      	ldr	r3, [r4, #4]
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	2300      	movs	r3, #0
 800846a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800846e:	e7aa      	b.n	80083c6 <_printf_i+0x146>
 8008470:	6923      	ldr	r3, [r4, #16]
 8008472:	4632      	mov	r2, r6
 8008474:	4649      	mov	r1, r9
 8008476:	4640      	mov	r0, r8
 8008478:	47d0      	blx	sl
 800847a:	3001      	adds	r0, #1
 800847c:	d0ad      	beq.n	80083da <_printf_i+0x15a>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	079b      	lsls	r3, r3, #30
 8008482:	d413      	bmi.n	80084ac <_printf_i+0x22c>
 8008484:	68e0      	ldr	r0, [r4, #12]
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	4298      	cmp	r0, r3
 800848a:	bfb8      	it	lt
 800848c:	4618      	movlt	r0, r3
 800848e:	e7a6      	b.n	80083de <_printf_i+0x15e>
 8008490:	2301      	movs	r3, #1
 8008492:	4632      	mov	r2, r6
 8008494:	4649      	mov	r1, r9
 8008496:	4640      	mov	r0, r8
 8008498:	47d0      	blx	sl
 800849a:	3001      	adds	r0, #1
 800849c:	d09d      	beq.n	80083da <_printf_i+0x15a>
 800849e:	3501      	adds	r5, #1
 80084a0:	68e3      	ldr	r3, [r4, #12]
 80084a2:	9903      	ldr	r1, [sp, #12]
 80084a4:	1a5b      	subs	r3, r3, r1
 80084a6:	42ab      	cmp	r3, r5
 80084a8:	dcf2      	bgt.n	8008490 <_printf_i+0x210>
 80084aa:	e7eb      	b.n	8008484 <_printf_i+0x204>
 80084ac:	2500      	movs	r5, #0
 80084ae:	f104 0619 	add.w	r6, r4, #25
 80084b2:	e7f5      	b.n	80084a0 <_printf_i+0x220>
 80084b4:	08008c56 	.word	0x08008c56
 80084b8:	08008c67 	.word	0x08008c67

080084bc <__sflush_r>:
 80084bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	0716      	lsls	r6, r2, #28
 80084c6:	4605      	mov	r5, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	d454      	bmi.n	8008576 <__sflush_r+0xba>
 80084cc:	684b      	ldr	r3, [r1, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dc02      	bgt.n	80084d8 <__sflush_r+0x1c>
 80084d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dd48      	ble.n	800856a <__sflush_r+0xae>
 80084d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084da:	2e00      	cmp	r6, #0
 80084dc:	d045      	beq.n	800856a <__sflush_r+0xae>
 80084de:	2300      	movs	r3, #0
 80084e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084e4:	682f      	ldr	r7, [r5, #0]
 80084e6:	6a21      	ldr	r1, [r4, #32]
 80084e8:	602b      	str	r3, [r5, #0]
 80084ea:	d030      	beq.n	800854e <__sflush_r+0x92>
 80084ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	0759      	lsls	r1, r3, #29
 80084f2:	d505      	bpl.n	8008500 <__sflush_r+0x44>
 80084f4:	6863      	ldr	r3, [r4, #4]
 80084f6:	1ad2      	subs	r2, r2, r3
 80084f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084fa:	b10b      	cbz	r3, 8008500 <__sflush_r+0x44>
 80084fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084fe:	1ad2      	subs	r2, r2, r3
 8008500:	2300      	movs	r3, #0
 8008502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008504:	6a21      	ldr	r1, [r4, #32]
 8008506:	4628      	mov	r0, r5
 8008508:	47b0      	blx	r6
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	d106      	bne.n	800851e <__sflush_r+0x62>
 8008510:	6829      	ldr	r1, [r5, #0]
 8008512:	291d      	cmp	r1, #29
 8008514:	d82b      	bhi.n	800856e <__sflush_r+0xb2>
 8008516:	4a2a      	ldr	r2, [pc, #168]	@ (80085c0 <__sflush_r+0x104>)
 8008518:	40ca      	lsrs	r2, r1
 800851a:	07d6      	lsls	r6, r2, #31
 800851c:	d527      	bpl.n	800856e <__sflush_r+0xb2>
 800851e:	2200      	movs	r2, #0
 8008520:	6062      	str	r2, [r4, #4]
 8008522:	04d9      	lsls	r1, r3, #19
 8008524:	6922      	ldr	r2, [r4, #16]
 8008526:	6022      	str	r2, [r4, #0]
 8008528:	d504      	bpl.n	8008534 <__sflush_r+0x78>
 800852a:	1c42      	adds	r2, r0, #1
 800852c:	d101      	bne.n	8008532 <__sflush_r+0x76>
 800852e:	682b      	ldr	r3, [r5, #0]
 8008530:	b903      	cbnz	r3, 8008534 <__sflush_r+0x78>
 8008532:	6560      	str	r0, [r4, #84]	@ 0x54
 8008534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008536:	602f      	str	r7, [r5, #0]
 8008538:	b1b9      	cbz	r1, 800856a <__sflush_r+0xae>
 800853a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800853e:	4299      	cmp	r1, r3
 8008540:	d002      	beq.n	8008548 <__sflush_r+0x8c>
 8008542:	4628      	mov	r0, r5
 8008544:	f7fe fa92 	bl	8006a6c <_free_r>
 8008548:	2300      	movs	r3, #0
 800854a:	6363      	str	r3, [r4, #52]	@ 0x34
 800854c:	e00d      	b.n	800856a <__sflush_r+0xae>
 800854e:	2301      	movs	r3, #1
 8008550:	4628      	mov	r0, r5
 8008552:	47b0      	blx	r6
 8008554:	4602      	mov	r2, r0
 8008556:	1c50      	adds	r0, r2, #1
 8008558:	d1c9      	bne.n	80084ee <__sflush_r+0x32>
 800855a:	682b      	ldr	r3, [r5, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0c6      	beq.n	80084ee <__sflush_r+0x32>
 8008560:	2b1d      	cmp	r3, #29
 8008562:	d001      	beq.n	8008568 <__sflush_r+0xac>
 8008564:	2b16      	cmp	r3, #22
 8008566:	d11e      	bne.n	80085a6 <__sflush_r+0xea>
 8008568:	602f      	str	r7, [r5, #0]
 800856a:	2000      	movs	r0, #0
 800856c:	e022      	b.n	80085b4 <__sflush_r+0xf8>
 800856e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008572:	b21b      	sxth	r3, r3
 8008574:	e01b      	b.n	80085ae <__sflush_r+0xf2>
 8008576:	690f      	ldr	r7, [r1, #16]
 8008578:	2f00      	cmp	r7, #0
 800857a:	d0f6      	beq.n	800856a <__sflush_r+0xae>
 800857c:	0793      	lsls	r3, r2, #30
 800857e:	680e      	ldr	r6, [r1, #0]
 8008580:	bf08      	it	eq
 8008582:	694b      	ldreq	r3, [r1, #20]
 8008584:	600f      	str	r7, [r1, #0]
 8008586:	bf18      	it	ne
 8008588:	2300      	movne	r3, #0
 800858a:	eba6 0807 	sub.w	r8, r6, r7
 800858e:	608b      	str	r3, [r1, #8]
 8008590:	f1b8 0f00 	cmp.w	r8, #0
 8008594:	dde9      	ble.n	800856a <__sflush_r+0xae>
 8008596:	6a21      	ldr	r1, [r4, #32]
 8008598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800859a:	4643      	mov	r3, r8
 800859c:	463a      	mov	r2, r7
 800859e:	4628      	mov	r0, r5
 80085a0:	47b0      	blx	r6
 80085a2:	2800      	cmp	r0, #0
 80085a4:	dc08      	bgt.n	80085b8 <__sflush_r+0xfc>
 80085a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ae:	81a3      	strh	r3, [r4, #12]
 80085b0:	f04f 30ff 	mov.w	r0, #4294967295
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	4407      	add	r7, r0
 80085ba:	eba8 0800 	sub.w	r8, r8, r0
 80085be:	e7e7      	b.n	8008590 <__sflush_r+0xd4>
 80085c0:	20400001 	.word	0x20400001

080085c4 <_fflush_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	690b      	ldr	r3, [r1, #16]
 80085c8:	4605      	mov	r5, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	b913      	cbnz	r3, 80085d4 <_fflush_r+0x10>
 80085ce:	2500      	movs	r5, #0
 80085d0:	4628      	mov	r0, r5
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	b118      	cbz	r0, 80085de <_fflush_r+0x1a>
 80085d6:	6a03      	ldr	r3, [r0, #32]
 80085d8:	b90b      	cbnz	r3, 80085de <_fflush_r+0x1a>
 80085da:	f7fd ff71 	bl	80064c0 <__sinit>
 80085de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0f3      	beq.n	80085ce <_fflush_r+0xa>
 80085e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085e8:	07d0      	lsls	r0, r2, #31
 80085ea:	d404      	bmi.n	80085f6 <_fflush_r+0x32>
 80085ec:	0599      	lsls	r1, r3, #22
 80085ee:	d402      	bmi.n	80085f6 <_fflush_r+0x32>
 80085f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085f2:	f7fe f9fa 	bl	80069ea <__retarget_lock_acquire_recursive>
 80085f6:	4628      	mov	r0, r5
 80085f8:	4621      	mov	r1, r4
 80085fa:	f7ff ff5f 	bl	80084bc <__sflush_r>
 80085fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008600:	07da      	lsls	r2, r3, #31
 8008602:	4605      	mov	r5, r0
 8008604:	d4e4      	bmi.n	80085d0 <_fflush_r+0xc>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	059b      	lsls	r3, r3, #22
 800860a:	d4e1      	bmi.n	80085d0 <_fflush_r+0xc>
 800860c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800860e:	f7fe f9ed 	bl	80069ec <__retarget_lock_release_recursive>
 8008612:	e7dd      	b.n	80085d0 <_fflush_r+0xc>

08008614 <fiprintf>:
 8008614:	b40e      	push	{r1, r2, r3}
 8008616:	b503      	push	{r0, r1, lr}
 8008618:	4601      	mov	r1, r0
 800861a:	ab03      	add	r3, sp, #12
 800861c:	4805      	ldr	r0, [pc, #20]	@ (8008634 <fiprintf+0x20>)
 800861e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008622:	6800      	ldr	r0, [r0, #0]
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	f7ff fca5 	bl	8007f74 <_vfiprintf_r>
 800862a:	b002      	add	sp, #8
 800862c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008630:	b003      	add	sp, #12
 8008632:	4770      	bx	lr
 8008634:	20000454 	.word	0x20000454

08008638 <__swhatbuf_r>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	460c      	mov	r4, r1
 800863c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008640:	2900      	cmp	r1, #0
 8008642:	b096      	sub	sp, #88	@ 0x58
 8008644:	4615      	mov	r5, r2
 8008646:	461e      	mov	r6, r3
 8008648:	da0d      	bge.n	8008666 <__swhatbuf_r+0x2e>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008650:	f04f 0100 	mov.w	r1, #0
 8008654:	bf14      	ite	ne
 8008656:	2340      	movne	r3, #64	@ 0x40
 8008658:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800865c:	2000      	movs	r0, #0
 800865e:	6031      	str	r1, [r6, #0]
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	b016      	add	sp, #88	@ 0x58
 8008664:	bd70      	pop	{r4, r5, r6, pc}
 8008666:	466a      	mov	r2, sp
 8008668:	f000 f862 	bl	8008730 <_fstat_r>
 800866c:	2800      	cmp	r0, #0
 800866e:	dbec      	blt.n	800864a <__swhatbuf_r+0x12>
 8008670:	9901      	ldr	r1, [sp, #4]
 8008672:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008676:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800867a:	4259      	negs	r1, r3
 800867c:	4159      	adcs	r1, r3
 800867e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008682:	e7eb      	b.n	800865c <__swhatbuf_r+0x24>

08008684 <__smakebuf_r>:
 8008684:	898b      	ldrh	r3, [r1, #12]
 8008686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008688:	079d      	lsls	r5, r3, #30
 800868a:	4606      	mov	r6, r0
 800868c:	460c      	mov	r4, r1
 800868e:	d507      	bpl.n	80086a0 <__smakebuf_r+0x1c>
 8008690:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	2301      	movs	r3, #1
 800869a:	6163      	str	r3, [r4, #20]
 800869c:	b003      	add	sp, #12
 800869e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a0:	ab01      	add	r3, sp, #4
 80086a2:	466a      	mov	r2, sp
 80086a4:	f7ff ffc8 	bl	8008638 <__swhatbuf_r>
 80086a8:	9f00      	ldr	r7, [sp, #0]
 80086aa:	4605      	mov	r5, r0
 80086ac:	4639      	mov	r1, r7
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7fe fd8a 	bl	80071c8 <_malloc_r>
 80086b4:	b948      	cbnz	r0, 80086ca <__smakebuf_r+0x46>
 80086b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ba:	059a      	lsls	r2, r3, #22
 80086bc:	d4ee      	bmi.n	800869c <__smakebuf_r+0x18>
 80086be:	f023 0303 	bic.w	r3, r3, #3
 80086c2:	f043 0302 	orr.w	r3, r3, #2
 80086c6:	81a3      	strh	r3, [r4, #12]
 80086c8:	e7e2      	b.n	8008690 <__smakebuf_r+0xc>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	6020      	str	r0, [r4, #0]
 80086ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086da:	b15b      	cbz	r3, 80086f4 <__smakebuf_r+0x70>
 80086dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f837 	bl	8008754 <_isatty_r>
 80086e6:	b128      	cbz	r0, 80086f4 <__smakebuf_r+0x70>
 80086e8:	89a3      	ldrh	r3, [r4, #12]
 80086ea:	f023 0303 	bic.w	r3, r3, #3
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	81a3      	strh	r3, [r4, #12]
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	431d      	orrs	r5, r3
 80086f8:	81a5      	strh	r5, [r4, #12]
 80086fa:	e7cf      	b.n	800869c <__smakebuf_r+0x18>

080086fc <memmove>:
 80086fc:	4288      	cmp	r0, r1
 80086fe:	b510      	push	{r4, lr}
 8008700:	eb01 0402 	add.w	r4, r1, r2
 8008704:	d902      	bls.n	800870c <memmove+0x10>
 8008706:	4284      	cmp	r4, r0
 8008708:	4623      	mov	r3, r4
 800870a:	d807      	bhi.n	800871c <memmove+0x20>
 800870c:	1e43      	subs	r3, r0, #1
 800870e:	42a1      	cmp	r1, r4
 8008710:	d008      	beq.n	8008724 <memmove+0x28>
 8008712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008716:	f803 2f01 	strb.w	r2, [r3, #1]!
 800871a:	e7f8      	b.n	800870e <memmove+0x12>
 800871c:	4402      	add	r2, r0
 800871e:	4601      	mov	r1, r0
 8008720:	428a      	cmp	r2, r1
 8008722:	d100      	bne.n	8008726 <memmove+0x2a>
 8008724:	bd10      	pop	{r4, pc}
 8008726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800872a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800872e:	e7f7      	b.n	8008720 <memmove+0x24>

08008730 <_fstat_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4d07      	ldr	r5, [pc, #28]	@ (8008750 <_fstat_r+0x20>)
 8008734:	2300      	movs	r3, #0
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	4611      	mov	r1, r2
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	f7fb f9a9 	bl	8003a94 <_fstat>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d102      	bne.n	800874c <_fstat_r+0x1c>
 8008746:	682b      	ldr	r3, [r5, #0]
 8008748:	b103      	cbz	r3, 800874c <_fstat_r+0x1c>
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	bf00      	nop
 8008750:	20000a6c 	.word	0x20000a6c

08008754 <_isatty_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4d06      	ldr	r5, [pc, #24]	@ (8008770 <_isatty_r+0x1c>)
 8008758:	2300      	movs	r3, #0
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f7fb f9a8 	bl	8003ab4 <_isatty>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_isatty_r+0x1a>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_isatty_r+0x1a>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	20000a6c 	.word	0x20000a6c

08008774 <_sbrk_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d06      	ldr	r5, [pc, #24]	@ (8008790 <_sbrk_r+0x1c>)
 8008778:	2300      	movs	r3, #0
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	602b      	str	r3, [r5, #0]
 8008780:	f7fb f9b0 	bl	8003ae4 <_sbrk>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_sbrk_r+0x1a>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_sbrk_r+0x1a>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20000a6c 	.word	0x20000a6c

08008794 <abort>:
 8008794:	b508      	push	{r3, lr}
 8008796:	2006      	movs	r0, #6
 8008798:	f000 f86e 	bl	8008878 <raise>
 800879c:	2001      	movs	r0, #1
 800879e:	f7fb f945 	bl	8003a2c <_exit>

080087a2 <_calloc_r>:
 80087a2:	b570      	push	{r4, r5, r6, lr}
 80087a4:	fba1 5402 	umull	r5, r4, r1, r2
 80087a8:	b934      	cbnz	r4, 80087b8 <_calloc_r+0x16>
 80087aa:	4629      	mov	r1, r5
 80087ac:	f7fe fd0c 	bl	80071c8 <_malloc_r>
 80087b0:	4606      	mov	r6, r0
 80087b2:	b928      	cbnz	r0, 80087c0 <_calloc_r+0x1e>
 80087b4:	4630      	mov	r0, r6
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	220c      	movs	r2, #12
 80087ba:	6002      	str	r2, [r0, #0]
 80087bc:	2600      	movs	r6, #0
 80087be:	e7f9      	b.n	80087b4 <_calloc_r+0x12>
 80087c0:	462a      	mov	r2, r5
 80087c2:	4621      	mov	r1, r4
 80087c4:	f7fe f81c 	bl	8006800 <memset>
 80087c8:	e7f4      	b.n	80087b4 <_calloc_r+0x12>

080087ca <_realloc_r>:
 80087ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ce:	4607      	mov	r7, r0
 80087d0:	4614      	mov	r4, r2
 80087d2:	460d      	mov	r5, r1
 80087d4:	b921      	cbnz	r1, 80087e0 <_realloc_r+0x16>
 80087d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087da:	4611      	mov	r1, r2
 80087dc:	f7fe bcf4 	b.w	80071c8 <_malloc_r>
 80087e0:	b92a      	cbnz	r2, 80087ee <_realloc_r+0x24>
 80087e2:	f7fe f943 	bl	8006a6c <_free_r>
 80087e6:	4625      	mov	r5, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ee:	f000 f85f 	bl	80088b0 <_malloc_usable_size_r>
 80087f2:	4284      	cmp	r4, r0
 80087f4:	4606      	mov	r6, r0
 80087f6:	d802      	bhi.n	80087fe <_realloc_r+0x34>
 80087f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087fc:	d8f4      	bhi.n	80087e8 <_realloc_r+0x1e>
 80087fe:	4621      	mov	r1, r4
 8008800:	4638      	mov	r0, r7
 8008802:	f7fe fce1 	bl	80071c8 <_malloc_r>
 8008806:	4680      	mov	r8, r0
 8008808:	b908      	cbnz	r0, 800880e <_realloc_r+0x44>
 800880a:	4645      	mov	r5, r8
 800880c:	e7ec      	b.n	80087e8 <_realloc_r+0x1e>
 800880e:	42b4      	cmp	r4, r6
 8008810:	4622      	mov	r2, r4
 8008812:	4629      	mov	r1, r5
 8008814:	bf28      	it	cs
 8008816:	4632      	movcs	r2, r6
 8008818:	f7fe f8f1 	bl	80069fe <memcpy>
 800881c:	4629      	mov	r1, r5
 800881e:	4638      	mov	r0, r7
 8008820:	f7fe f924 	bl	8006a6c <_free_r>
 8008824:	e7f1      	b.n	800880a <_realloc_r+0x40>

08008826 <_raise_r>:
 8008826:	291f      	cmp	r1, #31
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4605      	mov	r5, r0
 800882c:	460c      	mov	r4, r1
 800882e:	d904      	bls.n	800883a <_raise_r+0x14>
 8008830:	2316      	movs	r3, #22
 8008832:	6003      	str	r3, [r0, #0]
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	bd38      	pop	{r3, r4, r5, pc}
 800883a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800883c:	b112      	cbz	r2, 8008844 <_raise_r+0x1e>
 800883e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008842:	b94b      	cbnz	r3, 8008858 <_raise_r+0x32>
 8008844:	4628      	mov	r0, r5
 8008846:	f000 f831 	bl	80088ac <_getpid_r>
 800884a:	4622      	mov	r2, r4
 800884c:	4601      	mov	r1, r0
 800884e:	4628      	mov	r0, r5
 8008850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008854:	f000 b818 	b.w	8008888 <_kill_r>
 8008858:	2b01      	cmp	r3, #1
 800885a:	d00a      	beq.n	8008872 <_raise_r+0x4c>
 800885c:	1c59      	adds	r1, r3, #1
 800885e:	d103      	bne.n	8008868 <_raise_r+0x42>
 8008860:	2316      	movs	r3, #22
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	2001      	movs	r0, #1
 8008866:	e7e7      	b.n	8008838 <_raise_r+0x12>
 8008868:	2100      	movs	r1, #0
 800886a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800886e:	4620      	mov	r0, r4
 8008870:	4798      	blx	r3
 8008872:	2000      	movs	r0, #0
 8008874:	e7e0      	b.n	8008838 <_raise_r+0x12>
	...

08008878 <raise>:
 8008878:	4b02      	ldr	r3, [pc, #8]	@ (8008884 <raise+0xc>)
 800887a:	4601      	mov	r1, r0
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f7ff bfd2 	b.w	8008826 <_raise_r>
 8008882:	bf00      	nop
 8008884:	20000454 	.word	0x20000454

08008888 <_kill_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	@ (80088a8 <_kill_r+0x20>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	f7fb f8b9 	bl	8003a0c <_kill>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	d102      	bne.n	80088a4 <_kill_r+0x1c>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	b103      	cbz	r3, 80088a4 <_kill_r+0x1c>
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	20000a6c 	.word	0x20000a6c

080088ac <_getpid_r>:
 80088ac:	f7fb b8a6 	b.w	80039fc <_getpid>

080088b0 <_malloc_usable_size_r>:
 80088b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b4:	1f18      	subs	r0, r3, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfbc      	itt	lt
 80088ba:	580b      	ldrlt	r3, [r1, r0]
 80088bc:	18c0      	addlt	r0, r0, r3
 80088be:	4770      	bx	lr

080088c0 <_init>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	bf00      	nop
 80088c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c6:	bc08      	pop	{r3}
 80088c8:	469e      	mov	lr, r3
 80088ca:	4770      	bx	lr

080088cc <_fini>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	bf00      	nop
 80088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d2:	bc08      	pop	{r3}
 80088d4:	469e      	mov	lr, r3
 80088d6:	4770      	bx	lr
